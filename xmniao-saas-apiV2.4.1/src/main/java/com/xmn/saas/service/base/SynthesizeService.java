package com.xmn.saas.service.base;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.xmn.saas.base.thrift.exception.FailureException;
import com.xmn.saas.base.thrift.tbase.JointWithdraw;
import com.xmn.saas.base.thrift.tbase.MentionAccount;
import com.xmn.saas.base.thrift.tbase.SellerStatistics;
import com.xmn.saas.base.thrift.tbase.SellerWallet;
import com.xmn.saas.base.thrift.tbase.Wallet;
import com.xmn.saas.base.thrift.tbase.WalletRecord;

public class SynthesizeService {

  /**
   * 综合服务接口
   */
  public interface Iface {

    /**
     * 钱包余额查询
     * 
     * @param uId
     * @param typeId
     */
    public Map<String,String> getWalletBalance(String uId, int typeId) throws FailureException, org.apache.thrift.TException;

    /**
     * 修改分账方式和提现方式
     * 
     * @param typeId
     * @param typeValue
     * @param uId
     * @param amount
     * @param money
     */
    public int updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询分账和提现方式
     * 
     * @param typeId
     * @param uId
     */
    public Map<String,String> getMentionLedger(int typeId, String uId) throws FailureException, org.apache.thrift.TException;

    /**
     * 验证钱包密码
     * 
     * @param uId
     * @param pwd
     * @param typeId
     */
    public int checkWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException;

    /**
     * 修改钱包密码
     * 
     * @param uId
     * @param pwd
     * @param typeId
     */
    public int updateWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException;

    /**
     * 新增钱包
     * 
     * @param uId
     * @param userType
     * @param password
     * @param sellerName
     */
    public int addWallet(String uId, String userType, String password, String sellerName) throws FailureException, org.apache.thrift.TException;

    /**
     * 添加银行卡(旧版本)
     * 
     * @param isuse
     * @param uId
     * @param type
     * @param account
     * @param cardType
     * @param userName
     * @param bankName
     * @param mobileId
     * @param userType
     * @param ispublic
     * @param idtype
     * @param identity
     * @param bank
     * @param abbrev
     * @param province
     * @param cityname
     */
    public int AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询银行卡
     * 
     * @param uId
     * @param userType
     */
    public List<Map<String,String>> getMentionAccount(String uId, int userType) throws FailureException, org.apache.thrift.TException;

    /**
     * 修改银行卡(旧版本)
     * 
     * @param id
     * @param type
     * @param account
     * @param cardType
     * @param userName
     * @param bankName
     * @param mobileId
     * @param isuse
     * @param cityname
     * @param ispublic
     * @param idtype
     * @param identity
     * @param bank
     * @param abbrev
     * @param province
     */
    public int updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province) throws FailureException, org.apache.thrift.TException;

    /**
     * 删除银行/支付账号
     * 
     * @param id
     */
    public int delMentionAccount(String id) throws FailureException, org.apache.thrift.TException;

    /**
     * 验证是否是第一次提现
     * 
     * @param uId
     * @param userType
     */
    public int checkWallet(String uId, String userType) throws FailureException, org.apache.thrift.TException;

    /**
     * 分账
     * 
     * @param walletMap
     */
    public int updateWalletBalance(List<Map<String,String>> walletMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 商家手动提现
     * 
     * @param amountMapList
     * @param orderMap
     */
    public int updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 申请提现（合作商）
     * 
     * @param amountMapList
     * @param orderMap
     */
    public int updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询钱包密码修改次数
     * 
     * @param uId
     * @param userType
     */
    public int getUpdatePwdNum(String uId, String userType) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询钱包修改记录
     * 
     * @param paramMap
     */
    public WalletRecord getWalletRecord(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询可提现金额
     * 
     * @param uId
     * @param userType
     */
    public double getMentionBalance(String uId, String userType) throws FailureException, org.apache.thrift.TException;

    /**
     * 修改钱包余额
     * 
     * @param paramMap
     */
    public Map<String,String> updateBalance(List<Map<String,String>> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 根据时间查询钱包余额列表
     * 
     * @param paramMap
     */
    public Wallet getWalletList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询钱包记录总金额
     * 
     * @param uId
     * @param userType
     * @param rType
     */
    public double getWRAmount(String uId, String userType, int rType) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询钱包总个数
     * 
     * @param paramMap
     */
    public int getWalletCount(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询钱包记录总个数
     * 
     * @param paramMap
     */
    public int getWalletRecordCount(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询银行卡列表
     * 
     * @param paramMap
     */
    public MentionAccount getMentionAccountList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 统计用户总金额
     * 
     * @param ids
     * @param userType
     * @param moneyType
     */
    public Map<String,String> getUserMoney(String ids, int userType, int moneyType) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询商家钱包信息
     * 
     * @param ids
     * @param moneyType
     */
    public SellerWallet getSellerWalletList(String ids, int moneyType) throws FailureException, org.apache.thrift.TException;

    /**
     * 资金归集
     * 
     * @param param
     */
    public Map<String,String> mergeMoney(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询用户银行卡
     * 
     * @param param
     */
    public List<Map<String,String>> getMentionAccounts(List<Map<String,String>> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 平台退款(打款失败退款到余额)
     * 
     * @param param
     */
    public Map<String,String> returnWithdrawals(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 提现金额统计（商户端）
     * 
     * @param param
     */
    public Map<String,String> statisticsWithdrawalsMoney(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询合作商月收益与提现
     * 
     * @param param
     */
    public Map<String,String> getJointIncome(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 新增钱包MAP
     * 
     * @param param
     */
    public Map<String,String> addWalletMap(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询合作商提现信息
     * 
     * @param param
     */
    public JointWithdraw getJointWithdrawalsList(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 根据时间钱包余额列表
     * 
     * @param paramMap
     */
    public Wallet getWalletListByDate(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 调单
     * 
     * @param formerMap
     * @param laterMap
     */
    public Map<String,String> modifyOrder(Map<String,String> formerMap, Map<String,String> laterMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 平台扣款
     * 
     * @param param
     */
    public Map<String,String> platformDeductions(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 设置钱包密码
     * 
     * @param uId
     * @param userType
     * @param password
     */
    public Map<String,String> setWPwd(String uId, String userType, String password) throws FailureException, org.apache.thrift.TException;

    /**
     * 扣除分账金额(废弃)
     * 
     * @param param
     */
    public Map<String,String> deductionsMentionLedger(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 锁定-解锁钱包
     * 
     * @param paramMap
     */
    public Map<String,String> setLockWallet(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 取消报障
     * 
     * @param paramMap
     */
    public Map<String,String> recoveryFailOrder(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询商家营收返利提现统计
     * 
     * @param paramMap
     */
    public SellerStatistics getSellerStatisticsList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 获取商家营收返利提现按日期查询明细接口
     * 
     * @param paramMap
     */
    public SellerStatistics getSellerDetailList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询商家当月的营收返利提现的统计总额
     * 
     * @param paramMap
     */
    public Map<String,String> getSellerMonthlyStatistics(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 解除寻蜜客变更押金金额为不可提现金额
     * 
     * @param paramMap
     */
    public Map<String,String> xmerTransferDeposit(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 寻蜜客签约商户，返还押金
     * 
     * @param paramMap
     */
    public Map<String,String> xmerReturnDeposit(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    /**
     * 扣除分账金额
     * 
     * @param param
     */
    public Map<String,String> deductionsOrderLedger(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 修改钱包余额
     * 
     * @param param
     */
    public Map<String,String> updateWalletAmount(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 查询用户最新银行卡
     * 
     * @param param
     */
    public Map<String,String> getSingleMentionAccount(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getWalletBalance(String uId, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionLedger(int typeId, String uId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addWallet(String uId, String userType, String password, String sellerName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionAccount(String uId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delMentionAccount(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkWallet(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWalletBalance(List<Map<String,String>> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUpdatePwdNum(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletRecord(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionBalance(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBalance(List<Map<String,String>> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWRAmount(String uId, String userType, int rType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletCount(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletRecordCount(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionAccountList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserMoney(String ids, int userType, int moneyType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSellerWalletList(String ids, int moneyType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void mergeMoney(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionAccounts(List<Map<String,String>> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void returnWithdrawals(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statisticsWithdrawalsMoney(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getJointIncome(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addWalletMap(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getJointWithdrawalsList(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletListByDate(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modifyOrder(Map<String,String> formerMap, Map<String,String> laterMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void platformDeductions(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setWPwd(String uId, String userType, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deductionsMentionLedger(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setLockWallet(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void recoveryFailOrder(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSellerStatisticsList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSellerDetailList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSellerMonthlyStatistics(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void xmerTransferDeposit(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void xmerReturnDeposit(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deductionsOrderLedger(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWalletAmount(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSingleMentionAccount(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,String> getWalletBalance(String uId, int typeId) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletBalance(uId, typeId);
      return recv_getWalletBalance();
    }

    public void send_getWalletBalance(String uId, int typeId) throws org.apache.thrift.TException
    {
      getWalletBalance_args args = new getWalletBalance_args();
      args.setUId(uId);
      args.setTypeId(typeId);
      sendBase("getWalletBalance", args);
    }

    public Map<String,String> recv_getWalletBalance() throws FailureException, org.apache.thrift.TException
    {
      getWalletBalance_result result = new getWalletBalance_result();
      receiveBase(result, "getWalletBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletBalance failed: unknown result");
    }

    public int updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money) throws FailureException, org.apache.thrift.TException
    {
      send_updateMentionLedger(typeId, typeValue, uId, amount, money);
      return recv_updateMentionLedger();
    }

    public void send_updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money) throws org.apache.thrift.TException
    {
      updateMentionLedger_args args = new updateMentionLedger_args();
      args.setTypeId(typeId);
      args.setTypeValue(typeValue);
      args.setUId(uId);
      args.setAmount(amount);
      args.setMoney(money);
      sendBase("updateMentionLedger", args);
    }

    public int recv_updateMentionLedger() throws FailureException, org.apache.thrift.TException
    {
      updateMentionLedger_result result = new updateMentionLedger_result();
      receiveBase(result, "updateMentionLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMentionLedger failed: unknown result");
    }

    public Map<String,String> getMentionLedger(int typeId, String uId) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionLedger(typeId, uId);
      return recv_getMentionLedger();
    }

    public void send_getMentionLedger(int typeId, String uId) throws org.apache.thrift.TException
    {
      getMentionLedger_args args = new getMentionLedger_args();
      args.setTypeId(typeId);
      args.setUId(uId);
      sendBase("getMentionLedger", args);
    }

    public Map<String,String> recv_getMentionLedger() throws FailureException, org.apache.thrift.TException
    {
      getMentionLedger_result result = new getMentionLedger_result();
      receiveBase(result, "getMentionLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionLedger failed: unknown result");
    }

    public int checkWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException
    {
      send_checkWalletPwd(uId, pwd, typeId);
      return recv_checkWalletPwd();
    }

    public void send_checkWalletPwd(String uId, String pwd, int typeId) throws org.apache.thrift.TException
    {
      checkWalletPwd_args args = new checkWalletPwd_args();
      args.setUId(uId);
      args.setPwd(pwd);
      args.setTypeId(typeId);
      sendBase("checkWalletPwd", args);
    }

    public int recv_checkWalletPwd() throws FailureException, org.apache.thrift.TException
    {
      checkWalletPwd_result result = new checkWalletPwd_result();
      receiveBase(result, "checkWalletPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ge != null) {
        throw result.ge;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkWalletPwd failed: unknown result");
    }

    public int updateWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException
    {
      send_updateWalletPwd(uId, pwd, typeId);
      return recv_updateWalletPwd();
    }

    public void send_updateWalletPwd(String uId, String pwd, int typeId) throws org.apache.thrift.TException
    {
      updateWalletPwd_args args = new updateWalletPwd_args();
      args.setUId(uId);
      args.setPwd(pwd);
      args.setTypeId(typeId);
      sendBase("updateWalletPwd", args);
    }

    public int recv_updateWalletPwd() throws FailureException, org.apache.thrift.TException
    {
      updateWalletPwd_result result = new updateWalletPwd_result();
      receiveBase(result, "updateWalletPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ge != null) {
        throw result.ge;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWalletPwd failed: unknown result");
    }

    public int addWallet(String uId, String userType, String password, String sellerName) throws FailureException, org.apache.thrift.TException
    {
      send_addWallet(uId, userType, password, sellerName);
      return recv_addWallet();
    }

    public void send_addWallet(String uId, String userType, String password, String sellerName) throws org.apache.thrift.TException
    {
      addWallet_args args = new addWallet_args();
      args.setUId(uId);
      args.setUserType(userType);
      args.setPassword(password);
      args.setSellerName(sellerName);
      sendBase("addWallet", args);
    }

    public int recv_addWallet() throws FailureException, org.apache.thrift.TException
    {
      addWallet_result result = new addWallet_result();
      receiveBase(result, "addWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addWallet failed: unknown result");
    }

    public int AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname) throws FailureException, org.apache.thrift.TException
    {
      send_AddMentionAccount(isuse, uId, type, account, cardType, userName, bankName, mobileId, userType, ispublic, idtype, identity, bank, abbrev, province, cityname);
      return recv_AddMentionAccount();
    }

    public void send_AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname) throws org.apache.thrift.TException
    {
      AddMentionAccount_args args = new AddMentionAccount_args();
      args.setIsuse(isuse);
      args.setUId(uId);
      args.setType(type);
      args.setAccount(account);
      args.setCardType(cardType);
      args.setUserName(userName);
      args.setBankName(bankName);
      args.setMobileId(mobileId);
      args.setUserType(userType);
      args.setIspublic(ispublic);
      args.setIdtype(idtype);
      args.setIdentity(identity);
      args.setBank(bank);
      args.setAbbrev(abbrev);
      args.setProvince(province);
      args.setCityname(cityname);
      sendBase("AddMentionAccount", args);
    }

    public int recv_AddMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      AddMentionAccount_result result = new AddMentionAccount_result();
      receiveBase(result, "AddMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddMentionAccount failed: unknown result");
    }

    public List<Map<String,String>> getMentionAccount(String uId, int userType) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionAccount(uId, userType);
      return recv_getMentionAccount();
    }

    public void send_getMentionAccount(String uId, int userType) throws org.apache.thrift.TException
    {
      getMentionAccount_args args = new getMentionAccount_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("getMentionAccount", args);
    }

    public List<Map<String,String>> recv_getMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      getMentionAccount_result result = new getMentionAccount_result();
      receiveBase(result, "getMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionAccount failed: unknown result");
    }

    public int updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province) throws FailureException, org.apache.thrift.TException
    {
      send_updateMentionAccount(id, type, account, cardType, userName, bankName, mobileId, isuse, cityname, ispublic, idtype, identity, bank, abbrev, province);
      return recv_updateMentionAccount();
    }

    public void send_updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province) throws org.apache.thrift.TException
    {
      updateMentionAccount_args args = new updateMentionAccount_args();
      args.setId(id);
      args.setType(type);
      args.setAccount(account);
      args.setCardType(cardType);
      args.setUserName(userName);
      args.setBankName(bankName);
      args.setMobileId(mobileId);
      args.setIsuse(isuse);
      args.setCityname(cityname);
      args.setIspublic(ispublic);
      args.setIdtype(idtype);
      args.setIdentity(identity);
      args.setBank(bank);
      args.setAbbrev(abbrev);
      args.setProvince(province);
      sendBase("updateMentionAccount", args);
    }

    public int recv_updateMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      updateMentionAccount_result result = new updateMentionAccount_result();
      receiveBase(result, "updateMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMentionAccount failed: unknown result");
    }

    public int delMentionAccount(String id) throws FailureException, org.apache.thrift.TException
    {
      send_delMentionAccount(id);
      return recv_delMentionAccount();
    }

    public void send_delMentionAccount(String id) throws org.apache.thrift.TException
    {
      delMentionAccount_args args = new delMentionAccount_args();
      args.setId(id);
      sendBase("delMentionAccount", args);
    }

    public int recv_delMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      delMentionAccount_result result = new delMentionAccount_result();
      receiveBase(result, "delMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delMentionAccount failed: unknown result");
    }

    public int checkWallet(String uId, String userType) throws FailureException, org.apache.thrift.TException
    {
      send_checkWallet(uId, userType);
      return recv_checkWallet();
    }

    public void send_checkWallet(String uId, String userType) throws org.apache.thrift.TException
    {
      checkWallet_args args = new checkWallet_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("checkWallet", args);
    }

    public int recv_checkWallet() throws FailureException, org.apache.thrift.TException
    {
      checkWallet_result result = new checkWallet_result();
      receiveBase(result, "checkWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkWallet failed: unknown result");
    }

    public int updateWalletBalance(List<Map<String,String>> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateWalletBalance(walletMap);
      return recv_updateWalletBalance();
    }

    public void send_updateWalletBalance(List<Map<String,String>> walletMap) throws org.apache.thrift.TException
    {
      updateWalletBalance_args args = new updateWalletBalance_args();
      args.setWalletMap(walletMap);
      sendBase("updateWalletBalance", args);
    }

    public int recv_updateWalletBalance() throws FailureException, org.apache.thrift.TException
    {
      updateWalletBalance_result result = new updateWalletBalance_result();
      receiveBase(result, "updateWalletBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWalletBalance failed: unknown result");
    }

    public int updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateWithdrawalsRecord(amountMapList, orderMap);
      return recv_updateWithdrawalsRecord();
    }

    public void send_updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws org.apache.thrift.TException
    {
      updateWithdrawalsRecord_args args = new updateWithdrawalsRecord_args();
      args.setAmountMapList(amountMapList);
      args.setOrderMap(orderMap);
      sendBase("updateWithdrawalsRecord", args);
    }

    public int recv_updateWithdrawalsRecord() throws FailureException, org.apache.thrift.TException
    {
      updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
      receiveBase(result, "updateWithdrawalsRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWithdrawalsRecord failed: unknown result");
    }

    public int updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateJointWithdrawalsRecord(amountMapList, orderMap);
      return recv_updateJointWithdrawalsRecord();
    }

    public void send_updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws org.apache.thrift.TException
    {
      updateJointWithdrawalsRecord_args args = new updateJointWithdrawalsRecord_args();
      args.setAmountMapList(amountMapList);
      args.setOrderMap(orderMap);
      sendBase("updateJointWithdrawalsRecord", args);
    }

    public int recv_updateJointWithdrawalsRecord() throws FailureException, org.apache.thrift.TException
    {
      updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
      receiveBase(result, "updateJointWithdrawalsRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateJointWithdrawalsRecord failed: unknown result");
    }

    public int getUpdatePwdNum(String uId, String userType) throws FailureException, org.apache.thrift.TException
    {
      send_getUpdatePwdNum(uId, userType);
      return recv_getUpdatePwdNum();
    }

    public void send_getUpdatePwdNum(String uId, String userType) throws org.apache.thrift.TException
    {
      getUpdatePwdNum_args args = new getUpdatePwdNum_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("getUpdatePwdNum", args);
    }

    public int recv_getUpdatePwdNum() throws FailureException, org.apache.thrift.TException
    {
      getUpdatePwdNum_result result = new getUpdatePwdNum_result();
      receiveBase(result, "getUpdatePwdNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUpdatePwdNum failed: unknown result");
    }

    public WalletRecord getWalletRecord(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletRecord(paramMap);
      return recv_getWalletRecord();
    }

    public void send_getWalletRecord(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getWalletRecord_args args = new getWalletRecord_args();
      args.setParamMap(paramMap);
      sendBase("getWalletRecord", args);
    }

    public WalletRecord recv_getWalletRecord() throws FailureException, org.apache.thrift.TException
    {
      getWalletRecord_result result = new getWalletRecord_result();
      receiveBase(result, "getWalletRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletRecord failed: unknown result");
    }

    public double getMentionBalance(String uId, String userType) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionBalance(uId, userType);
      return recv_getMentionBalance();
    }

    public void send_getMentionBalance(String uId, String userType) throws org.apache.thrift.TException
    {
      getMentionBalance_args args = new getMentionBalance_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("getMentionBalance", args);
    }

    public double recv_getMentionBalance() throws FailureException, org.apache.thrift.TException
    {
      getMentionBalance_result result = new getMentionBalance_result();
      receiveBase(result, "getMentionBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionBalance failed: unknown result");
    }

    public Map<String,String> updateBalance(List<Map<String,String>> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateBalance(paramMap);
      return recv_updateBalance();
    }

    public void send_updateBalance(List<Map<String,String>> paramMap) throws org.apache.thrift.TException
    {
      updateBalance_args args = new updateBalance_args();
      args.setParamMap(paramMap);
      sendBase("updateBalance", args);
    }

    public Map<String,String> recv_updateBalance() throws FailureException, org.apache.thrift.TException
    {
      updateBalance_result result = new updateBalance_result();
      receiveBase(result, "updateBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBalance failed: unknown result");
    }

    public Wallet getWalletList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletList(paramMap);
      return recv_getWalletList();
    }

    public void send_getWalletList(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getWalletList_args args = new getWalletList_args();
      args.setParamMap(paramMap);
      sendBase("getWalletList", args);
    }

    public Wallet recv_getWalletList() throws FailureException, org.apache.thrift.TException
    {
      getWalletList_result result = new getWalletList_result();
      receiveBase(result, "getWalletList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletList failed: unknown result");
    }

    public double getWRAmount(String uId, String userType, int rType) throws FailureException, org.apache.thrift.TException
    {
      send_getWRAmount(uId, userType, rType);
      return recv_getWRAmount();
    }

    public void send_getWRAmount(String uId, String userType, int rType) throws org.apache.thrift.TException
    {
      getWRAmount_args args = new getWRAmount_args();
      args.setUId(uId);
      args.setUserType(userType);
      args.setRType(rType);
      sendBase("getWRAmount", args);
    }

    public double recv_getWRAmount() throws FailureException, org.apache.thrift.TException
    {
      getWRAmount_result result = new getWRAmount_result();
      receiveBase(result, "getWRAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWRAmount failed: unknown result");
    }

    public int getWalletCount(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletCount(paramMap);
      return recv_getWalletCount();
    }

    public void send_getWalletCount(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getWalletCount_args args = new getWalletCount_args();
      args.setParamMap(paramMap);
      sendBase("getWalletCount", args);
    }

    public int recv_getWalletCount() throws FailureException, org.apache.thrift.TException
    {
      getWalletCount_result result = new getWalletCount_result();
      receiveBase(result, "getWalletCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletCount failed: unknown result");
    }

    public int getWalletRecordCount(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletRecordCount(paramMap);
      return recv_getWalletRecordCount();
    }

    public void send_getWalletRecordCount(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getWalletRecordCount_args args = new getWalletRecordCount_args();
      args.setParamMap(paramMap);
      sendBase("getWalletRecordCount", args);
    }

    public int recv_getWalletRecordCount() throws FailureException, org.apache.thrift.TException
    {
      getWalletRecordCount_result result = new getWalletRecordCount_result();
      receiveBase(result, "getWalletRecordCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletRecordCount failed: unknown result");
    }

    public MentionAccount getMentionAccountList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionAccountList(paramMap);
      return recv_getMentionAccountList();
    }

    public void send_getMentionAccountList(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getMentionAccountList_args args = new getMentionAccountList_args();
      args.setParamMap(paramMap);
      sendBase("getMentionAccountList", args);
    }

    public MentionAccount recv_getMentionAccountList() throws FailureException, org.apache.thrift.TException
    {
      getMentionAccountList_result result = new getMentionAccountList_result();
      receiveBase(result, "getMentionAccountList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionAccountList failed: unknown result");
    }

    public Map<String,String> getUserMoney(String ids, int userType, int moneyType) throws FailureException, org.apache.thrift.TException
    {
      send_getUserMoney(ids, userType, moneyType);
      return recv_getUserMoney();
    }

    public void send_getUserMoney(String ids, int userType, int moneyType) throws org.apache.thrift.TException
    {
      getUserMoney_args args = new getUserMoney_args();
      args.setIds(ids);
      args.setUserType(userType);
      args.setMoneyType(moneyType);
      sendBase("getUserMoney", args);
    }

    public Map<String,String> recv_getUserMoney() throws FailureException, org.apache.thrift.TException
    {
      getUserMoney_result result = new getUserMoney_result();
      receiveBase(result, "getUserMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserMoney failed: unknown result");
    }

    public SellerWallet getSellerWalletList(String ids, int moneyType) throws FailureException, org.apache.thrift.TException
    {
      send_getSellerWalletList(ids, moneyType);
      return recv_getSellerWalletList();
    }

    public void send_getSellerWalletList(String ids, int moneyType) throws org.apache.thrift.TException
    {
      getSellerWalletList_args args = new getSellerWalletList_args();
      args.setIds(ids);
      args.setMoneyType(moneyType);
      sendBase("getSellerWalletList", args);
    }

    public SellerWallet recv_getSellerWalletList() throws FailureException, org.apache.thrift.TException
    {
      getSellerWalletList_result result = new getSellerWalletList_result();
      receiveBase(result, "getSellerWalletList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSellerWalletList failed: unknown result");
    }

    public Map<String,String> mergeMoney(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_mergeMoney(param);
      return recv_mergeMoney();
    }

    public void send_mergeMoney(Map<String,String> param) throws org.apache.thrift.TException
    {
      mergeMoney_args args = new mergeMoney_args();
      args.setParam(param);
      sendBase("mergeMoney", args);
    }

    public Map<String,String> recv_mergeMoney() throws FailureException, org.apache.thrift.TException
    {
      mergeMoney_result result = new mergeMoney_result();
      receiveBase(result, "mergeMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mergeMoney failed: unknown result");
    }

    public List<Map<String,String>> getMentionAccounts(List<Map<String,String>> param) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionAccounts(param);
      return recv_getMentionAccounts();
    }

    public void send_getMentionAccounts(List<Map<String,String>> param) throws org.apache.thrift.TException
    {
      getMentionAccounts_args args = new getMentionAccounts_args();
      args.setParam(param);
      sendBase("getMentionAccounts", args);
    }

    public List<Map<String,String>> recv_getMentionAccounts() throws FailureException, org.apache.thrift.TException
    {
      getMentionAccounts_result result = new getMentionAccounts_result();
      receiveBase(result, "getMentionAccounts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionAccounts failed: unknown result");
    }

    public Map<String,String> returnWithdrawals(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_returnWithdrawals(param);
      return recv_returnWithdrawals();
    }

    public void send_returnWithdrawals(Map<String,String> param) throws org.apache.thrift.TException
    {
      returnWithdrawals_args args = new returnWithdrawals_args();
      args.setParam(param);
      sendBase("returnWithdrawals", args);
    }

    public Map<String,String> recv_returnWithdrawals() throws FailureException, org.apache.thrift.TException
    {
      returnWithdrawals_result result = new returnWithdrawals_result();
      receiveBase(result, "returnWithdrawals");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnWithdrawals failed: unknown result");
    }

    public Map<String,String> statisticsWithdrawalsMoney(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_statisticsWithdrawalsMoney(param);
      return recv_statisticsWithdrawalsMoney();
    }

    public void send_statisticsWithdrawalsMoney(Map<String,String> param) throws org.apache.thrift.TException
    {
      statisticsWithdrawalsMoney_args args = new statisticsWithdrawalsMoney_args();
      args.setParam(param);
      sendBase("statisticsWithdrawalsMoney", args);
    }

    public Map<String,String> recv_statisticsWithdrawalsMoney() throws FailureException, org.apache.thrift.TException
    {
      statisticsWithdrawalsMoney_result result = new statisticsWithdrawalsMoney_result();
      receiveBase(result, "statisticsWithdrawalsMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statisticsWithdrawalsMoney failed: unknown result");
    }

    public Map<String,String> getJointIncome(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_getJointIncome(param);
      return recv_getJointIncome();
    }

    public void send_getJointIncome(Map<String,String> param) throws org.apache.thrift.TException
    {
      getJointIncome_args args = new getJointIncome_args();
      args.setParam(param);
      sendBase("getJointIncome", args);
    }

    public Map<String,String> recv_getJointIncome() throws FailureException, org.apache.thrift.TException
    {
      getJointIncome_result result = new getJointIncome_result();
      receiveBase(result, "getJointIncome");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJointIncome failed: unknown result");
    }

    public Map<String,String> addWalletMap(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_addWalletMap(param);
      return recv_addWalletMap();
    }

    public void send_addWalletMap(Map<String,String> param) throws org.apache.thrift.TException
    {
      addWalletMap_args args = new addWalletMap_args();
      args.setParam(param);
      sendBase("addWalletMap", args);
    }

    public Map<String,String> recv_addWalletMap() throws FailureException, org.apache.thrift.TException
    {
      addWalletMap_result result = new addWalletMap_result();
      receiveBase(result, "addWalletMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addWalletMap failed: unknown result");
    }

    public JointWithdraw getJointWithdrawalsList(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_getJointWithdrawalsList(param);
      return recv_getJointWithdrawalsList();
    }

    public void send_getJointWithdrawalsList(Map<String,String> param) throws org.apache.thrift.TException
    {
      getJointWithdrawalsList_args args = new getJointWithdrawalsList_args();
      args.setParam(param);
      sendBase("getJointWithdrawalsList", args);
    }

    public JointWithdraw recv_getJointWithdrawalsList() throws FailureException, org.apache.thrift.TException
    {
      getJointWithdrawalsList_result result = new getJointWithdrawalsList_result();
      receiveBase(result, "getJointWithdrawalsList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJointWithdrawalsList failed: unknown result");
    }

    public Wallet getWalletListByDate(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletListByDate(paramMap);
      return recv_getWalletListByDate();
    }

    public void send_getWalletListByDate(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getWalletListByDate_args args = new getWalletListByDate_args();
      args.setParamMap(paramMap);
      sendBase("getWalletListByDate", args);
    }

    public Wallet recv_getWalletListByDate() throws FailureException, org.apache.thrift.TException
    {
      getWalletListByDate_result result = new getWalletListByDate_result();
      receiveBase(result, "getWalletListByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletListByDate failed: unknown result");
    }

    public Map<String,String> modifyOrder(Map<String,String> formerMap, Map<String,String> laterMap) throws FailureException, org.apache.thrift.TException
    {
      send_modifyOrder(formerMap, laterMap);
      return recv_modifyOrder();
    }

    public void send_modifyOrder(Map<String,String> formerMap, Map<String,String> laterMap) throws org.apache.thrift.TException
    {
      modifyOrder_args args = new modifyOrder_args();
      args.setFormerMap(formerMap);
      args.setLaterMap(laterMap);
      sendBase("modifyOrder", args);
    }

    public Map<String,String> recv_modifyOrder() throws FailureException, org.apache.thrift.TException
    {
      modifyOrder_result result = new modifyOrder_result();
      receiveBase(result, "modifyOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyOrder failed: unknown result");
    }

    public Map<String,String> platformDeductions(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_platformDeductions(param);
      return recv_platformDeductions();
    }

    public void send_platformDeductions(Map<String,String> param) throws org.apache.thrift.TException
    {
      platformDeductions_args args = new platformDeductions_args();
      args.setParam(param);
      sendBase("platformDeductions", args);
    }

    public Map<String,String> recv_platformDeductions() throws FailureException, org.apache.thrift.TException
    {
      platformDeductions_result result = new platformDeductions_result();
      receiveBase(result, "platformDeductions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "platformDeductions failed: unknown result");
    }

    public Map<String,String> setWPwd(String uId, String userType, String password) throws FailureException, org.apache.thrift.TException
    {
      send_setWPwd(uId, userType, password);
      return recv_setWPwd();
    }

    public void send_setWPwd(String uId, String userType, String password) throws org.apache.thrift.TException
    {
      setWPwd_args args = new setWPwd_args();
      args.setUId(uId);
      args.setUserType(userType);
      args.setPassword(password);
      sendBase("setWPwd", args);
    }

    public Map<String,String> recv_setWPwd() throws FailureException, org.apache.thrift.TException
    {
      setWPwd_result result = new setWPwd_result();
      receiveBase(result, "setWPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ge != null) {
        throw result.ge;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setWPwd failed: unknown result");
    }

    public Map<String,String> deductionsMentionLedger(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_deductionsMentionLedger(param);
      return recv_deductionsMentionLedger();
    }

    public void send_deductionsMentionLedger(Map<String,String> param) throws org.apache.thrift.TException
    {
      deductionsMentionLedger_args args = new deductionsMentionLedger_args();
      args.setParam(param);
      sendBase("deductionsMentionLedger", args);
    }

    public Map<String,String> recv_deductionsMentionLedger() throws FailureException, org.apache.thrift.TException
    {
      deductionsMentionLedger_result result = new deductionsMentionLedger_result();
      receiveBase(result, "deductionsMentionLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deductionsMentionLedger failed: unknown result");
    }

    public Map<String,String> setLockWallet(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_setLockWallet(paramMap);
      return recv_setLockWallet();
    }

    public void send_setLockWallet(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      setLockWallet_args args = new setLockWallet_args();
      args.setParamMap(paramMap);
      sendBase("setLockWallet", args);
    }

    public Map<String,String> recv_setLockWallet() throws FailureException, org.apache.thrift.TException
    {
      setLockWallet_result result = new setLockWallet_result();
      receiveBase(result, "setLockWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setLockWallet failed: unknown result");
    }

    public Map<String,String> recoveryFailOrder(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_recoveryFailOrder(paramMap);
      return recv_recoveryFailOrder();
    }

    public void send_recoveryFailOrder(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      recoveryFailOrder_args args = new recoveryFailOrder_args();
      args.setParamMap(paramMap);
      sendBase("recoveryFailOrder", args);
    }

    public Map<String,String> recv_recoveryFailOrder() throws FailureException, org.apache.thrift.TException
    {
      recoveryFailOrder_result result = new recoveryFailOrder_result();
      receiveBase(result, "recoveryFailOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recoveryFailOrder failed: unknown result");
    }

    public SellerStatistics getSellerStatisticsList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getSellerStatisticsList(paramMap);
      return recv_getSellerStatisticsList();
    }

    public void send_getSellerStatisticsList(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getSellerStatisticsList_args args = new getSellerStatisticsList_args();
      args.setParamMap(paramMap);
      sendBase("getSellerStatisticsList", args);
    }

    public SellerStatistics recv_getSellerStatisticsList() throws FailureException, org.apache.thrift.TException
    {
      getSellerStatisticsList_result result = new getSellerStatisticsList_result();
      receiveBase(result, "getSellerStatisticsList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSellerStatisticsList failed: unknown result");
    }

    public SellerStatistics getSellerDetailList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getSellerDetailList(paramMap);
      return recv_getSellerDetailList();
    }

    public void send_getSellerDetailList(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getSellerDetailList_args args = new getSellerDetailList_args();
      args.setParamMap(paramMap);
      sendBase("getSellerDetailList", args);
    }

    public SellerStatistics recv_getSellerDetailList() throws FailureException, org.apache.thrift.TException
    {
      getSellerDetailList_result result = new getSellerDetailList_result();
      receiveBase(result, "getSellerDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSellerDetailList failed: unknown result");
    }

    public Map<String,String> getSellerMonthlyStatistics(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getSellerMonthlyStatistics(paramMap);
      return recv_getSellerMonthlyStatistics();
    }

    public void send_getSellerMonthlyStatistics(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getSellerMonthlyStatistics_args args = new getSellerMonthlyStatistics_args();
      args.setParamMap(paramMap);
      sendBase("getSellerMonthlyStatistics", args);
    }

    public Map<String,String> recv_getSellerMonthlyStatistics() throws FailureException, org.apache.thrift.TException
    {
      getSellerMonthlyStatistics_result result = new getSellerMonthlyStatistics_result();
      receiveBase(result, "getSellerMonthlyStatistics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSellerMonthlyStatistics failed: unknown result");
    }

    public Map<String,String> xmerTransferDeposit(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_xmerTransferDeposit(paramMap);
      return recv_xmerTransferDeposit();
    }

    public void send_xmerTransferDeposit(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      xmerTransferDeposit_args args = new xmerTransferDeposit_args();
      args.setParamMap(paramMap);
      sendBase("xmerTransferDeposit", args);
    }

    public Map<String,String> recv_xmerTransferDeposit() throws FailureException, org.apache.thrift.TException
    {
      xmerTransferDeposit_result result = new xmerTransferDeposit_result();
      receiveBase(result, "xmerTransferDeposit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "xmerTransferDeposit failed: unknown result");
    }

    public Map<String,String> xmerReturnDeposit(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_xmerReturnDeposit(paramMap);
      return recv_xmerReturnDeposit();
    }

    public void send_xmerReturnDeposit(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      xmerReturnDeposit_args args = new xmerReturnDeposit_args();
      args.setParamMap(paramMap);
      sendBase("xmerReturnDeposit", args);
    }

    public Map<String,String> recv_xmerReturnDeposit() throws FailureException, org.apache.thrift.TException
    {
      xmerReturnDeposit_result result = new xmerReturnDeposit_result();
      receiveBase(result, "xmerReturnDeposit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "xmerReturnDeposit failed: unknown result");
    }

    public Map<String,String> deductionsOrderLedger(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_deductionsOrderLedger(param);
      return recv_deductionsOrderLedger();
    }

    public void send_deductionsOrderLedger(Map<String,String> param) throws org.apache.thrift.TException
    {
      deductionsOrderLedger_args args = new deductionsOrderLedger_args();
      args.setParam(param);
      sendBase("deductionsOrderLedger", args);
    }

    public Map<String,String> recv_deductionsOrderLedger() throws FailureException, org.apache.thrift.TException
    {
      deductionsOrderLedger_result result = new deductionsOrderLedger_result();
      receiveBase(result, "deductionsOrderLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deductionsOrderLedger failed: unknown result");
    }

    public Map<String,String> updateWalletAmount(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_updateWalletAmount(param);
      return recv_updateWalletAmount();
    }

    public void send_updateWalletAmount(Map<String,String> param) throws org.apache.thrift.TException
    {
      updateWalletAmount_args args = new updateWalletAmount_args();
      args.setParam(param);
      sendBase("updateWalletAmount", args);
    }

    public Map<String,String> recv_updateWalletAmount() throws FailureException, org.apache.thrift.TException
    {
      updateWalletAmount_result result = new updateWalletAmount_result();
      receiveBase(result, "updateWalletAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWalletAmount failed: unknown result");
    }

    public Map<String,String> getSingleMentionAccount(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_getSingleMentionAccount(param);
      return recv_getSingleMentionAccount();
    }

    public void send_getSingleMentionAccount(Map<String,String> param) throws org.apache.thrift.TException
    {
      getSingleMentionAccount_args args = new getSingleMentionAccount_args();
      args.setParam(param);
      sendBase("getSingleMentionAccount", args);
    }

    public Map<String,String> recv_getSingleMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      getSingleMentionAccount_result result = new getSingleMentionAccount_result();
      receiveBase(result, "getSingleMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSingleMentionAccount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getWalletBalance(String uId, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletBalance_call method_call = new getWalletBalance_call(uId, typeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private int typeId;
      public getWalletBalance_call(String uId, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.typeId = typeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletBalance_args args = new getWalletBalance_args();
        args.setUId(uId);
        args.setTypeId(typeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletBalance();
      }
    }

    public void updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMentionLedger_call method_call = new updateMentionLedger_call(typeId, typeValue, uId, amount, money, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMentionLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int typeId;
      private int typeValue;
      private String uId;
      private String amount;
      private String money;
      public updateMentionLedger_call(int typeId, int typeValue, String uId, String amount, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.typeId = typeId;
        this.typeValue = typeValue;
        this.uId = uId;
        this.amount = amount;
        this.money = money;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMentionLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMentionLedger_args args = new updateMentionLedger_args();
        args.setTypeId(typeId);
        args.setTypeValue(typeValue);
        args.setUId(uId);
        args.setAmount(amount);
        args.setMoney(money);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMentionLedger();
      }
    }

    public void getMentionLedger(int typeId, String uId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionLedger_call method_call = new getMentionLedger_call(typeId, uId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int typeId;
      private String uId;
      public getMentionLedger_call(int typeId, String uId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.typeId = typeId;
        this.uId = uId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionLedger_args args = new getMentionLedger_args();
        args.setTypeId(typeId);
        args.setUId(uId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionLedger();
      }
    }

    public void checkWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkWalletPwd_call method_call = new checkWalletPwd_call(uId, pwd, typeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkWalletPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String pwd;
      private int typeId;
      public checkWalletPwd_call(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.pwd = pwd;
        this.typeId = typeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkWalletPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkWalletPwd_args args = new checkWalletPwd_args();
        args.setUId(uId);
        args.setPwd(pwd);
        args.setTypeId(typeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkWalletPwd();
      }
    }

    public void updateWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWalletPwd_call method_call = new updateWalletPwd_call(uId, pwd, typeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWalletPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String pwd;
      private int typeId;
      public updateWalletPwd_call(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.pwd = pwd;
        this.typeId = typeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWalletPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWalletPwd_args args = new updateWalletPwd_args();
        args.setUId(uId);
        args.setPwd(pwd);
        args.setTypeId(typeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWalletPwd();
      }
    }

    public void addWallet(String uId, String userType, String password, String sellerName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addWallet_call method_call = new addWallet_call(uId, userType, password, sellerName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      private String password;
      private String sellerName;
      public addWallet_call(String uId, String userType, String password, String sellerName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
        this.password = password;
        this.sellerName = sellerName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addWallet_args args = new addWallet_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.setPassword(password);
        args.setSellerName(sellerName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addWallet();
      }
    }

    public void AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddMentionAccount_call method_call = new AddMentionAccount_call(isuse, uId, type, account, cardType, userName, bankName, mobileId, userType, ispublic, idtype, identity, bank, abbrev, province, cityname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int isuse;
      private String uId;
      private int type;
      private String account;
      private int cardType;
      private String userName;
      private String bankName;
      private String mobileId;
      private int userType;
      private int ispublic;
      private int idtype;
      private String identity;
      private String bank;
      private String abbrev;
      private String province;
      private String cityname;
      public AddMentionAccount_call(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.isuse = isuse;
        this.uId = uId;
        this.type = type;
        this.account = account;
        this.cardType = cardType;
        this.userName = userName;
        this.bankName = bankName;
        this.mobileId = mobileId;
        this.userType = userType;
        this.ispublic = ispublic;
        this.idtype = idtype;
        this.identity = identity;
        this.bank = bank;
        this.abbrev = abbrev;
        this.province = province;
        this.cityname = cityname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddMentionAccount_args args = new AddMentionAccount_args();
        args.setIsuse(isuse);
        args.setUId(uId);
        args.setType(type);
        args.setAccount(account);
        args.setCardType(cardType);
        args.setUserName(userName);
        args.setBankName(bankName);
        args.setMobileId(mobileId);
        args.setUserType(userType);
        args.setIspublic(ispublic);
        args.setIdtype(idtype);
        args.setIdentity(identity);
        args.setBank(bank);
        args.setAbbrev(abbrev);
        args.setProvince(province);
        args.setCityname(cityname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddMentionAccount();
      }
    }

    public void getMentionAccount(String uId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionAccount_call method_call = new getMentionAccount_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private int userType;
      public getMentionAccount_call(String uId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionAccount_args args = new getMentionAccount_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionAccount();
      }
    }

    public void updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMentionAccount_call method_call = new updateMentionAccount_call(id, type, account, cardType, userName, bankName, mobileId, isuse, cityname, ispublic, idtype, identity, bank, abbrev, province, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private int type;
      private String account;
      private int cardType;
      private String userName;
      private String bankName;
      private String mobileId;
      private int isuse;
      private String cityname;
      private int ispublic;
      private int idtype;
      private String identity;
      private String bank;
      private String abbrev;
      private String province;
      public updateMentionAccount_call(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.type = type;
        this.account = account;
        this.cardType = cardType;
        this.userName = userName;
        this.bankName = bankName;
        this.mobileId = mobileId;
        this.isuse = isuse;
        this.cityname = cityname;
        this.ispublic = ispublic;
        this.idtype = idtype;
        this.identity = identity;
        this.bank = bank;
        this.abbrev = abbrev;
        this.province = province;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMentionAccount_args args = new updateMentionAccount_args();
        args.setId(id);
        args.setType(type);
        args.setAccount(account);
        args.setCardType(cardType);
        args.setUserName(userName);
        args.setBankName(bankName);
        args.setMobileId(mobileId);
        args.setIsuse(isuse);
        args.setCityname(cityname);
        args.setIspublic(ispublic);
        args.setIdtype(idtype);
        args.setIdentity(identity);
        args.setBank(bank);
        args.setAbbrev(abbrev);
        args.setProvince(province);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMentionAccount();
      }
    }

    public void delMentionAccount(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delMentionAccount_call method_call = new delMentionAccount_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delMentionAccount_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delMentionAccount_args args = new delMentionAccount_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delMentionAccount();
      }
    }

    public void checkWallet(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkWallet_call method_call = new checkWallet_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      public checkWallet_call(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkWallet_args args = new checkWallet_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkWallet();
      }
    }

    public void updateWalletBalance(List<Map<String,String>> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWalletBalance_call method_call = new updateWalletBalance_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWalletBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> walletMap;
      public updateWalletBalance_call(List<Map<String,String>> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWalletBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWalletBalance_args args = new updateWalletBalance_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWalletBalance();
      }
    }

    public void updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWithdrawalsRecord_call method_call = new updateWithdrawalsRecord_call(amountMapList, orderMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWithdrawalsRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> amountMapList;
      private Map<String,String> orderMap;
      public updateWithdrawalsRecord_call(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amountMapList = amountMapList;
        this.orderMap = orderMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWithdrawalsRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWithdrawalsRecord_args args = new updateWithdrawalsRecord_args();
        args.setAmountMapList(amountMapList);
        args.setOrderMap(orderMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWithdrawalsRecord();
      }
    }

    public void updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateJointWithdrawalsRecord_call method_call = new updateJointWithdrawalsRecord_call(amountMapList, orderMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateJointWithdrawalsRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> amountMapList;
      private Map<String,String> orderMap;
      public updateJointWithdrawalsRecord_call(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amountMapList = amountMapList;
        this.orderMap = orderMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateJointWithdrawalsRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateJointWithdrawalsRecord_args args = new updateJointWithdrawalsRecord_args();
        args.setAmountMapList(amountMapList);
        args.setOrderMap(orderMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateJointWithdrawalsRecord();
      }
    }

    public void getUpdatePwdNum(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUpdatePwdNum_call method_call = new getUpdatePwdNum_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUpdatePwdNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      public getUpdatePwdNum_call(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUpdatePwdNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUpdatePwdNum_args args = new getUpdatePwdNum_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUpdatePwdNum();
      }
    }

    public void getWalletRecord(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletRecord_call method_call = new getWalletRecord_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getWalletRecord_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletRecord_args args = new getWalletRecord_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WalletRecord getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletRecord();
      }
    }

    public void getMentionBalance(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionBalance_call method_call = new getMentionBalance_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      public getMentionBalance_call(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionBalance_args args = new getMentionBalance_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionBalance();
      }
    }

    public void updateBalance(List<Map<String,String>> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBalance_call method_call = new updateBalance_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> paramMap;
      public updateBalance_call(List<Map<String,String>> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBalance_args args = new updateBalance_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBalance();
      }
    }

    public void getWalletList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletList_call method_call = new getWalletList_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getWalletList_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletList_args args = new getWalletList_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Wallet getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletList();
      }
    }

    public void getWRAmount(String uId, String userType, int rType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWRAmount_call method_call = new getWRAmount_call(uId, userType, rType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWRAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      private int rType;
      public getWRAmount_call(String uId, String userType, int rType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
        this.rType = rType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWRAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWRAmount_args args = new getWRAmount_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.setRType(rType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWRAmount();
      }
    }

    public void getWalletCount(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletCount_call method_call = new getWalletCount_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getWalletCount_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletCount_args args = new getWalletCount_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletCount();
      }
    }

    public void getWalletRecordCount(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletRecordCount_call method_call = new getWalletRecordCount_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletRecordCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getWalletRecordCount_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletRecordCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletRecordCount_args args = new getWalletRecordCount_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletRecordCount();
      }
    }

    public void getMentionAccountList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionAccountList_call method_call = new getMentionAccountList_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionAccountList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getMentionAccountList_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionAccountList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionAccountList_args args = new getMentionAccountList_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MentionAccount getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionAccountList();
      }
    }

    public void getUserMoney(String ids, int userType, int moneyType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserMoney_call method_call = new getUserMoney_call(ids, userType, moneyType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ids;
      private int userType;
      private int moneyType;
      public getUserMoney_call(String ids, int userType, int moneyType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.userType = userType;
        this.moneyType = moneyType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserMoney_args args = new getUserMoney_args();
        args.setIds(ids);
        args.setUserType(userType);
        args.setMoneyType(moneyType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserMoney();
      }
    }

    public void getSellerWalletList(String ids, int moneyType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSellerWalletList_call method_call = new getSellerWalletList_call(ids, moneyType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSellerWalletList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ids;
      private int moneyType;
      public getSellerWalletList_call(String ids, int moneyType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.moneyType = moneyType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSellerWalletList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSellerWalletList_args args = new getSellerWalletList_args();
        args.setIds(ids);
        args.setMoneyType(moneyType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SellerWallet getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSellerWalletList();
      }
    }

    public void mergeMoney(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mergeMoney_call method_call = new mergeMoney_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public mergeMoney_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeMoney_args args = new mergeMoney_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeMoney();
      }
    }

    public void getMentionAccounts(List<Map<String,String>> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionAccounts_call method_call = new getMentionAccounts_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionAccounts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> param;
      public getMentionAccounts_call(List<Map<String,String>> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionAccounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionAccounts_args args = new getMentionAccounts_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionAccounts();
      }
    }

    public void returnWithdrawals(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnWithdrawals_call method_call = new returnWithdrawals_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnWithdrawals_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public returnWithdrawals_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnWithdrawals", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnWithdrawals_args args = new returnWithdrawals_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnWithdrawals();
      }
    }

    public void statisticsWithdrawalsMoney(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statisticsWithdrawalsMoney_call method_call = new statisticsWithdrawalsMoney_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statisticsWithdrawalsMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public statisticsWithdrawalsMoney_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statisticsWithdrawalsMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statisticsWithdrawalsMoney_args args = new statisticsWithdrawalsMoney_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statisticsWithdrawalsMoney();
      }
    }

    public void getJointIncome(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJointIncome_call method_call = new getJointIncome_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJointIncome_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public getJointIncome_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJointIncome", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJointIncome_args args = new getJointIncome_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJointIncome();
      }
    }

    public void addWalletMap(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addWalletMap_call method_call = new addWalletMap_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addWalletMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public addWalletMap_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addWalletMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addWalletMap_args args = new addWalletMap_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addWalletMap();
      }
    }

    public void getJointWithdrawalsList(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJointWithdrawalsList_call method_call = new getJointWithdrawalsList_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJointWithdrawalsList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public getJointWithdrawalsList_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJointWithdrawalsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJointWithdrawalsList_args args = new getJointWithdrawalsList_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JointWithdraw getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJointWithdrawalsList();
      }
    }

    public void getWalletListByDate(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletListByDate_call method_call = new getWalletListByDate_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletListByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getWalletListByDate_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletListByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletListByDate_args args = new getWalletListByDate_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Wallet getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletListByDate();
      }
    }

    public void modifyOrder(Map<String,String> formerMap, Map<String,String> laterMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyOrder_call method_call = new modifyOrder_call(formerMap, laterMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> formerMap;
      private Map<String,String> laterMap;
      public modifyOrder_call(Map<String,String> formerMap, Map<String,String> laterMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.formerMap = formerMap;
        this.laterMap = laterMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyOrder_args args = new modifyOrder_args();
        args.setFormerMap(formerMap);
        args.setLaterMap(laterMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyOrder();
      }
    }

    public void platformDeductions(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      platformDeductions_call method_call = new platformDeductions_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class platformDeductions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public platformDeductions_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("platformDeductions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        platformDeductions_args args = new platformDeductions_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_platformDeductions();
      }
    }

    public void setWPwd(String uId, String userType, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setWPwd_call method_call = new setWPwd_call(uId, userType, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setWPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      private String password;
      public setWPwd_call(String uId, String userType, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setWPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setWPwd_args args = new setWPwd_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setWPwd();
      }
    }

    public void deductionsMentionLedger(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deductionsMentionLedger_call method_call = new deductionsMentionLedger_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deductionsMentionLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public deductionsMentionLedger_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deductionsMentionLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deductionsMentionLedger_args args = new deductionsMentionLedger_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deductionsMentionLedger();
      }
    }

    public void setLockWallet(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setLockWallet_call method_call = new setLockWallet_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setLockWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public setLockWallet_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setLockWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setLockWallet_args args = new setLockWallet_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setLockWallet();
      }
    }

    public void recoveryFailOrder(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recoveryFailOrder_call method_call = new recoveryFailOrder_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recoveryFailOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public recoveryFailOrder_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recoveryFailOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recoveryFailOrder_args args = new recoveryFailOrder_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recoveryFailOrder();
      }
    }

    public void getSellerStatisticsList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSellerStatisticsList_call method_call = new getSellerStatisticsList_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSellerStatisticsList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getSellerStatisticsList_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSellerStatisticsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSellerStatisticsList_args args = new getSellerStatisticsList_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SellerStatistics getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSellerStatisticsList();
      }
    }

    public void getSellerDetailList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSellerDetailList_call method_call = new getSellerDetailList_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSellerDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getSellerDetailList_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSellerDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSellerDetailList_args args = new getSellerDetailList_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SellerStatistics getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSellerDetailList();
      }
    }

    public void getSellerMonthlyStatistics(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSellerMonthlyStatistics_call method_call = new getSellerMonthlyStatistics_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSellerMonthlyStatistics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getSellerMonthlyStatistics_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSellerMonthlyStatistics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSellerMonthlyStatistics_args args = new getSellerMonthlyStatistics_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSellerMonthlyStatistics();
      }
    }

    public void xmerTransferDeposit(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      xmerTransferDeposit_call method_call = new xmerTransferDeposit_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class xmerTransferDeposit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public xmerTransferDeposit_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("xmerTransferDeposit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        xmerTransferDeposit_args args = new xmerTransferDeposit_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_xmerTransferDeposit();
      }
    }

    public void xmerReturnDeposit(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      xmerReturnDeposit_call method_call = new xmerReturnDeposit_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class xmerReturnDeposit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public xmerReturnDeposit_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("xmerReturnDeposit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        xmerReturnDeposit_args args = new xmerReturnDeposit_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_xmerReturnDeposit();
      }
    }

    public void deductionsOrderLedger(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deductionsOrderLedger_call method_call = new deductionsOrderLedger_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deductionsOrderLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public deductionsOrderLedger_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deductionsOrderLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deductionsOrderLedger_args args = new deductionsOrderLedger_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deductionsOrderLedger();
      }
    }

    public void updateWalletAmount(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWalletAmount_call method_call = new updateWalletAmount_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWalletAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public updateWalletAmount_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWalletAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWalletAmount_args args = new updateWalletAmount_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWalletAmount();
      }
    }

    public void getSingleMentionAccount(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSingleMentionAccount_call method_call = new getSingleMentionAccount_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSingleMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public getSingleMentionAccount_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSingleMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSingleMentionAccount_args args = new getSingleMentionAccount_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSingleMentionAccount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getWalletBalance", new getWalletBalance());
      processMap.put("updateMentionLedger", new updateMentionLedger());
      processMap.put("getMentionLedger", new getMentionLedger());
      processMap.put("checkWalletPwd", new checkWalletPwd());
      processMap.put("updateWalletPwd", new updateWalletPwd());
      processMap.put("addWallet", new addWallet());
      processMap.put("AddMentionAccount", new AddMentionAccount());
      processMap.put("getMentionAccount", new getMentionAccount());
      processMap.put("updateMentionAccount", new updateMentionAccount());
      processMap.put("delMentionAccount", new delMentionAccount());
      processMap.put("checkWallet", new checkWallet());
      processMap.put("updateWalletBalance", new updateWalletBalance());
      processMap.put("updateWithdrawalsRecord", new updateWithdrawalsRecord());
      processMap.put("updateJointWithdrawalsRecord", new updateJointWithdrawalsRecord());
      processMap.put("getUpdatePwdNum", new getUpdatePwdNum());
      processMap.put("getWalletRecord", new getWalletRecord());
      processMap.put("getMentionBalance", new getMentionBalance());
      processMap.put("updateBalance", new updateBalance());
      processMap.put("getWalletList", new getWalletList());
      processMap.put("getWRAmount", new getWRAmount());
      processMap.put("getWalletCount", new getWalletCount());
      processMap.put("getWalletRecordCount", new getWalletRecordCount());
      processMap.put("getMentionAccountList", new getMentionAccountList());
      processMap.put("getUserMoney", new getUserMoney());
      processMap.put("getSellerWalletList", new getSellerWalletList());
      processMap.put("mergeMoney", new mergeMoney());
      processMap.put("getMentionAccounts", new getMentionAccounts());
      processMap.put("returnWithdrawals", new returnWithdrawals());
      processMap.put("statisticsWithdrawalsMoney", new statisticsWithdrawalsMoney());
      processMap.put("getJointIncome", new getJointIncome());
      processMap.put("addWalletMap", new addWalletMap());
      processMap.put("getJointWithdrawalsList", new getJointWithdrawalsList());
      processMap.put("getWalletListByDate", new getWalletListByDate());
      processMap.put("modifyOrder", new modifyOrder());
      processMap.put("platformDeductions", new platformDeductions());
      processMap.put("setWPwd", new setWPwd());
      processMap.put("deductionsMentionLedger", new deductionsMentionLedger());
      processMap.put("setLockWallet", new setLockWallet());
      processMap.put("recoveryFailOrder", new recoveryFailOrder());
      processMap.put("getSellerStatisticsList", new getSellerStatisticsList());
      processMap.put("getSellerDetailList", new getSellerDetailList());
      processMap.put("getSellerMonthlyStatistics", new getSellerMonthlyStatistics());
      processMap.put("xmerTransferDeposit", new xmerTransferDeposit());
      processMap.put("xmerReturnDeposit", new xmerReturnDeposit());
      processMap.put("deductionsOrderLedger", new deductionsOrderLedger());
      processMap.put("updateWalletAmount", new updateWalletAmount());
      processMap.put("getSingleMentionAccount", new getSingleMentionAccount());
      return processMap;
    }

    public static class getWalletBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletBalance_args> {
      public getWalletBalance() {
        super("getWalletBalance");
      }

      public getWalletBalance_args getEmptyArgsInstance() {
        return new getWalletBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletBalance_result getResult(I iface, getWalletBalance_args args) throws org.apache.thrift.TException {
        getWalletBalance_result result = new getWalletBalance_result();
        try {
          result.success = iface.getWalletBalance(args.uId, args.typeId);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateMentionLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMentionLedger_args> {
      public updateMentionLedger() {
        super("updateMentionLedger");
      }

      public updateMentionLedger_args getEmptyArgsInstance() {
        return new updateMentionLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMentionLedger_result getResult(I iface, updateMentionLedger_args args) throws org.apache.thrift.TException {
        updateMentionLedger_result result = new updateMentionLedger_result();
        try {
          result.success = iface.updateMentionLedger(args.typeId, args.typeValue, args.uId, args.amount, args.money);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionLedger_args> {
      public getMentionLedger() {
        super("getMentionLedger");
      }

      public getMentionLedger_args getEmptyArgsInstance() {
        return new getMentionLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionLedger_result getResult(I iface, getMentionLedger_args args) throws org.apache.thrift.TException {
        getMentionLedger_result result = new getMentionLedger_result();
        try {
          result.success = iface.getMentionLedger(args.typeId, args.uId);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class checkWalletPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkWalletPwd_args> {
      public checkWalletPwd() {
        super("checkWalletPwd");
      }

      public checkWalletPwd_args getEmptyArgsInstance() {
        return new checkWalletPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkWalletPwd_result getResult(I iface, checkWalletPwd_args args) throws org.apache.thrift.TException {
        checkWalletPwd_result result = new checkWalletPwd_result();
        try {
          result.success = iface.checkWalletPwd(args.uId, args.pwd, args.typeId);
          result.setSuccessIsSet(true);
        } catch (FailureException ge) {
          result.ge = ge;
        }
        return result;
      }
    }

    public static class updateWalletPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWalletPwd_args> {
      public updateWalletPwd() {
        super("updateWalletPwd");
      }

      public updateWalletPwd_args getEmptyArgsInstance() {
        return new updateWalletPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWalletPwd_result getResult(I iface, updateWalletPwd_args args) throws org.apache.thrift.TException {
        updateWalletPwd_result result = new updateWalletPwd_result();
        try {
          result.success = iface.updateWalletPwd(args.uId, args.pwd, args.typeId);
          result.setSuccessIsSet(true);
        } catch (FailureException ge) {
          result.ge = ge;
        }
        return result;
      }
    }

    public static class addWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addWallet_args> {
      public addWallet() {
        super("addWallet");
      }

      public addWallet_args getEmptyArgsInstance() {
        return new addWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addWallet_result getResult(I iface, addWallet_args args) throws org.apache.thrift.TException {
        addWallet_result result = new addWallet_result();
        try {
          result.success = iface.addWallet(args.uId, args.userType, args.password, args.sellerName);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class AddMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddMentionAccount_args> {
      public AddMentionAccount() {
        super("AddMentionAccount");
      }

      public AddMentionAccount_args getEmptyArgsInstance() {
        return new AddMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddMentionAccount_result getResult(I iface, AddMentionAccount_args args) throws org.apache.thrift.TException {
        AddMentionAccount_result result = new AddMentionAccount_result();
        try {
          result.success = iface.AddMentionAccount(args.isuse, args.uId, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.userType, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province, args.cityname);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionAccount_args> {
      public getMentionAccount() {
        super("getMentionAccount");
      }

      public getMentionAccount_args getEmptyArgsInstance() {
        return new getMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionAccount_result getResult(I iface, getMentionAccount_args args) throws org.apache.thrift.TException {
        getMentionAccount_result result = new getMentionAccount_result();
        try {
          result.success = iface.getMentionAccount(args.uId, args.userType);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMentionAccount_args> {
      public updateMentionAccount() {
        super("updateMentionAccount");
      }

      public updateMentionAccount_args getEmptyArgsInstance() {
        return new updateMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMentionAccount_result getResult(I iface, updateMentionAccount_args args) throws org.apache.thrift.TException {
        updateMentionAccount_result result = new updateMentionAccount_result();
        try {
          result.success = iface.updateMentionAccount(args.id, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.isuse, args.cityname, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class delMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delMentionAccount_args> {
      public delMentionAccount() {
        super("delMentionAccount");
      }

      public delMentionAccount_args getEmptyArgsInstance() {
        return new delMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delMentionAccount_result getResult(I iface, delMentionAccount_args args) throws org.apache.thrift.TException {
        delMentionAccount_result result = new delMentionAccount_result();
        try {
          result.success = iface.delMentionAccount(args.id);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class checkWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkWallet_args> {
      public checkWallet() {
        super("checkWallet");
      }

      public checkWallet_args getEmptyArgsInstance() {
        return new checkWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkWallet_result getResult(I iface, checkWallet_args args) throws org.apache.thrift.TException {
        checkWallet_result result = new checkWallet_result();
        try {
          result.success = iface.checkWallet(args.uId, args.userType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWalletBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWalletBalance_args> {
      public updateWalletBalance() {
        super("updateWalletBalance");
      }

      public updateWalletBalance_args getEmptyArgsInstance() {
        return new updateWalletBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWalletBalance_result getResult(I iface, updateWalletBalance_args args) throws org.apache.thrift.TException {
        updateWalletBalance_result result = new updateWalletBalance_result();
        try {
          result.success = iface.updateWalletBalance(args.walletMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWithdrawalsRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWithdrawalsRecord_args> {
      public updateWithdrawalsRecord() {
        super("updateWithdrawalsRecord");
      }

      public updateWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWithdrawalsRecord_result getResult(I iface, updateWithdrawalsRecord_args args) throws org.apache.thrift.TException {
        updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
        try {
          result.success = iface.updateWithdrawalsRecord(args.amountMapList, args.orderMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateJointWithdrawalsRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateJointWithdrawalsRecord_args> {
      public updateJointWithdrawalsRecord() {
        super("updateJointWithdrawalsRecord");
      }

      public updateJointWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateJointWithdrawalsRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateJointWithdrawalsRecord_result getResult(I iface, updateJointWithdrawalsRecord_args args) throws org.apache.thrift.TException {
        updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
        try {
          result.success = iface.updateJointWithdrawalsRecord(args.amountMapList, args.orderMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getUpdatePwdNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUpdatePwdNum_args> {
      public getUpdatePwdNum() {
        super("getUpdatePwdNum");
      }

      public getUpdatePwdNum_args getEmptyArgsInstance() {
        return new getUpdatePwdNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUpdatePwdNum_result getResult(I iface, getUpdatePwdNum_args args) throws org.apache.thrift.TException {
        getUpdatePwdNum_result result = new getUpdatePwdNum_result();
        try {
          result.success = iface.getUpdatePwdNum(args.uId, args.userType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletRecord_args> {
      public getWalletRecord() {
        super("getWalletRecord");
      }

      public getWalletRecord_args getEmptyArgsInstance() {
        return new getWalletRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletRecord_result getResult(I iface, getWalletRecord_args args) throws org.apache.thrift.TException {
        getWalletRecord_result result = new getWalletRecord_result();
        try {
          result.success = iface.getWalletRecord(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionBalance_args> {
      public getMentionBalance() {
        super("getMentionBalance");
      }

      public getMentionBalance_args getEmptyArgsInstance() {
        return new getMentionBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionBalance_result getResult(I iface, getMentionBalance_args args) throws org.apache.thrift.TException {
        getMentionBalance_result result = new getMentionBalance_result();
        try {
          result.success = iface.getMentionBalance(args.uId, args.userType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBalance_args> {
      public updateBalance() {
        super("updateBalance");
      }

      public updateBalance_args getEmptyArgsInstance() {
        return new updateBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBalance_result getResult(I iface, updateBalance_args args) throws org.apache.thrift.TException {
        updateBalance_result result = new updateBalance_result();
        try {
          result.success = iface.updateBalance(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletList_args> {
      public getWalletList() {
        super("getWalletList");
      }

      public getWalletList_args getEmptyArgsInstance() {
        return new getWalletList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletList_result getResult(I iface, getWalletList_args args) throws org.apache.thrift.TException {
        getWalletList_result result = new getWalletList_result();
        try {
          result.success = iface.getWalletList(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWRAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWRAmount_args> {
      public getWRAmount() {
        super("getWRAmount");
      }

      public getWRAmount_args getEmptyArgsInstance() {
        return new getWRAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWRAmount_result getResult(I iface, getWRAmount_args args) throws org.apache.thrift.TException {
        getWRAmount_result result = new getWRAmount_result();
        try {
          result.success = iface.getWRAmount(args.uId, args.userType, args.rType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletCount_args> {
      public getWalletCount() {
        super("getWalletCount");
      }

      public getWalletCount_args getEmptyArgsInstance() {
        return new getWalletCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletCount_result getResult(I iface, getWalletCount_args args) throws org.apache.thrift.TException {
        getWalletCount_result result = new getWalletCount_result();
        try {
          result.success = iface.getWalletCount(args.paramMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletRecordCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletRecordCount_args> {
      public getWalletRecordCount() {
        super("getWalletRecordCount");
      }

      public getWalletRecordCount_args getEmptyArgsInstance() {
        return new getWalletRecordCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletRecordCount_result getResult(I iface, getWalletRecordCount_args args) throws org.apache.thrift.TException {
        getWalletRecordCount_result result = new getWalletRecordCount_result();
        try {
          result.success = iface.getWalletRecordCount(args.paramMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionAccountList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionAccountList_args> {
      public getMentionAccountList() {
        super("getMentionAccountList");
      }

      public getMentionAccountList_args getEmptyArgsInstance() {
        return new getMentionAccountList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionAccountList_result getResult(I iface, getMentionAccountList_args args) throws org.apache.thrift.TException {
        getMentionAccountList_result result = new getMentionAccountList_result();
        try {
          result.success = iface.getMentionAccountList(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getUserMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserMoney_args> {
      public getUserMoney() {
        super("getUserMoney");
      }

      public getUserMoney_args getEmptyArgsInstance() {
        return new getUserMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserMoney_result getResult(I iface, getUserMoney_args args) throws org.apache.thrift.TException {
        getUserMoney_result result = new getUserMoney_result();
        try {
          result.success = iface.getUserMoney(args.ids, args.userType, args.moneyType);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSellerWalletList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSellerWalletList_args> {
      public getSellerWalletList() {
        super("getSellerWalletList");
      }

      public getSellerWalletList_args getEmptyArgsInstance() {
        return new getSellerWalletList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSellerWalletList_result getResult(I iface, getSellerWalletList_args args) throws org.apache.thrift.TException {
        getSellerWalletList_result result = new getSellerWalletList_result();
        try {
          result.success = iface.getSellerWalletList(args.ids, args.moneyType);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class mergeMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeMoney_args> {
      public mergeMoney() {
        super("mergeMoney");
      }

      public mergeMoney_args getEmptyArgsInstance() {
        return new mergeMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeMoney_result getResult(I iface, mergeMoney_args args) throws org.apache.thrift.TException {
        mergeMoney_result result = new mergeMoney_result();
        try {
          result.success = iface.mergeMoney(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionAccounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionAccounts_args> {
      public getMentionAccounts() {
        super("getMentionAccounts");
      }

      public getMentionAccounts_args getEmptyArgsInstance() {
        return new getMentionAccounts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionAccounts_result getResult(I iface, getMentionAccounts_args args) throws org.apache.thrift.TException {
        getMentionAccounts_result result = new getMentionAccounts_result();
        try {
          result.success = iface.getMentionAccounts(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class returnWithdrawals<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnWithdrawals_args> {
      public returnWithdrawals() {
        super("returnWithdrawals");
      }

      public returnWithdrawals_args getEmptyArgsInstance() {
        return new returnWithdrawals_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnWithdrawals_result getResult(I iface, returnWithdrawals_args args) throws org.apache.thrift.TException {
        returnWithdrawals_result result = new returnWithdrawals_result();
        try {
          result.success = iface.returnWithdrawals(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class statisticsWithdrawalsMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statisticsWithdrawalsMoney_args> {
      public statisticsWithdrawalsMoney() {
        super("statisticsWithdrawalsMoney");
      }

      public statisticsWithdrawalsMoney_args getEmptyArgsInstance() {
        return new statisticsWithdrawalsMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statisticsWithdrawalsMoney_result getResult(I iface, statisticsWithdrawalsMoney_args args) throws org.apache.thrift.TException {
        statisticsWithdrawalsMoney_result result = new statisticsWithdrawalsMoney_result();
        try {
          result.success = iface.statisticsWithdrawalsMoney(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getJointIncome<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJointIncome_args> {
      public getJointIncome() {
        super("getJointIncome");
      }

      public getJointIncome_args getEmptyArgsInstance() {
        return new getJointIncome_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJointIncome_result getResult(I iface, getJointIncome_args args) throws org.apache.thrift.TException {
        getJointIncome_result result = new getJointIncome_result();
        try {
          result.success = iface.getJointIncome(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class addWalletMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addWalletMap_args> {
      public addWalletMap() {
        super("addWalletMap");
      }

      public addWalletMap_args getEmptyArgsInstance() {
        return new addWalletMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addWalletMap_result getResult(I iface, addWalletMap_args args) throws org.apache.thrift.TException {
        addWalletMap_result result = new addWalletMap_result();
        try {
          result.success = iface.addWalletMap(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getJointWithdrawalsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJointWithdrawalsList_args> {
      public getJointWithdrawalsList() {
        super("getJointWithdrawalsList");
      }

      public getJointWithdrawalsList_args getEmptyArgsInstance() {
        return new getJointWithdrawalsList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJointWithdrawalsList_result getResult(I iface, getJointWithdrawalsList_args args) throws org.apache.thrift.TException {
        getJointWithdrawalsList_result result = new getJointWithdrawalsList_result();
        try {
          result.success = iface.getJointWithdrawalsList(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletListByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletListByDate_args> {
      public getWalletListByDate() {
        super("getWalletListByDate");
      }

      public getWalletListByDate_args getEmptyArgsInstance() {
        return new getWalletListByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletListByDate_result getResult(I iface, getWalletListByDate_args args) throws org.apache.thrift.TException {
        getWalletListByDate_result result = new getWalletListByDate_result();
        try {
          result.success = iface.getWalletListByDate(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class modifyOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyOrder_args> {
      public modifyOrder() {
        super("modifyOrder");
      }

      public modifyOrder_args getEmptyArgsInstance() {
        return new modifyOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyOrder_result getResult(I iface, modifyOrder_args args) throws org.apache.thrift.TException {
        modifyOrder_result result = new modifyOrder_result();
        try {
          result.success = iface.modifyOrder(args.formerMap, args.laterMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class platformDeductions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, platformDeductions_args> {
      public platformDeductions() {
        super("platformDeductions");
      }

      public platformDeductions_args getEmptyArgsInstance() {
        return new platformDeductions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public platformDeductions_result getResult(I iface, platformDeductions_args args) throws org.apache.thrift.TException {
        platformDeductions_result result = new platformDeductions_result();
        try {
          result.success = iface.platformDeductions(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class setWPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setWPwd_args> {
      public setWPwd() {
        super("setWPwd");
      }

      public setWPwd_args getEmptyArgsInstance() {
        return new setWPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setWPwd_result getResult(I iface, setWPwd_args args) throws org.apache.thrift.TException {
        setWPwd_result result = new setWPwd_result();
        try {
          result.success = iface.setWPwd(args.uId, args.userType, args.password);
        } catch (FailureException ge) {
          result.ge = ge;
        }
        return result;
      }
    }

    public static class deductionsMentionLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deductionsMentionLedger_args> {
      public deductionsMentionLedger() {
        super("deductionsMentionLedger");
      }

      public deductionsMentionLedger_args getEmptyArgsInstance() {
        return new deductionsMentionLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deductionsMentionLedger_result getResult(I iface, deductionsMentionLedger_args args) throws org.apache.thrift.TException {
        deductionsMentionLedger_result result = new deductionsMentionLedger_result();
        try {
          result.success = iface.deductionsMentionLedger(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class setLockWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setLockWallet_args> {
      public setLockWallet() {
        super("setLockWallet");
      }

      public setLockWallet_args getEmptyArgsInstance() {
        return new setLockWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setLockWallet_result getResult(I iface, setLockWallet_args args) throws org.apache.thrift.TException {
        setLockWallet_result result = new setLockWallet_result();
        try {
          result.success = iface.setLockWallet(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class recoveryFailOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recoveryFailOrder_args> {
      public recoveryFailOrder() {
        super("recoveryFailOrder");
      }

      public recoveryFailOrder_args getEmptyArgsInstance() {
        return new recoveryFailOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recoveryFailOrder_result getResult(I iface, recoveryFailOrder_args args) throws org.apache.thrift.TException {
        recoveryFailOrder_result result = new recoveryFailOrder_result();
        try {
          result.success = iface.recoveryFailOrder(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSellerStatisticsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSellerStatisticsList_args> {
      public getSellerStatisticsList() {
        super("getSellerStatisticsList");
      }

      public getSellerStatisticsList_args getEmptyArgsInstance() {
        return new getSellerStatisticsList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSellerStatisticsList_result getResult(I iface, getSellerStatisticsList_args args) throws org.apache.thrift.TException {
        getSellerStatisticsList_result result = new getSellerStatisticsList_result();
        try {
          result.success = iface.getSellerStatisticsList(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSellerDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSellerDetailList_args> {
      public getSellerDetailList() {
        super("getSellerDetailList");
      }

      public getSellerDetailList_args getEmptyArgsInstance() {
        return new getSellerDetailList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSellerDetailList_result getResult(I iface, getSellerDetailList_args args) throws org.apache.thrift.TException {
        getSellerDetailList_result result = new getSellerDetailList_result();
        try {
          result.success = iface.getSellerDetailList(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSellerMonthlyStatistics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSellerMonthlyStatistics_args> {
      public getSellerMonthlyStatistics() {
        super("getSellerMonthlyStatistics");
      }

      public getSellerMonthlyStatistics_args getEmptyArgsInstance() {
        return new getSellerMonthlyStatistics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSellerMonthlyStatistics_result getResult(I iface, getSellerMonthlyStatistics_args args) throws org.apache.thrift.TException {
        getSellerMonthlyStatistics_result result = new getSellerMonthlyStatistics_result();
        try {
          result.success = iface.getSellerMonthlyStatistics(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class xmerTransferDeposit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, xmerTransferDeposit_args> {
      public xmerTransferDeposit() {
        super("xmerTransferDeposit");
      }

      public xmerTransferDeposit_args getEmptyArgsInstance() {
        return new xmerTransferDeposit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public xmerTransferDeposit_result getResult(I iface, xmerTransferDeposit_args args) throws org.apache.thrift.TException {
        xmerTransferDeposit_result result = new xmerTransferDeposit_result();
        try {
          result.success = iface.xmerTransferDeposit(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class xmerReturnDeposit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, xmerReturnDeposit_args> {
      public xmerReturnDeposit() {
        super("xmerReturnDeposit");
      }

      public xmerReturnDeposit_args getEmptyArgsInstance() {
        return new xmerReturnDeposit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public xmerReturnDeposit_result getResult(I iface, xmerReturnDeposit_args args) throws org.apache.thrift.TException {
        xmerReturnDeposit_result result = new xmerReturnDeposit_result();
        try {
          result.success = iface.xmerReturnDeposit(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class deductionsOrderLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deductionsOrderLedger_args> {
      public deductionsOrderLedger() {
        super("deductionsOrderLedger");
      }

      public deductionsOrderLedger_args getEmptyArgsInstance() {
        return new deductionsOrderLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deductionsOrderLedger_result getResult(I iface, deductionsOrderLedger_args args) throws org.apache.thrift.TException {
        deductionsOrderLedger_result result = new deductionsOrderLedger_result();
        try {
          result.success = iface.deductionsOrderLedger(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWalletAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWalletAmount_args> {
      public updateWalletAmount() {
        super("updateWalletAmount");
      }

      public updateWalletAmount_args getEmptyArgsInstance() {
        return new updateWalletAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWalletAmount_result getResult(I iface, updateWalletAmount_args args) throws org.apache.thrift.TException {
        updateWalletAmount_result result = new updateWalletAmount_result();
        try {
          result.success = iface.updateWalletAmount(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSingleMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSingleMentionAccount_args> {
      public getSingleMentionAccount() {
        super("getSingleMentionAccount");
      }

      public getSingleMentionAccount_args getEmptyArgsInstance() {
        return new getSingleMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSingleMentionAccount_result getResult(I iface, getSingleMentionAccount_args args) throws org.apache.thrift.TException {
        getSingleMentionAccount_result result = new getSingleMentionAccount_result();
        try {
          result.success = iface.getSingleMentionAccount(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getWalletBalance", new getWalletBalance());
      processMap.put("updateMentionLedger", new updateMentionLedger());
      processMap.put("getMentionLedger", new getMentionLedger());
      processMap.put("checkWalletPwd", new checkWalletPwd());
      processMap.put("updateWalletPwd", new updateWalletPwd());
      processMap.put("addWallet", new addWallet());
      processMap.put("AddMentionAccount", new AddMentionAccount());
      processMap.put("getMentionAccount", new getMentionAccount());
      processMap.put("updateMentionAccount", new updateMentionAccount());
      processMap.put("delMentionAccount", new delMentionAccount());
      processMap.put("checkWallet", new checkWallet());
      processMap.put("updateWalletBalance", new updateWalletBalance());
      processMap.put("updateWithdrawalsRecord", new updateWithdrawalsRecord());
      processMap.put("updateJointWithdrawalsRecord", new updateJointWithdrawalsRecord());
      processMap.put("getUpdatePwdNum", new getUpdatePwdNum());
      processMap.put("getWalletRecord", new getWalletRecord());
      processMap.put("getMentionBalance", new getMentionBalance());
      processMap.put("updateBalance", new updateBalance());
      processMap.put("getWalletList", new getWalletList());
      processMap.put("getWRAmount", new getWRAmount());
      processMap.put("getWalletCount", new getWalletCount());
      processMap.put("getWalletRecordCount", new getWalletRecordCount());
      processMap.put("getMentionAccountList", new getMentionAccountList());
      processMap.put("getUserMoney", new getUserMoney());
      processMap.put("getSellerWalletList", new getSellerWalletList());
      processMap.put("mergeMoney", new mergeMoney());
      processMap.put("getMentionAccounts", new getMentionAccounts());
      processMap.put("returnWithdrawals", new returnWithdrawals());
      processMap.put("statisticsWithdrawalsMoney", new statisticsWithdrawalsMoney());
      processMap.put("getJointIncome", new getJointIncome());
      processMap.put("addWalletMap", new addWalletMap());
      processMap.put("getJointWithdrawalsList", new getJointWithdrawalsList());
      processMap.put("getWalletListByDate", new getWalletListByDate());
      processMap.put("modifyOrder", new modifyOrder());
      processMap.put("platformDeductions", new platformDeductions());
      processMap.put("setWPwd", new setWPwd());
      processMap.put("deductionsMentionLedger", new deductionsMentionLedger());
      processMap.put("setLockWallet", new setLockWallet());
      processMap.put("recoveryFailOrder", new recoveryFailOrder());
      processMap.put("getSellerStatisticsList", new getSellerStatisticsList());
      processMap.put("getSellerDetailList", new getSellerDetailList());
      processMap.put("getSellerMonthlyStatistics", new getSellerMonthlyStatistics());
      processMap.put("xmerTransferDeposit", new xmerTransferDeposit());
      processMap.put("xmerReturnDeposit", new xmerReturnDeposit());
      processMap.put("deductionsOrderLedger", new deductionsOrderLedger());
      processMap.put("updateWalletAmount", new updateWalletAmount());
      processMap.put("getSingleMentionAccount", new getSingleMentionAccount());
      return processMap;
    }

    public static class getWalletBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletBalance_args, Map<String,String>> {
      public getWalletBalance() {
        super("getWalletBalance");
      }

      public getWalletBalance_args getEmptyArgsInstance() {
        return new getWalletBalance_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getWalletBalance_result result = new getWalletBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletBalance_result result = new getWalletBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getWalletBalance(args.uId, args.typeId,resultHandler);
      }
    }

    public static class updateMentionLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMentionLedger_args, Integer> {
      public updateMentionLedger() {
        super("updateMentionLedger");
      }

      public updateMentionLedger_args getEmptyArgsInstance() {
        return new updateMentionLedger_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateMentionLedger_result result = new updateMentionLedger_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMentionLedger_result result = new updateMentionLedger_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMentionLedger_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateMentionLedger(args.typeId, args.typeValue, args.uId, args.amount, args.money,resultHandler);
      }
    }

    public static class getMentionLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionLedger_args, Map<String,String>> {
      public getMentionLedger() {
        super("getMentionLedger");
      }

      public getMentionLedger_args getEmptyArgsInstance() {
        return new getMentionLedger_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getMentionLedger_result result = new getMentionLedger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionLedger_result result = new getMentionLedger_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionLedger_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getMentionLedger(args.typeId, args.uId,resultHandler);
      }
    }

    public static class checkWalletPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkWalletPwd_args, Integer> {
      public checkWalletPwd() {
        super("checkWalletPwd");
      }

      public checkWalletPwd_args getEmptyArgsInstance() {
        return new checkWalletPwd_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkWalletPwd_result result = new checkWalletPwd_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkWalletPwd_result result = new checkWalletPwd_result();
            if (e instanceof FailureException) {
                        result.ge = (FailureException) e;
                        result.setGeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkWalletPwd_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkWalletPwd(args.uId, args.pwd, args.typeId,resultHandler);
      }
    }

    public static class updateWalletPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWalletPwd_args, Integer> {
      public updateWalletPwd() {
        super("updateWalletPwd");
      }

      public updateWalletPwd_args getEmptyArgsInstance() {
        return new updateWalletPwd_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateWalletPwd_result result = new updateWalletPwd_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWalletPwd_result result = new updateWalletPwd_result();
            if (e instanceof FailureException) {
                        result.ge = (FailureException) e;
                        result.setGeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWalletPwd_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateWalletPwd(args.uId, args.pwd, args.typeId,resultHandler);
      }
    }

    public static class addWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addWallet_args, Integer> {
      public addWallet() {
        super("addWallet");
      }

      public addWallet_args getEmptyArgsInstance() {
        return new addWallet_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addWallet_result result = new addWallet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addWallet_result result = new addWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addWallet_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addWallet(args.uId, args.userType, args.password, args.sellerName,resultHandler);
      }
    }

    public static class AddMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddMentionAccount_args, Integer> {
      public AddMentionAccount() {
        super("AddMentionAccount");
      }

      public AddMentionAccount_args getEmptyArgsInstance() {
        return new AddMentionAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            AddMentionAccount_result result = new AddMentionAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AddMentionAccount_result result = new AddMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.AddMentionAccount(args.isuse, args.uId, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.userType, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province, args.cityname,resultHandler);
      }
    }

    public static class getMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionAccount_args, List<Map<String,String>>> {
      public getMentionAccount() {
        super("getMentionAccount");
      }

      public getMentionAccount_args getEmptyArgsInstance() {
        return new getMentionAccount_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getMentionAccount_result result = new getMentionAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionAccount_result result = new getMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getMentionAccount(args.uId, args.userType,resultHandler);
      }
    }

    public static class updateMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMentionAccount_args, Integer> {
      public updateMentionAccount() {
        super("updateMentionAccount");
      }

      public updateMentionAccount_args getEmptyArgsInstance() {
        return new updateMentionAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateMentionAccount_result result = new updateMentionAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMentionAccount_result result = new updateMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateMentionAccount(args.id, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.isuse, args.cityname, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province,resultHandler);
      }
    }

    public static class delMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delMentionAccount_args, Integer> {
      public delMentionAccount() {
        super("delMentionAccount");
      }

      public delMentionAccount_args getEmptyArgsInstance() {
        return new delMentionAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delMentionAccount_result result = new delMentionAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delMentionAccount_result result = new delMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delMentionAccount(args.id,resultHandler);
      }
    }

    public static class checkWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkWallet_args, Integer> {
      public checkWallet() {
        super("checkWallet");
      }

      public checkWallet_args getEmptyArgsInstance() {
        return new checkWallet_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkWallet_result result = new checkWallet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkWallet_result result = new checkWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkWallet_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkWallet(args.uId, args.userType,resultHandler);
      }
    }

    public static class updateWalletBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWalletBalance_args, Integer> {
      public updateWalletBalance() {
        super("updateWalletBalance");
      }

      public updateWalletBalance_args getEmptyArgsInstance() {
        return new updateWalletBalance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateWalletBalance_result result = new updateWalletBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWalletBalance_result result = new updateWalletBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWalletBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateWalletBalance(args.walletMap,resultHandler);
      }
    }

    public static class updateWithdrawalsRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWithdrawalsRecord_args, Integer> {
      public updateWithdrawalsRecord() {
        super("updateWithdrawalsRecord");
      }

      public updateWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWithdrawalsRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateWithdrawalsRecord(args.amountMapList, args.orderMap,resultHandler);
      }
    }

    public static class updateJointWithdrawalsRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateJointWithdrawalsRecord_args, Integer> {
      public updateJointWithdrawalsRecord() {
        super("updateJointWithdrawalsRecord");
      }

      public updateJointWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateJointWithdrawalsRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateJointWithdrawalsRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateJointWithdrawalsRecord(args.amountMapList, args.orderMap,resultHandler);
      }
    }

    public static class getUpdatePwdNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUpdatePwdNum_args, Integer> {
      public getUpdatePwdNum() {
        super("getUpdatePwdNum");
      }

      public getUpdatePwdNum_args getEmptyArgsInstance() {
        return new getUpdatePwdNum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getUpdatePwdNum_result result = new getUpdatePwdNum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUpdatePwdNum_result result = new getUpdatePwdNum_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUpdatePwdNum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getUpdatePwdNum(args.uId, args.userType,resultHandler);
      }
    }

    public static class getWalletRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletRecord_args, WalletRecord> {
      public getWalletRecord() {
        super("getWalletRecord");
      }

      public getWalletRecord_args getEmptyArgsInstance() {
        return new getWalletRecord_args();
      }

      public AsyncMethodCallback<WalletRecord> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WalletRecord>() { 
          public void onComplete(WalletRecord o) {
            getWalletRecord_result result = new getWalletRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletRecord_result result = new getWalletRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletRecord_args args, org.apache.thrift.async.AsyncMethodCallback<WalletRecord> resultHandler) throws TException {
        iface.getWalletRecord(args.paramMap,resultHandler);
      }
    }

    public static class getMentionBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionBalance_args, Double> {
      public getMentionBalance() {
        super("getMentionBalance");
      }

      public getMentionBalance_args getEmptyArgsInstance() {
        return new getMentionBalance_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getMentionBalance_result result = new getMentionBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionBalance_result result = new getMentionBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getMentionBalance(args.uId, args.userType,resultHandler);
      }
    }

    public static class updateBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBalance_args, Map<String,String>> {
      public updateBalance() {
        super("updateBalance");
      }

      public updateBalance_args getEmptyArgsInstance() {
        return new updateBalance_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            updateBalance_result result = new updateBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBalance_result result = new updateBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.updateBalance(args.paramMap,resultHandler);
      }
    }

    public static class getWalletList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletList_args, Wallet> {
      public getWalletList() {
        super("getWalletList");
      }

      public getWalletList_args getEmptyArgsInstance() {
        return new getWalletList_args();
      }

      public AsyncMethodCallback<Wallet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Wallet>() { 
          public void onComplete(Wallet o) {
            getWalletList_result result = new getWalletList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletList_result result = new getWalletList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletList_args args, org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler) throws TException {
        iface.getWalletList(args.paramMap,resultHandler);
      }
    }

    public static class getWRAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWRAmount_args, Double> {
      public getWRAmount() {
        super("getWRAmount");
      }

      public getWRAmount_args getEmptyArgsInstance() {
        return new getWRAmount_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getWRAmount_result result = new getWRAmount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWRAmount_result result = new getWRAmount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWRAmount_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getWRAmount(args.uId, args.userType, args.rType,resultHandler);
      }
    }

    public static class getWalletCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletCount_args, Integer> {
      public getWalletCount() {
        super("getWalletCount");
      }

      public getWalletCount_args getEmptyArgsInstance() {
        return new getWalletCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getWalletCount_result result = new getWalletCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletCount_result result = new getWalletCount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getWalletCount(args.paramMap,resultHandler);
      }
    }

    public static class getWalletRecordCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletRecordCount_args, Integer> {
      public getWalletRecordCount() {
        super("getWalletRecordCount");
      }

      public getWalletRecordCount_args getEmptyArgsInstance() {
        return new getWalletRecordCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getWalletRecordCount_result result = new getWalletRecordCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletRecordCount_result result = new getWalletRecordCount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletRecordCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getWalletRecordCount(args.paramMap,resultHandler);
      }
    }

    public static class getMentionAccountList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionAccountList_args, MentionAccount> {
      public getMentionAccountList() {
        super("getMentionAccountList");
      }

      public getMentionAccountList_args getEmptyArgsInstance() {
        return new getMentionAccountList_args();
      }

      public AsyncMethodCallback<MentionAccount> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MentionAccount>() { 
          public void onComplete(MentionAccount o) {
            getMentionAccountList_result result = new getMentionAccountList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionAccountList_result result = new getMentionAccountList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionAccountList_args args, org.apache.thrift.async.AsyncMethodCallback<MentionAccount> resultHandler) throws TException {
        iface.getMentionAccountList(args.paramMap,resultHandler);
      }
    }

    public static class getUserMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserMoney_args, Map<String,String>> {
      public getUserMoney() {
        super("getUserMoney");
      }

      public getUserMoney_args getEmptyArgsInstance() {
        return new getUserMoney_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getUserMoney_result result = new getUserMoney_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserMoney_result result = new getUserMoney_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserMoney_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getUserMoney(args.ids, args.userType, args.moneyType,resultHandler);
      }
    }

    public static class getSellerWalletList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSellerWalletList_args, SellerWallet> {
      public getSellerWalletList() {
        super("getSellerWalletList");
      }

      public getSellerWalletList_args getEmptyArgsInstance() {
        return new getSellerWalletList_args();
      }

      public AsyncMethodCallback<SellerWallet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SellerWallet>() { 
          public void onComplete(SellerWallet o) {
            getSellerWalletList_result result = new getSellerWalletList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSellerWalletList_result result = new getSellerWalletList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSellerWalletList_args args, org.apache.thrift.async.AsyncMethodCallback<SellerWallet> resultHandler) throws TException {
        iface.getSellerWalletList(args.ids, args.moneyType,resultHandler);
      }
    }

    public static class mergeMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mergeMoney_args, Map<String,String>> {
      public mergeMoney() {
        super("mergeMoney");
      }

      public mergeMoney_args getEmptyArgsInstance() {
        return new mergeMoney_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            mergeMoney_result result = new mergeMoney_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mergeMoney_result result = new mergeMoney_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeMoney_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.mergeMoney(args.param,resultHandler);
      }
    }

    public static class getMentionAccounts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionAccounts_args, List<Map<String,String>>> {
      public getMentionAccounts() {
        super("getMentionAccounts");
      }

      public getMentionAccounts_args getEmptyArgsInstance() {
        return new getMentionAccounts_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getMentionAccounts_result result = new getMentionAccounts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionAccounts_result result = new getMentionAccounts_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionAccounts_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getMentionAccounts(args.param,resultHandler);
      }
    }

    public static class returnWithdrawals<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnWithdrawals_args, Map<String,String>> {
      public returnWithdrawals() {
        super("returnWithdrawals");
      }

      public returnWithdrawals_args getEmptyArgsInstance() {
        return new returnWithdrawals_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            returnWithdrawals_result result = new returnWithdrawals_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            returnWithdrawals_result result = new returnWithdrawals_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnWithdrawals_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.returnWithdrawals(args.param,resultHandler);
      }
    }

    public static class statisticsWithdrawalsMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statisticsWithdrawalsMoney_args, Map<String,String>> {
      public statisticsWithdrawalsMoney() {
        super("statisticsWithdrawalsMoney");
      }

      public statisticsWithdrawalsMoney_args getEmptyArgsInstance() {
        return new statisticsWithdrawalsMoney_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            statisticsWithdrawalsMoney_result result = new statisticsWithdrawalsMoney_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statisticsWithdrawalsMoney_result result = new statisticsWithdrawalsMoney_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statisticsWithdrawalsMoney_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.statisticsWithdrawalsMoney(args.param,resultHandler);
      }
    }

    public static class getJointIncome<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJointIncome_args, Map<String,String>> {
      public getJointIncome() {
        super("getJointIncome");
      }

      public getJointIncome_args getEmptyArgsInstance() {
        return new getJointIncome_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getJointIncome_result result = new getJointIncome_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getJointIncome_result result = new getJointIncome_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getJointIncome_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getJointIncome(args.param,resultHandler);
      }
    }

    public static class addWalletMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addWalletMap_args, Map<String,String>> {
      public addWalletMap() {
        super("addWalletMap");
      }

      public addWalletMap_args getEmptyArgsInstance() {
        return new addWalletMap_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            addWalletMap_result result = new addWalletMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addWalletMap_result result = new addWalletMap_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addWalletMap_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.addWalletMap(args.param,resultHandler);
      }
    }

    public static class getJointWithdrawalsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJointWithdrawalsList_args, JointWithdraw> {
      public getJointWithdrawalsList() {
        super("getJointWithdrawalsList");
      }

      public getJointWithdrawalsList_args getEmptyArgsInstance() {
        return new getJointWithdrawalsList_args();
      }

      public AsyncMethodCallback<JointWithdraw> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<JointWithdraw>() { 
          public void onComplete(JointWithdraw o) {
            getJointWithdrawalsList_result result = new getJointWithdrawalsList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getJointWithdrawalsList_result result = new getJointWithdrawalsList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getJointWithdrawalsList_args args, org.apache.thrift.async.AsyncMethodCallback<JointWithdraw> resultHandler) throws TException {
        iface.getJointWithdrawalsList(args.param,resultHandler);
      }
    }

    public static class getWalletListByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletListByDate_args, Wallet> {
      public getWalletListByDate() {
        super("getWalletListByDate");
      }

      public getWalletListByDate_args getEmptyArgsInstance() {
        return new getWalletListByDate_args();
      }

      public AsyncMethodCallback<Wallet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Wallet>() { 
          public void onComplete(Wallet o) {
            getWalletListByDate_result result = new getWalletListByDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletListByDate_result result = new getWalletListByDate_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletListByDate_args args, org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler) throws TException {
        iface.getWalletListByDate(args.paramMap,resultHandler);
      }
    }

    public static class modifyOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyOrder_args, Map<String,String>> {
      public modifyOrder() {
        super("modifyOrder");
      }

      public modifyOrder_args getEmptyArgsInstance() {
        return new modifyOrder_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            modifyOrder_result result = new modifyOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modifyOrder_result result = new modifyOrder_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.modifyOrder(args.formerMap, args.laterMap,resultHandler);
      }
    }

    public static class platformDeductions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, platformDeductions_args, Map<String,String>> {
      public platformDeductions() {
        super("platformDeductions");
      }

      public platformDeductions_args getEmptyArgsInstance() {
        return new platformDeductions_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            platformDeductions_result result = new platformDeductions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            platformDeductions_result result = new platformDeductions_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, platformDeductions_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.platformDeductions(args.param,resultHandler);
      }
    }

    public static class setWPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setWPwd_args, Map<String,String>> {
      public setWPwd() {
        super("setWPwd");
      }

      public setWPwd_args getEmptyArgsInstance() {
        return new setWPwd_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            setWPwd_result result = new setWPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setWPwd_result result = new setWPwd_result();
            if (e instanceof FailureException) {
                        result.ge = (FailureException) e;
                        result.setGeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setWPwd_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.setWPwd(args.uId, args.userType, args.password,resultHandler);
      }
    }

    public static class deductionsMentionLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deductionsMentionLedger_args, Map<String,String>> {
      public deductionsMentionLedger() {
        super("deductionsMentionLedger");
      }

      public deductionsMentionLedger_args getEmptyArgsInstance() {
        return new deductionsMentionLedger_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            deductionsMentionLedger_result result = new deductionsMentionLedger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deductionsMentionLedger_result result = new deductionsMentionLedger_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deductionsMentionLedger_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.deductionsMentionLedger(args.param,resultHandler);
      }
    }

    public static class setLockWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setLockWallet_args, Map<String,String>> {
      public setLockWallet() {
        super("setLockWallet");
      }

      public setLockWallet_args getEmptyArgsInstance() {
        return new setLockWallet_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            setLockWallet_result result = new setLockWallet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setLockWallet_result result = new setLockWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setLockWallet_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.setLockWallet(args.paramMap,resultHandler);
      }
    }

    public static class recoveryFailOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recoveryFailOrder_args, Map<String,String>> {
      public recoveryFailOrder() {
        super("recoveryFailOrder");
      }

      public recoveryFailOrder_args getEmptyArgsInstance() {
        return new recoveryFailOrder_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            recoveryFailOrder_result result = new recoveryFailOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recoveryFailOrder_result result = new recoveryFailOrder_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recoveryFailOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.recoveryFailOrder(args.paramMap,resultHandler);
      }
    }

    public static class getSellerStatisticsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSellerStatisticsList_args, SellerStatistics> {
      public getSellerStatisticsList() {
        super("getSellerStatisticsList");
      }

      public getSellerStatisticsList_args getEmptyArgsInstance() {
        return new getSellerStatisticsList_args();
      }

      public AsyncMethodCallback<SellerStatistics> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SellerStatistics>() { 
          public void onComplete(SellerStatistics o) {
            getSellerStatisticsList_result result = new getSellerStatisticsList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSellerStatisticsList_result result = new getSellerStatisticsList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSellerStatisticsList_args args, org.apache.thrift.async.AsyncMethodCallback<SellerStatistics> resultHandler) throws TException {
        iface.getSellerStatisticsList(args.paramMap,resultHandler);
      }
    }

    public static class getSellerDetailList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSellerDetailList_args, SellerStatistics> {
      public getSellerDetailList() {
        super("getSellerDetailList");
      }

      public getSellerDetailList_args getEmptyArgsInstance() {
        return new getSellerDetailList_args();
      }

      public AsyncMethodCallback<SellerStatistics> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SellerStatistics>() { 
          public void onComplete(SellerStatistics o) {
            getSellerDetailList_result result = new getSellerDetailList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSellerDetailList_result result = new getSellerDetailList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSellerDetailList_args args, org.apache.thrift.async.AsyncMethodCallback<SellerStatistics> resultHandler) throws TException {
        iface.getSellerDetailList(args.paramMap,resultHandler);
      }
    }

    public static class getSellerMonthlyStatistics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSellerMonthlyStatistics_args, Map<String,String>> {
      public getSellerMonthlyStatistics() {
        super("getSellerMonthlyStatistics");
      }

      public getSellerMonthlyStatistics_args getEmptyArgsInstance() {
        return new getSellerMonthlyStatistics_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getSellerMonthlyStatistics_result result = new getSellerMonthlyStatistics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSellerMonthlyStatistics_result result = new getSellerMonthlyStatistics_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSellerMonthlyStatistics_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getSellerMonthlyStatistics(args.paramMap,resultHandler);
      }
    }

    public static class xmerTransferDeposit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, xmerTransferDeposit_args, Map<String,String>> {
      public xmerTransferDeposit() {
        super("xmerTransferDeposit");
      }

      public xmerTransferDeposit_args getEmptyArgsInstance() {
        return new xmerTransferDeposit_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            xmerTransferDeposit_result result = new xmerTransferDeposit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            xmerTransferDeposit_result result = new xmerTransferDeposit_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, xmerTransferDeposit_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.xmerTransferDeposit(args.paramMap,resultHandler);
      }
    }

    public static class xmerReturnDeposit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, xmerReturnDeposit_args, Map<String,String>> {
      public xmerReturnDeposit() {
        super("xmerReturnDeposit");
      }

      public xmerReturnDeposit_args getEmptyArgsInstance() {
        return new xmerReturnDeposit_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            xmerReturnDeposit_result result = new xmerReturnDeposit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            xmerReturnDeposit_result result = new xmerReturnDeposit_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, xmerReturnDeposit_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.xmerReturnDeposit(args.paramMap,resultHandler);
      }
    }

    public static class deductionsOrderLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deductionsOrderLedger_args, Map<String,String>> {
      public deductionsOrderLedger() {
        super("deductionsOrderLedger");
      }

      public deductionsOrderLedger_args getEmptyArgsInstance() {
        return new deductionsOrderLedger_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            deductionsOrderLedger_result result = new deductionsOrderLedger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deductionsOrderLedger_result result = new deductionsOrderLedger_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deductionsOrderLedger_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.deductionsOrderLedger(args.param,resultHandler);
      }
    }

    public static class updateWalletAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWalletAmount_args, Map<String,String>> {
      public updateWalletAmount() {
        super("updateWalletAmount");
      }

      public updateWalletAmount_args getEmptyArgsInstance() {
        return new updateWalletAmount_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            updateWalletAmount_result result = new updateWalletAmount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWalletAmount_result result = new updateWalletAmount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWalletAmount_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.updateWalletAmount(args.param,resultHandler);
      }
    }

    public static class getSingleMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSingleMentionAccount_args, Map<String,String>> {
      public getSingleMentionAccount() {
        super("getSingleMentionAccount");
      }

      public getSingleMentionAccount_args getEmptyArgsInstance() {
        return new getSingleMentionAccount_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getSingleMentionAccount_result result = new getSingleMentionAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSingleMentionAccount_result result = new getSingleMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSingleMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getSingleMentionAccount(args.param,resultHandler);
      }
    }

  }

  public static class getWalletBalance_args implements org.apache.thrift.TBase<getWalletBalance_args, getWalletBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletBalance_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletBalance_argsTupleSchemeFactory());
    }

    public String uId; // required
    public int typeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      TYPE_ID((short)2, "typeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // TYPE_ID
            return TYPE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletBalance_args.class, metaDataMap);
    }

    public getWalletBalance_args() {
    }

    public getWalletBalance_args(
      String uId,
      int typeId)
    {
      this();
      this.uId = uId;
      this.typeId = typeId;
      setTypeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletBalance_args(getWalletBalance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      this.typeId = other.typeId;
    }

    public getWalletBalance_args deepCopy() {
      return new getWalletBalance_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      setTypeIdIsSet(false);
      this.typeId = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public getWalletBalance_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public int getTypeId() {
      return this.typeId;
    }

    public getWalletBalance_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case TYPE_ID:
        return isSetTypeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletBalance_args)
        return this.equals((getWalletBalance_args)that);
      return false;
    }

    public boolean equals(getWalletBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletBalance_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletBalance_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletBalance_argsStandardScheme getScheme() {
        return new getWalletBalance_argsStandardScheme();
      }
    }

    private static class getWalletBalance_argsStandardScheme extends StandardScheme<getWalletBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletBalance_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletBalance_argsTupleScheme getScheme() {
        return new getWalletBalance_argsTupleScheme();
      }
    }

    private static class getWalletBalance_argsTupleScheme extends TupleScheme<getWalletBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetTypeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
      }
    }

  }

  public static class getWalletBalance_result implements org.apache.thrift.TBase<getWalletBalance_result, getWalletBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletBalance_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletBalance_result.class, metaDataMap);
    }

    public getWalletBalance_result() {
    }

    public getWalletBalance_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletBalance_result(getWalletBalance_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletBalance_result deepCopy() {
      return new getWalletBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getWalletBalance_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletBalance_result)
        return this.equals((getWalletBalance_result)that);
      return false;
    }

    public boolean equals(getWalletBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletBalance_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletBalance_resultStandardScheme getScheme() {
        return new getWalletBalance_resultStandardScheme();
      }
    }

    private static class getWalletBalance_resultStandardScheme extends StandardScheme<getWalletBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map108.size);
                  for (int _i109 = 0; _i109 < _map108.size; ++_i109)
                  {
                    String _key110;
                    String _val111;
                    _key110 = iprot.readString();
                    _val111 = iprot.readString();
                    struct.success.put(_key110, _val111);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter112 : struct.success.entrySet())
            {
              oprot.writeString(_iter112.getKey());
              oprot.writeString(_iter112.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletBalance_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletBalance_resultTupleScheme getScheme() {
        return new getWalletBalance_resultTupleScheme();
      }
    }

    private static class getWalletBalance_resultTupleScheme extends TupleScheme<getWalletBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter113 : struct.success.entrySet())
            {
              oprot.writeString(_iter113.getKey());
              oprot.writeString(_iter113.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map114 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map114.size);
            for (int _i115 = 0; _i115 < _map114.size; ++_i115)
            {
              String _key116;
              String _val117;
              _key116 = iprot.readString();
              _val117 = iprot.readString();
              struct.success.put(_key116, _val117);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateMentionLedger_args implements org.apache.thrift.TBase<updateMentionLedger_args, updateMentionLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionLedger_args");

    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("typeValue", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionLedger_argsTupleSchemeFactory());
    }

    public int typeId; // required
    public int typeValue; // required
    public String uId; // required
    public String amount; // required
    public String money; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE_ID((short)1, "typeId"),
      TYPE_VALUE((short)2, "typeValue"),
      U_ID((short)3, "uId"),
      AMOUNT((short)4, "amount"),
      MONEY((short)5, "money");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE_ID
            return TYPE_ID;
          case 2: // TYPE_VALUE
            return TYPE_VALUE;
          case 3: // U_ID
            return U_ID;
          case 4: // AMOUNT
            return AMOUNT;
          case 5: // MONEY
            return MONEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private static final int __TYPEVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("typeValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionLedger_args.class, metaDataMap);
    }

    public updateMentionLedger_args() {
    }

    public updateMentionLedger_args(
      int typeId,
      int typeValue,
      String uId,
      String amount,
      String money)
    {
      this();
      this.typeId = typeId;
      setTypeIdIsSet(true);
      this.typeValue = typeValue;
      setTypeValueIsSet(true);
      this.uId = uId;
      this.amount = amount;
      this.money = money;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionLedger_args(updateMentionLedger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.typeId = other.typeId;
      this.typeValue = other.typeValue;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetAmount()) {
        this.amount = other.amount;
      }
      if (other.isSetMoney()) {
        this.money = other.money;
      }
    }

    public updateMentionLedger_args deepCopy() {
      return new updateMentionLedger_args(this);
    }

    @Override
    public void clear() {
      setTypeIdIsSet(false);
      this.typeId = 0;
      setTypeValueIsSet(false);
      this.typeValue = 0;
      this.uId = null;
      this.amount = null;
      this.money = null;
    }

    public int getTypeId() {
      return this.typeId;
    }

    public updateMentionLedger_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public int getTypeValue() {
      return this.typeValue;
    }

    public updateMentionLedger_args setTypeValue(int typeValue) {
      this.typeValue = typeValue;
      setTypeValueIsSet(true);
      return this;
    }

    public void unsetTypeValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEVALUE_ISSET_ID);
    }

    /** Returns true if field typeValue is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeValue() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEVALUE_ISSET_ID);
    }

    public void setTypeValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEVALUE_ISSET_ID, value);
    }

    public String getUId() {
      return this.uId;
    }

    public updateMentionLedger_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getAmount() {
      return this.amount;
    }

    public updateMentionLedger_args setAmount(String amount) {
      this.amount = amount;
      return this;
    }

    public void unsetAmount() {
      this.amount = null;
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return this.amount != null;
    }

    public void setAmountIsSet(boolean value) {
      if (!value) {
        this.amount = null;
      }
    }

    public String getMoney() {
      return this.money;
    }

    public updateMentionLedger_args setMoney(String money) {
      this.money = money;
      return this;
    }

    public void unsetMoney() {
      this.money = null;
    }

    /** Returns true if field money is set (has been assigned a value) and false otherwise */
    public boolean isSetMoney() {
      return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
      if (!value) {
        this.money = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      case TYPE_VALUE:
        if (value == null) {
          unsetTypeValue();
        } else {
          setTypeValue((Integer)value);
        }
        break;

      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((String)value);
        }
        break;

      case MONEY:
        if (value == null) {
          unsetMoney();
        } else {
          setMoney((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      case TYPE_VALUE:
        return Integer.valueOf(getTypeValue());

      case U_ID:
        return getUId();

      case AMOUNT:
        return getAmount();

      case MONEY:
        return getMoney();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE_ID:
        return isSetTypeId();
      case TYPE_VALUE:
        return isSetTypeValue();
      case U_ID:
        return isSetUId();
      case AMOUNT:
        return isSetAmount();
      case MONEY:
        return isSetMoney();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionLedger_args)
        return this.equals((updateMentionLedger_args)that);
      return false;
    }

    public boolean equals(updateMentionLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      boolean this_present_typeValue = true;
      boolean that_present_typeValue = true;
      if (this_present_typeValue || that_present_typeValue) {
        if (!(this_present_typeValue && that_present_typeValue))
          return false;
        if (this.typeValue != that.typeValue)
          return false;
      }

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_amount = true && this.isSetAmount();
      boolean that_present_amount = true && that.isSetAmount();
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (!this.amount.equals(that.amount))
          return false;
      }

      boolean this_present_money = true && this.isSetMoney();
      boolean that_present_money = true && that.isSetMoney();
      if (this_present_money || that_present_money) {
        if (!(this_present_money && that_present_money))
          return false;
        if (!this.money.equals(that.money))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeValue()).compareTo(other.isSetTypeValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeValue, other.typeValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionLedger_args(");
      boolean first = true;

      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeValue:");
      sb.append(this.typeValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      if (this.amount == null) {
        sb.append("null");
      } else {
        sb.append(this.amount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("money:");
      if (this.money == null) {
        sb.append("null");
      } else {
        sb.append(this.money);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionLedger_argsStandardSchemeFactory implements SchemeFactory {
      public updateMentionLedger_argsStandardScheme getScheme() {
        return new updateMentionLedger_argsStandardScheme();
      }
    }

    private static class updateMentionLedger_argsStandardScheme extends StandardScheme<updateMentionLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeValue = iprot.readI32();
                struct.setTypeValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.amount = iprot.readString();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.money = iprot.readString();
                struct.setMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.typeValue);
        oprot.writeFieldEnd();
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.amount != null) {
          oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
          oprot.writeString(struct.amount);
          oprot.writeFieldEnd();
        }
        if (struct.money != null) {
          oprot.writeFieldBegin(MONEY_FIELD_DESC);
          oprot.writeString(struct.money);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionLedger_argsTupleSchemeFactory implements SchemeFactory {
      public updateMentionLedger_argsTupleScheme getScheme() {
        return new updateMentionLedger_argsTupleScheme();
      }
    }

    private static class updateMentionLedger_argsTupleScheme extends TupleScheme<updateMentionLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTypeId()) {
          optionals.set(0);
        }
        if (struct.isSetTypeValue()) {
          optionals.set(1);
        }
        if (struct.isSetUId()) {
          optionals.set(2);
        }
        if (struct.isSetAmount()) {
          optionals.set(3);
        }
        if (struct.isSetMoney()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
        if (struct.isSetTypeValue()) {
          oprot.writeI32(struct.typeValue);
        }
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetAmount()) {
          oprot.writeString(struct.amount);
        }
        if (struct.isSetMoney()) {
          oprot.writeString(struct.money);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeValue = iprot.readI32();
          struct.setTypeValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.amount = iprot.readString();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.money = iprot.readString();
          struct.setMoneyIsSet(true);
        }
      }
    }

  }

  public static class updateMentionLedger_result implements org.apache.thrift.TBase<updateMentionLedger_result, updateMentionLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionLedger_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionLedger_result.class, metaDataMap);
    }

    public updateMentionLedger_result() {
    }

    public updateMentionLedger_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionLedger_result(updateMentionLedger_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateMentionLedger_result deepCopy() {
      return new updateMentionLedger_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateMentionLedger_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateMentionLedger_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionLedger_result)
        return this.equals((updateMentionLedger_result)that);
      return false;
    }

    public boolean equals(updateMentionLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionLedger_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionLedger_resultStandardSchemeFactory implements SchemeFactory {
      public updateMentionLedger_resultStandardScheme getScheme() {
        return new updateMentionLedger_resultStandardScheme();
      }
    }

    private static class updateMentionLedger_resultStandardScheme extends StandardScheme<updateMentionLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionLedger_resultTupleSchemeFactory implements SchemeFactory {
      public updateMentionLedger_resultTupleScheme getScheme() {
        return new updateMentionLedger_resultTupleScheme();
      }
    }

    private static class updateMentionLedger_resultTupleScheme extends TupleScheme<updateMentionLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionLedger_args implements org.apache.thrift.TBase<getMentionLedger_args, getMentionLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionLedger_args");

    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionLedger_argsTupleSchemeFactory());
    }

    public int typeId; // required
    public String uId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE_ID((short)1, "typeId"),
      U_ID((short)2, "uId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE_ID
            return TYPE_ID;
          case 2: // U_ID
            return U_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionLedger_args.class, metaDataMap);
    }

    public getMentionLedger_args() {
    }

    public getMentionLedger_args(
      int typeId,
      String uId)
    {
      this();
      this.typeId = typeId;
      setTypeIdIsSet(true);
      this.uId = uId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionLedger_args(getMentionLedger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.typeId = other.typeId;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
    }

    public getMentionLedger_args deepCopy() {
      return new getMentionLedger_args(this);
    }

    @Override
    public void clear() {
      setTypeIdIsSet(false);
      this.typeId = 0;
      this.uId = null;
    }

    public int getTypeId() {
      return this.typeId;
    }

    public getMentionLedger_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public String getUId() {
      return this.uId;
    }

    public getMentionLedger_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      case U_ID:
        return getUId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE_ID:
        return isSetTypeId();
      case U_ID:
        return isSetUId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionLedger_args)
        return this.equals((getMentionLedger_args)that);
      return false;
    }

    public boolean equals(getMentionLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionLedger_args(");
      boolean first = true;

      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionLedger_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionLedger_argsStandardScheme getScheme() {
        return new getMentionLedger_argsStandardScheme();
      }
    }

    private static class getMentionLedger_argsStandardScheme extends StandardScheme<getMentionLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionLedger_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionLedger_argsTupleScheme getScheme() {
        return new getMentionLedger_argsTupleScheme();
      }
    }

    private static class getMentionLedger_argsTupleScheme extends TupleScheme<getMentionLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTypeId()) {
          optionals.set(0);
        }
        if (struct.isSetUId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
      }
    }

  }

  public static class getMentionLedger_result implements org.apache.thrift.TBase<getMentionLedger_result, getMentionLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionLedger_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionLedger_result.class, metaDataMap);
    }

    public getMentionLedger_result() {
    }

    public getMentionLedger_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionLedger_result(getMentionLedger_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionLedger_result deepCopy() {
      return new getMentionLedger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getMentionLedger_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionLedger_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionLedger_result)
        return this.equals((getMentionLedger_result)that);
      return false;
    }

    public boolean equals(getMentionLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionLedger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionLedger_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionLedger_resultStandardScheme getScheme() {
        return new getMentionLedger_resultStandardScheme();
      }
    }

    private static class getMentionLedger_resultStandardScheme extends StandardScheme<getMentionLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map118 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map118.size);
                  for (int _i119 = 0; _i119 < _map118.size; ++_i119)
                  {
                    String _key120;
                    String _val121;
                    _key120 = iprot.readString();
                    _val121 = iprot.readString();
                    struct.success.put(_key120, _val121);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter122 : struct.success.entrySet())
            {
              oprot.writeString(_iter122.getKey());
              oprot.writeString(_iter122.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionLedger_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionLedger_resultTupleScheme getScheme() {
        return new getMentionLedger_resultTupleScheme();
      }
    }

    private static class getMentionLedger_resultTupleScheme extends TupleScheme<getMentionLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter123 : struct.success.entrySet())
            {
              oprot.writeString(_iter123.getKey());
              oprot.writeString(_iter123.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map124.size);
            for (int _i125 = 0; _i125 < _map124.size; ++_i125)
            {
              String _key126;
              String _val127;
              _key126 = iprot.readString();
              _val127 = iprot.readString();
              struct.success.put(_key126, _val127);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class checkWalletPwd_args implements org.apache.thrift.TBase<checkWalletPwd_args, checkWalletPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkWalletPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWalletPwd_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWalletPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWalletPwd_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String pwd; // required
    public int typeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      PWD((short)2, "pwd"),
      TYPE_ID((short)3, "typeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // PWD
            return PWD;
          case 3: // TYPE_ID
            return TYPE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWalletPwd_args.class, metaDataMap);
    }

    public checkWalletPwd_args() {
    }

    public checkWalletPwd_args(
      String uId,
      String pwd,
      int typeId)
    {
      this();
      this.uId = uId;
      this.pwd = pwd;
      this.typeId = typeId;
      setTypeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWalletPwd_args(checkWalletPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      this.typeId = other.typeId;
    }

    public checkWalletPwd_args deepCopy() {
      return new checkWalletPwd_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.pwd = null;
      setTypeIdIsSet(false);
      this.typeId = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public checkWalletPwd_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public checkWalletPwd_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public int getTypeId() {
      return this.typeId;
    }

    public checkWalletPwd_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case PWD:
        return getPwd();

      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case PWD:
        return isSetPwd();
      case TYPE_ID:
        return isSetTypeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWalletPwd_args)
        return this.equals((checkWalletPwd_args)that);
      return false;
    }

    public boolean equals(checkWalletPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWalletPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWalletPwd_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWalletPwd_argsStandardSchemeFactory implements SchemeFactory {
      public checkWalletPwd_argsStandardScheme getScheme() {
        return new checkWalletPwd_argsStandardScheme();
      }
    }

    private static class checkWalletPwd_argsStandardScheme extends StandardScheme<checkWalletPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWalletPwd_argsTupleSchemeFactory implements SchemeFactory {
      public checkWalletPwd_argsTupleScheme getScheme() {
        return new checkWalletPwd_argsTupleScheme();
      }
    }

    private static class checkWalletPwd_argsTupleScheme extends TupleScheme<checkWalletPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        if (struct.isSetTypeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
      }
    }

  }

  public static class checkWalletPwd_result implements org.apache.thrift.TBase<checkWalletPwd_result, checkWalletPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkWalletPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWalletPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField GE_FIELD_DESC = new org.apache.thrift.protocol.TField("ge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWalletPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWalletPwd_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException ge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GE((short)1, "ge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GE
            return GE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GE, new org.apache.thrift.meta_data.FieldMetaData("ge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWalletPwd_result.class, metaDataMap);
    }

    public checkWalletPwd_result() {
    }

    public checkWalletPwd_result(
      int success,
      FailureException ge)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ge = ge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWalletPwd_result(checkWalletPwd_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGe()) {
        this.ge = new FailureException(other.ge);
      }
    }

    public checkWalletPwd_result deepCopy() {
      return new checkWalletPwd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ge = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkWalletPwd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getGe() {
      return this.ge;
    }

    public checkWalletPwd_result setGe(FailureException ge) {
      this.ge = ge;
      return this;
    }

    public void unsetGe() {
      this.ge = null;
    }

    /** Returns true if field ge is set (has been assigned a value) and false otherwise */
    public boolean isSetGe() {
      return this.ge != null;
    }

    public void setGeIsSet(boolean value) {
      if (!value) {
        this.ge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case GE:
        if (value == null) {
          unsetGe();
        } else {
          setGe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case GE:
        return getGe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GE:
        return isSetGe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWalletPwd_result)
        return this.equals((checkWalletPwd_result)that);
      return false;
    }

    public boolean equals(checkWalletPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ge = true && this.isSetGe();
      boolean that_present_ge = true && that.isSetGe();
      if (this_present_ge || that_present_ge) {
        if (!(this_present_ge && that_present_ge))
          return false;
        if (!this.ge.equals(that.ge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWalletPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGe()).compareTo(other.isSetGe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ge, other.ge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWalletPwd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ge:");
      if (this.ge == null) {
        sb.append("null");
      } else {
        sb.append(this.ge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWalletPwd_resultStandardSchemeFactory implements SchemeFactory {
      public checkWalletPwd_resultStandardScheme getScheme() {
        return new checkWalletPwd_resultStandardScheme();
      }
    }

    private static class checkWalletPwd_resultStandardScheme extends StandardScheme<checkWalletPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ge = new FailureException();
                struct.ge.read(iprot);
                struct.setGeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ge != null) {
          oprot.writeFieldBegin(GE_FIELD_DESC);
          struct.ge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWalletPwd_resultTupleSchemeFactory implements SchemeFactory {
      public checkWalletPwd_resultTupleScheme getScheme() {
        return new checkWalletPwd_resultTupleScheme();
      }
    }

    private static class checkWalletPwd_resultTupleScheme extends TupleScheme<checkWalletPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetGe()) {
          struct.ge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ge = new FailureException();
          struct.ge.read(iprot);
          struct.setGeIsSet(true);
        }
      }
    }

  }

  public static class updateWalletPwd_args implements org.apache.thrift.TBase<updateWalletPwd_args, updateWalletPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletPwd_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletPwd_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String pwd; // required
    public int typeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      PWD((short)2, "pwd"),
      TYPE_ID((short)3, "typeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // PWD
            return PWD;
          case 3: // TYPE_ID
            return TYPE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletPwd_args.class, metaDataMap);
    }

    public updateWalletPwd_args() {
    }

    public updateWalletPwd_args(
      String uId,
      String pwd,
      int typeId)
    {
      this();
      this.uId = uId;
      this.pwd = pwd;
      this.typeId = typeId;
      setTypeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletPwd_args(updateWalletPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      this.typeId = other.typeId;
    }

    public updateWalletPwd_args deepCopy() {
      return new updateWalletPwd_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.pwd = null;
      setTypeIdIsSet(false);
      this.typeId = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public updateWalletPwd_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public updateWalletPwd_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public int getTypeId() {
      return this.typeId;
    }

    public updateWalletPwd_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case PWD:
        return getPwd();

      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case PWD:
        return isSetPwd();
      case TYPE_ID:
        return isSetTypeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletPwd_args)
        return this.equals((updateWalletPwd_args)that);
      return false;
    }

    public boolean equals(updateWalletPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletPwd_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletPwd_argsStandardSchemeFactory implements SchemeFactory {
      public updateWalletPwd_argsStandardScheme getScheme() {
        return new updateWalletPwd_argsStandardScheme();
      }
    }

    private static class updateWalletPwd_argsStandardScheme extends StandardScheme<updateWalletPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletPwd_argsTupleSchemeFactory implements SchemeFactory {
      public updateWalletPwd_argsTupleScheme getScheme() {
        return new updateWalletPwd_argsTupleScheme();
      }
    }

    private static class updateWalletPwd_argsTupleScheme extends TupleScheme<updateWalletPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        if (struct.isSetTypeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
      }
    }

  }

  public static class updateWalletPwd_result implements org.apache.thrift.TBase<updateWalletPwd_result, updateWalletPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField GE_FIELD_DESC = new org.apache.thrift.protocol.TField("ge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletPwd_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException ge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GE((short)1, "ge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GE
            return GE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GE, new org.apache.thrift.meta_data.FieldMetaData("ge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletPwd_result.class, metaDataMap);
    }

    public updateWalletPwd_result() {
    }

    public updateWalletPwd_result(
      int success,
      FailureException ge)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ge = ge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletPwd_result(updateWalletPwd_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGe()) {
        this.ge = new FailureException(other.ge);
      }
    }

    public updateWalletPwd_result deepCopy() {
      return new updateWalletPwd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ge = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateWalletPwd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getGe() {
      return this.ge;
    }

    public updateWalletPwd_result setGe(FailureException ge) {
      this.ge = ge;
      return this;
    }

    public void unsetGe() {
      this.ge = null;
    }

    /** Returns true if field ge is set (has been assigned a value) and false otherwise */
    public boolean isSetGe() {
      return this.ge != null;
    }

    public void setGeIsSet(boolean value) {
      if (!value) {
        this.ge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case GE:
        if (value == null) {
          unsetGe();
        } else {
          setGe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case GE:
        return getGe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GE:
        return isSetGe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletPwd_result)
        return this.equals((updateWalletPwd_result)that);
      return false;
    }

    public boolean equals(updateWalletPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ge = true && this.isSetGe();
      boolean that_present_ge = true && that.isSetGe();
      if (this_present_ge || that_present_ge) {
        if (!(this_present_ge && that_present_ge))
          return false;
        if (!this.ge.equals(that.ge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGe()).compareTo(other.isSetGe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ge, other.ge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletPwd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ge:");
      if (this.ge == null) {
        sb.append("null");
      } else {
        sb.append(this.ge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletPwd_resultStandardSchemeFactory implements SchemeFactory {
      public updateWalletPwd_resultStandardScheme getScheme() {
        return new updateWalletPwd_resultStandardScheme();
      }
    }

    private static class updateWalletPwd_resultStandardScheme extends StandardScheme<updateWalletPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ge = new FailureException();
                struct.ge.read(iprot);
                struct.setGeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ge != null) {
          oprot.writeFieldBegin(GE_FIELD_DESC);
          struct.ge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletPwd_resultTupleSchemeFactory implements SchemeFactory {
      public updateWalletPwd_resultTupleScheme getScheme() {
        return new updateWalletPwd_resultTupleScheme();
      }
    }

    private static class updateWalletPwd_resultTupleScheme extends TupleScheme<updateWalletPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetGe()) {
          struct.ge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ge = new FailureException();
          struct.ge.read(iprot);
          struct.setGeIsSet(true);
        }
      }
    }

  }

  public static class addWallet_args implements org.apache.thrift.TBase<addWallet_args, addWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<addWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWallet_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addWallet_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required
    public String password; // required
    public String sellerName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType"),
      PASSWORD((short)3, "password"),
      SELLER_NAME((short)4, "sellerName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // SELLER_NAME
            return SELLER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWallet_args.class, metaDataMap);
    }

    public addWallet_args() {
    }

    public addWallet_args(
      String uId,
      String userType,
      String password,
      String sellerName)
    {
      this();
      this.uId = uId;
      this.userType = userType;
      this.password = password;
      this.sellerName = sellerName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWallet_args(addWallet_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetSellerName()) {
        this.sellerName = other.sellerName;
      }
    }

    public addWallet_args deepCopy() {
      return new addWallet_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
      this.password = null;
      this.sellerName = null;
    }

    public String getUId() {
      return this.uId;
    }

    public addWallet_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public addWallet_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public addWallet_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getSellerName() {
      return this.sellerName;
    }

    public addWallet_args setSellerName(String sellerName) {
      this.sellerName = sellerName;
      return this;
    }

    public void unsetSellerName() {
      this.sellerName = null;
    }

    /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
    public boolean isSetSellerName() {
      return this.sellerName != null;
    }

    public void setSellerNameIsSet(boolean value) {
      if (!value) {
        this.sellerName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case SELLER_NAME:
        if (value == null) {
          unsetSellerName();
        } else {
          setSellerName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      case PASSWORD:
        return getPassword();

      case SELLER_NAME:
        return getSellerName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      case PASSWORD:
        return isSetPassword();
      case SELLER_NAME:
        return isSetSellerName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWallet_args)
        return this.equals((addWallet_args)that);
      return false;
    }

    public boolean equals(addWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_sellerName = true && this.isSetSellerName();
      boolean that_present_sellerName = true && that.isSetSellerName();
      if (this_present_sellerName || that_present_sellerName) {
        if (!(this_present_sellerName && that_present_sellerName))
          return false;
        if (!this.sellerName.equals(that.sellerName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSellerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWallet_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sellerName:");
      if (this.sellerName == null) {
        sb.append("null");
      } else {
        sb.append(this.sellerName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addWallet_argsStandardSchemeFactory implements SchemeFactory {
      public addWallet_argsStandardScheme getScheme() {
        return new addWallet_argsStandardScheme();
      }
    }

    private static class addWallet_argsStandardScheme extends StandardScheme<addWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SELLER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sellerName = iprot.readString();
                struct.setSellerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.sellerName != null) {
          oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
          oprot.writeString(struct.sellerName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addWallet_argsTupleSchemeFactory implements SchemeFactory {
      public addWallet_argsTupleScheme getScheme() {
        return new addWallet_argsTupleScheme();
      }
    }

    private static class addWallet_argsTupleScheme extends TupleScheme<addWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetSellerName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetSellerName()) {
          oprot.writeString(struct.sellerName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sellerName = iprot.readString();
          struct.setSellerNameIsSet(true);
        }
      }
    }

  }

  public static class addWallet_result implements org.apache.thrift.TBase<addWallet_result, addWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<addWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addWallet_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWallet_result.class, metaDataMap);
    }

    public addWallet_result() {
    }

    public addWallet_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWallet_result(addWallet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public addWallet_result deepCopy() {
      return new addWallet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addWallet_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public addWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWallet_result)
        return this.equals((addWallet_result)that);
      return false;
    }

    public boolean equals(addWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWallet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addWallet_resultStandardSchemeFactory implements SchemeFactory {
      public addWallet_resultStandardScheme getScheme() {
        return new addWallet_resultStandardScheme();
      }
    }

    private static class addWallet_resultStandardScheme extends StandardScheme<addWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addWallet_resultTupleSchemeFactory implements SchemeFactory {
      public addWallet_resultTupleScheme getScheme() {
        return new addWallet_resultTupleScheme();
      }
    }

    private static class addWallet_resultTupleScheme extends TupleScheme<addWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class AddMentionAccount_args implements org.apache.thrift.TBase<AddMentionAccount_args, AddMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMentionAccount_args");

    private static final org.apache.thrift.protocol.TField ISUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("isuse", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField MOBILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileId", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField ISPUBLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("ispublic", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField IDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idtype", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("bank", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField ABBREV_FIELD_DESC = new org.apache.thrift.protocol.TField("abbrev", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)15);
    private static final org.apache.thrift.protocol.TField CITYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityname", org.apache.thrift.protocol.TType.STRING, (short)16);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMentionAccount_argsTupleSchemeFactory());
    }

    public int isuse; // required
    public String uId; // required
    public int type; // required
    public String account; // required
    public int cardType; // required
    public String userName; // required
    public String bankName; // required
    public String mobileId; // required
    public int userType; // required
    public int ispublic; // required
    public int idtype; // required
    public String identity; // required
    public String bank; // required
    public String abbrev; // required
    public String province; // required
    public String cityname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ISUSE((short)1, "isuse"),
      U_ID((short)2, "uId"),
      TYPE((short)3, "type"),
      ACCOUNT((short)4, "account"),
      CARD_TYPE((short)5, "cardType"),
      USER_NAME((short)6, "userName"),
      BANK_NAME((short)7, "bankName"),
      MOBILE_ID((short)8, "mobileId"),
      USER_TYPE((short)9, "userType"),
      ISPUBLIC((short)10, "ispublic"),
      IDTYPE((short)11, "idtype"),
      IDENTITY((short)12, "identity"),
      BANK((short)13, "bank"),
      ABBREV((short)14, "abbrev"),
      PROVINCE((short)15, "province"),
      CITYNAME((short)16, "cityname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ISUSE
            return ISUSE;
          case 2: // U_ID
            return U_ID;
          case 3: // TYPE
            return TYPE;
          case 4: // ACCOUNT
            return ACCOUNT;
          case 5: // CARD_TYPE
            return CARD_TYPE;
          case 6: // USER_NAME
            return USER_NAME;
          case 7: // BANK_NAME
            return BANK_NAME;
          case 8: // MOBILE_ID
            return MOBILE_ID;
          case 9: // USER_TYPE
            return USER_TYPE;
          case 10: // ISPUBLIC
            return ISPUBLIC;
          case 11: // IDTYPE
            return IDTYPE;
          case 12: // IDENTITY
            return IDENTITY;
          case 13: // BANK
            return BANK;
          case 14: // ABBREV
            return ABBREV;
          case 15: // PROVINCE
            return PROVINCE;
          case 16: // CITYNAME
            return CITYNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISUSE_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private static final int __CARDTYPE_ISSET_ID = 2;
    private static final int __USERTYPE_ISSET_ID = 3;
    private static final int __ISPUBLIC_ISSET_ID = 4;
    private static final int __IDTYPE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ISUSE, new org.apache.thrift.meta_data.FieldMetaData("isuse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_ID, new org.apache.thrift.meta_data.FieldMetaData("mobileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ISPUBLIC, new org.apache.thrift.meta_data.FieldMetaData("ispublic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDTYPE, new org.apache.thrift.meta_data.FieldMetaData("idtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK, new org.apache.thrift.meta_data.FieldMetaData("bank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ABBREV, new org.apache.thrift.meta_data.FieldMetaData("abbrev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITYNAME, new org.apache.thrift.meta_data.FieldMetaData("cityname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMentionAccount_args.class, metaDataMap);
    }

    public AddMentionAccount_args() {
    }

    public AddMentionAccount_args(
      int isuse,
      String uId,
      int type,
      String account,
      int cardType,
      String userName,
      String bankName,
      String mobileId,
      int userType,
      int ispublic,
      int idtype,
      String identity,
      String bank,
      String abbrev,
      String province,
      String cityname)
    {
      this();
      this.isuse = isuse;
      setIsuseIsSet(true);
      this.uId = uId;
      this.type = type;
      setTypeIsSet(true);
      this.account = account;
      this.cardType = cardType;
      setCardTypeIsSet(true);
      this.userName = userName;
      this.bankName = bankName;
      this.mobileId = mobileId;
      this.userType = userType;
      setUserTypeIsSet(true);
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      this.idtype = idtype;
      setIdtypeIsSet(true);
      this.identity = identity;
      this.bank = bank;
      this.abbrev = abbrev;
      this.province = province;
      this.cityname = cityname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMentionAccount_args(AddMentionAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.isuse = other.isuse;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      this.type = other.type;
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      this.cardType = other.cardType;
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetBankName()) {
        this.bankName = other.bankName;
      }
      if (other.isSetMobileId()) {
        this.mobileId = other.mobileId;
      }
      this.userType = other.userType;
      this.ispublic = other.ispublic;
      this.idtype = other.idtype;
      if (other.isSetIdentity()) {
        this.identity = other.identity;
      }
      if (other.isSetBank()) {
        this.bank = other.bank;
      }
      if (other.isSetAbbrev()) {
        this.abbrev = other.abbrev;
      }
      if (other.isSetProvince()) {
        this.province = other.province;
      }
      if (other.isSetCityname()) {
        this.cityname = other.cityname;
      }
    }

    public AddMentionAccount_args deepCopy() {
      return new AddMentionAccount_args(this);
    }

    @Override
    public void clear() {
      setIsuseIsSet(false);
      this.isuse = 0;
      this.uId = null;
      setTypeIsSet(false);
      this.type = 0;
      this.account = null;
      setCardTypeIsSet(false);
      this.cardType = 0;
      this.userName = null;
      this.bankName = null;
      this.mobileId = null;
      setUserTypeIsSet(false);
      this.userType = 0;
      setIspublicIsSet(false);
      this.ispublic = 0;
      setIdtypeIsSet(false);
      this.idtype = 0;
      this.identity = null;
      this.bank = null;
      this.abbrev = null;
      this.province = null;
      this.cityname = null;
    }

    public int getIsuse() {
      return this.isuse;
    }

    public AddMentionAccount_args setIsuse(int isuse) {
      this.isuse = isuse;
      setIsuseIsSet(true);
      return this;
    }

    public void unsetIsuse() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    /** Returns true if field isuse is set (has been assigned a value) and false otherwise */
    public boolean isSetIsuse() {
      return EncodingUtils.testBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    public void setIsuseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSE_ISSET_ID, value);
    }

    public String getUId() {
      return this.uId;
    }

    public AddMentionAccount_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public AddMentionAccount_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getAccount() {
      return this.account;
    }

    public AddMentionAccount_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public int getCardType() {
      return this.cardType;
    }

    public AddMentionAccount_args setCardType(int cardType) {
      this.cardType = cardType;
      setCardTypeIsSet(true);
      return this;
    }

    public void unsetCardType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
    public boolean isSetCardType() {
      return EncodingUtils.testBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    public void setCardTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARDTYPE_ISSET_ID, value);
    }

    public String getUserName() {
      return this.userName;
    }

    public AddMentionAccount_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getBankName() {
      return this.bankName;
    }

    public AddMentionAccount_args setBankName(String bankName) {
      this.bankName = bankName;
      return this;
    }

    public void unsetBankName() {
      this.bankName = null;
    }

    /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
    public boolean isSetBankName() {
      return this.bankName != null;
    }

    public void setBankNameIsSet(boolean value) {
      if (!value) {
        this.bankName = null;
      }
    }

    public String getMobileId() {
      return this.mobileId;
    }

    public AddMentionAccount_args setMobileId(String mobileId) {
      this.mobileId = mobileId;
      return this;
    }

    public void unsetMobileId() {
      this.mobileId = null;
    }

    /** Returns true if field mobileId is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileId() {
      return this.mobileId != null;
    }

    public void setMobileIdIsSet(boolean value) {
      if (!value) {
        this.mobileId = null;
      }
    }

    public int getUserType() {
      return this.userType;
    }

    public AddMentionAccount_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public int getIspublic() {
      return this.ispublic;
    }

    public AddMentionAccount_args setIspublic(int ispublic) {
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      return this;
    }

    public void unsetIspublic() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    /** Returns true if field ispublic is set (has been assigned a value) and false otherwise */
    public boolean isSetIspublic() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    public void setIspublicIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLIC_ISSET_ID, value);
    }

    public int getIdtype() {
      return this.idtype;
    }

    public AddMentionAccount_args setIdtype(int idtype) {
      this.idtype = idtype;
      setIdtypeIsSet(true);
      return this;
    }

    public void unsetIdtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    /** Returns true if field idtype is set (has been assigned a value) and false otherwise */
    public boolean isSetIdtype() {
      return EncodingUtils.testBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    public void setIdtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDTYPE_ISSET_ID, value);
    }

    public String getIdentity() {
      return this.identity;
    }

    public AddMentionAccount_args setIdentity(String identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public String getBank() {
      return this.bank;
    }

    public AddMentionAccount_args setBank(String bank) {
      this.bank = bank;
      return this;
    }

    public void unsetBank() {
      this.bank = null;
    }

    /** Returns true if field bank is set (has been assigned a value) and false otherwise */
    public boolean isSetBank() {
      return this.bank != null;
    }

    public void setBankIsSet(boolean value) {
      if (!value) {
        this.bank = null;
      }
    }

    public String getAbbrev() {
      return this.abbrev;
    }

    public AddMentionAccount_args setAbbrev(String abbrev) {
      this.abbrev = abbrev;
      return this;
    }

    public void unsetAbbrev() {
      this.abbrev = null;
    }

    /** Returns true if field abbrev is set (has been assigned a value) and false otherwise */
    public boolean isSetAbbrev() {
      return this.abbrev != null;
    }

    public void setAbbrevIsSet(boolean value) {
      if (!value) {
        this.abbrev = null;
      }
    }

    public String getProvince() {
      return this.province;
    }

    public AddMentionAccount_args setProvince(String province) {
      this.province = province;
      return this;
    }

    public void unsetProvince() {
      this.province = null;
    }

    /** Returns true if field province is set (has been assigned a value) and false otherwise */
    public boolean isSetProvince() {
      return this.province != null;
    }

    public void setProvinceIsSet(boolean value) {
      if (!value) {
        this.province = null;
      }
    }

    public String getCityname() {
      return this.cityname;
    }

    public AddMentionAccount_args setCityname(String cityname) {
      this.cityname = cityname;
      return this;
    }

    public void unsetCityname() {
      this.cityname = null;
    }

    /** Returns true if field cityname is set (has been assigned a value) and false otherwise */
    public boolean isSetCityname() {
      return this.cityname != null;
    }

    public void setCitynameIsSet(boolean value) {
      if (!value) {
        this.cityname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ISUSE:
        if (value == null) {
          unsetIsuse();
        } else {
          setIsuse((Integer)value);
        }
        break;

      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case CARD_TYPE:
        if (value == null) {
          unsetCardType();
        } else {
          setCardType((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case BANK_NAME:
        if (value == null) {
          unsetBankName();
        } else {
          setBankName((String)value);
        }
        break;

      case MOBILE_ID:
        if (value == null) {
          unsetMobileId();
        } else {
          setMobileId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      case ISPUBLIC:
        if (value == null) {
          unsetIspublic();
        } else {
          setIspublic((Integer)value);
        }
        break;

      case IDTYPE:
        if (value == null) {
          unsetIdtype();
        } else {
          setIdtype((Integer)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((String)value);
        }
        break;

      case BANK:
        if (value == null) {
          unsetBank();
        } else {
          setBank((String)value);
        }
        break;

      case ABBREV:
        if (value == null) {
          unsetAbbrev();
        } else {
          setAbbrev((String)value);
        }
        break;

      case PROVINCE:
        if (value == null) {
          unsetProvince();
        } else {
          setProvince((String)value);
        }
        break;

      case CITYNAME:
        if (value == null) {
          unsetCityname();
        } else {
          setCityname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ISUSE:
        return Integer.valueOf(getIsuse());

      case U_ID:
        return getUId();

      case TYPE:
        return Integer.valueOf(getType());

      case ACCOUNT:
        return getAccount();

      case CARD_TYPE:
        return Integer.valueOf(getCardType());

      case USER_NAME:
        return getUserName();

      case BANK_NAME:
        return getBankName();

      case MOBILE_ID:
        return getMobileId();

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      case ISPUBLIC:
        return Integer.valueOf(getIspublic());

      case IDTYPE:
        return Integer.valueOf(getIdtype());

      case IDENTITY:
        return getIdentity();

      case BANK:
        return getBank();

      case ABBREV:
        return getAbbrev();

      case PROVINCE:
        return getProvince();

      case CITYNAME:
        return getCityname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ISUSE:
        return isSetIsuse();
      case U_ID:
        return isSetUId();
      case TYPE:
        return isSetType();
      case ACCOUNT:
        return isSetAccount();
      case CARD_TYPE:
        return isSetCardType();
      case USER_NAME:
        return isSetUserName();
      case BANK_NAME:
        return isSetBankName();
      case MOBILE_ID:
        return isSetMobileId();
      case USER_TYPE:
        return isSetUserType();
      case ISPUBLIC:
        return isSetIspublic();
      case IDTYPE:
        return isSetIdtype();
      case IDENTITY:
        return isSetIdentity();
      case BANK:
        return isSetBank();
      case ABBREV:
        return isSetAbbrev();
      case PROVINCE:
        return isSetProvince();
      case CITYNAME:
        return isSetCityname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMentionAccount_args)
        return this.equals((AddMentionAccount_args)that);
      return false;
    }

    public boolean equals(AddMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_isuse = true;
      boolean that_present_isuse = true;
      if (this_present_isuse || that_present_isuse) {
        if (!(this_present_isuse && that_present_isuse))
          return false;
        if (this.isuse != that.isuse)
          return false;
      }

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_cardType = true;
      boolean that_present_cardType = true;
      if (this_present_cardType || that_present_cardType) {
        if (!(this_present_cardType && that_present_cardType))
          return false;
        if (this.cardType != that.cardType)
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_bankName = true && this.isSetBankName();
      boolean that_present_bankName = true && that.isSetBankName();
      if (this_present_bankName || that_present_bankName) {
        if (!(this_present_bankName && that_present_bankName))
          return false;
        if (!this.bankName.equals(that.bankName))
          return false;
      }

      boolean this_present_mobileId = true && this.isSetMobileId();
      boolean that_present_mobileId = true && that.isSetMobileId();
      if (this_present_mobileId || that_present_mobileId) {
        if (!(this_present_mobileId && that_present_mobileId))
          return false;
        if (!this.mobileId.equals(that.mobileId))
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      boolean this_present_ispublic = true;
      boolean that_present_ispublic = true;
      if (this_present_ispublic || that_present_ispublic) {
        if (!(this_present_ispublic && that_present_ispublic))
          return false;
        if (this.ispublic != that.ispublic)
          return false;
      }

      boolean this_present_idtype = true;
      boolean that_present_idtype = true;
      if (this_present_idtype || that_present_idtype) {
        if (!(this_present_idtype && that_present_idtype))
          return false;
        if (this.idtype != that.idtype)
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      boolean this_present_bank = true && this.isSetBank();
      boolean that_present_bank = true && that.isSetBank();
      if (this_present_bank || that_present_bank) {
        if (!(this_present_bank && that_present_bank))
          return false;
        if (!this.bank.equals(that.bank))
          return false;
      }

      boolean this_present_abbrev = true && this.isSetAbbrev();
      boolean that_present_abbrev = true && that.isSetAbbrev();
      if (this_present_abbrev || that_present_abbrev) {
        if (!(this_present_abbrev && that_present_abbrev))
          return false;
        if (!this.abbrev.equals(that.abbrev))
          return false;
      }

      boolean this_present_province = true && this.isSetProvince();
      boolean that_present_province = true && that.isSetProvince();
      if (this_present_province || that_present_province) {
        if (!(this_present_province && that_present_province))
          return false;
        if (!this.province.equals(that.province))
          return false;
      }

      boolean this_present_cityname = true && this.isSetCityname();
      boolean that_present_cityname = true && that.isSetCityname();
      if (this_present_cityname || that_present_cityname) {
        if (!(this_present_cityname && that_present_cityname))
          return false;
        if (!this.cityname.equals(that.cityname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(AddMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIsuse()).compareTo(other.isSetIsuse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsuse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isuse, other.isuse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileId()).compareTo(other.isSetMobileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileId, other.mobileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIspublic()).compareTo(other.isSetIspublic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIspublic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ispublic, other.ispublic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdtype()).compareTo(other.isSetIdtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idtype, other.idtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBank()).compareTo(other.isSetBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bank, other.bank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAbbrev()).compareTo(other.isSetAbbrev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbbrev()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbrev, other.abbrev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityname()).compareTo(other.isSetCityname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityname, other.cityname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMentionAccount_args(");
      boolean first = true;

      sb.append("isuse:");
      sb.append(this.isuse);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardType:");
      sb.append(this.cardType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankName:");
      if (this.bankName == null) {
        sb.append("null");
      } else {
        sb.append(this.bankName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileId:");
      if (this.mobileId == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ispublic:");
      sb.append(this.ispublic);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idtype:");
      sb.append(this.idtype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bank:");
      if (this.bank == null) {
        sb.append("null");
      } else {
        sb.append(this.bank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("abbrev:");
      if (this.abbrev == null) {
        sb.append("null");
      } else {
        sb.append(this.abbrev);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityname:");
      if (this.cityname == null) {
        sb.append("null");
      } else {
        sb.append(this.cityname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public AddMentionAccount_argsStandardScheme getScheme() {
        return new AddMentionAccount_argsStandardScheme();
      }
    }

    private static class AddMentionAccount_argsStandardScheme extends StandardScheme<AddMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ISUSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.isuse = iprot.readI32();
                struct.setIsuseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cardType = iprot.readI32();
                struct.setCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // BANK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankName = iprot.readString();
                struct.setBankNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // MOBILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileId = iprot.readString();
                struct.setMobileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // ISPUBLIC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ispublic = iprot.readI32();
                struct.setIspublicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // IDTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idtype = iprot.readI32();
                struct.setIdtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identity = iprot.readString();
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bank = iprot.readString();
                struct.setBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // ABBREV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.abbrev = iprot.readString();
                struct.setAbbrevIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // PROVINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.province = iprot.readString();
                struct.setProvinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 16: // CITYNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityname = iprot.readString();
                struct.setCitynameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ISUSE_FIELD_DESC);
        oprot.writeI32(struct.isuse);
        oprot.writeFieldEnd();
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cardType);
        oprot.writeFieldEnd();
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.bankName != null) {
          oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
          oprot.writeString(struct.bankName);
          oprot.writeFieldEnd();
        }
        if (struct.mobileId != null) {
          oprot.writeFieldBegin(MOBILE_ID_FIELD_DESC);
          oprot.writeString(struct.mobileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ISPUBLIC_FIELD_DESC);
        oprot.writeI32(struct.ispublic);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IDTYPE_FIELD_DESC);
        oprot.writeI32(struct.idtype);
        oprot.writeFieldEnd();
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          oprot.writeString(struct.identity);
          oprot.writeFieldEnd();
        }
        if (struct.bank != null) {
          oprot.writeFieldBegin(BANK_FIELD_DESC);
          oprot.writeString(struct.bank);
          oprot.writeFieldEnd();
        }
        if (struct.abbrev != null) {
          oprot.writeFieldBegin(ABBREV_FIELD_DESC);
          oprot.writeString(struct.abbrev);
          oprot.writeFieldEnd();
        }
        if (struct.province != null) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
        if (struct.cityname != null) {
          oprot.writeFieldBegin(CITYNAME_FIELD_DESC);
          oprot.writeString(struct.cityname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public AddMentionAccount_argsTupleScheme getScheme() {
        return new AddMentionAccount_argsTupleScheme();
      }
    }

    private static class AddMentionAccount_argsTupleScheme extends TupleScheme<AddMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIsuse()) {
          optionals.set(0);
        }
        if (struct.isSetUId()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetAccount()) {
          optionals.set(3);
        }
        if (struct.isSetCardType()) {
          optionals.set(4);
        }
        if (struct.isSetUserName()) {
          optionals.set(5);
        }
        if (struct.isSetBankName()) {
          optionals.set(6);
        }
        if (struct.isSetMobileId()) {
          optionals.set(7);
        }
        if (struct.isSetUserType()) {
          optionals.set(8);
        }
        if (struct.isSetIspublic()) {
          optionals.set(9);
        }
        if (struct.isSetIdtype()) {
          optionals.set(10);
        }
        if (struct.isSetIdentity()) {
          optionals.set(11);
        }
        if (struct.isSetBank()) {
          optionals.set(12);
        }
        if (struct.isSetAbbrev()) {
          optionals.set(13);
        }
        if (struct.isSetProvince()) {
          optionals.set(14);
        }
        if (struct.isSetCityname()) {
          optionals.set(15);
        }
        oprot.writeBitSet(optionals, 16);
        if (struct.isSetIsuse()) {
          oprot.writeI32(struct.isuse);
        }
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetCardType()) {
          oprot.writeI32(struct.cardType);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetBankName()) {
          oprot.writeString(struct.bankName);
        }
        if (struct.isSetMobileId()) {
          oprot.writeString(struct.mobileId);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
        if (struct.isSetIspublic()) {
          oprot.writeI32(struct.ispublic);
        }
        if (struct.isSetIdtype()) {
          oprot.writeI32(struct.idtype);
        }
        if (struct.isSetIdentity()) {
          oprot.writeString(struct.identity);
        }
        if (struct.isSetBank()) {
          oprot.writeString(struct.bank);
        }
        if (struct.isSetAbbrev()) {
          oprot.writeString(struct.abbrev);
        }
        if (struct.isSetProvince()) {
          oprot.writeString(struct.province);
        }
        if (struct.isSetCityname()) {
          oprot.writeString(struct.cityname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(16);
        if (incoming.get(0)) {
          struct.isuse = iprot.readI32();
          struct.setIsuseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.cardType = iprot.readI32();
          struct.setCardTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.bankName = iprot.readString();
          struct.setBankNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.mobileId = iprot.readString();
          struct.setMobileIdIsSet(true);
        }
        if (incoming.get(8)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(9)) {
          struct.ispublic = iprot.readI32();
          struct.setIspublicIsSet(true);
        }
        if (incoming.get(10)) {
          struct.idtype = iprot.readI32();
          struct.setIdtypeIsSet(true);
        }
        if (incoming.get(11)) {
          struct.identity = iprot.readString();
          struct.setIdentityIsSet(true);
        }
        if (incoming.get(12)) {
          struct.bank = iprot.readString();
          struct.setBankIsSet(true);
        }
        if (incoming.get(13)) {
          struct.abbrev = iprot.readString();
          struct.setAbbrevIsSet(true);
        }
        if (incoming.get(14)) {
          struct.province = iprot.readString();
          struct.setProvinceIsSet(true);
        }
        if (incoming.get(15)) {
          struct.cityname = iprot.readString();
          struct.setCitynameIsSet(true);
        }
      }
    }

  }

  public static class AddMentionAccount_result implements org.apache.thrift.TBase<AddMentionAccount_result, AddMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMentionAccount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMentionAccount_result.class, metaDataMap);
    }

    public AddMentionAccount_result() {
    }

    public AddMentionAccount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMentionAccount_result(AddMentionAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public AddMentionAccount_result deepCopy() {
      return new AddMentionAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddMentionAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public AddMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMentionAccount_result)
        return this.equals((AddMentionAccount_result)that);
      return false;
    }

    public boolean equals(AddMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(AddMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public AddMentionAccount_resultStandardScheme getScheme() {
        return new AddMentionAccount_resultStandardScheme();
      }
    }

    private static class AddMentionAccount_resultStandardScheme extends StandardScheme<AddMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public AddMentionAccount_resultTupleScheme getScheme() {
        return new AddMentionAccount_resultTupleScheme();
      }
    }

    private static class AddMentionAccount_resultTupleScheme extends TupleScheme<AddMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccount_args implements org.apache.thrift.TBase<getMentionAccount_args, getMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccount_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccount_argsTupleSchemeFactory());
    }

    public String uId; // required
    public int userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccount_args.class, metaDataMap);
    }

    public getMentionAccount_args() {
    }

    public getMentionAccount_args(
      String uId,
      int userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
      setUserTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccount_args(getMentionAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      this.userType = other.userType;
    }

    public getMentionAccount_args deepCopy() {
      return new getMentionAccount_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      setUserTypeIsSet(false);
      this.userType = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public getMentionAccount_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public int getUserType() {
      return this.userType;
    }

    public getMentionAccount_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccount_args)
        return this.equals((getMentionAccount_args)that);
      return false;
    }

    public boolean equals(getMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccount_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionAccount_argsStandardScheme getScheme() {
        return new getMentionAccount_argsStandardScheme();
      }
    }

    private static class getMentionAccount_argsStandardScheme extends StandardScheme<getMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionAccount_argsTupleScheme getScheme() {
        return new getMentionAccount_argsTupleScheme();
      }
    }

    private static class getMentionAccount_argsTupleScheme extends TupleScheme<getMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccount_result implements org.apache.thrift.TBase<getMentionAccount_result, getMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccount_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccount_result.class, metaDataMap);
    }

    public getMentionAccount_result() {
    }

    public getMentionAccount_result(
      List<Map<String,String>> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccount_result(getMentionAccount_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionAccount_result deepCopy() {
      return new getMentionAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getMentionAccount_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccount_result)
        return this.equals((getMentionAccount_result)that);
      return false;
    }

    public boolean equals(getMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionAccount_resultStandardScheme getScheme() {
        return new getMentionAccount_resultStandardScheme();
      }
    }

    private static class getMentionAccount_resultStandardScheme extends StandardScheme<getMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list128.size);
                  for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                  {
                    Map<String,String> _elem130;
                    {
                      org.apache.thrift.protocol.TMap _map131 = iprot.readMapBegin();
                      _elem130 = new HashMap<String,String>(2*_map131.size);
                      for (int _i132 = 0; _i132 < _map131.size; ++_i132)
                      {
                        String _key133;
                        String _val134;
                        _key133 = iprot.readString();
                        _val134 = iprot.readString();
                        _elem130.put(_key133, _val134);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter135 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter135.size()));
                for (Map.Entry<String, String> _iter136 : _iter135.entrySet())
                {
                  oprot.writeString(_iter136.getKey());
                  oprot.writeString(_iter136.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionAccount_resultTupleScheme getScheme() {
        return new getMentionAccount_resultTupleScheme();
      }
    }

    private static class getMentionAccount_resultTupleScheme extends TupleScheme<getMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter137 : struct.success)
            {
              {
                oprot.writeI32(_iter137.size());
                for (Map.Entry<String, String> _iter138 : _iter137.entrySet())
                {
                  oprot.writeString(_iter138.getKey());
                  oprot.writeString(_iter138.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list139.size);
            for (int _i140 = 0; _i140 < _list139.size; ++_i140)
            {
              Map<String,String> _elem141;
              {
                org.apache.thrift.protocol.TMap _map142 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem141 = new HashMap<String,String>(2*_map142.size);
                for (int _i143 = 0; _i143 < _map142.size; ++_i143)
                {
                  String _key144;
                  String _val145;
                  _key144 = iprot.readString();
                  _val145 = iprot.readString();
                  _elem141.put(_key144, _val145);
                }
              }
              struct.success.add(_elem141);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateMentionAccount_args implements org.apache.thrift.TBase<updateMentionAccount_args, updateMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionAccount_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField MOBILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileId", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField ISUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("isuse", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField CITYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityname", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField ISPUBLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("ispublic", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField IDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idtype", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("bank", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField ABBREV_FIELD_DESC = new org.apache.thrift.protocol.TField("abbrev", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)15);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionAccount_argsTupleSchemeFactory());
    }

    public String id; // required
    public int type; // required
    public String account; // required
    public int cardType; // required
    public String userName; // required
    public String bankName; // required
    public String mobileId; // required
    public int isuse; // required
    public String cityname; // required
    public int ispublic; // required
    public int idtype; // required
    public String identity; // required
    public String bank; // required
    public String abbrev; // required
    public String province; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      TYPE((short)2, "type"),
      ACCOUNT((short)3, "account"),
      CARD_TYPE((short)4, "cardType"),
      USER_NAME((short)5, "userName"),
      BANK_NAME((short)6, "bankName"),
      MOBILE_ID((short)7, "mobileId"),
      ISUSE((short)8, "isuse"),
      CITYNAME((short)9, "cityname"),
      ISPUBLIC((short)10, "ispublic"),
      IDTYPE((short)11, "idtype"),
      IDENTITY((short)12, "identity"),
      BANK((short)13, "bank"),
      ABBREV((short)14, "abbrev"),
      PROVINCE((short)15, "province");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // TYPE
            return TYPE;
          case 3: // ACCOUNT
            return ACCOUNT;
          case 4: // CARD_TYPE
            return CARD_TYPE;
          case 5: // USER_NAME
            return USER_NAME;
          case 6: // BANK_NAME
            return BANK_NAME;
          case 7: // MOBILE_ID
            return MOBILE_ID;
          case 8: // ISUSE
            return ISUSE;
          case 9: // CITYNAME
            return CITYNAME;
          case 10: // ISPUBLIC
            return ISPUBLIC;
          case 11: // IDTYPE
            return IDTYPE;
          case 12: // IDENTITY
            return IDENTITY;
          case 13: // BANK
            return BANK;
          case 14: // ABBREV
            return ABBREV;
          case 15: // PROVINCE
            return PROVINCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __CARDTYPE_ISSET_ID = 1;
    private static final int __ISUSE_ISSET_ID = 2;
    private static final int __ISPUBLIC_ISSET_ID = 3;
    private static final int __IDTYPE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_ID, new org.apache.thrift.meta_data.FieldMetaData("mobileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISUSE, new org.apache.thrift.meta_data.FieldMetaData("isuse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CITYNAME, new org.apache.thrift.meta_data.FieldMetaData("cityname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISPUBLIC, new org.apache.thrift.meta_data.FieldMetaData("ispublic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDTYPE, new org.apache.thrift.meta_data.FieldMetaData("idtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK, new org.apache.thrift.meta_data.FieldMetaData("bank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ABBREV, new org.apache.thrift.meta_data.FieldMetaData("abbrev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionAccount_args.class, metaDataMap);
    }

    public updateMentionAccount_args() {
    }

    public updateMentionAccount_args(
      String id,
      int type,
      String account,
      int cardType,
      String userName,
      String bankName,
      String mobileId,
      int isuse,
      String cityname,
      int ispublic,
      int idtype,
      String identity,
      String bank,
      String abbrev,
      String province)
    {
      this();
      this.id = id;
      this.type = type;
      setTypeIsSet(true);
      this.account = account;
      this.cardType = cardType;
      setCardTypeIsSet(true);
      this.userName = userName;
      this.bankName = bankName;
      this.mobileId = mobileId;
      this.isuse = isuse;
      setIsuseIsSet(true);
      this.cityname = cityname;
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      this.idtype = idtype;
      setIdtypeIsSet(true);
      this.identity = identity;
      this.bank = bank;
      this.abbrev = abbrev;
      this.province = province;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionAccount_args(updateMentionAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = other.id;
      }
      this.type = other.type;
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      this.cardType = other.cardType;
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetBankName()) {
        this.bankName = other.bankName;
      }
      if (other.isSetMobileId()) {
        this.mobileId = other.mobileId;
      }
      this.isuse = other.isuse;
      if (other.isSetCityname()) {
        this.cityname = other.cityname;
      }
      this.ispublic = other.ispublic;
      this.idtype = other.idtype;
      if (other.isSetIdentity()) {
        this.identity = other.identity;
      }
      if (other.isSetBank()) {
        this.bank = other.bank;
      }
      if (other.isSetAbbrev()) {
        this.abbrev = other.abbrev;
      }
      if (other.isSetProvince()) {
        this.province = other.province;
      }
    }

    public updateMentionAccount_args deepCopy() {
      return new updateMentionAccount_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setTypeIsSet(false);
      this.type = 0;
      this.account = null;
      setCardTypeIsSet(false);
      this.cardType = 0;
      this.userName = null;
      this.bankName = null;
      this.mobileId = null;
      setIsuseIsSet(false);
      this.isuse = 0;
      this.cityname = null;
      setIspublicIsSet(false);
      this.ispublic = 0;
      setIdtypeIsSet(false);
      this.idtype = 0;
      this.identity = null;
      this.bank = null;
      this.abbrev = null;
      this.province = null;
    }

    public String getId() {
      return this.id;
    }

    public updateMentionAccount_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public updateMentionAccount_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getAccount() {
      return this.account;
    }

    public updateMentionAccount_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public int getCardType() {
      return this.cardType;
    }

    public updateMentionAccount_args setCardType(int cardType) {
      this.cardType = cardType;
      setCardTypeIsSet(true);
      return this;
    }

    public void unsetCardType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
    public boolean isSetCardType() {
      return EncodingUtils.testBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    public void setCardTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARDTYPE_ISSET_ID, value);
    }

    public String getUserName() {
      return this.userName;
    }

    public updateMentionAccount_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getBankName() {
      return this.bankName;
    }

    public updateMentionAccount_args setBankName(String bankName) {
      this.bankName = bankName;
      return this;
    }

    public void unsetBankName() {
      this.bankName = null;
    }

    /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
    public boolean isSetBankName() {
      return this.bankName != null;
    }

    public void setBankNameIsSet(boolean value) {
      if (!value) {
        this.bankName = null;
      }
    }

    public String getMobileId() {
      return this.mobileId;
    }

    public updateMentionAccount_args setMobileId(String mobileId) {
      this.mobileId = mobileId;
      return this;
    }

    public void unsetMobileId() {
      this.mobileId = null;
    }

    /** Returns true if field mobileId is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileId() {
      return this.mobileId != null;
    }

    public void setMobileIdIsSet(boolean value) {
      if (!value) {
        this.mobileId = null;
      }
    }

    public int getIsuse() {
      return this.isuse;
    }

    public updateMentionAccount_args setIsuse(int isuse) {
      this.isuse = isuse;
      setIsuseIsSet(true);
      return this;
    }

    public void unsetIsuse() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    /** Returns true if field isuse is set (has been assigned a value) and false otherwise */
    public boolean isSetIsuse() {
      return EncodingUtils.testBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    public void setIsuseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSE_ISSET_ID, value);
    }

    public String getCityname() {
      return this.cityname;
    }

    public updateMentionAccount_args setCityname(String cityname) {
      this.cityname = cityname;
      return this;
    }

    public void unsetCityname() {
      this.cityname = null;
    }

    /** Returns true if field cityname is set (has been assigned a value) and false otherwise */
    public boolean isSetCityname() {
      return this.cityname != null;
    }

    public void setCitynameIsSet(boolean value) {
      if (!value) {
        this.cityname = null;
      }
    }

    public int getIspublic() {
      return this.ispublic;
    }

    public updateMentionAccount_args setIspublic(int ispublic) {
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      return this;
    }

    public void unsetIspublic() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    /** Returns true if field ispublic is set (has been assigned a value) and false otherwise */
    public boolean isSetIspublic() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    public void setIspublicIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLIC_ISSET_ID, value);
    }

    public int getIdtype() {
      return this.idtype;
    }

    public updateMentionAccount_args setIdtype(int idtype) {
      this.idtype = idtype;
      setIdtypeIsSet(true);
      return this;
    }

    public void unsetIdtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    /** Returns true if field idtype is set (has been assigned a value) and false otherwise */
    public boolean isSetIdtype() {
      return EncodingUtils.testBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    public void setIdtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDTYPE_ISSET_ID, value);
    }

    public String getIdentity() {
      return this.identity;
    }

    public updateMentionAccount_args setIdentity(String identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public String getBank() {
      return this.bank;
    }

    public updateMentionAccount_args setBank(String bank) {
      this.bank = bank;
      return this;
    }

    public void unsetBank() {
      this.bank = null;
    }

    /** Returns true if field bank is set (has been assigned a value) and false otherwise */
    public boolean isSetBank() {
      return this.bank != null;
    }

    public void setBankIsSet(boolean value) {
      if (!value) {
        this.bank = null;
      }
    }

    public String getAbbrev() {
      return this.abbrev;
    }

    public updateMentionAccount_args setAbbrev(String abbrev) {
      this.abbrev = abbrev;
      return this;
    }

    public void unsetAbbrev() {
      this.abbrev = null;
    }

    /** Returns true if field abbrev is set (has been assigned a value) and false otherwise */
    public boolean isSetAbbrev() {
      return this.abbrev != null;
    }

    public void setAbbrevIsSet(boolean value) {
      if (!value) {
        this.abbrev = null;
      }
    }

    public String getProvince() {
      return this.province;
    }

    public updateMentionAccount_args setProvince(String province) {
      this.province = province;
      return this;
    }

    public void unsetProvince() {
      this.province = null;
    }

    /** Returns true if field province is set (has been assigned a value) and false otherwise */
    public boolean isSetProvince() {
      return this.province != null;
    }

    public void setProvinceIsSet(boolean value) {
      if (!value) {
        this.province = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case CARD_TYPE:
        if (value == null) {
          unsetCardType();
        } else {
          setCardType((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case BANK_NAME:
        if (value == null) {
          unsetBankName();
        } else {
          setBankName((String)value);
        }
        break;

      case MOBILE_ID:
        if (value == null) {
          unsetMobileId();
        } else {
          setMobileId((String)value);
        }
        break;

      case ISUSE:
        if (value == null) {
          unsetIsuse();
        } else {
          setIsuse((Integer)value);
        }
        break;

      case CITYNAME:
        if (value == null) {
          unsetCityname();
        } else {
          setCityname((String)value);
        }
        break;

      case ISPUBLIC:
        if (value == null) {
          unsetIspublic();
        } else {
          setIspublic((Integer)value);
        }
        break;

      case IDTYPE:
        if (value == null) {
          unsetIdtype();
        } else {
          setIdtype((Integer)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((String)value);
        }
        break;

      case BANK:
        if (value == null) {
          unsetBank();
        } else {
          setBank((String)value);
        }
        break;

      case ABBREV:
        if (value == null) {
          unsetAbbrev();
        } else {
          setAbbrev((String)value);
        }
        break;

      case PROVINCE:
        if (value == null) {
          unsetProvince();
        } else {
          setProvince((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case TYPE:
        return Integer.valueOf(getType());

      case ACCOUNT:
        return getAccount();

      case CARD_TYPE:
        return Integer.valueOf(getCardType());

      case USER_NAME:
        return getUserName();

      case BANK_NAME:
        return getBankName();

      case MOBILE_ID:
        return getMobileId();

      case ISUSE:
        return Integer.valueOf(getIsuse());

      case CITYNAME:
        return getCityname();

      case ISPUBLIC:
        return Integer.valueOf(getIspublic());

      case IDTYPE:
        return Integer.valueOf(getIdtype());

      case IDENTITY:
        return getIdentity();

      case BANK:
        return getBank();

      case ABBREV:
        return getAbbrev();

      case PROVINCE:
        return getProvince();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case TYPE:
        return isSetType();
      case ACCOUNT:
        return isSetAccount();
      case CARD_TYPE:
        return isSetCardType();
      case USER_NAME:
        return isSetUserName();
      case BANK_NAME:
        return isSetBankName();
      case MOBILE_ID:
        return isSetMobileId();
      case ISUSE:
        return isSetIsuse();
      case CITYNAME:
        return isSetCityname();
      case ISPUBLIC:
        return isSetIspublic();
      case IDTYPE:
        return isSetIdtype();
      case IDENTITY:
        return isSetIdentity();
      case BANK:
        return isSetBank();
      case ABBREV:
        return isSetAbbrev();
      case PROVINCE:
        return isSetProvince();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionAccount_args)
        return this.equals((updateMentionAccount_args)that);
      return false;
    }

    public boolean equals(updateMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_cardType = true;
      boolean that_present_cardType = true;
      if (this_present_cardType || that_present_cardType) {
        if (!(this_present_cardType && that_present_cardType))
          return false;
        if (this.cardType != that.cardType)
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_bankName = true && this.isSetBankName();
      boolean that_present_bankName = true && that.isSetBankName();
      if (this_present_bankName || that_present_bankName) {
        if (!(this_present_bankName && that_present_bankName))
          return false;
        if (!this.bankName.equals(that.bankName))
          return false;
      }

      boolean this_present_mobileId = true && this.isSetMobileId();
      boolean that_present_mobileId = true && that.isSetMobileId();
      if (this_present_mobileId || that_present_mobileId) {
        if (!(this_present_mobileId && that_present_mobileId))
          return false;
        if (!this.mobileId.equals(that.mobileId))
          return false;
      }

      boolean this_present_isuse = true;
      boolean that_present_isuse = true;
      if (this_present_isuse || that_present_isuse) {
        if (!(this_present_isuse && that_present_isuse))
          return false;
        if (this.isuse != that.isuse)
          return false;
      }

      boolean this_present_cityname = true && this.isSetCityname();
      boolean that_present_cityname = true && that.isSetCityname();
      if (this_present_cityname || that_present_cityname) {
        if (!(this_present_cityname && that_present_cityname))
          return false;
        if (!this.cityname.equals(that.cityname))
          return false;
      }

      boolean this_present_ispublic = true;
      boolean that_present_ispublic = true;
      if (this_present_ispublic || that_present_ispublic) {
        if (!(this_present_ispublic && that_present_ispublic))
          return false;
        if (this.ispublic != that.ispublic)
          return false;
      }

      boolean this_present_idtype = true;
      boolean that_present_idtype = true;
      if (this_present_idtype || that_present_idtype) {
        if (!(this_present_idtype && that_present_idtype))
          return false;
        if (this.idtype != that.idtype)
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      boolean this_present_bank = true && this.isSetBank();
      boolean that_present_bank = true && that.isSetBank();
      if (this_present_bank || that_present_bank) {
        if (!(this_present_bank && that_present_bank))
          return false;
        if (!this.bank.equals(that.bank))
          return false;
      }

      boolean this_present_abbrev = true && this.isSetAbbrev();
      boolean that_present_abbrev = true && that.isSetAbbrev();
      if (this_present_abbrev || that_present_abbrev) {
        if (!(this_present_abbrev && that_present_abbrev))
          return false;
        if (!this.abbrev.equals(that.abbrev))
          return false;
      }

      boolean this_present_province = true && this.isSetProvince();
      boolean that_present_province = true && that.isSetProvince();
      if (this_present_province || that_present_province) {
        if (!(this_present_province && that_present_province))
          return false;
        if (!this.province.equals(that.province))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileId()).compareTo(other.isSetMobileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileId, other.mobileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsuse()).compareTo(other.isSetIsuse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsuse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isuse, other.isuse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityname()).compareTo(other.isSetCityname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityname, other.cityname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIspublic()).compareTo(other.isSetIspublic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIspublic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ispublic, other.ispublic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdtype()).compareTo(other.isSetIdtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idtype, other.idtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBank()).compareTo(other.isSetBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bank, other.bank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAbbrev()).compareTo(other.isSetAbbrev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbbrev()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbrev, other.abbrev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionAccount_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardType:");
      sb.append(this.cardType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankName:");
      if (this.bankName == null) {
        sb.append("null");
      } else {
        sb.append(this.bankName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileId:");
      if (this.mobileId == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isuse:");
      sb.append(this.isuse);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityname:");
      if (this.cityname == null) {
        sb.append("null");
      } else {
        sb.append(this.cityname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ispublic:");
      sb.append(this.ispublic);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idtype:");
      sb.append(this.idtype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bank:");
      if (this.bank == null) {
        sb.append("null");
      } else {
        sb.append(this.bank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("abbrev:");
      if (this.abbrev == null) {
        sb.append("null");
      } else {
        sb.append(this.abbrev);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public updateMentionAccount_argsStandardScheme getScheme() {
        return new updateMentionAccount_argsStandardScheme();
      }
    }

    private static class updateMentionAccount_argsStandardScheme extends StandardScheme<updateMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cardType = iprot.readI32();
                struct.setCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BANK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankName = iprot.readString();
                struct.setBankNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MOBILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileId = iprot.readString();
                struct.setMobileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // ISUSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.isuse = iprot.readI32();
                struct.setIsuseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // CITYNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityname = iprot.readString();
                struct.setCitynameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // ISPUBLIC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ispublic = iprot.readI32();
                struct.setIspublicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // IDTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idtype = iprot.readI32();
                struct.setIdtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identity = iprot.readString();
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bank = iprot.readString();
                struct.setBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // ABBREV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.abbrev = iprot.readString();
                struct.setAbbrevIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // PROVINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.province = iprot.readString();
                struct.setProvinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cardType);
        oprot.writeFieldEnd();
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.bankName != null) {
          oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
          oprot.writeString(struct.bankName);
          oprot.writeFieldEnd();
        }
        if (struct.mobileId != null) {
          oprot.writeFieldBegin(MOBILE_ID_FIELD_DESC);
          oprot.writeString(struct.mobileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISUSE_FIELD_DESC);
        oprot.writeI32(struct.isuse);
        oprot.writeFieldEnd();
        if (struct.cityname != null) {
          oprot.writeFieldBegin(CITYNAME_FIELD_DESC);
          oprot.writeString(struct.cityname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISPUBLIC_FIELD_DESC);
        oprot.writeI32(struct.ispublic);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IDTYPE_FIELD_DESC);
        oprot.writeI32(struct.idtype);
        oprot.writeFieldEnd();
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          oprot.writeString(struct.identity);
          oprot.writeFieldEnd();
        }
        if (struct.bank != null) {
          oprot.writeFieldBegin(BANK_FIELD_DESC);
          oprot.writeString(struct.bank);
          oprot.writeFieldEnd();
        }
        if (struct.abbrev != null) {
          oprot.writeFieldBegin(ABBREV_FIELD_DESC);
          oprot.writeString(struct.abbrev);
          oprot.writeFieldEnd();
        }
        if (struct.province != null) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public updateMentionAccount_argsTupleScheme getScheme() {
        return new updateMentionAccount_argsTupleScheme();
      }
    }

    private static class updateMentionAccount_argsTupleScheme extends TupleScheme<updateMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetAccount()) {
          optionals.set(2);
        }
        if (struct.isSetCardType()) {
          optionals.set(3);
        }
        if (struct.isSetUserName()) {
          optionals.set(4);
        }
        if (struct.isSetBankName()) {
          optionals.set(5);
        }
        if (struct.isSetMobileId()) {
          optionals.set(6);
        }
        if (struct.isSetIsuse()) {
          optionals.set(7);
        }
        if (struct.isSetCityname()) {
          optionals.set(8);
        }
        if (struct.isSetIspublic()) {
          optionals.set(9);
        }
        if (struct.isSetIdtype()) {
          optionals.set(10);
        }
        if (struct.isSetIdentity()) {
          optionals.set(11);
        }
        if (struct.isSetBank()) {
          optionals.set(12);
        }
        if (struct.isSetAbbrev()) {
          optionals.set(13);
        }
        if (struct.isSetProvince()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetCardType()) {
          oprot.writeI32(struct.cardType);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetBankName()) {
          oprot.writeString(struct.bankName);
        }
        if (struct.isSetMobileId()) {
          oprot.writeString(struct.mobileId);
        }
        if (struct.isSetIsuse()) {
          oprot.writeI32(struct.isuse);
        }
        if (struct.isSetCityname()) {
          oprot.writeString(struct.cityname);
        }
        if (struct.isSetIspublic()) {
          oprot.writeI32(struct.ispublic);
        }
        if (struct.isSetIdtype()) {
          oprot.writeI32(struct.idtype);
        }
        if (struct.isSetIdentity()) {
          oprot.writeString(struct.identity);
        }
        if (struct.isSetBank()) {
          oprot.writeString(struct.bank);
        }
        if (struct.isSetAbbrev()) {
          oprot.writeString(struct.abbrev);
        }
        if (struct.isSetProvince()) {
          oprot.writeString(struct.province);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cardType = iprot.readI32();
          struct.setCardTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.bankName = iprot.readString();
          struct.setBankNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.mobileId = iprot.readString();
          struct.setMobileIdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.isuse = iprot.readI32();
          struct.setIsuseIsSet(true);
        }
        if (incoming.get(8)) {
          struct.cityname = iprot.readString();
          struct.setCitynameIsSet(true);
        }
        if (incoming.get(9)) {
          struct.ispublic = iprot.readI32();
          struct.setIspublicIsSet(true);
        }
        if (incoming.get(10)) {
          struct.idtype = iprot.readI32();
          struct.setIdtypeIsSet(true);
        }
        if (incoming.get(11)) {
          struct.identity = iprot.readString();
          struct.setIdentityIsSet(true);
        }
        if (incoming.get(12)) {
          struct.bank = iprot.readString();
          struct.setBankIsSet(true);
        }
        if (incoming.get(13)) {
          struct.abbrev = iprot.readString();
          struct.setAbbrevIsSet(true);
        }
        if (incoming.get(14)) {
          struct.province = iprot.readString();
          struct.setProvinceIsSet(true);
        }
      }
    }

  }

  public static class updateMentionAccount_result implements org.apache.thrift.TBase<updateMentionAccount_result, updateMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionAccount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionAccount_result.class, metaDataMap);
    }

    public updateMentionAccount_result() {
    }

    public updateMentionAccount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionAccount_result(updateMentionAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateMentionAccount_result deepCopy() {
      return new updateMentionAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateMentionAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionAccount_result)
        return this.equals((updateMentionAccount_result)that);
      return false;
    }

    public boolean equals(updateMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public updateMentionAccount_resultStandardScheme getScheme() {
        return new updateMentionAccount_resultStandardScheme();
      }
    }

    private static class updateMentionAccount_resultStandardScheme extends StandardScheme<updateMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public updateMentionAccount_resultTupleScheme getScheme() {
        return new updateMentionAccount_resultTupleScheme();
      }
    }

    private static class updateMentionAccount_resultTupleScheme extends TupleScheme<updateMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class delMentionAccount_args implements org.apache.thrift.TBase<delMentionAccount_args, delMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<delMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMentionAccount_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMentionAccount_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMentionAccount_args.class, metaDataMap);
    }

    public delMentionAccount_args() {
    }

    public delMentionAccount_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMentionAccount_args(delMentionAccount_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delMentionAccount_args deepCopy() {
      return new delMentionAccount_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delMentionAccount_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMentionAccount_args)
        return this.equals((delMentionAccount_args)that);
      return false;
    }

    public boolean equals(delMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMentionAccount_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public delMentionAccount_argsStandardScheme getScheme() {
        return new delMentionAccount_argsStandardScheme();
      }
    }

    private static class delMentionAccount_argsStandardScheme extends StandardScheme<delMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public delMentionAccount_argsTupleScheme getScheme() {
        return new delMentionAccount_argsTupleScheme();
      }
    }

    private static class delMentionAccount_argsTupleScheme extends TupleScheme<delMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delMentionAccount_result implements org.apache.thrift.TBase<delMentionAccount_result, delMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<delMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMentionAccount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMentionAccount_result.class, metaDataMap);
    }

    public delMentionAccount_result() {
    }

    public delMentionAccount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMentionAccount_result(delMentionAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public delMentionAccount_result deepCopy() {
      return new delMentionAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public delMentionAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public delMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMentionAccount_result)
        return this.equals((delMentionAccount_result)that);
      return false;
    }

    public boolean equals(delMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public delMentionAccount_resultStandardScheme getScheme() {
        return new delMentionAccount_resultStandardScheme();
      }
    }

    private static class delMentionAccount_resultStandardScheme extends StandardScheme<delMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public delMentionAccount_resultTupleScheme getScheme() {
        return new delMentionAccount_resultTupleScheme();
      }
    }

    private static class delMentionAccount_resultTupleScheme extends TupleScheme<delMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class checkWallet_args implements org.apache.thrift.TBase<checkWallet_args, checkWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWallet_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWallet_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWallet_args.class, metaDataMap);
    }

    public checkWallet_args() {
    }

    public checkWallet_args(
      String uId,
      String userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWallet_args(checkWallet_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
    }

    public checkWallet_args deepCopy() {
      return new checkWallet_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
    }

    public String getUId() {
      return this.uId;
    }

    public checkWallet_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public checkWallet_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWallet_args)
        return this.equals((checkWallet_args)that);
      return false;
    }

    public boolean equals(checkWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWallet_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWallet_argsStandardSchemeFactory implements SchemeFactory {
      public checkWallet_argsStandardScheme getScheme() {
        return new checkWallet_argsStandardScheme();
      }
    }

    private static class checkWallet_argsStandardScheme extends StandardScheme<checkWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWallet_argsTupleSchemeFactory implements SchemeFactory {
      public checkWallet_argsTupleScheme getScheme() {
        return new checkWallet_argsTupleScheme();
      }
    }

    private static class checkWallet_argsTupleScheme extends TupleScheme<checkWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class checkWallet_result implements org.apache.thrift.TBase<checkWallet_result, checkWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWallet_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWallet_result.class, metaDataMap);
    }

    public checkWallet_result() {
    }

    public checkWallet_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWallet_result(checkWallet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public checkWallet_result deepCopy() {
      return new checkWallet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkWallet_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public checkWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWallet_result)
        return this.equals((checkWallet_result)that);
      return false;
    }

    public boolean equals(checkWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWallet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWallet_resultStandardSchemeFactory implements SchemeFactory {
      public checkWallet_resultStandardScheme getScheme() {
        return new checkWallet_resultStandardScheme();
      }
    }

    private static class checkWallet_resultStandardScheme extends StandardScheme<checkWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWallet_resultTupleSchemeFactory implements SchemeFactory {
      public checkWallet_resultTupleScheme getScheme() {
        return new checkWallet_resultTupleScheme();
      }
    }

    private static class checkWallet_resultTupleScheme extends TupleScheme<checkWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWalletBalance_args implements org.apache.thrift.TBase<updateWalletBalance_args, updateWalletBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletBalance_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletBalance_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletBalance_args.class, metaDataMap);
    }

    public updateWalletBalance_args() {
    }

    public updateWalletBalance_args(
      List<Map<String,String>> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletBalance_args(updateWalletBalance_args other) {
      if (other.isSetWalletMap()) {
        List<Map<String,String>> __this__walletMap = new ArrayList<Map<String,String>>(other.walletMap.size());
        for (Map<String,String> other_element : other.walletMap) {
          Map<String,String> __this__walletMap_copy = new HashMap<String,String>(other_element);
          __this__walletMap.add(__this__walletMap_copy);
        }
        this.walletMap = __this__walletMap;
      }
    }

    public updateWalletBalance_args deepCopy() {
      return new updateWalletBalance_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public java.util.Iterator<Map<String,String>> getWalletMapIterator() {
      return (this.walletMap == null) ? null : this.walletMap.iterator();
    }

    public void addToWalletMap(Map<String,String> elem) {
      if (this.walletMap == null) {
        this.walletMap = new ArrayList<Map<String,String>>();
      }
      this.walletMap.add(elem);
    }

    public List<Map<String,String>> getWalletMap() {
      return this.walletMap;
    }

    public updateWalletBalance_args setWalletMap(List<Map<String,String>> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletBalance_args)
        return this.equals((updateWalletBalance_args)that);
      return false;
    }

    public boolean equals(updateWalletBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletBalance_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletBalance_argsStandardSchemeFactory implements SchemeFactory {
      public updateWalletBalance_argsStandardScheme getScheme() {
        return new updateWalletBalance_argsStandardScheme();
      }
    }

    private static class updateWalletBalance_argsStandardScheme extends StandardScheme<updateWalletBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.walletMap = new ArrayList<Map<String,String>>(_list146.size);
                  for (int _i147 = 0; _i147 < _list146.size; ++_i147)
                  {
                    Map<String,String> _elem148;
                    {
                      org.apache.thrift.protocol.TMap _map149 = iprot.readMapBegin();
                      _elem148 = new HashMap<String,String>(2*_map149.size);
                      for (int _i150 = 0; _i150 < _map149.size; ++_i150)
                      {
                        String _key151;
                        String _val152;
                        _key151 = iprot.readString();
                        _val152 = iprot.readString();
                        _elem148.put(_key151, _val152);
                      }
                      iprot.readMapEnd();
                    }
                    struct.walletMap.add(_elem148);
                  }
                  iprot.readListEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.walletMap.size()));
            for (Map<String,String> _iter153 : struct.walletMap)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter153.size()));
                for (Map.Entry<String, String> _iter154 : _iter153.entrySet())
                {
                  oprot.writeString(_iter154.getKey());
                  oprot.writeString(_iter154.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletBalance_argsTupleSchemeFactory implements SchemeFactory {
      public updateWalletBalance_argsTupleScheme getScheme() {
        return new updateWalletBalance_argsTupleScheme();
      }
    }

    private static class updateWalletBalance_argsTupleScheme extends TupleScheme<updateWalletBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map<String,String> _iter155 : struct.walletMap)
            {
              {
                oprot.writeI32(_iter155.size());
                for (Map.Entry<String, String> _iter156 : _iter155.entrySet())
                {
                  oprot.writeString(_iter156.getKey());
                  oprot.writeString(_iter156.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.walletMap = new ArrayList<Map<String,String>>(_list157.size);
            for (int _i158 = 0; _i158 < _list157.size; ++_i158)
            {
              Map<String,String> _elem159;
              {
                org.apache.thrift.protocol.TMap _map160 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem159 = new HashMap<String,String>(2*_map160.size);
                for (int _i161 = 0; _i161 < _map160.size; ++_i161)
                {
                  String _key162;
                  String _val163;
                  _key162 = iprot.readString();
                  _val163 = iprot.readString();
                  _elem159.put(_key162, _val163);
                }
              }
              struct.walletMap.add(_elem159);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class updateWalletBalance_result implements org.apache.thrift.TBase<updateWalletBalance_result, updateWalletBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletBalance_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletBalance_result.class, metaDataMap);
    }

    public updateWalletBalance_result() {
    }

    public updateWalletBalance_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletBalance_result(updateWalletBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWalletBalance_result deepCopy() {
      return new updateWalletBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateWalletBalance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWalletBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletBalance_result)
        return this.equals((updateWalletBalance_result)that);
      return false;
    }

    public boolean equals(updateWalletBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletBalance_resultStandardSchemeFactory implements SchemeFactory {
      public updateWalletBalance_resultStandardScheme getScheme() {
        return new updateWalletBalance_resultStandardScheme();
      }
    }

    private static class updateWalletBalance_resultStandardScheme extends StandardScheme<updateWalletBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletBalance_resultTupleSchemeFactory implements SchemeFactory {
      public updateWalletBalance_resultTupleScheme getScheme() {
        return new updateWalletBalance_resultTupleScheme();
      }
    }

    private static class updateWalletBalance_resultTupleScheme extends TupleScheme<updateWalletBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord_args implements org.apache.thrift.TBase<updateWithdrawalsRecord_args, updateWithdrawalsRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord_args");

    private static final org.apache.thrift.protocol.TField AMOUNT_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("amountMapList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> amountMapList; // required
    public Map<String,String> orderMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMOUNT_MAP_LIST((short)1, "amountMapList"),
      ORDER_MAP((short)2, "orderMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMOUNT_MAP_LIST
            return AMOUNT_MAP_LIST;
          case 2: // ORDER_MAP
            return ORDER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMOUNT_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("amountMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.ORDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord_args.class, metaDataMap);
    }

    public updateWithdrawalsRecord_args() {
    }

    public updateWithdrawalsRecord_args(
      List<Map<String,String>> amountMapList,
      Map<String,String> orderMap)
    {
      this();
      this.amountMapList = amountMapList;
      this.orderMap = orderMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord_args(updateWithdrawalsRecord_args other) {
      if (other.isSetAmountMapList()) {
        List<Map<String,String>> __this__amountMapList = new ArrayList<Map<String,String>>(other.amountMapList.size());
        for (Map<String,String> other_element : other.amountMapList) {
          Map<String,String> __this__amountMapList_copy = new HashMap<String,String>(other_element);
          __this__amountMapList.add(__this__amountMapList_copy);
        }
        this.amountMapList = __this__amountMapList;
      }
      if (other.isSetOrderMap()) {
        Map<String,String> __this__orderMap = new HashMap<String,String>(other.orderMap);
        this.orderMap = __this__orderMap;
      }
    }

    public updateWithdrawalsRecord_args deepCopy() {
      return new updateWithdrawalsRecord_args(this);
    }

    @Override
    public void clear() {
      this.amountMapList = null;
      this.orderMap = null;
    }

    public int getAmountMapListSize() {
      return (this.amountMapList == null) ? 0 : this.amountMapList.size();
    }

    public java.util.Iterator<Map<String,String>> getAmountMapListIterator() {
      return (this.amountMapList == null) ? null : this.amountMapList.iterator();
    }

    public void addToAmountMapList(Map<String,String> elem) {
      if (this.amountMapList == null) {
        this.amountMapList = new ArrayList<Map<String,String>>();
      }
      this.amountMapList.add(elem);
    }

    public List<Map<String,String>> getAmountMapList() {
      return this.amountMapList;
    }

    public updateWithdrawalsRecord_args setAmountMapList(List<Map<String,String>> amountMapList) {
      this.amountMapList = amountMapList;
      return this;
    }

    public void unsetAmountMapList() {
      this.amountMapList = null;
    }

    /** Returns true if field amountMapList is set (has been assigned a value) and false otherwise */
    public boolean isSetAmountMapList() {
      return this.amountMapList != null;
    }

    public void setAmountMapListIsSet(boolean value) {
      if (!value) {
        this.amountMapList = null;
      }
    }

    public int getOrderMapSize() {
      return (this.orderMap == null) ? 0 : this.orderMap.size();
    }

    public void putToOrderMap(String key, String val) {
      if (this.orderMap == null) {
        this.orderMap = new HashMap<String,String>();
      }
      this.orderMap.put(key, val);
    }

    public Map<String,String> getOrderMap() {
      return this.orderMap;
    }

    public updateWithdrawalsRecord_args setOrderMap(Map<String,String> orderMap) {
      this.orderMap = orderMap;
      return this;
    }

    public void unsetOrderMap() {
      this.orderMap = null;
    }

    /** Returns true if field orderMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMap() {
      return this.orderMap != null;
    }

    public void setOrderMapIsSet(boolean value) {
      if (!value) {
        this.orderMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        if (value == null) {
          unsetAmountMapList();
        } else {
          setAmountMapList((List<Map<String,String>>)value);
        }
        break;

      case ORDER_MAP:
        if (value == null) {
          unsetOrderMap();
        } else {
          setOrderMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        return getAmountMapList();

      case ORDER_MAP:
        return getOrderMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AMOUNT_MAP_LIST:
        return isSetAmountMapList();
      case ORDER_MAP:
        return isSetOrderMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord_args)
        return this.equals((updateWithdrawalsRecord_args)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_amountMapList = true && this.isSetAmountMapList();
      boolean that_present_amountMapList = true && that.isSetAmountMapList();
      if (this_present_amountMapList || that_present_amountMapList) {
        if (!(this_present_amountMapList && that_present_amountMapList))
          return false;
        if (!this.amountMapList.equals(that.amountMapList))
          return false;
      }

      boolean this_present_orderMap = true && this.isSetOrderMap();
      boolean that_present_orderMap = true && that.isSetOrderMap();
      if (this_present_orderMap || that_present_orderMap) {
        if (!(this_present_orderMap && that_present_orderMap))
          return false;
        if (!this.orderMap.equals(that.orderMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmountMapList()).compareTo(other.isSetAmountMapList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmountMapList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountMapList, other.amountMapList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderMap()).compareTo(other.isSetOrderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMap, other.orderMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord_args(");
      boolean first = true;

      sb.append("amountMapList:");
      if (this.amountMapList == null) {
        sb.append("null");
      } else {
        sb.append(this.amountMapList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderMap:");
      if (this.orderMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_argsStandardScheme getScheme() {
        return new updateWithdrawalsRecord_argsStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord_argsStandardScheme extends StandardScheme<updateWithdrawalsRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMOUNT_MAP_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                  struct.amountMapList = new ArrayList<Map<String,String>>(_list164.size);
                  for (int _i165 = 0; _i165 < _list164.size; ++_i165)
                  {
                    Map<String,String> _elem166;
                    {
                      org.apache.thrift.protocol.TMap _map167 = iprot.readMapBegin();
                      _elem166 = new HashMap<String,String>(2*_map167.size);
                      for (int _i168 = 0; _i168 < _map167.size; ++_i168)
                      {
                        String _key169;
                        String _val170;
                        _key169 = iprot.readString();
                        _val170 = iprot.readString();
                        _elem166.put(_key169, _val170);
                      }
                      iprot.readMapEnd();
                    }
                    struct.amountMapList.add(_elem166);
                  }
                  iprot.readListEnd();
                }
                struct.setAmountMapListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map171 = iprot.readMapBegin();
                  struct.orderMap = new HashMap<String,String>(2*_map171.size);
                  for (int _i172 = 0; _i172 < _map171.size; ++_i172)
                  {
                    String _key173;
                    String _val174;
                    _key173 = iprot.readString();
                    _val174 = iprot.readString();
                    struct.orderMap.put(_key173, _val174);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amountMapList != null) {
          oprot.writeFieldBegin(AMOUNT_MAP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.amountMapList.size()));
            for (Map<String,String> _iter175 : struct.amountMapList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter175.size()));
                for (Map.Entry<String, String> _iter176 : _iter175.entrySet())
                {
                  oprot.writeString(_iter176.getKey());
                  oprot.writeString(_iter176.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.orderMap != null) {
          oprot.writeFieldBegin(ORDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderMap.size()));
            for (Map.Entry<String, String> _iter177 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter177.getKey());
              oprot.writeString(_iter177.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_argsTupleScheme getScheme() {
        return new updateWithdrawalsRecord_argsTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord_argsTupleScheme extends TupleScheme<updateWithdrawalsRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmountMapList()) {
          optionals.set(0);
        }
        if (struct.isSetOrderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmountMapList()) {
          {
            oprot.writeI32(struct.amountMapList.size());
            for (Map<String,String> _iter178 : struct.amountMapList)
            {
              {
                oprot.writeI32(_iter178.size());
                for (Map.Entry<String, String> _iter179 : _iter178.entrySet())
                {
                  oprot.writeString(_iter179.getKey());
                  oprot.writeString(_iter179.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOrderMap()) {
          {
            oprot.writeI32(struct.orderMap.size());
            for (Map.Entry<String, String> _iter180 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter180.getKey());
              oprot.writeString(_iter180.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.amountMapList = new ArrayList<Map<String,String>>(_list181.size);
            for (int _i182 = 0; _i182 < _list181.size; ++_i182)
            {
              Map<String,String> _elem183;
              {
                org.apache.thrift.protocol.TMap _map184 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem183 = new HashMap<String,String>(2*_map184.size);
                for (int _i185 = 0; _i185 < _map184.size; ++_i185)
                {
                  String _key186;
                  String _val187;
                  _key186 = iprot.readString();
                  _val187 = iprot.readString();
                  _elem183.put(_key186, _val187);
                }
              }
              struct.amountMapList.add(_elem183);
            }
          }
          struct.setAmountMapListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map188 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orderMap = new HashMap<String,String>(2*_map188.size);
            for (int _i189 = 0; _i189 < _map188.size; ++_i189)
            {
              String _key190;
              String _val191;
              _key190 = iprot.readString();
              _val191 = iprot.readString();
              struct.orderMap.put(_key190, _val191);
            }
          }
          struct.setOrderMapIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord_result implements org.apache.thrift.TBase<updateWithdrawalsRecord_result, updateWithdrawalsRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord_result.class, metaDataMap);
    }

    public updateWithdrawalsRecord_result() {
    }

    public updateWithdrawalsRecord_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord_result(updateWithdrawalsRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWithdrawalsRecord_result deepCopy() {
      return new updateWithdrawalsRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateWithdrawalsRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWithdrawalsRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord_result)
        return this.equals((updateWithdrawalsRecord_result)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_resultStandardScheme getScheme() {
        return new updateWithdrawalsRecord_resultStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord_resultStandardScheme extends StandardScheme<updateWithdrawalsRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_resultTupleScheme getScheme() {
        return new updateWithdrawalsRecord_resultTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord_resultTupleScheme extends TupleScheme<updateWithdrawalsRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateJointWithdrawalsRecord_args implements org.apache.thrift.TBase<updateJointWithdrawalsRecord_args, updateJointWithdrawalsRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateJointWithdrawalsRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJointWithdrawalsRecord_args");

    private static final org.apache.thrift.protocol.TField AMOUNT_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("amountMapList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJointWithdrawalsRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJointWithdrawalsRecord_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> amountMapList; // required
    public Map<String,String> orderMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMOUNT_MAP_LIST((short)1, "amountMapList"),
      ORDER_MAP((short)2, "orderMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMOUNT_MAP_LIST
            return AMOUNT_MAP_LIST;
          case 2: // ORDER_MAP
            return ORDER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMOUNT_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("amountMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.ORDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJointWithdrawalsRecord_args.class, metaDataMap);
    }

    public updateJointWithdrawalsRecord_args() {
    }

    public updateJointWithdrawalsRecord_args(
      List<Map<String,String>> amountMapList,
      Map<String,String> orderMap)
    {
      this();
      this.amountMapList = amountMapList;
      this.orderMap = orderMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJointWithdrawalsRecord_args(updateJointWithdrawalsRecord_args other) {
      if (other.isSetAmountMapList()) {
        List<Map<String,String>> __this__amountMapList = new ArrayList<Map<String,String>>(other.amountMapList.size());
        for (Map<String,String> other_element : other.amountMapList) {
          Map<String,String> __this__amountMapList_copy = new HashMap<String,String>(other_element);
          __this__amountMapList.add(__this__amountMapList_copy);
        }
        this.amountMapList = __this__amountMapList;
      }
      if (other.isSetOrderMap()) {
        Map<String,String> __this__orderMap = new HashMap<String,String>(other.orderMap);
        this.orderMap = __this__orderMap;
      }
    }

    public updateJointWithdrawalsRecord_args deepCopy() {
      return new updateJointWithdrawalsRecord_args(this);
    }

    @Override
    public void clear() {
      this.amountMapList = null;
      this.orderMap = null;
    }

    public int getAmountMapListSize() {
      return (this.amountMapList == null) ? 0 : this.amountMapList.size();
    }

    public java.util.Iterator<Map<String,String>> getAmountMapListIterator() {
      return (this.amountMapList == null) ? null : this.amountMapList.iterator();
    }

    public void addToAmountMapList(Map<String,String> elem) {
      if (this.amountMapList == null) {
        this.amountMapList = new ArrayList<Map<String,String>>();
      }
      this.amountMapList.add(elem);
    }

    public List<Map<String,String>> getAmountMapList() {
      return this.amountMapList;
    }

    public updateJointWithdrawalsRecord_args setAmountMapList(List<Map<String,String>> amountMapList) {
      this.amountMapList = amountMapList;
      return this;
    }

    public void unsetAmountMapList() {
      this.amountMapList = null;
    }

    /** Returns true if field amountMapList is set (has been assigned a value) and false otherwise */
    public boolean isSetAmountMapList() {
      return this.amountMapList != null;
    }

    public void setAmountMapListIsSet(boolean value) {
      if (!value) {
        this.amountMapList = null;
      }
    }

    public int getOrderMapSize() {
      return (this.orderMap == null) ? 0 : this.orderMap.size();
    }

    public void putToOrderMap(String key, String val) {
      if (this.orderMap == null) {
        this.orderMap = new HashMap<String,String>();
      }
      this.orderMap.put(key, val);
    }

    public Map<String,String> getOrderMap() {
      return this.orderMap;
    }

    public updateJointWithdrawalsRecord_args setOrderMap(Map<String,String> orderMap) {
      this.orderMap = orderMap;
      return this;
    }

    public void unsetOrderMap() {
      this.orderMap = null;
    }

    /** Returns true if field orderMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMap() {
      return this.orderMap != null;
    }

    public void setOrderMapIsSet(boolean value) {
      if (!value) {
        this.orderMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        if (value == null) {
          unsetAmountMapList();
        } else {
          setAmountMapList((List<Map<String,String>>)value);
        }
        break;

      case ORDER_MAP:
        if (value == null) {
          unsetOrderMap();
        } else {
          setOrderMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        return getAmountMapList();

      case ORDER_MAP:
        return getOrderMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AMOUNT_MAP_LIST:
        return isSetAmountMapList();
      case ORDER_MAP:
        return isSetOrderMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJointWithdrawalsRecord_args)
        return this.equals((updateJointWithdrawalsRecord_args)that);
      return false;
    }

    public boolean equals(updateJointWithdrawalsRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_amountMapList = true && this.isSetAmountMapList();
      boolean that_present_amountMapList = true && that.isSetAmountMapList();
      if (this_present_amountMapList || that_present_amountMapList) {
        if (!(this_present_amountMapList && that_present_amountMapList))
          return false;
        if (!this.amountMapList.equals(that.amountMapList))
          return false;
      }

      boolean this_present_orderMap = true && this.isSetOrderMap();
      boolean that_present_orderMap = true && that.isSetOrderMap();
      if (this_present_orderMap || that_present_orderMap) {
        if (!(this_present_orderMap && that_present_orderMap))
          return false;
        if (!this.orderMap.equals(that.orderMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateJointWithdrawalsRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmountMapList()).compareTo(other.isSetAmountMapList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmountMapList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountMapList, other.amountMapList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderMap()).compareTo(other.isSetOrderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMap, other.orderMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJointWithdrawalsRecord_args(");
      boolean first = true;

      sb.append("amountMapList:");
      if (this.amountMapList == null) {
        sb.append("null");
      } else {
        sb.append(this.amountMapList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderMap:");
      if (this.orderMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJointWithdrawalsRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_argsStandardScheme getScheme() {
        return new updateJointWithdrawalsRecord_argsStandardScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_argsStandardScheme extends StandardScheme<updateJointWithdrawalsRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMOUNT_MAP_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.amountMapList = new ArrayList<Map<String,String>>(_list192.size);
                  for (int _i193 = 0; _i193 < _list192.size; ++_i193)
                  {
                    Map<String,String> _elem194;
                    {
                      org.apache.thrift.protocol.TMap _map195 = iprot.readMapBegin();
                      _elem194 = new HashMap<String,String>(2*_map195.size);
                      for (int _i196 = 0; _i196 < _map195.size; ++_i196)
                      {
                        String _key197;
                        String _val198;
                        _key197 = iprot.readString();
                        _val198 = iprot.readString();
                        _elem194.put(_key197, _val198);
                      }
                      iprot.readMapEnd();
                    }
                    struct.amountMapList.add(_elem194);
                  }
                  iprot.readListEnd();
                }
                struct.setAmountMapListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map199 = iprot.readMapBegin();
                  struct.orderMap = new HashMap<String,String>(2*_map199.size);
                  for (int _i200 = 0; _i200 < _map199.size; ++_i200)
                  {
                    String _key201;
                    String _val202;
                    _key201 = iprot.readString();
                    _val202 = iprot.readString();
                    struct.orderMap.put(_key201, _val202);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amountMapList != null) {
          oprot.writeFieldBegin(AMOUNT_MAP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.amountMapList.size()));
            for (Map<String,String> _iter203 : struct.amountMapList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter203.size()));
                for (Map.Entry<String, String> _iter204 : _iter203.entrySet())
                {
                  oprot.writeString(_iter204.getKey());
                  oprot.writeString(_iter204.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.orderMap != null) {
          oprot.writeFieldBegin(ORDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderMap.size()));
            for (Map.Entry<String, String> _iter205 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter205.getKey());
              oprot.writeString(_iter205.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJointWithdrawalsRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_argsTupleScheme getScheme() {
        return new updateJointWithdrawalsRecord_argsTupleScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_argsTupleScheme extends TupleScheme<updateJointWithdrawalsRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmountMapList()) {
          optionals.set(0);
        }
        if (struct.isSetOrderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmountMapList()) {
          {
            oprot.writeI32(struct.amountMapList.size());
            for (Map<String,String> _iter206 : struct.amountMapList)
            {
              {
                oprot.writeI32(_iter206.size());
                for (Map.Entry<String, String> _iter207 : _iter206.entrySet())
                {
                  oprot.writeString(_iter207.getKey());
                  oprot.writeString(_iter207.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOrderMap()) {
          {
            oprot.writeI32(struct.orderMap.size());
            for (Map.Entry<String, String> _iter208 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter208.getKey());
              oprot.writeString(_iter208.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.amountMapList = new ArrayList<Map<String,String>>(_list209.size);
            for (int _i210 = 0; _i210 < _list209.size; ++_i210)
            {
              Map<String,String> _elem211;
              {
                org.apache.thrift.protocol.TMap _map212 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem211 = new HashMap<String,String>(2*_map212.size);
                for (int _i213 = 0; _i213 < _map212.size; ++_i213)
                {
                  String _key214;
                  String _val215;
                  _key214 = iprot.readString();
                  _val215 = iprot.readString();
                  _elem211.put(_key214, _val215);
                }
              }
              struct.amountMapList.add(_elem211);
            }
          }
          struct.setAmountMapListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map216 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orderMap = new HashMap<String,String>(2*_map216.size);
            for (int _i217 = 0; _i217 < _map216.size; ++_i217)
            {
              String _key218;
              String _val219;
              _key218 = iprot.readString();
              _val219 = iprot.readString();
              struct.orderMap.put(_key218, _val219);
            }
          }
          struct.setOrderMapIsSet(true);
        }
      }
    }

  }

  public static class updateJointWithdrawalsRecord_result implements org.apache.thrift.TBase<updateJointWithdrawalsRecord_result, updateJointWithdrawalsRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateJointWithdrawalsRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJointWithdrawalsRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJointWithdrawalsRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJointWithdrawalsRecord_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJointWithdrawalsRecord_result.class, metaDataMap);
    }

    public updateJointWithdrawalsRecord_result() {
    }

    public updateJointWithdrawalsRecord_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJointWithdrawalsRecord_result(updateJointWithdrawalsRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateJointWithdrawalsRecord_result deepCopy() {
      return new updateJointWithdrawalsRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateJointWithdrawalsRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateJointWithdrawalsRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJointWithdrawalsRecord_result)
        return this.equals((updateJointWithdrawalsRecord_result)that);
      return false;
    }

    public boolean equals(updateJointWithdrawalsRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateJointWithdrawalsRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJointWithdrawalsRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJointWithdrawalsRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_resultStandardScheme getScheme() {
        return new updateJointWithdrawalsRecord_resultStandardScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_resultStandardScheme extends StandardScheme<updateJointWithdrawalsRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJointWithdrawalsRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_resultTupleScheme getScheme() {
        return new updateJointWithdrawalsRecord_resultTupleScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_resultTupleScheme extends TupleScheme<updateJointWithdrawalsRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getUpdatePwdNum_args implements org.apache.thrift.TBase<getUpdatePwdNum_args, getUpdatePwdNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUpdatePwdNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUpdatePwdNum_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUpdatePwdNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUpdatePwdNum_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUpdatePwdNum_args.class, metaDataMap);
    }

    public getUpdatePwdNum_args() {
    }

    public getUpdatePwdNum_args(
      String uId,
      String userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdatePwdNum_args(getUpdatePwdNum_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
    }

    public getUpdatePwdNum_args deepCopy() {
      return new getUpdatePwdNum_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
    }

    public String getUId() {
      return this.uId;
    }

    public getUpdatePwdNum_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public getUpdatePwdNum_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdatePwdNum_args)
        return this.equals((getUpdatePwdNum_args)that);
      return false;
    }

    public boolean equals(getUpdatePwdNum_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUpdatePwdNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUpdatePwdNum_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUpdatePwdNum_argsStandardSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_argsStandardScheme getScheme() {
        return new getUpdatePwdNum_argsStandardScheme();
      }
    }

    private static class getUpdatePwdNum_argsStandardScheme extends StandardScheme<getUpdatePwdNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUpdatePwdNum_argsTupleSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_argsTupleScheme getScheme() {
        return new getUpdatePwdNum_argsTupleScheme();
      }
    }

    private static class getUpdatePwdNum_argsTupleScheme extends TupleScheme<getUpdatePwdNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class getUpdatePwdNum_result implements org.apache.thrift.TBase<getUpdatePwdNum_result, getUpdatePwdNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUpdatePwdNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUpdatePwdNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUpdatePwdNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUpdatePwdNum_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUpdatePwdNum_result.class, metaDataMap);
    }

    public getUpdatePwdNum_result() {
    }

    public getUpdatePwdNum_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdatePwdNum_result(getUpdatePwdNum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getUpdatePwdNum_result deepCopy() {
      return new getUpdatePwdNum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getUpdatePwdNum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getUpdatePwdNum_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdatePwdNum_result)
        return this.equals((getUpdatePwdNum_result)that);
      return false;
    }

    public boolean equals(getUpdatePwdNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUpdatePwdNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUpdatePwdNum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUpdatePwdNum_resultStandardSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_resultStandardScheme getScheme() {
        return new getUpdatePwdNum_resultStandardScheme();
      }
    }

    private static class getUpdatePwdNum_resultStandardScheme extends StandardScheme<getUpdatePwdNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUpdatePwdNum_resultTupleSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_resultTupleScheme getScheme() {
        return new getUpdatePwdNum_resultTupleScheme();
      }
    }

    private static class getUpdatePwdNum_resultTupleScheme extends TupleScheme<getUpdatePwdNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletRecord_args implements org.apache.thrift.TBase<getWalletRecord_args, getWalletRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletRecord_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletRecord_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletRecord_args.class, metaDataMap);
    }

    public getWalletRecord_args() {
    }

    public getWalletRecord_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletRecord_args(getWalletRecord_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getWalletRecord_args deepCopy() {
      return new getWalletRecord_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getWalletRecord_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletRecord_args)
        return this.equals((getWalletRecord_args)that);
      return false;
    }

    public boolean equals(getWalletRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletRecord_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletRecord_argsStandardScheme getScheme() {
        return new getWalletRecord_argsStandardScheme();
      }
    }

    private static class getWalletRecord_argsStandardScheme extends StandardScheme<getWalletRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map220 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map220.size);
                  for (int _i221 = 0; _i221 < _map220.size; ++_i221)
                  {
                    String _key222;
                    String _val223;
                    _key222 = iprot.readString();
                    _val223 = iprot.readString();
                    struct.paramMap.put(_key222, _val223);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter224 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter224.getKey());
              oprot.writeString(_iter224.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletRecord_argsTupleScheme getScheme() {
        return new getWalletRecord_argsTupleScheme();
      }
    }

    private static class getWalletRecord_argsTupleScheme extends TupleScheme<getWalletRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter225 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter225.getKey());
              oprot.writeString(_iter225.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map226 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map226.size);
            for (int _i227 = 0; _i227 < _map226.size; ++_i227)
            {
              String _key228;
              String _val229;
              _key228 = iprot.readString();
              _val229 = iprot.readString();
              struct.paramMap.put(_key228, _val229);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getWalletRecord_result implements org.apache.thrift.TBase<getWalletRecord_result, getWalletRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletRecord_resultTupleSchemeFactory());
    }

    public WalletRecord success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WalletRecord.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletRecord_result.class, metaDataMap);
    }

    public getWalletRecord_result() {
    }

    public getWalletRecord_result(
      WalletRecord success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletRecord_result(getWalletRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new WalletRecord(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletRecord_result deepCopy() {
      return new getWalletRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public WalletRecord getSuccess() {
      return this.success;
    }

    public getWalletRecord_result setSuccess(WalletRecord success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WalletRecord)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletRecord_result)
        return this.equals((getWalletRecord_result)that);
      return false;
    }

    public boolean equals(getWalletRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletRecord_resultStandardScheme getScheme() {
        return new getWalletRecord_resultStandardScheme();
      }
    }

    private static class getWalletRecord_resultStandardScheme extends StandardScheme<getWalletRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WalletRecord();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletRecord_resultTupleScheme getScheme() {
        return new getWalletRecord_resultTupleScheme();
      }
    }

    private static class getWalletRecord_resultTupleScheme extends TupleScheme<getWalletRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new WalletRecord();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionBalance_args implements org.apache.thrift.TBase<getMentionBalance_args, getMentionBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionBalance_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionBalance_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionBalance_args.class, metaDataMap);
    }

    public getMentionBalance_args() {
    }

    public getMentionBalance_args(
      String uId,
      String userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionBalance_args(getMentionBalance_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
    }

    public getMentionBalance_args deepCopy() {
      return new getMentionBalance_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
    }

    public String getUId() {
      return this.uId;
    }

    public getMentionBalance_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public getMentionBalance_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionBalance_args)
        return this.equals((getMentionBalance_args)that);
      return false;
    }

    public boolean equals(getMentionBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionBalance_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionBalance_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionBalance_argsStandardScheme getScheme() {
        return new getMentionBalance_argsStandardScheme();
      }
    }

    private static class getMentionBalance_argsStandardScheme extends StandardScheme<getMentionBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionBalance_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionBalance_argsTupleScheme getScheme() {
        return new getMentionBalance_argsTupleScheme();
      }
    }

    private static class getMentionBalance_argsTupleScheme extends TupleScheme<getMentionBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class getMentionBalance_result implements org.apache.thrift.TBase<getMentionBalance_result, getMentionBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionBalance_resultTupleSchemeFactory());
    }

    public double success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionBalance_result.class, metaDataMap);
    }

    public getMentionBalance_result() {
    }

    public getMentionBalance_result(
      double success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionBalance_result(getMentionBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionBalance_result deepCopy() {
      return new getMentionBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.qe = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public getMentionBalance_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionBalance_result)
        return this.equals((getMentionBalance_result)that);
      return false;
    }

    public boolean equals(getMentionBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionBalance_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionBalance_resultStandardScheme getScheme() {
        return new getMentionBalance_resultStandardScheme();
      }
    }

    private static class getMentionBalance_resultStandardScheme extends StandardScheme<getMentionBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionBalance_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionBalance_resultTupleScheme getScheme() {
        return new getMentionBalance_resultTupleScheme();
      }
    }

    private static class getMentionBalance_resultTupleScheme extends TupleScheme<getMentionBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateBalance_args implements org.apache.thrift.TBase<updateBalance_args, updateBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBalance_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBalance_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBalance_args.class, metaDataMap);
    }

    public updateBalance_args() {
    }

    public updateBalance_args(
      List<Map<String,String>> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBalance_args(updateBalance_args other) {
      if (other.isSetParamMap()) {
        List<Map<String,String>> __this__paramMap = new ArrayList<Map<String,String>>(other.paramMap.size());
        for (Map<String,String> other_element : other.paramMap) {
          Map<String,String> __this__paramMap_copy = new HashMap<String,String>(other_element);
          __this__paramMap.add(__this__paramMap_copy);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateBalance_args deepCopy() {
      return new updateBalance_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public java.util.Iterator<Map<String,String>> getParamMapIterator() {
      return (this.paramMap == null) ? null : this.paramMap.iterator();
    }

    public void addToParamMap(Map<String,String> elem) {
      if (this.paramMap == null) {
        this.paramMap = new ArrayList<Map<String,String>>();
      }
      this.paramMap.add(elem);
    }

    public List<Map<String,String>> getParamMap() {
      return this.paramMap;
    }

    public updateBalance_args setParamMap(List<Map<String,String>> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBalance_args)
        return this.equals((updateBalance_args)that);
      return false;
    }

    public boolean equals(updateBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBalance_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBalance_argsStandardSchemeFactory implements SchemeFactory {
      public updateBalance_argsStandardScheme getScheme() {
        return new updateBalance_argsStandardScheme();
      }
    }

    private static class updateBalance_argsStandardScheme extends StandardScheme<updateBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                  struct.paramMap = new ArrayList<Map<String,String>>(_list230.size);
                  for (int _i231 = 0; _i231 < _list230.size; ++_i231)
                  {
                    Map<String,String> _elem232;
                    {
                      org.apache.thrift.protocol.TMap _map233 = iprot.readMapBegin();
                      _elem232 = new HashMap<String,String>(2*_map233.size);
                      for (int _i234 = 0; _i234 < _map233.size; ++_i234)
                      {
                        String _key235;
                        String _val236;
                        _key235 = iprot.readString();
                        _val236 = iprot.readString();
                        _elem232.put(_key235, _val236);
                      }
                      iprot.readMapEnd();
                    }
                    struct.paramMap.add(_elem232);
                  }
                  iprot.readListEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.paramMap.size()));
            for (Map<String,String> _iter237 : struct.paramMap)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter237.size()));
                for (Map.Entry<String, String> _iter238 : _iter237.entrySet())
                {
                  oprot.writeString(_iter238.getKey());
                  oprot.writeString(_iter238.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBalance_argsTupleSchemeFactory implements SchemeFactory {
      public updateBalance_argsTupleScheme getScheme() {
        return new updateBalance_argsTupleScheme();
      }
    }

    private static class updateBalance_argsTupleScheme extends TupleScheme<updateBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map<String,String> _iter239 : struct.paramMap)
            {
              {
                oprot.writeI32(_iter239.size());
                for (Map.Entry<String, String> _iter240 : _iter239.entrySet())
                {
                  oprot.writeString(_iter240.getKey());
                  oprot.writeString(_iter240.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list241 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.paramMap = new ArrayList<Map<String,String>>(_list241.size);
            for (int _i242 = 0; _i242 < _list241.size; ++_i242)
            {
              Map<String,String> _elem243;
              {
                org.apache.thrift.protocol.TMap _map244 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem243 = new HashMap<String,String>(2*_map244.size);
                for (int _i245 = 0; _i245 < _map244.size; ++_i245)
                {
                  String _key246;
                  String _val247;
                  _key246 = iprot.readString();
                  _val247 = iprot.readString();
                  _elem243.put(_key246, _val247);
                }
              }
              struct.paramMap.add(_elem243);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateBalance_result implements org.apache.thrift.TBase<updateBalance_result, updateBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBalance_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBalance_result.class, metaDataMap);
    }

    public updateBalance_result() {
    }

    public updateBalance_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBalance_result(updateBalance_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateBalance_result deepCopy() {
      return new updateBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public updateBalance_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBalance_result)
        return this.equals((updateBalance_result)that);
      return false;
    }

    public boolean equals(updateBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBalance_resultStandardSchemeFactory implements SchemeFactory {
      public updateBalance_resultStandardScheme getScheme() {
        return new updateBalance_resultStandardScheme();
      }
    }

    private static class updateBalance_resultStandardScheme extends StandardScheme<updateBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map248 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map248.size);
                  for (int _i249 = 0; _i249 < _map248.size; ++_i249)
                  {
                    String _key250;
                    String _val251;
                    _key250 = iprot.readString();
                    _val251 = iprot.readString();
                    struct.success.put(_key250, _val251);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter252 : struct.success.entrySet())
            {
              oprot.writeString(_iter252.getKey());
              oprot.writeString(_iter252.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBalance_resultTupleSchemeFactory implements SchemeFactory {
      public updateBalance_resultTupleScheme getScheme() {
        return new updateBalance_resultTupleScheme();
      }
    }

    private static class updateBalance_resultTupleScheme extends TupleScheme<updateBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter253 : struct.success.entrySet())
            {
              oprot.writeString(_iter253.getKey());
              oprot.writeString(_iter253.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map254 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map254.size);
            for (int _i255 = 0; _i255 < _map254.size; ++_i255)
            {
              String _key256;
              String _val257;
              _key256 = iprot.readString();
              _val257 = iprot.readString();
              struct.success.put(_key256, _val257);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletList_args implements org.apache.thrift.TBase<getWalletList_args, getWalletList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletList_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletList_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletList_args.class, metaDataMap);
    }

    public getWalletList_args() {
    }

    public getWalletList_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletList_args(getWalletList_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getWalletList_args deepCopy() {
      return new getWalletList_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getWalletList_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletList_args)
        return this.equals((getWalletList_args)that);
      return false;
    }

    public boolean equals(getWalletList_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletList_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletList_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletList_argsStandardScheme getScheme() {
        return new getWalletList_argsStandardScheme();
      }
    }

    private static class getWalletList_argsStandardScheme extends StandardScheme<getWalletList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map258 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map258.size);
                  for (int _i259 = 0; _i259 < _map258.size; ++_i259)
                  {
                    String _key260;
                    String _val261;
                    _key260 = iprot.readString();
                    _val261 = iprot.readString();
                    struct.paramMap.put(_key260, _val261);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter262 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter262.getKey());
              oprot.writeString(_iter262.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletList_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletList_argsTupleScheme getScheme() {
        return new getWalletList_argsTupleScheme();
      }
    }

    private static class getWalletList_argsTupleScheme extends TupleScheme<getWalletList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter263 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter263.getKey());
              oprot.writeString(_iter263.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map264 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map264.size);
            for (int _i265 = 0; _i265 < _map264.size; ++_i265)
            {
              String _key266;
              String _val267;
              _key266 = iprot.readString();
              _val267 = iprot.readString();
              struct.paramMap.put(_key266, _val267);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getWalletList_result implements org.apache.thrift.TBase<getWalletList_result, getWalletList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletList_resultTupleSchemeFactory());
    }

    public Wallet success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Wallet.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletList_result.class, metaDataMap);
    }

    public getWalletList_result() {
    }

    public getWalletList_result(
      Wallet success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletList_result(getWalletList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Wallet(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletList_result deepCopy() {
      return new getWalletList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public Wallet getSuccess() {
      return this.success;
    }

    public getWalletList_result setSuccess(Wallet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Wallet)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletList_result)
        return this.equals((getWalletList_result)that);
      return false;
    }

    public boolean equals(getWalletList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletList_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletList_resultStandardScheme getScheme() {
        return new getWalletList_resultStandardScheme();
      }
    }

    private static class getWalletList_resultStandardScheme extends StandardScheme<getWalletList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Wallet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletList_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletList_resultTupleScheme getScheme() {
        return new getWalletList_resultTupleScheme();
      }
    }

    private static class getWalletList_resultTupleScheme extends TupleScheme<getWalletList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Wallet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWRAmount_args implements org.apache.thrift.TBase<getWRAmount_args, getWRAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWRAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWRAmount_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField R_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWRAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWRAmount_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required
    public int rType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType"),
      R_TYPE((short)3, "rType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          case 3: // R_TYPE
            return R_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.R_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWRAmount_args.class, metaDataMap);
    }

    public getWRAmount_args() {
    }

    public getWRAmount_args(
      String uId,
      String userType,
      int rType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
      this.rType = rType;
      setRTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWRAmount_args(getWRAmount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
      this.rType = other.rType;
    }

    public getWRAmount_args deepCopy() {
      return new getWRAmount_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
      setRTypeIsSet(false);
      this.rType = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public getWRAmount_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public getWRAmount_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public int getRType() {
      return this.rType;
    }

    public getWRAmount_args setRType(int rType) {
      this.rType = rType;
      setRTypeIsSet(true);
      return this;
    }

    public void unsetRType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RTYPE_ISSET_ID);
    }

    /** Returns true if field rType is set (has been assigned a value) and false otherwise */
    public boolean isSetRType() {
      return EncodingUtils.testBit(__isset_bitfield, __RTYPE_ISSET_ID);
    }

    public void setRTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      case R_TYPE:
        if (value == null) {
          unsetRType();
        } else {
          setRType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      case R_TYPE:
        return Integer.valueOf(getRType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      case R_TYPE:
        return isSetRType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWRAmount_args)
        return this.equals((getWRAmount_args)that);
      return false;
    }

    public boolean equals(getWRAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      boolean this_present_rType = true;
      boolean that_present_rType = true;
      if (this_present_rType || that_present_rType) {
        if (!(this_present_rType && that_present_rType))
          return false;
        if (this.rType != that.rType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWRAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRType()).compareTo(other.isSetRType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rType, other.rType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWRAmount_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rType:");
      sb.append(this.rType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWRAmount_argsStandardSchemeFactory implements SchemeFactory {
      public getWRAmount_argsStandardScheme getScheme() {
        return new getWRAmount_argsStandardScheme();
      }
    }

    private static class getWRAmount_argsStandardScheme extends StandardScheme<getWRAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWRAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // R_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rType = iprot.readI32();
                struct.setRTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWRAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(R_TYPE_FIELD_DESC);
        oprot.writeI32(struct.rType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWRAmount_argsTupleSchemeFactory implements SchemeFactory {
      public getWRAmount_argsTupleScheme getScheme() {
        return new getWRAmount_argsTupleScheme();
      }
    }

    private static class getWRAmount_argsTupleScheme extends TupleScheme<getWRAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWRAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        if (struct.isSetRType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
        if (struct.isSetRType()) {
          oprot.writeI32(struct.rType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWRAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rType = iprot.readI32();
          struct.setRTypeIsSet(true);
        }
      }
    }

  }

  public static class getWRAmount_result implements org.apache.thrift.TBase<getWRAmount_result, getWRAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWRAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWRAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWRAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWRAmount_resultTupleSchemeFactory());
    }

    public double success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWRAmount_result.class, metaDataMap);
    }

    public getWRAmount_result() {
    }

    public getWRAmount_result(
      double success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWRAmount_result(getWRAmount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWRAmount_result deepCopy() {
      return new getWRAmount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.qe = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public getWRAmount_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWRAmount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWRAmount_result)
        return this.equals((getWRAmount_result)that);
      return false;
    }

    public boolean equals(getWRAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWRAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWRAmount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWRAmount_resultStandardSchemeFactory implements SchemeFactory {
      public getWRAmount_resultStandardScheme getScheme() {
        return new getWRAmount_resultStandardScheme();
      }
    }

    private static class getWRAmount_resultStandardScheme extends StandardScheme<getWRAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWRAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWRAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWRAmount_resultTupleSchemeFactory implements SchemeFactory {
      public getWRAmount_resultTupleScheme getScheme() {
        return new getWRAmount_resultTupleScheme();
      }
    }

    private static class getWRAmount_resultTupleScheme extends TupleScheme<getWRAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWRAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWRAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletCount_args implements org.apache.thrift.TBase<getWalletCount_args, getWalletCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletCount_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletCount_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletCount_args.class, metaDataMap);
    }

    public getWalletCount_args() {
    }

    public getWalletCount_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletCount_args(getWalletCount_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getWalletCount_args deepCopy() {
      return new getWalletCount_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getWalletCount_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletCount_args)
        return this.equals((getWalletCount_args)that);
      return false;
    }

    public boolean equals(getWalletCount_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletCount_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletCount_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletCount_argsStandardScheme getScheme() {
        return new getWalletCount_argsStandardScheme();
      }
    }

    private static class getWalletCount_argsStandardScheme extends StandardScheme<getWalletCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map268 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map268.size);
                  for (int _i269 = 0; _i269 < _map268.size; ++_i269)
                  {
                    String _key270;
                    String _val271;
                    _key270 = iprot.readString();
                    _val271 = iprot.readString();
                    struct.paramMap.put(_key270, _val271);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter272 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter272.getKey());
              oprot.writeString(_iter272.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletCount_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletCount_argsTupleScheme getScheme() {
        return new getWalletCount_argsTupleScheme();
      }
    }

    private static class getWalletCount_argsTupleScheme extends TupleScheme<getWalletCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter273 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter273.getKey());
              oprot.writeString(_iter273.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map274 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map274.size);
            for (int _i275 = 0; _i275 < _map274.size; ++_i275)
            {
              String _key276;
              String _val277;
              _key276 = iprot.readString();
              _val277 = iprot.readString();
              struct.paramMap.put(_key276, _val277);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getWalletCount_result implements org.apache.thrift.TBase<getWalletCount_result, getWalletCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletCount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletCount_result.class, metaDataMap);
    }

    public getWalletCount_result() {
    }

    public getWalletCount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletCount_result(getWalletCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletCount_result deepCopy() {
      return new getWalletCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getWalletCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletCount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletCount_result)
        return this.equals((getWalletCount_result)that);
      return false;
    }

    public boolean equals(getWalletCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletCount_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletCount_resultStandardScheme getScheme() {
        return new getWalletCount_resultStandardScheme();
      }
    }

    private static class getWalletCount_resultStandardScheme extends StandardScheme<getWalletCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletCount_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletCount_resultTupleScheme getScheme() {
        return new getWalletCount_resultTupleScheme();
      }
    }

    private static class getWalletCount_resultTupleScheme extends TupleScheme<getWalletCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletRecordCount_args implements org.apache.thrift.TBase<getWalletRecordCount_args, getWalletRecordCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletRecordCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletRecordCount_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletRecordCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletRecordCount_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletRecordCount_args.class, metaDataMap);
    }

    public getWalletRecordCount_args() {
    }

    public getWalletRecordCount_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletRecordCount_args(getWalletRecordCount_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getWalletRecordCount_args deepCopy() {
      return new getWalletRecordCount_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getWalletRecordCount_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletRecordCount_args)
        return this.equals((getWalletRecordCount_args)that);
      return false;
    }

    public boolean equals(getWalletRecordCount_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletRecordCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletRecordCount_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletRecordCount_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletRecordCount_argsStandardScheme getScheme() {
        return new getWalletRecordCount_argsStandardScheme();
      }
    }

    private static class getWalletRecordCount_argsStandardScheme extends StandardScheme<getWalletRecordCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletRecordCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map278 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map278.size);
                  for (int _i279 = 0; _i279 < _map278.size; ++_i279)
                  {
                    String _key280;
                    String _val281;
                    _key280 = iprot.readString();
                    _val281 = iprot.readString();
                    struct.paramMap.put(_key280, _val281);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletRecordCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter282 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter282.getKey());
              oprot.writeString(_iter282.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletRecordCount_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletRecordCount_argsTupleScheme getScheme() {
        return new getWalletRecordCount_argsTupleScheme();
      }
    }

    private static class getWalletRecordCount_argsTupleScheme extends TupleScheme<getWalletRecordCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletRecordCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter283 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter283.getKey());
              oprot.writeString(_iter283.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletRecordCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map284 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map284.size);
            for (int _i285 = 0; _i285 < _map284.size; ++_i285)
            {
              String _key286;
              String _val287;
              _key286 = iprot.readString();
              _val287 = iprot.readString();
              struct.paramMap.put(_key286, _val287);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getWalletRecordCount_result implements org.apache.thrift.TBase<getWalletRecordCount_result, getWalletRecordCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletRecordCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletRecordCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletRecordCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletRecordCount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletRecordCount_result.class, metaDataMap);
    }

    public getWalletRecordCount_result() {
    }

    public getWalletRecordCount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletRecordCount_result(getWalletRecordCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletRecordCount_result deepCopy() {
      return new getWalletRecordCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getWalletRecordCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletRecordCount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletRecordCount_result)
        return this.equals((getWalletRecordCount_result)that);
      return false;
    }

    public boolean equals(getWalletRecordCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletRecordCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletRecordCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletRecordCount_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletRecordCount_resultStandardScheme getScheme() {
        return new getWalletRecordCount_resultStandardScheme();
      }
    }

    private static class getWalletRecordCount_resultStandardScheme extends StandardScheme<getWalletRecordCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletRecordCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletRecordCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletRecordCount_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletRecordCount_resultTupleScheme getScheme() {
        return new getWalletRecordCount_resultTupleScheme();
      }
    }

    private static class getWalletRecordCount_resultTupleScheme extends TupleScheme<getWalletRecordCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletRecordCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletRecordCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccountList_args implements org.apache.thrift.TBase<getMentionAccountList_args, getMentionAccountList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccountList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccountList_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccountList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccountList_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccountList_args.class, metaDataMap);
    }

    public getMentionAccountList_args() {
    }

    public getMentionAccountList_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccountList_args(getMentionAccountList_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getMentionAccountList_args deepCopy() {
      return new getMentionAccountList_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getMentionAccountList_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccountList_args)
        return this.equals((getMentionAccountList_args)that);
      return false;
    }

    public boolean equals(getMentionAccountList_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccountList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccountList_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccountList_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionAccountList_argsStandardScheme getScheme() {
        return new getMentionAccountList_argsStandardScheme();
      }
    }

    private static class getMentionAccountList_argsStandardScheme extends StandardScheme<getMentionAccountList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccountList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map288 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map288.size);
                  for (int _i289 = 0; _i289 < _map288.size; ++_i289)
                  {
                    String _key290;
                    String _val291;
                    _key290 = iprot.readString();
                    _val291 = iprot.readString();
                    struct.paramMap.put(_key290, _val291);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccountList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter292 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter292.getKey());
              oprot.writeString(_iter292.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccountList_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionAccountList_argsTupleScheme getScheme() {
        return new getMentionAccountList_argsTupleScheme();
      }
    }

    private static class getMentionAccountList_argsTupleScheme extends TupleScheme<getMentionAccountList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter293 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter293.getKey());
              oprot.writeString(_iter293.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map294 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map294.size);
            for (int _i295 = 0; _i295 < _map294.size; ++_i295)
            {
              String _key296;
              String _val297;
              _key296 = iprot.readString();
              _val297 = iprot.readString();
              struct.paramMap.put(_key296, _val297);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccountList_result implements org.apache.thrift.TBase<getMentionAccountList_result, getMentionAccountList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccountList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccountList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccountList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccountList_resultTupleSchemeFactory());
    }

    public MentionAccount success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MentionAccount.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccountList_result.class, metaDataMap);
    }

    public getMentionAccountList_result() {
    }

    public getMentionAccountList_result(
      MentionAccount success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccountList_result(getMentionAccountList_result other) {
      if (other.isSetSuccess()) {
        this.success = new MentionAccount(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionAccountList_result deepCopy() {
      return new getMentionAccountList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public MentionAccount getSuccess() {
      return this.success;
    }

    public getMentionAccountList_result setSuccess(MentionAccount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionAccountList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MentionAccount)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccountList_result)
        return this.equals((getMentionAccountList_result)that);
      return false;
    }

    public boolean equals(getMentionAccountList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccountList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccountList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccountList_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionAccountList_resultStandardScheme getScheme() {
        return new getMentionAccountList_resultStandardScheme();
      }
    }

    private static class getMentionAccountList_resultStandardScheme extends StandardScheme<getMentionAccountList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccountList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MentionAccount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccountList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccountList_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionAccountList_resultTupleScheme getScheme() {
        return new getMentionAccountList_resultTupleScheme();
      }
    }

    private static class getMentionAccountList_resultTupleScheme extends TupleScheme<getMentionAccountList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MentionAccount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getUserMoney_args implements org.apache.thrift.TBase<getUserMoney_args, getUserMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserMoney_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MONEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserMoney_argsTupleSchemeFactory());
    }

    public String ids; // required
    public int userType; // required
    public int moneyType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      USER_TYPE((short)2, "userType"),
      MONEY_TYPE((short)3, "moneyType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // USER_TYPE
            return USER_TYPE;
          case 3: // MONEY_TYPE
            return MONEY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERTYPE_ISSET_ID = 0;
    private static final int __MONEYTYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MONEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("moneyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserMoney_args.class, metaDataMap);
    }

    public getUserMoney_args() {
    }

    public getUserMoney_args(
      String ids,
      int userType,
      int moneyType)
    {
      this();
      this.ids = ids;
      this.userType = userType;
      setUserTypeIsSet(true);
      this.moneyType = moneyType;
      setMoneyTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserMoney_args(getUserMoney_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIds()) {
        this.ids = other.ids;
      }
      this.userType = other.userType;
      this.moneyType = other.moneyType;
    }

    public getUserMoney_args deepCopy() {
      return new getUserMoney_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      setUserTypeIsSet(false);
      this.userType = 0;
      setMoneyTypeIsSet(false);
      this.moneyType = 0;
    }

    public String getIds() {
      return this.ids;
    }

    public getUserMoney_args setIds(String ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public int getUserType() {
      return this.userType;
    }

    public getUserMoney_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public int getMoneyType() {
      return this.moneyType;
    }

    public getUserMoney_args setMoneyType(int moneyType) {
      this.moneyType = moneyType;
      setMoneyTypeIsSet(true);
      return this;
    }

    public void unsetMoneyType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYTYPE_ISSET_ID);
    }

    /** Returns true if field moneyType is set (has been assigned a value) and false otherwise */
    public boolean isSetMoneyType() {
      return EncodingUtils.testBit(__isset_bitfield, __MONEYTYPE_ISSET_ID);
    }

    public void setMoneyTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      case MONEY_TYPE:
        if (value == null) {
          unsetMoneyType();
        } else {
          setMoneyType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      case MONEY_TYPE:
        return Integer.valueOf(getMoneyType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case USER_TYPE:
        return isSetUserType();
      case MONEY_TYPE:
        return isSetMoneyType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserMoney_args)
        return this.equals((getUserMoney_args)that);
      return false;
    }

    public boolean equals(getUserMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      boolean this_present_moneyType = true;
      boolean that_present_moneyType = true;
      if (this_present_moneyType || that_present_moneyType) {
        if (!(this_present_moneyType && that_present_moneyType))
          return false;
        if (this.moneyType != that.moneyType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(other.isSetMoneyType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoneyType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyType, other.moneyType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserMoney_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("moneyType:");
      sb.append(this.moneyType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserMoney_argsStandardSchemeFactory implements SchemeFactory {
      public getUserMoney_argsStandardScheme getScheme() {
        return new getUserMoney_argsStandardScheme();
      }
    }

    private static class getUserMoney_argsStandardScheme extends StandardScheme<getUserMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ids = iprot.readString();
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MONEY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.moneyType = iprot.readI32();
                struct.setMoneyTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          oprot.writeString(struct.ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.moneyType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserMoney_argsTupleSchemeFactory implements SchemeFactory {
      public getUserMoney_argsTupleScheme getScheme() {
        return new getUserMoney_argsTupleScheme();
      }
    }

    private static class getUserMoney_argsTupleScheme extends TupleScheme<getUserMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        if (struct.isSetMoneyType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIds()) {
          oprot.writeString(struct.ids);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
        if (struct.isSetMoneyType()) {
          oprot.writeI32(struct.moneyType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ids = iprot.readString();
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.moneyType = iprot.readI32();
          struct.setMoneyTypeIsSet(true);
        }
      }
    }

  }

  public static class getUserMoney_result implements org.apache.thrift.TBase<getUserMoney_result, getUserMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserMoney_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserMoney_result.class, metaDataMap);
    }

    public getUserMoney_result() {
    }

    public getUserMoney_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserMoney_result(getUserMoney_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getUserMoney_result deepCopy() {
      return new getUserMoney_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getUserMoney_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getUserMoney_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserMoney_result)
        return this.equals((getUserMoney_result)that);
      return false;
    }

    public boolean equals(getUserMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserMoney_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserMoney_resultStandardSchemeFactory implements SchemeFactory {
      public getUserMoney_resultStandardScheme getScheme() {
        return new getUserMoney_resultStandardScheme();
      }
    }

    private static class getUserMoney_resultStandardScheme extends StandardScheme<getUserMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map298 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map298.size);
                  for (int _i299 = 0; _i299 < _map298.size; ++_i299)
                  {
                    String _key300;
                    String _val301;
                    _key300 = iprot.readString();
                    _val301 = iprot.readString();
                    struct.success.put(_key300, _val301);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter302 : struct.success.entrySet())
            {
              oprot.writeString(_iter302.getKey());
              oprot.writeString(_iter302.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserMoney_resultTupleSchemeFactory implements SchemeFactory {
      public getUserMoney_resultTupleScheme getScheme() {
        return new getUserMoney_resultTupleScheme();
      }
    }

    private static class getUserMoney_resultTupleScheme extends TupleScheme<getUserMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter303 : struct.success.entrySet())
            {
              oprot.writeString(_iter303.getKey());
              oprot.writeString(_iter303.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map304 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map304.size);
            for (int _i305 = 0; _i305 < _map304.size; ++_i305)
            {
              String _key306;
              String _val307;
              _key306 = iprot.readString();
              _val307 = iprot.readString();
              struct.success.put(_key306, _val307);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSellerWalletList_args implements org.apache.thrift.TBase<getSellerWalletList_args, getSellerWalletList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerWalletList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerWalletList_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MONEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerWalletList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerWalletList_argsTupleSchemeFactory());
    }

    public String ids; // required
    public int moneyType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      MONEY_TYPE((short)2, "moneyType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // MONEY_TYPE
            return MONEY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MONEYTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("moneyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerWalletList_args.class, metaDataMap);
    }

    public getSellerWalletList_args() {
    }

    public getSellerWalletList_args(
      String ids,
      int moneyType)
    {
      this();
      this.ids = ids;
      this.moneyType = moneyType;
      setMoneyTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerWalletList_args(getSellerWalletList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIds()) {
        this.ids = other.ids;
      }
      this.moneyType = other.moneyType;
    }

    public getSellerWalletList_args deepCopy() {
      return new getSellerWalletList_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      setMoneyTypeIsSet(false);
      this.moneyType = 0;
    }

    public String getIds() {
      return this.ids;
    }

    public getSellerWalletList_args setIds(String ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public int getMoneyType() {
      return this.moneyType;
    }

    public getSellerWalletList_args setMoneyType(int moneyType) {
      this.moneyType = moneyType;
      setMoneyTypeIsSet(true);
      return this;
    }

    public void unsetMoneyType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYTYPE_ISSET_ID);
    }

    /** Returns true if field moneyType is set (has been assigned a value) and false otherwise */
    public boolean isSetMoneyType() {
      return EncodingUtils.testBit(__isset_bitfield, __MONEYTYPE_ISSET_ID);
    }

    public void setMoneyTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((String)value);
        }
        break;

      case MONEY_TYPE:
        if (value == null) {
          unsetMoneyType();
        } else {
          setMoneyType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case MONEY_TYPE:
        return Integer.valueOf(getMoneyType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case MONEY_TYPE:
        return isSetMoneyType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerWalletList_args)
        return this.equals((getSellerWalletList_args)that);
      return false;
    }

    public boolean equals(getSellerWalletList_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_moneyType = true;
      boolean that_present_moneyType = true;
      if (this_present_moneyType || that_present_moneyType) {
        if (!(this_present_moneyType && that_present_moneyType))
          return false;
        if (this.moneyType != that.moneyType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerWalletList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(other.isSetMoneyType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoneyType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyType, other.moneyType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerWalletList_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("moneyType:");
      sb.append(this.moneyType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerWalletList_argsStandardSchemeFactory implements SchemeFactory {
      public getSellerWalletList_argsStandardScheme getScheme() {
        return new getSellerWalletList_argsStandardScheme();
      }
    }

    private static class getSellerWalletList_argsStandardScheme extends StandardScheme<getSellerWalletList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerWalletList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ids = iprot.readString();
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MONEY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.moneyType = iprot.readI32();
                struct.setMoneyTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerWalletList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          oprot.writeString(struct.ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.moneyType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerWalletList_argsTupleSchemeFactory implements SchemeFactory {
      public getSellerWalletList_argsTupleScheme getScheme() {
        return new getSellerWalletList_argsTupleScheme();
      }
    }

    private static class getSellerWalletList_argsTupleScheme extends TupleScheme<getSellerWalletList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerWalletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetMoneyType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          oprot.writeString(struct.ids);
        }
        if (struct.isSetMoneyType()) {
          oprot.writeI32(struct.moneyType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerWalletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ids = iprot.readString();
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.moneyType = iprot.readI32();
          struct.setMoneyTypeIsSet(true);
        }
      }
    }

  }

  public static class getSellerWalletList_result implements org.apache.thrift.TBase<getSellerWalletList_result, getSellerWalletList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerWalletList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerWalletList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerWalletList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerWalletList_resultTupleSchemeFactory());
    }

    public SellerWallet success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SellerWallet.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerWalletList_result.class, metaDataMap);
    }

    public getSellerWalletList_result() {
    }

    public getSellerWalletList_result(
      SellerWallet success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerWalletList_result(getSellerWalletList_result other) {
      if (other.isSetSuccess()) {
        this.success = new SellerWallet(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSellerWalletList_result deepCopy() {
      return new getSellerWalletList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public SellerWallet getSuccess() {
      return this.success;
    }

    public getSellerWalletList_result setSuccess(SellerWallet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSellerWalletList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SellerWallet)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerWalletList_result)
        return this.equals((getSellerWalletList_result)that);
      return false;
    }

    public boolean equals(getSellerWalletList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerWalletList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerWalletList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerWalletList_resultStandardSchemeFactory implements SchemeFactory {
      public getSellerWalletList_resultStandardScheme getScheme() {
        return new getSellerWalletList_resultStandardScheme();
      }
    }

    private static class getSellerWalletList_resultStandardScheme extends StandardScheme<getSellerWalletList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerWalletList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SellerWallet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerWalletList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerWalletList_resultTupleSchemeFactory implements SchemeFactory {
      public getSellerWalletList_resultTupleScheme getScheme() {
        return new getSellerWalletList_resultTupleScheme();
      }
    }

    private static class getSellerWalletList_resultTupleScheme extends TupleScheme<getSellerWalletList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerWalletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerWalletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SellerWallet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class mergeMoney_args implements org.apache.thrift.TBase<mergeMoney_args, mergeMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<mergeMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeMoney_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeMoney_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeMoney_args.class, metaDataMap);
    }

    public mergeMoney_args() {
    }

    public mergeMoney_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeMoney_args(mergeMoney_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public mergeMoney_args deepCopy() {
      return new mergeMoney_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public mergeMoney_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeMoney_args)
        return this.equals((mergeMoney_args)that);
      return false;
    }

    public boolean equals(mergeMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeMoney_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeMoney_argsStandardSchemeFactory implements SchemeFactory {
      public mergeMoney_argsStandardScheme getScheme() {
        return new mergeMoney_argsStandardScheme();
      }
    }

    private static class mergeMoney_argsStandardScheme extends StandardScheme<mergeMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map308 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map308.size);
                  for (int _i309 = 0; _i309 < _map308.size; ++_i309)
                  {
                    String _key310;
                    String _val311;
                    _key310 = iprot.readString();
                    _val311 = iprot.readString();
                    struct.param.put(_key310, _val311);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter312 : struct.param.entrySet())
            {
              oprot.writeString(_iter312.getKey());
              oprot.writeString(_iter312.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeMoney_argsTupleSchemeFactory implements SchemeFactory {
      public mergeMoney_argsTupleScheme getScheme() {
        return new mergeMoney_argsTupleScheme();
      }
    }

    private static class mergeMoney_argsTupleScheme extends TupleScheme<mergeMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter313 : struct.param.entrySet())
            {
              oprot.writeString(_iter313.getKey());
              oprot.writeString(_iter313.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map314 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map314.size);
            for (int _i315 = 0; _i315 < _map314.size; ++_i315)
            {
              String _key316;
              String _val317;
              _key316 = iprot.readString();
              _val317 = iprot.readString();
              struct.param.put(_key316, _val317);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class mergeMoney_result implements org.apache.thrift.TBase<mergeMoney_result, mergeMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<mergeMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeMoney_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeMoney_result.class, metaDataMap);
    }

    public mergeMoney_result() {
    }

    public mergeMoney_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeMoney_result(mergeMoney_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public mergeMoney_result deepCopy() {
      return new mergeMoney_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public mergeMoney_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public mergeMoney_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeMoney_result)
        return this.equals((mergeMoney_result)that);
      return false;
    }

    public boolean equals(mergeMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeMoney_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeMoney_resultStandardSchemeFactory implements SchemeFactory {
      public mergeMoney_resultStandardScheme getScheme() {
        return new mergeMoney_resultStandardScheme();
      }
    }

    private static class mergeMoney_resultStandardScheme extends StandardScheme<mergeMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map318 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map318.size);
                  for (int _i319 = 0; _i319 < _map318.size; ++_i319)
                  {
                    String _key320;
                    String _val321;
                    _key320 = iprot.readString();
                    _val321 = iprot.readString();
                    struct.success.put(_key320, _val321);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter322 : struct.success.entrySet())
            {
              oprot.writeString(_iter322.getKey());
              oprot.writeString(_iter322.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeMoney_resultTupleSchemeFactory implements SchemeFactory {
      public mergeMoney_resultTupleScheme getScheme() {
        return new mergeMoney_resultTupleScheme();
      }
    }

    private static class mergeMoney_resultTupleScheme extends TupleScheme<mergeMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter323 : struct.success.entrySet())
            {
              oprot.writeString(_iter323.getKey());
              oprot.writeString(_iter323.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map324 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map324.size);
            for (int _i325 = 0; _i325 < _map324.size; ++_i325)
            {
              String _key326;
              String _val327;
              _key326 = iprot.readString();
              _val327 = iprot.readString();
              struct.success.put(_key326, _val327);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccounts_args implements org.apache.thrift.TBase<getMentionAccounts_args, getMentionAccounts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccounts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccounts_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccounts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccounts_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccounts_args.class, metaDataMap);
    }

    public getMentionAccounts_args() {
    }

    public getMentionAccounts_args(
      List<Map<String,String>> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccounts_args(getMentionAccounts_args other) {
      if (other.isSetParam()) {
        List<Map<String,String>> __this__param = new ArrayList<Map<String,String>>(other.param.size());
        for (Map<String,String> other_element : other.param) {
          Map<String,String> __this__param_copy = new HashMap<String,String>(other_element);
          __this__param.add(__this__param_copy);
        }
        this.param = __this__param;
      }
    }

    public getMentionAccounts_args deepCopy() {
      return new getMentionAccounts_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public java.util.Iterator<Map<String,String>> getParamIterator() {
      return (this.param == null) ? null : this.param.iterator();
    }

    public void addToParam(Map<String,String> elem) {
      if (this.param == null) {
        this.param = new ArrayList<Map<String,String>>();
      }
      this.param.add(elem);
    }

    public List<Map<String,String>> getParam() {
      return this.param;
    }

    public getMentionAccounts_args setParam(List<Map<String,String>> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccounts_args)
        return this.equals((getMentionAccounts_args)that);
      return false;
    }

    public boolean equals(getMentionAccounts_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccounts_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccounts_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionAccounts_argsStandardScheme getScheme() {
        return new getMentionAccounts_argsStandardScheme();
      }
    }

    private static class getMentionAccounts_argsStandardScheme extends StandardScheme<getMentionAccounts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                  struct.param = new ArrayList<Map<String,String>>(_list328.size);
                  for (int _i329 = 0; _i329 < _list328.size; ++_i329)
                  {
                    Map<String,String> _elem330;
                    {
                      org.apache.thrift.protocol.TMap _map331 = iprot.readMapBegin();
                      _elem330 = new HashMap<String,String>(2*_map331.size);
                      for (int _i332 = 0; _i332 < _map331.size; ++_i332)
                      {
                        String _key333;
                        String _val334;
                        _key333 = iprot.readString();
                        _val334 = iprot.readString();
                        _elem330.put(_key333, _val334);
                      }
                      iprot.readMapEnd();
                    }
                    struct.param.add(_elem330);
                  }
                  iprot.readListEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccounts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.param.size()));
            for (Map<String,String> _iter335 : struct.param)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter335.size()));
                for (Map.Entry<String, String> _iter336 : _iter335.entrySet())
                {
                  oprot.writeString(_iter336.getKey());
                  oprot.writeString(_iter336.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccounts_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionAccounts_argsTupleScheme getScheme() {
        return new getMentionAccounts_argsTupleScheme();
      }
    }

    private static class getMentionAccounts_argsTupleScheme extends TupleScheme<getMentionAccounts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map<String,String> _iter337 : struct.param)
            {
              {
                oprot.writeI32(_iter337.size());
                for (Map.Entry<String, String> _iter338 : _iter337.entrySet())
                {
                  oprot.writeString(_iter338.getKey());
                  oprot.writeString(_iter338.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list339 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.param = new ArrayList<Map<String,String>>(_list339.size);
            for (int _i340 = 0; _i340 < _list339.size; ++_i340)
            {
              Map<String,String> _elem341;
              {
                org.apache.thrift.protocol.TMap _map342 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem341 = new HashMap<String,String>(2*_map342.size);
                for (int _i343 = 0; _i343 < _map342.size; ++_i343)
                {
                  String _key344;
                  String _val345;
                  _key344 = iprot.readString();
                  _val345 = iprot.readString();
                  _elem341.put(_key344, _val345);
                }
              }
              struct.param.add(_elem341);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccounts_result implements org.apache.thrift.TBase<getMentionAccounts_result, getMentionAccounts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccounts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccounts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccounts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccounts_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccounts_result.class, metaDataMap);
    }

    public getMentionAccounts_result() {
    }

    public getMentionAccounts_result(
      List<Map<String,String>> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccounts_result(getMentionAccounts_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionAccounts_result deepCopy() {
      return new getMentionAccounts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getMentionAccounts_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionAccounts_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccounts_result)
        return this.equals((getMentionAccounts_result)that);
      return false;
    }

    public boolean equals(getMentionAccounts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccounts_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionAccounts_resultStandardScheme getScheme() {
        return new getMentionAccounts_resultStandardScheme();
      }
    }

    private static class getMentionAccounts_resultStandardScheme extends StandardScheme<getMentionAccounts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list346 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list346.size);
                  for (int _i347 = 0; _i347 < _list346.size; ++_i347)
                  {
                    Map<String,String> _elem348;
                    {
                      org.apache.thrift.protocol.TMap _map349 = iprot.readMapBegin();
                      _elem348 = new HashMap<String,String>(2*_map349.size);
                      for (int _i350 = 0; _i350 < _map349.size; ++_i350)
                      {
                        String _key351;
                        String _val352;
                        _key351 = iprot.readString();
                        _val352 = iprot.readString();
                        _elem348.put(_key351, _val352);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem348);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccounts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter353 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter353.size()));
                for (Map.Entry<String, String> _iter354 : _iter353.entrySet())
                {
                  oprot.writeString(_iter354.getKey());
                  oprot.writeString(_iter354.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccounts_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionAccounts_resultTupleScheme getScheme() {
        return new getMentionAccounts_resultTupleScheme();
      }
    }

    private static class getMentionAccounts_resultTupleScheme extends TupleScheme<getMentionAccounts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter355 : struct.success)
            {
              {
                oprot.writeI32(_iter355.size());
                for (Map.Entry<String, String> _iter356 : _iter355.entrySet())
                {
                  oprot.writeString(_iter356.getKey());
                  oprot.writeString(_iter356.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list357 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list357.size);
            for (int _i358 = 0; _i358 < _list357.size; ++_i358)
            {
              Map<String,String> _elem359;
              {
                org.apache.thrift.protocol.TMap _map360 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem359 = new HashMap<String,String>(2*_map360.size);
                for (int _i361 = 0; _i361 < _map360.size; ++_i361)
                {
                  String _key362;
                  String _val363;
                  _key362 = iprot.readString();
                  _val363 = iprot.readString();
                  _elem359.put(_key362, _val363);
                }
              }
              struct.success.add(_elem359);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class returnWithdrawals_args implements org.apache.thrift.TBase<returnWithdrawals_args, returnWithdrawals_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnWithdrawals_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnWithdrawals_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnWithdrawals_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnWithdrawals_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnWithdrawals_args.class, metaDataMap);
    }

    public returnWithdrawals_args() {
    }

    public returnWithdrawals_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnWithdrawals_args(returnWithdrawals_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public returnWithdrawals_args deepCopy() {
      return new returnWithdrawals_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public returnWithdrawals_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnWithdrawals_args)
        return this.equals((returnWithdrawals_args)that);
      return false;
    }

    public boolean equals(returnWithdrawals_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(returnWithdrawals_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnWithdrawals_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnWithdrawals_argsStandardSchemeFactory implements SchemeFactory {
      public returnWithdrawals_argsStandardScheme getScheme() {
        return new returnWithdrawals_argsStandardScheme();
      }
    }

    private static class returnWithdrawals_argsStandardScheme extends StandardScheme<returnWithdrawals_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnWithdrawals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map364 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map364.size);
                  for (int _i365 = 0; _i365 < _map364.size; ++_i365)
                  {
                    String _key366;
                    String _val367;
                    _key366 = iprot.readString();
                    _val367 = iprot.readString();
                    struct.param.put(_key366, _val367);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnWithdrawals_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter368 : struct.param.entrySet())
            {
              oprot.writeString(_iter368.getKey());
              oprot.writeString(_iter368.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnWithdrawals_argsTupleSchemeFactory implements SchemeFactory {
      public returnWithdrawals_argsTupleScheme getScheme() {
        return new returnWithdrawals_argsTupleScheme();
      }
    }

    private static class returnWithdrawals_argsTupleScheme extends TupleScheme<returnWithdrawals_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnWithdrawals_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter369 : struct.param.entrySet())
            {
              oprot.writeString(_iter369.getKey());
              oprot.writeString(_iter369.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnWithdrawals_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map370 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map370.size);
            for (int _i371 = 0; _i371 < _map370.size; ++_i371)
            {
              String _key372;
              String _val373;
              _key372 = iprot.readString();
              _val373 = iprot.readString();
              struct.param.put(_key372, _val373);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class returnWithdrawals_result implements org.apache.thrift.TBase<returnWithdrawals_result, returnWithdrawals_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnWithdrawals_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnWithdrawals_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnWithdrawals_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnWithdrawals_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnWithdrawals_result.class, metaDataMap);
    }

    public returnWithdrawals_result() {
    }

    public returnWithdrawals_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnWithdrawals_result(returnWithdrawals_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public returnWithdrawals_result deepCopy() {
      return new returnWithdrawals_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public returnWithdrawals_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public returnWithdrawals_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnWithdrawals_result)
        return this.equals((returnWithdrawals_result)that);
      return false;
    }

    public boolean equals(returnWithdrawals_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(returnWithdrawals_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnWithdrawals_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnWithdrawals_resultStandardSchemeFactory implements SchemeFactory {
      public returnWithdrawals_resultStandardScheme getScheme() {
        return new returnWithdrawals_resultStandardScheme();
      }
    }

    private static class returnWithdrawals_resultStandardScheme extends StandardScheme<returnWithdrawals_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnWithdrawals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map374 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map374.size);
                  for (int _i375 = 0; _i375 < _map374.size; ++_i375)
                  {
                    String _key376;
                    String _val377;
                    _key376 = iprot.readString();
                    _val377 = iprot.readString();
                    struct.success.put(_key376, _val377);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnWithdrawals_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter378 : struct.success.entrySet())
            {
              oprot.writeString(_iter378.getKey());
              oprot.writeString(_iter378.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnWithdrawals_resultTupleSchemeFactory implements SchemeFactory {
      public returnWithdrawals_resultTupleScheme getScheme() {
        return new returnWithdrawals_resultTupleScheme();
      }
    }

    private static class returnWithdrawals_resultTupleScheme extends TupleScheme<returnWithdrawals_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnWithdrawals_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter379 : struct.success.entrySet())
            {
              oprot.writeString(_iter379.getKey());
              oprot.writeString(_iter379.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnWithdrawals_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map380 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map380.size);
            for (int _i381 = 0; _i381 < _map380.size; ++_i381)
            {
              String _key382;
              String _val383;
              _key382 = iprot.readString();
              _val383 = iprot.readString();
              struct.success.put(_key382, _val383);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class statisticsWithdrawalsMoney_args implements org.apache.thrift.TBase<statisticsWithdrawalsMoney_args, statisticsWithdrawalsMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsWithdrawalsMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsWithdrawalsMoney_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsWithdrawalsMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsWithdrawalsMoney_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsWithdrawalsMoney_args.class, metaDataMap);
    }

    public statisticsWithdrawalsMoney_args() {
    }

    public statisticsWithdrawalsMoney_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsWithdrawalsMoney_args(statisticsWithdrawalsMoney_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public statisticsWithdrawalsMoney_args deepCopy() {
      return new statisticsWithdrawalsMoney_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public statisticsWithdrawalsMoney_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsWithdrawalsMoney_args)
        return this.equals((statisticsWithdrawalsMoney_args)that);
      return false;
    }

    public boolean equals(statisticsWithdrawalsMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsWithdrawalsMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsWithdrawalsMoney_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsWithdrawalsMoney_argsStandardSchemeFactory implements SchemeFactory {
      public statisticsWithdrawalsMoney_argsStandardScheme getScheme() {
        return new statisticsWithdrawalsMoney_argsStandardScheme();
      }
    }

    private static class statisticsWithdrawalsMoney_argsStandardScheme extends StandardScheme<statisticsWithdrawalsMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsWithdrawalsMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map384 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map384.size);
                  for (int _i385 = 0; _i385 < _map384.size; ++_i385)
                  {
                    String _key386;
                    String _val387;
                    _key386 = iprot.readString();
                    _val387 = iprot.readString();
                    struct.param.put(_key386, _val387);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsWithdrawalsMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter388 : struct.param.entrySet())
            {
              oprot.writeString(_iter388.getKey());
              oprot.writeString(_iter388.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsWithdrawalsMoney_argsTupleSchemeFactory implements SchemeFactory {
      public statisticsWithdrawalsMoney_argsTupleScheme getScheme() {
        return new statisticsWithdrawalsMoney_argsTupleScheme();
      }
    }

    private static class statisticsWithdrawalsMoney_argsTupleScheme extends TupleScheme<statisticsWithdrawalsMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsWithdrawalsMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter389 : struct.param.entrySet())
            {
              oprot.writeString(_iter389.getKey());
              oprot.writeString(_iter389.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsWithdrawalsMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map390 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map390.size);
            for (int _i391 = 0; _i391 < _map390.size; ++_i391)
            {
              String _key392;
              String _val393;
              _key392 = iprot.readString();
              _val393 = iprot.readString();
              struct.param.put(_key392, _val393);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class statisticsWithdrawalsMoney_result implements org.apache.thrift.TBase<statisticsWithdrawalsMoney_result, statisticsWithdrawalsMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsWithdrawalsMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsWithdrawalsMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsWithdrawalsMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsWithdrawalsMoney_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsWithdrawalsMoney_result.class, metaDataMap);
    }

    public statisticsWithdrawalsMoney_result() {
    }

    public statisticsWithdrawalsMoney_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsWithdrawalsMoney_result(statisticsWithdrawalsMoney_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public statisticsWithdrawalsMoney_result deepCopy() {
      return new statisticsWithdrawalsMoney_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public statisticsWithdrawalsMoney_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public statisticsWithdrawalsMoney_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsWithdrawalsMoney_result)
        return this.equals((statisticsWithdrawalsMoney_result)that);
      return false;
    }

    public boolean equals(statisticsWithdrawalsMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsWithdrawalsMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsWithdrawalsMoney_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsWithdrawalsMoney_resultStandardSchemeFactory implements SchemeFactory {
      public statisticsWithdrawalsMoney_resultStandardScheme getScheme() {
        return new statisticsWithdrawalsMoney_resultStandardScheme();
      }
    }

    private static class statisticsWithdrawalsMoney_resultStandardScheme extends StandardScheme<statisticsWithdrawalsMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsWithdrawalsMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map394 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map394.size);
                  for (int _i395 = 0; _i395 < _map394.size; ++_i395)
                  {
                    String _key396;
                    String _val397;
                    _key396 = iprot.readString();
                    _val397 = iprot.readString();
                    struct.success.put(_key396, _val397);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsWithdrawalsMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter398 : struct.success.entrySet())
            {
              oprot.writeString(_iter398.getKey());
              oprot.writeString(_iter398.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsWithdrawalsMoney_resultTupleSchemeFactory implements SchemeFactory {
      public statisticsWithdrawalsMoney_resultTupleScheme getScheme() {
        return new statisticsWithdrawalsMoney_resultTupleScheme();
      }
    }

    private static class statisticsWithdrawalsMoney_resultTupleScheme extends TupleScheme<statisticsWithdrawalsMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsWithdrawalsMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter399 : struct.success.entrySet())
            {
              oprot.writeString(_iter399.getKey());
              oprot.writeString(_iter399.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsWithdrawalsMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map400 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map400.size);
            for (int _i401 = 0; _i401 < _map400.size; ++_i401)
            {
              String _key402;
              String _val403;
              _key402 = iprot.readString();
              _val403 = iprot.readString();
              struct.success.put(_key402, _val403);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getJointIncome_args implements org.apache.thrift.TBase<getJointIncome_args, getJointIncome_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJointIncome_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJointIncome_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJointIncome_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJointIncome_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJointIncome_args.class, metaDataMap);
    }

    public getJointIncome_args() {
    }

    public getJointIncome_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJointIncome_args(getJointIncome_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public getJointIncome_args deepCopy() {
      return new getJointIncome_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public getJointIncome_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJointIncome_args)
        return this.equals((getJointIncome_args)that);
      return false;
    }

    public boolean equals(getJointIncome_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getJointIncome_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJointIncome_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJointIncome_argsStandardSchemeFactory implements SchemeFactory {
      public getJointIncome_argsStandardScheme getScheme() {
        return new getJointIncome_argsStandardScheme();
      }
    }

    private static class getJointIncome_argsStandardScheme extends StandardScheme<getJointIncome_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJointIncome_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map404 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map404.size);
                  for (int _i405 = 0; _i405 < _map404.size; ++_i405)
                  {
                    String _key406;
                    String _val407;
                    _key406 = iprot.readString();
                    _val407 = iprot.readString();
                    struct.param.put(_key406, _val407);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJointIncome_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter408 : struct.param.entrySet())
            {
              oprot.writeString(_iter408.getKey());
              oprot.writeString(_iter408.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJointIncome_argsTupleSchemeFactory implements SchemeFactory {
      public getJointIncome_argsTupleScheme getScheme() {
        return new getJointIncome_argsTupleScheme();
      }
    }

    private static class getJointIncome_argsTupleScheme extends TupleScheme<getJointIncome_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJointIncome_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter409 : struct.param.entrySet())
            {
              oprot.writeString(_iter409.getKey());
              oprot.writeString(_iter409.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJointIncome_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map410 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map410.size);
            for (int _i411 = 0; _i411 < _map410.size; ++_i411)
            {
              String _key412;
              String _val413;
              _key412 = iprot.readString();
              _val413 = iprot.readString();
              struct.param.put(_key412, _val413);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class getJointIncome_result implements org.apache.thrift.TBase<getJointIncome_result, getJointIncome_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJointIncome_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJointIncome_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJointIncome_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJointIncome_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJointIncome_result.class, metaDataMap);
    }

    public getJointIncome_result() {
    }

    public getJointIncome_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJointIncome_result(getJointIncome_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getJointIncome_result deepCopy() {
      return new getJointIncome_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getJointIncome_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getJointIncome_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJointIncome_result)
        return this.equals((getJointIncome_result)that);
      return false;
    }

    public boolean equals(getJointIncome_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getJointIncome_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJointIncome_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJointIncome_resultStandardSchemeFactory implements SchemeFactory {
      public getJointIncome_resultStandardScheme getScheme() {
        return new getJointIncome_resultStandardScheme();
      }
    }

    private static class getJointIncome_resultStandardScheme extends StandardScheme<getJointIncome_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJointIncome_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map414 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map414.size);
                  for (int _i415 = 0; _i415 < _map414.size; ++_i415)
                  {
                    String _key416;
                    String _val417;
                    _key416 = iprot.readString();
                    _val417 = iprot.readString();
                    struct.success.put(_key416, _val417);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJointIncome_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter418 : struct.success.entrySet())
            {
              oprot.writeString(_iter418.getKey());
              oprot.writeString(_iter418.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJointIncome_resultTupleSchemeFactory implements SchemeFactory {
      public getJointIncome_resultTupleScheme getScheme() {
        return new getJointIncome_resultTupleScheme();
      }
    }

    private static class getJointIncome_resultTupleScheme extends TupleScheme<getJointIncome_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJointIncome_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter419 : struct.success.entrySet())
            {
              oprot.writeString(_iter419.getKey());
              oprot.writeString(_iter419.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJointIncome_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map420 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map420.size);
            for (int _i421 = 0; _i421 < _map420.size; ++_i421)
            {
              String _key422;
              String _val423;
              _key422 = iprot.readString();
              _val423 = iprot.readString();
              struct.success.put(_key422, _val423);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class addWalletMap_args implements org.apache.thrift.TBase<addWalletMap_args, addWalletMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<addWalletMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWalletMap_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addWalletMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addWalletMap_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWalletMap_args.class, metaDataMap);
    }

    public addWalletMap_args() {
    }

    public addWalletMap_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWalletMap_args(addWalletMap_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public addWalletMap_args deepCopy() {
      return new addWalletMap_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public addWalletMap_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWalletMap_args)
        return this.equals((addWalletMap_args)that);
      return false;
    }

    public boolean equals(addWalletMap_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addWalletMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWalletMap_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addWalletMap_argsStandardSchemeFactory implements SchemeFactory {
      public addWalletMap_argsStandardScheme getScheme() {
        return new addWalletMap_argsStandardScheme();
      }
    }

    private static class addWalletMap_argsStandardScheme extends StandardScheme<addWalletMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addWalletMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map424 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map424.size);
                  for (int _i425 = 0; _i425 < _map424.size; ++_i425)
                  {
                    String _key426;
                    String _val427;
                    _key426 = iprot.readString();
                    _val427 = iprot.readString();
                    struct.param.put(_key426, _val427);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addWalletMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter428 : struct.param.entrySet())
            {
              oprot.writeString(_iter428.getKey());
              oprot.writeString(_iter428.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addWalletMap_argsTupleSchemeFactory implements SchemeFactory {
      public addWalletMap_argsTupleScheme getScheme() {
        return new addWalletMap_argsTupleScheme();
      }
    }

    private static class addWalletMap_argsTupleScheme extends TupleScheme<addWalletMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addWalletMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter429 : struct.param.entrySet())
            {
              oprot.writeString(_iter429.getKey());
              oprot.writeString(_iter429.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addWalletMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map430 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map430.size);
            for (int _i431 = 0; _i431 < _map430.size; ++_i431)
            {
              String _key432;
              String _val433;
              _key432 = iprot.readString();
              _val433 = iprot.readString();
              struct.param.put(_key432, _val433);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class addWalletMap_result implements org.apache.thrift.TBase<addWalletMap_result, addWalletMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<addWalletMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWalletMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addWalletMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addWalletMap_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWalletMap_result.class, metaDataMap);
    }

    public addWalletMap_result() {
    }

    public addWalletMap_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWalletMap_result(addWalletMap_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public addWalletMap_result deepCopy() {
      return new addWalletMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public addWalletMap_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public addWalletMap_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWalletMap_result)
        return this.equals((addWalletMap_result)that);
      return false;
    }

    public boolean equals(addWalletMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addWalletMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWalletMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addWalletMap_resultStandardSchemeFactory implements SchemeFactory {
      public addWalletMap_resultStandardScheme getScheme() {
        return new addWalletMap_resultStandardScheme();
      }
    }

    private static class addWalletMap_resultStandardScheme extends StandardScheme<addWalletMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addWalletMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map434 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map434.size);
                  for (int _i435 = 0; _i435 < _map434.size; ++_i435)
                  {
                    String _key436;
                    String _val437;
                    _key436 = iprot.readString();
                    _val437 = iprot.readString();
                    struct.success.put(_key436, _val437);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addWalletMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter438 : struct.success.entrySet())
            {
              oprot.writeString(_iter438.getKey());
              oprot.writeString(_iter438.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addWalletMap_resultTupleSchemeFactory implements SchemeFactory {
      public addWalletMap_resultTupleScheme getScheme() {
        return new addWalletMap_resultTupleScheme();
      }
    }

    private static class addWalletMap_resultTupleScheme extends TupleScheme<addWalletMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addWalletMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter439 : struct.success.entrySet())
            {
              oprot.writeString(_iter439.getKey());
              oprot.writeString(_iter439.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addWalletMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map440 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map440.size);
            for (int _i441 = 0; _i441 < _map440.size; ++_i441)
            {
              String _key442;
              String _val443;
              _key442 = iprot.readString();
              _val443 = iprot.readString();
              struct.success.put(_key442, _val443);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getJointWithdrawalsList_args implements org.apache.thrift.TBase<getJointWithdrawalsList_args, getJointWithdrawalsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJointWithdrawalsList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJointWithdrawalsList_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJointWithdrawalsList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJointWithdrawalsList_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJointWithdrawalsList_args.class, metaDataMap);
    }

    public getJointWithdrawalsList_args() {
    }

    public getJointWithdrawalsList_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJointWithdrawalsList_args(getJointWithdrawalsList_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public getJointWithdrawalsList_args deepCopy() {
      return new getJointWithdrawalsList_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public getJointWithdrawalsList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJointWithdrawalsList_args)
        return this.equals((getJointWithdrawalsList_args)that);
      return false;
    }

    public boolean equals(getJointWithdrawalsList_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getJointWithdrawalsList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJointWithdrawalsList_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJointWithdrawalsList_argsStandardSchemeFactory implements SchemeFactory {
      public getJointWithdrawalsList_argsStandardScheme getScheme() {
        return new getJointWithdrawalsList_argsStandardScheme();
      }
    }

    private static class getJointWithdrawalsList_argsStandardScheme extends StandardScheme<getJointWithdrawalsList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJointWithdrawalsList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map444 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map444.size);
                  for (int _i445 = 0; _i445 < _map444.size; ++_i445)
                  {
                    String _key446;
                    String _val447;
                    _key446 = iprot.readString();
                    _val447 = iprot.readString();
                    struct.param.put(_key446, _val447);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJointWithdrawalsList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter448 : struct.param.entrySet())
            {
              oprot.writeString(_iter448.getKey());
              oprot.writeString(_iter448.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJointWithdrawalsList_argsTupleSchemeFactory implements SchemeFactory {
      public getJointWithdrawalsList_argsTupleScheme getScheme() {
        return new getJointWithdrawalsList_argsTupleScheme();
      }
    }

    private static class getJointWithdrawalsList_argsTupleScheme extends TupleScheme<getJointWithdrawalsList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJointWithdrawalsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter449 : struct.param.entrySet())
            {
              oprot.writeString(_iter449.getKey());
              oprot.writeString(_iter449.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJointWithdrawalsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map450 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map450.size);
            for (int _i451 = 0; _i451 < _map450.size; ++_i451)
            {
              String _key452;
              String _val453;
              _key452 = iprot.readString();
              _val453 = iprot.readString();
              struct.param.put(_key452, _val453);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class getJointWithdrawalsList_result implements org.apache.thrift.TBase<getJointWithdrawalsList_result, getJointWithdrawalsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJointWithdrawalsList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJointWithdrawalsList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJointWithdrawalsList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJointWithdrawalsList_resultTupleSchemeFactory());
    }

    public JointWithdraw success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JointWithdraw.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJointWithdrawalsList_result.class, metaDataMap);
    }

    public getJointWithdrawalsList_result() {
    }

    public getJointWithdrawalsList_result(
      JointWithdraw success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJointWithdrawalsList_result(getJointWithdrawalsList_result other) {
      if (other.isSetSuccess()) {
        this.success = new JointWithdraw(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getJointWithdrawalsList_result deepCopy() {
      return new getJointWithdrawalsList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public JointWithdraw getSuccess() {
      return this.success;
    }

    public getJointWithdrawalsList_result setSuccess(JointWithdraw success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getJointWithdrawalsList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JointWithdraw)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJointWithdrawalsList_result)
        return this.equals((getJointWithdrawalsList_result)that);
      return false;
    }

    public boolean equals(getJointWithdrawalsList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getJointWithdrawalsList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJointWithdrawalsList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJointWithdrawalsList_resultStandardSchemeFactory implements SchemeFactory {
      public getJointWithdrawalsList_resultStandardScheme getScheme() {
        return new getJointWithdrawalsList_resultStandardScheme();
      }
    }

    private static class getJointWithdrawalsList_resultStandardScheme extends StandardScheme<getJointWithdrawalsList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJointWithdrawalsList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JointWithdraw();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJointWithdrawalsList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJointWithdrawalsList_resultTupleSchemeFactory implements SchemeFactory {
      public getJointWithdrawalsList_resultTupleScheme getScheme() {
        return new getJointWithdrawalsList_resultTupleScheme();
      }
    }

    private static class getJointWithdrawalsList_resultTupleScheme extends TupleScheme<getJointWithdrawalsList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJointWithdrawalsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJointWithdrawalsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JointWithdraw();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletListByDate_args implements org.apache.thrift.TBase<getWalletListByDate_args, getWalletListByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletListByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletListByDate_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletListByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletListByDate_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletListByDate_args.class, metaDataMap);
    }

    public getWalletListByDate_args() {
    }

    public getWalletListByDate_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletListByDate_args(getWalletListByDate_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getWalletListByDate_args deepCopy() {
      return new getWalletListByDate_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getWalletListByDate_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletListByDate_args)
        return this.equals((getWalletListByDate_args)that);
      return false;
    }

    public boolean equals(getWalletListByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletListByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletListByDate_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletListByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletListByDate_argsStandardScheme getScheme() {
        return new getWalletListByDate_argsStandardScheme();
      }
    }

    private static class getWalletListByDate_argsStandardScheme extends StandardScheme<getWalletListByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletListByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map454 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map454.size);
                  for (int _i455 = 0; _i455 < _map454.size; ++_i455)
                  {
                    String _key456;
                    String _val457;
                    _key456 = iprot.readString();
                    _val457 = iprot.readString();
                    struct.paramMap.put(_key456, _val457);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletListByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter458 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter458.getKey());
              oprot.writeString(_iter458.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletListByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletListByDate_argsTupleScheme getScheme() {
        return new getWalletListByDate_argsTupleScheme();
      }
    }

    private static class getWalletListByDate_argsTupleScheme extends TupleScheme<getWalletListByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletListByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter459 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter459.getKey());
              oprot.writeString(_iter459.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletListByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map460 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map460.size);
            for (int _i461 = 0; _i461 < _map460.size; ++_i461)
            {
              String _key462;
              String _val463;
              _key462 = iprot.readString();
              _val463 = iprot.readString();
              struct.paramMap.put(_key462, _val463);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getWalletListByDate_result implements org.apache.thrift.TBase<getWalletListByDate_result, getWalletListByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletListByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletListByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletListByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletListByDate_resultTupleSchemeFactory());
    }

    public Wallet success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Wallet.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletListByDate_result.class, metaDataMap);
    }

    public getWalletListByDate_result() {
    }

    public getWalletListByDate_result(
      Wallet success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletListByDate_result(getWalletListByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Wallet(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletListByDate_result deepCopy() {
      return new getWalletListByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public Wallet getSuccess() {
      return this.success;
    }

    public getWalletListByDate_result setSuccess(Wallet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletListByDate_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Wallet)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletListByDate_result)
        return this.equals((getWalletListByDate_result)that);
      return false;
    }

    public boolean equals(getWalletListByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletListByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletListByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletListByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletListByDate_resultStandardScheme getScheme() {
        return new getWalletListByDate_resultStandardScheme();
      }
    }

    private static class getWalletListByDate_resultStandardScheme extends StandardScheme<getWalletListByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletListByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Wallet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletListByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletListByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletListByDate_resultTupleScheme getScheme() {
        return new getWalletListByDate_resultTupleScheme();
      }
    }

    private static class getWalletListByDate_resultTupleScheme extends TupleScheme<getWalletListByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletListByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletListByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Wallet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class modifyOrder_args implements org.apache.thrift.TBase<modifyOrder_args, modifyOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyOrder_args");

    private static final org.apache.thrift.protocol.TField FORMER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("formerMap", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField LATER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("laterMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyOrder_argsTupleSchemeFactory());
    }

    public Map<String,String> formerMap; // required
    public Map<String,String> laterMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORMER_MAP((short)1, "formerMap"),
      LATER_MAP((short)2, "laterMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORMER_MAP
            return FORMER_MAP;
          case 2: // LATER_MAP
            return LATER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORMER_MAP, new org.apache.thrift.meta_data.FieldMetaData("formerMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LATER_MAP, new org.apache.thrift.meta_data.FieldMetaData("laterMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyOrder_args.class, metaDataMap);
    }

    public modifyOrder_args() {
    }

    public modifyOrder_args(
      Map<String,String> formerMap,
      Map<String,String> laterMap)
    {
      this();
      this.formerMap = formerMap;
      this.laterMap = laterMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyOrder_args(modifyOrder_args other) {
      if (other.isSetFormerMap()) {
        Map<String,String> __this__formerMap = new HashMap<String,String>(other.formerMap);
        this.formerMap = __this__formerMap;
      }
      if (other.isSetLaterMap()) {
        Map<String,String> __this__laterMap = new HashMap<String,String>(other.laterMap);
        this.laterMap = __this__laterMap;
      }
    }

    public modifyOrder_args deepCopy() {
      return new modifyOrder_args(this);
    }

    @Override
    public void clear() {
      this.formerMap = null;
      this.laterMap = null;
    }

    public int getFormerMapSize() {
      return (this.formerMap == null) ? 0 : this.formerMap.size();
    }

    public void putToFormerMap(String key, String val) {
      if (this.formerMap == null) {
        this.formerMap = new HashMap<String,String>();
      }
      this.formerMap.put(key, val);
    }

    public Map<String,String> getFormerMap() {
      return this.formerMap;
    }

    public modifyOrder_args setFormerMap(Map<String,String> formerMap) {
      this.formerMap = formerMap;
      return this;
    }

    public void unsetFormerMap() {
      this.formerMap = null;
    }

    /** Returns true if field formerMap is set (has been assigned a value) and false otherwise */
    public boolean isSetFormerMap() {
      return this.formerMap != null;
    }

    public void setFormerMapIsSet(boolean value) {
      if (!value) {
        this.formerMap = null;
      }
    }

    public int getLaterMapSize() {
      return (this.laterMap == null) ? 0 : this.laterMap.size();
    }

    public void putToLaterMap(String key, String val) {
      if (this.laterMap == null) {
        this.laterMap = new HashMap<String,String>();
      }
      this.laterMap.put(key, val);
    }

    public Map<String,String> getLaterMap() {
      return this.laterMap;
    }

    public modifyOrder_args setLaterMap(Map<String,String> laterMap) {
      this.laterMap = laterMap;
      return this;
    }

    public void unsetLaterMap() {
      this.laterMap = null;
    }

    /** Returns true if field laterMap is set (has been assigned a value) and false otherwise */
    public boolean isSetLaterMap() {
      return this.laterMap != null;
    }

    public void setLaterMapIsSet(boolean value) {
      if (!value) {
        this.laterMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORMER_MAP:
        if (value == null) {
          unsetFormerMap();
        } else {
          setFormerMap((Map<String,String>)value);
        }
        break;

      case LATER_MAP:
        if (value == null) {
          unsetLaterMap();
        } else {
          setLaterMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORMER_MAP:
        return getFormerMap();

      case LATER_MAP:
        return getLaterMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORMER_MAP:
        return isSetFormerMap();
      case LATER_MAP:
        return isSetLaterMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyOrder_args)
        return this.equals((modifyOrder_args)that);
      return false;
    }

    public boolean equals(modifyOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_formerMap = true && this.isSetFormerMap();
      boolean that_present_formerMap = true && that.isSetFormerMap();
      if (this_present_formerMap || that_present_formerMap) {
        if (!(this_present_formerMap && that_present_formerMap))
          return false;
        if (!this.formerMap.equals(that.formerMap))
          return false;
      }

      boolean this_present_laterMap = true && this.isSetLaterMap();
      boolean that_present_laterMap = true && that.isSetLaterMap();
      if (this_present_laterMap || that_present_laterMap) {
        if (!(this_present_laterMap && that_present_laterMap))
          return false;
        if (!this.laterMap.equals(that.laterMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFormerMap()).compareTo(other.isSetFormerMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFormerMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formerMap, other.formerMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLaterMap()).compareTo(other.isSetLaterMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLaterMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.laterMap, other.laterMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyOrder_args(");
      boolean first = true;

      sb.append("formerMap:");
      if (this.formerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.formerMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("laterMap:");
      if (this.laterMap == null) {
        sb.append("null");
      } else {
        sb.append(this.laterMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyOrder_argsStandardSchemeFactory implements SchemeFactory {
      public modifyOrder_argsStandardScheme getScheme() {
        return new modifyOrder_argsStandardScheme();
      }
    }

    private static class modifyOrder_argsStandardScheme extends StandardScheme<modifyOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORMER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map464 = iprot.readMapBegin();
                  struct.formerMap = new HashMap<String,String>(2*_map464.size);
                  for (int _i465 = 0; _i465 < _map464.size; ++_i465)
                  {
                    String _key466;
                    String _val467;
                    _key466 = iprot.readString();
                    _val467 = iprot.readString();
                    struct.formerMap.put(_key466, _val467);
                  }
                  iprot.readMapEnd();
                }
                struct.setFormerMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LATER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map468 = iprot.readMapBegin();
                  struct.laterMap = new HashMap<String,String>(2*_map468.size);
                  for (int _i469 = 0; _i469 < _map468.size; ++_i469)
                  {
                    String _key470;
                    String _val471;
                    _key470 = iprot.readString();
                    _val471 = iprot.readString();
                    struct.laterMap.put(_key470, _val471);
                  }
                  iprot.readMapEnd();
                }
                struct.setLaterMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.formerMap != null) {
          oprot.writeFieldBegin(FORMER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.formerMap.size()));
            for (Map.Entry<String, String> _iter472 : struct.formerMap.entrySet())
            {
              oprot.writeString(_iter472.getKey());
              oprot.writeString(_iter472.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.laterMap != null) {
          oprot.writeFieldBegin(LATER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.laterMap.size()));
            for (Map.Entry<String, String> _iter473 : struct.laterMap.entrySet())
            {
              oprot.writeString(_iter473.getKey());
              oprot.writeString(_iter473.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyOrder_argsTupleSchemeFactory implements SchemeFactory {
      public modifyOrder_argsTupleScheme getScheme() {
        return new modifyOrder_argsTupleScheme();
      }
    }

    private static class modifyOrder_argsTupleScheme extends TupleScheme<modifyOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFormerMap()) {
          optionals.set(0);
        }
        if (struct.isSetLaterMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFormerMap()) {
          {
            oprot.writeI32(struct.formerMap.size());
            for (Map.Entry<String, String> _iter474 : struct.formerMap.entrySet())
            {
              oprot.writeString(_iter474.getKey());
              oprot.writeString(_iter474.getValue());
            }
          }
        }
        if (struct.isSetLaterMap()) {
          {
            oprot.writeI32(struct.laterMap.size());
            for (Map.Entry<String, String> _iter475 : struct.laterMap.entrySet())
            {
              oprot.writeString(_iter475.getKey());
              oprot.writeString(_iter475.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map476 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.formerMap = new HashMap<String,String>(2*_map476.size);
            for (int _i477 = 0; _i477 < _map476.size; ++_i477)
            {
              String _key478;
              String _val479;
              _key478 = iprot.readString();
              _val479 = iprot.readString();
              struct.formerMap.put(_key478, _val479);
            }
          }
          struct.setFormerMapIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map480 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.laterMap = new HashMap<String,String>(2*_map480.size);
            for (int _i481 = 0; _i481 < _map480.size; ++_i481)
            {
              String _key482;
              String _val483;
              _key482 = iprot.readString();
              _val483 = iprot.readString();
              struct.laterMap.put(_key482, _val483);
            }
          }
          struct.setLaterMapIsSet(true);
        }
      }
    }

  }

  public static class modifyOrder_result implements org.apache.thrift.TBase<modifyOrder_result, modifyOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyOrder_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyOrder_result.class, metaDataMap);
    }

    public modifyOrder_result() {
    }

    public modifyOrder_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyOrder_result(modifyOrder_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public modifyOrder_result deepCopy() {
      return new modifyOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public modifyOrder_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public modifyOrder_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyOrder_result)
        return this.equals((modifyOrder_result)that);
      return false;
    }

    public boolean equals(modifyOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyOrder_resultStandardSchemeFactory implements SchemeFactory {
      public modifyOrder_resultStandardScheme getScheme() {
        return new modifyOrder_resultStandardScheme();
      }
    }

    private static class modifyOrder_resultStandardScheme extends StandardScheme<modifyOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map484 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map484.size);
                  for (int _i485 = 0; _i485 < _map484.size; ++_i485)
                  {
                    String _key486;
                    String _val487;
                    _key486 = iprot.readString();
                    _val487 = iprot.readString();
                    struct.success.put(_key486, _val487);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter488 : struct.success.entrySet())
            {
              oprot.writeString(_iter488.getKey());
              oprot.writeString(_iter488.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyOrder_resultTupleSchemeFactory implements SchemeFactory {
      public modifyOrder_resultTupleScheme getScheme() {
        return new modifyOrder_resultTupleScheme();
      }
    }

    private static class modifyOrder_resultTupleScheme extends TupleScheme<modifyOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter489 : struct.success.entrySet())
            {
              oprot.writeString(_iter489.getKey());
              oprot.writeString(_iter489.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map490 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map490.size);
            for (int _i491 = 0; _i491 < _map490.size; ++_i491)
            {
              String _key492;
              String _val493;
              _key492 = iprot.readString();
              _val493 = iprot.readString();
              struct.success.put(_key492, _val493);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class platformDeductions_args implements org.apache.thrift.TBase<platformDeductions_args, platformDeductions_args._Fields>, java.io.Serializable, Cloneable, Comparable<platformDeductions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformDeductions_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformDeductions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformDeductions_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformDeductions_args.class, metaDataMap);
    }

    public platformDeductions_args() {
    }

    public platformDeductions_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformDeductions_args(platformDeductions_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public platformDeductions_args deepCopy() {
      return new platformDeductions_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public platformDeductions_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformDeductions_args)
        return this.equals((platformDeductions_args)that);
      return false;
    }

    public boolean equals(platformDeductions_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(platformDeductions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformDeductions_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformDeductions_argsStandardSchemeFactory implements SchemeFactory {
      public platformDeductions_argsStandardScheme getScheme() {
        return new platformDeductions_argsStandardScheme();
      }
    }

    private static class platformDeductions_argsStandardScheme extends StandardScheme<platformDeductions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformDeductions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map494 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map494.size);
                  for (int _i495 = 0; _i495 < _map494.size; ++_i495)
                  {
                    String _key496;
                    String _val497;
                    _key496 = iprot.readString();
                    _val497 = iprot.readString();
                    struct.param.put(_key496, _val497);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformDeductions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter498 : struct.param.entrySet())
            {
              oprot.writeString(_iter498.getKey());
              oprot.writeString(_iter498.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformDeductions_argsTupleSchemeFactory implements SchemeFactory {
      public platformDeductions_argsTupleScheme getScheme() {
        return new platformDeductions_argsTupleScheme();
      }
    }

    private static class platformDeductions_argsTupleScheme extends TupleScheme<platformDeductions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformDeductions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter499 : struct.param.entrySet())
            {
              oprot.writeString(_iter499.getKey());
              oprot.writeString(_iter499.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformDeductions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map500 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map500.size);
            for (int _i501 = 0; _i501 < _map500.size; ++_i501)
            {
              String _key502;
              String _val503;
              _key502 = iprot.readString();
              _val503 = iprot.readString();
              struct.param.put(_key502, _val503);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class platformDeductions_result implements org.apache.thrift.TBase<platformDeductions_result, platformDeductions_result._Fields>, java.io.Serializable, Cloneable, Comparable<platformDeductions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("platformDeductions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new platformDeductions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new platformDeductions_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(platformDeductions_result.class, metaDataMap);
    }

    public platformDeductions_result() {
    }

    public platformDeductions_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public platformDeductions_result(platformDeductions_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public platformDeductions_result deepCopy() {
      return new platformDeductions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public platformDeductions_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public platformDeductions_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof platformDeductions_result)
        return this.equals((platformDeductions_result)that);
      return false;
    }

    public boolean equals(platformDeductions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(platformDeductions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("platformDeductions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class platformDeductions_resultStandardSchemeFactory implements SchemeFactory {
      public platformDeductions_resultStandardScheme getScheme() {
        return new platformDeductions_resultStandardScheme();
      }
    }

    private static class platformDeductions_resultStandardScheme extends StandardScheme<platformDeductions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, platformDeductions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map504 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map504.size);
                  for (int _i505 = 0; _i505 < _map504.size; ++_i505)
                  {
                    String _key506;
                    String _val507;
                    _key506 = iprot.readString();
                    _val507 = iprot.readString();
                    struct.success.put(_key506, _val507);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, platformDeductions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter508 : struct.success.entrySet())
            {
              oprot.writeString(_iter508.getKey());
              oprot.writeString(_iter508.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class platformDeductions_resultTupleSchemeFactory implements SchemeFactory {
      public platformDeductions_resultTupleScheme getScheme() {
        return new platformDeductions_resultTupleScheme();
      }
    }

    private static class platformDeductions_resultTupleScheme extends TupleScheme<platformDeductions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, platformDeductions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter509 : struct.success.entrySet())
            {
              oprot.writeString(_iter509.getKey());
              oprot.writeString(_iter509.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, platformDeductions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map510 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map510.size);
            for (int _i511 = 0; _i511 < _map510.size; ++_i511)
            {
              String _key512;
              String _val513;
              _key512 = iprot.readString();
              _val513 = iprot.readString();
              struct.success.put(_key512, _val513);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class setWPwd_args implements org.apache.thrift.TBase<setWPwd_args, setWPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<setWPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setWPwd_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setWPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setWPwd_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType"),
      PASSWORD((short)3, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setWPwd_args.class, metaDataMap);
    }

    public setWPwd_args() {
    }

    public setWPwd_args(
      String uId,
      String userType,
      String password)
    {
      this();
      this.uId = uId;
      this.userType = userType;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setWPwd_args(setWPwd_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public setWPwd_args deepCopy() {
      return new setWPwd_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
      this.password = null;
    }

    public String getUId() {
      return this.uId;
    }

    public setWPwd_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public setWPwd_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public setWPwd_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setWPwd_args)
        return this.equals((setWPwd_args)that);
      return false;
    }

    public boolean equals(setWPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setWPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setWPwd_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setWPwd_argsStandardSchemeFactory implements SchemeFactory {
      public setWPwd_argsStandardScheme getScheme() {
        return new setWPwd_argsStandardScheme();
      }
    }

    private static class setWPwd_argsStandardScheme extends StandardScheme<setWPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setWPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setWPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setWPwd_argsTupleSchemeFactory implements SchemeFactory {
      public setWPwd_argsTupleScheme getScheme() {
        return new setWPwd_argsTupleScheme();
      }
    }

    private static class setWPwd_argsTupleScheme extends TupleScheme<setWPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setWPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setWPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class setWPwd_result implements org.apache.thrift.TBase<setWPwd_result, setWPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<setWPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setWPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GE_FIELD_DESC = new org.apache.thrift.protocol.TField("ge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setWPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setWPwd_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException ge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GE((short)1, "ge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GE
            return GE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GE, new org.apache.thrift.meta_data.FieldMetaData("ge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setWPwd_result.class, metaDataMap);
    }

    public setWPwd_result() {
    }

    public setWPwd_result(
      Map<String,String> success,
      FailureException ge)
    {
      this();
      this.success = success;
      this.ge = ge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setWPwd_result(setWPwd_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGe()) {
        this.ge = new FailureException(other.ge);
      }
    }

    public setWPwd_result deepCopy() {
      return new setWPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ge = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public setWPwd_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getGe() {
      return this.ge;
    }

    public setWPwd_result setGe(FailureException ge) {
      this.ge = ge;
      return this;
    }

    public void unsetGe() {
      this.ge = null;
    }

    /** Returns true if field ge is set (has been assigned a value) and false otherwise */
    public boolean isSetGe() {
      return this.ge != null;
    }

    public void setGeIsSet(boolean value) {
      if (!value) {
        this.ge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GE:
        if (value == null) {
          unsetGe();
        } else {
          setGe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GE:
        return getGe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GE:
        return isSetGe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setWPwd_result)
        return this.equals((setWPwd_result)that);
      return false;
    }

    public boolean equals(setWPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ge = true && this.isSetGe();
      boolean that_present_ge = true && that.isSetGe();
      if (this_present_ge || that_present_ge) {
        if (!(this_present_ge && that_present_ge))
          return false;
        if (!this.ge.equals(that.ge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setWPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGe()).compareTo(other.isSetGe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ge, other.ge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setWPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ge:");
      if (this.ge == null) {
        sb.append("null");
      } else {
        sb.append(this.ge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setWPwd_resultStandardSchemeFactory implements SchemeFactory {
      public setWPwd_resultStandardScheme getScheme() {
        return new setWPwd_resultStandardScheme();
      }
    }

    private static class setWPwd_resultStandardScheme extends StandardScheme<setWPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setWPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map514 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map514.size);
                  for (int _i515 = 0; _i515 < _map514.size; ++_i515)
                  {
                    String _key516;
                    String _val517;
                    _key516 = iprot.readString();
                    _val517 = iprot.readString();
                    struct.success.put(_key516, _val517);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ge = new FailureException();
                struct.ge.read(iprot);
                struct.setGeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setWPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter518 : struct.success.entrySet())
            {
              oprot.writeString(_iter518.getKey());
              oprot.writeString(_iter518.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ge != null) {
          oprot.writeFieldBegin(GE_FIELD_DESC);
          struct.ge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setWPwd_resultTupleSchemeFactory implements SchemeFactory {
      public setWPwd_resultTupleScheme getScheme() {
        return new setWPwd_resultTupleScheme();
      }
    }

    private static class setWPwd_resultTupleScheme extends TupleScheme<setWPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setWPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter519 : struct.success.entrySet())
            {
              oprot.writeString(_iter519.getKey());
              oprot.writeString(_iter519.getValue());
            }
          }
        }
        if (struct.isSetGe()) {
          struct.ge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setWPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map520 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map520.size);
            for (int _i521 = 0; _i521 < _map520.size; ++_i521)
            {
              String _key522;
              String _val523;
              _key522 = iprot.readString();
              _val523 = iprot.readString();
              struct.success.put(_key522, _val523);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ge = new FailureException();
          struct.ge.read(iprot);
          struct.setGeIsSet(true);
        }
      }
    }

  }

  public static class deductionsMentionLedger_args implements org.apache.thrift.TBase<deductionsMentionLedger_args, deductionsMentionLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<deductionsMentionLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deductionsMentionLedger_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deductionsMentionLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deductionsMentionLedger_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deductionsMentionLedger_args.class, metaDataMap);
    }

    public deductionsMentionLedger_args() {
    }

    public deductionsMentionLedger_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deductionsMentionLedger_args(deductionsMentionLedger_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public deductionsMentionLedger_args deepCopy() {
      return new deductionsMentionLedger_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public deductionsMentionLedger_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deductionsMentionLedger_args)
        return this.equals((deductionsMentionLedger_args)that);
      return false;
    }

    public boolean equals(deductionsMentionLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deductionsMentionLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deductionsMentionLedger_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deductionsMentionLedger_argsStandardSchemeFactory implements SchemeFactory {
      public deductionsMentionLedger_argsStandardScheme getScheme() {
        return new deductionsMentionLedger_argsStandardScheme();
      }
    }

    private static class deductionsMentionLedger_argsStandardScheme extends StandardScheme<deductionsMentionLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deductionsMentionLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map524 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map524.size);
                  for (int _i525 = 0; _i525 < _map524.size; ++_i525)
                  {
                    String _key526;
                    String _val527;
                    _key526 = iprot.readString();
                    _val527 = iprot.readString();
                    struct.param.put(_key526, _val527);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deductionsMentionLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter528 : struct.param.entrySet())
            {
              oprot.writeString(_iter528.getKey());
              oprot.writeString(_iter528.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deductionsMentionLedger_argsTupleSchemeFactory implements SchemeFactory {
      public deductionsMentionLedger_argsTupleScheme getScheme() {
        return new deductionsMentionLedger_argsTupleScheme();
      }
    }

    private static class deductionsMentionLedger_argsTupleScheme extends TupleScheme<deductionsMentionLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deductionsMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter529 : struct.param.entrySet())
            {
              oprot.writeString(_iter529.getKey());
              oprot.writeString(_iter529.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deductionsMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map530 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map530.size);
            for (int _i531 = 0; _i531 < _map530.size; ++_i531)
            {
              String _key532;
              String _val533;
              _key532 = iprot.readString();
              _val533 = iprot.readString();
              struct.param.put(_key532, _val533);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class deductionsMentionLedger_result implements org.apache.thrift.TBase<deductionsMentionLedger_result, deductionsMentionLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<deductionsMentionLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deductionsMentionLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deductionsMentionLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deductionsMentionLedger_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deductionsMentionLedger_result.class, metaDataMap);
    }

    public deductionsMentionLedger_result() {
    }

    public deductionsMentionLedger_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deductionsMentionLedger_result(deductionsMentionLedger_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public deductionsMentionLedger_result deepCopy() {
      return new deductionsMentionLedger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public deductionsMentionLedger_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public deductionsMentionLedger_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deductionsMentionLedger_result)
        return this.equals((deductionsMentionLedger_result)that);
      return false;
    }

    public boolean equals(deductionsMentionLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deductionsMentionLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deductionsMentionLedger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deductionsMentionLedger_resultStandardSchemeFactory implements SchemeFactory {
      public deductionsMentionLedger_resultStandardScheme getScheme() {
        return new deductionsMentionLedger_resultStandardScheme();
      }
    }

    private static class deductionsMentionLedger_resultStandardScheme extends StandardScheme<deductionsMentionLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deductionsMentionLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map534 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map534.size);
                  for (int _i535 = 0; _i535 < _map534.size; ++_i535)
                  {
                    String _key536;
                    String _val537;
                    _key536 = iprot.readString();
                    _val537 = iprot.readString();
                    struct.success.put(_key536, _val537);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deductionsMentionLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter538 : struct.success.entrySet())
            {
              oprot.writeString(_iter538.getKey());
              oprot.writeString(_iter538.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deductionsMentionLedger_resultTupleSchemeFactory implements SchemeFactory {
      public deductionsMentionLedger_resultTupleScheme getScheme() {
        return new deductionsMentionLedger_resultTupleScheme();
      }
    }

    private static class deductionsMentionLedger_resultTupleScheme extends TupleScheme<deductionsMentionLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deductionsMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter539 : struct.success.entrySet())
            {
              oprot.writeString(_iter539.getKey());
              oprot.writeString(_iter539.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deductionsMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map540 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map540.size);
            for (int _i541 = 0; _i541 < _map540.size; ++_i541)
            {
              String _key542;
              String _val543;
              _key542 = iprot.readString();
              _val543 = iprot.readString();
              struct.success.put(_key542, _val543);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class setLockWallet_args implements org.apache.thrift.TBase<setLockWallet_args, setLockWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<setLockWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLockWallet_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLockWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLockWallet_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLockWallet_args.class, metaDataMap);
    }

    public setLockWallet_args() {
    }

    public setLockWallet_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLockWallet_args(setLockWallet_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public setLockWallet_args deepCopy() {
      return new setLockWallet_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public setLockWallet_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLockWallet_args)
        return this.equals((setLockWallet_args)that);
      return false;
    }

    public boolean equals(setLockWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLockWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLockWallet_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLockWallet_argsStandardSchemeFactory implements SchemeFactory {
      public setLockWallet_argsStandardScheme getScheme() {
        return new setLockWallet_argsStandardScheme();
      }
    }

    private static class setLockWallet_argsStandardScheme extends StandardScheme<setLockWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLockWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map544 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map544.size);
                  for (int _i545 = 0; _i545 < _map544.size; ++_i545)
                  {
                    String _key546;
                    String _val547;
                    _key546 = iprot.readString();
                    _val547 = iprot.readString();
                    struct.paramMap.put(_key546, _val547);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLockWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter548 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter548.getKey());
              oprot.writeString(_iter548.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLockWallet_argsTupleSchemeFactory implements SchemeFactory {
      public setLockWallet_argsTupleScheme getScheme() {
        return new setLockWallet_argsTupleScheme();
      }
    }

    private static class setLockWallet_argsTupleScheme extends TupleScheme<setLockWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLockWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter549 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter549.getKey());
              oprot.writeString(_iter549.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLockWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map550 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map550.size);
            for (int _i551 = 0; _i551 < _map550.size; ++_i551)
            {
              String _key552;
              String _val553;
              _key552 = iprot.readString();
              _val553 = iprot.readString();
              struct.paramMap.put(_key552, _val553);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class setLockWallet_result implements org.apache.thrift.TBase<setLockWallet_result, setLockWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<setLockWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLockWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLockWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLockWallet_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLockWallet_result.class, metaDataMap);
    }

    public setLockWallet_result() {
    }

    public setLockWallet_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLockWallet_result(setLockWallet_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public setLockWallet_result deepCopy() {
      return new setLockWallet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public setLockWallet_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public setLockWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLockWallet_result)
        return this.equals((setLockWallet_result)that);
      return false;
    }

    public boolean equals(setLockWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLockWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLockWallet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLockWallet_resultStandardSchemeFactory implements SchemeFactory {
      public setLockWallet_resultStandardScheme getScheme() {
        return new setLockWallet_resultStandardScheme();
      }
    }

    private static class setLockWallet_resultStandardScheme extends StandardScheme<setLockWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLockWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map554 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map554.size);
                  for (int _i555 = 0; _i555 < _map554.size; ++_i555)
                  {
                    String _key556;
                    String _val557;
                    _key556 = iprot.readString();
                    _val557 = iprot.readString();
                    struct.success.put(_key556, _val557);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLockWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter558 : struct.success.entrySet())
            {
              oprot.writeString(_iter558.getKey());
              oprot.writeString(_iter558.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLockWallet_resultTupleSchemeFactory implements SchemeFactory {
      public setLockWallet_resultTupleScheme getScheme() {
        return new setLockWallet_resultTupleScheme();
      }
    }

    private static class setLockWallet_resultTupleScheme extends TupleScheme<setLockWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLockWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter559 : struct.success.entrySet())
            {
              oprot.writeString(_iter559.getKey());
              oprot.writeString(_iter559.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLockWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map560 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map560.size);
            for (int _i561 = 0; _i561 < _map560.size; ++_i561)
            {
              String _key562;
              String _val563;
              _key562 = iprot.readString();
              _val563 = iprot.readString();
              struct.success.put(_key562, _val563);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class recoveryFailOrder_args implements org.apache.thrift.TBase<recoveryFailOrder_args, recoveryFailOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<recoveryFailOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recoveryFailOrder_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recoveryFailOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recoveryFailOrder_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recoveryFailOrder_args.class, metaDataMap);
    }

    public recoveryFailOrder_args() {
    }

    public recoveryFailOrder_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recoveryFailOrder_args(recoveryFailOrder_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public recoveryFailOrder_args deepCopy() {
      return new recoveryFailOrder_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public recoveryFailOrder_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recoveryFailOrder_args)
        return this.equals((recoveryFailOrder_args)that);
      return false;
    }

    public boolean equals(recoveryFailOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(recoveryFailOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recoveryFailOrder_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recoveryFailOrder_argsStandardSchemeFactory implements SchemeFactory {
      public recoveryFailOrder_argsStandardScheme getScheme() {
        return new recoveryFailOrder_argsStandardScheme();
      }
    }

    private static class recoveryFailOrder_argsStandardScheme extends StandardScheme<recoveryFailOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recoveryFailOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map564 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map564.size);
                  for (int _i565 = 0; _i565 < _map564.size; ++_i565)
                  {
                    String _key566;
                    String _val567;
                    _key566 = iprot.readString();
                    _val567 = iprot.readString();
                    struct.paramMap.put(_key566, _val567);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recoveryFailOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter568 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter568.getKey());
              oprot.writeString(_iter568.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recoveryFailOrder_argsTupleSchemeFactory implements SchemeFactory {
      public recoveryFailOrder_argsTupleScheme getScheme() {
        return new recoveryFailOrder_argsTupleScheme();
      }
    }

    private static class recoveryFailOrder_argsTupleScheme extends TupleScheme<recoveryFailOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recoveryFailOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter569 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter569.getKey());
              oprot.writeString(_iter569.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recoveryFailOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map570 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map570.size);
            for (int _i571 = 0; _i571 < _map570.size; ++_i571)
            {
              String _key572;
              String _val573;
              _key572 = iprot.readString();
              _val573 = iprot.readString();
              struct.paramMap.put(_key572, _val573);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class recoveryFailOrder_result implements org.apache.thrift.TBase<recoveryFailOrder_result, recoveryFailOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<recoveryFailOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recoveryFailOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recoveryFailOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recoveryFailOrder_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recoveryFailOrder_result.class, metaDataMap);
    }

    public recoveryFailOrder_result() {
    }

    public recoveryFailOrder_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recoveryFailOrder_result(recoveryFailOrder_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public recoveryFailOrder_result deepCopy() {
      return new recoveryFailOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public recoveryFailOrder_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public recoveryFailOrder_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recoveryFailOrder_result)
        return this.equals((recoveryFailOrder_result)that);
      return false;
    }

    public boolean equals(recoveryFailOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(recoveryFailOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recoveryFailOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recoveryFailOrder_resultStandardSchemeFactory implements SchemeFactory {
      public recoveryFailOrder_resultStandardScheme getScheme() {
        return new recoveryFailOrder_resultStandardScheme();
      }
    }

    private static class recoveryFailOrder_resultStandardScheme extends StandardScheme<recoveryFailOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recoveryFailOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map574 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map574.size);
                  for (int _i575 = 0; _i575 < _map574.size; ++_i575)
                  {
                    String _key576;
                    String _val577;
                    _key576 = iprot.readString();
                    _val577 = iprot.readString();
                    struct.success.put(_key576, _val577);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recoveryFailOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter578 : struct.success.entrySet())
            {
              oprot.writeString(_iter578.getKey());
              oprot.writeString(_iter578.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recoveryFailOrder_resultTupleSchemeFactory implements SchemeFactory {
      public recoveryFailOrder_resultTupleScheme getScheme() {
        return new recoveryFailOrder_resultTupleScheme();
      }
    }

    private static class recoveryFailOrder_resultTupleScheme extends TupleScheme<recoveryFailOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recoveryFailOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter579 : struct.success.entrySet())
            {
              oprot.writeString(_iter579.getKey());
              oprot.writeString(_iter579.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recoveryFailOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map580 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map580.size);
            for (int _i581 = 0; _i581 < _map580.size; ++_i581)
            {
              String _key582;
              String _val583;
              _key582 = iprot.readString();
              _val583 = iprot.readString();
              struct.success.put(_key582, _val583);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSellerStatisticsList_args implements org.apache.thrift.TBase<getSellerStatisticsList_args, getSellerStatisticsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerStatisticsList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerStatisticsList_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerStatisticsList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerStatisticsList_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerStatisticsList_args.class, metaDataMap);
    }

    public getSellerStatisticsList_args() {
    }

    public getSellerStatisticsList_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerStatisticsList_args(getSellerStatisticsList_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getSellerStatisticsList_args deepCopy() {
      return new getSellerStatisticsList_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getSellerStatisticsList_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerStatisticsList_args)
        return this.equals((getSellerStatisticsList_args)that);
      return false;
    }

    public boolean equals(getSellerStatisticsList_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerStatisticsList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerStatisticsList_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerStatisticsList_argsStandardSchemeFactory implements SchemeFactory {
      public getSellerStatisticsList_argsStandardScheme getScheme() {
        return new getSellerStatisticsList_argsStandardScheme();
      }
    }

    private static class getSellerStatisticsList_argsStandardScheme extends StandardScheme<getSellerStatisticsList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerStatisticsList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map584 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map584.size);
                  for (int _i585 = 0; _i585 < _map584.size; ++_i585)
                  {
                    String _key586;
                    String _val587;
                    _key586 = iprot.readString();
                    _val587 = iprot.readString();
                    struct.paramMap.put(_key586, _val587);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerStatisticsList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter588 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter588.getKey());
              oprot.writeString(_iter588.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerStatisticsList_argsTupleSchemeFactory implements SchemeFactory {
      public getSellerStatisticsList_argsTupleScheme getScheme() {
        return new getSellerStatisticsList_argsTupleScheme();
      }
    }

    private static class getSellerStatisticsList_argsTupleScheme extends TupleScheme<getSellerStatisticsList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerStatisticsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter589 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter589.getKey());
              oprot.writeString(_iter589.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerStatisticsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map590 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map590.size);
            for (int _i591 = 0; _i591 < _map590.size; ++_i591)
            {
              String _key592;
              String _val593;
              _key592 = iprot.readString();
              _val593 = iprot.readString();
              struct.paramMap.put(_key592, _val593);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getSellerStatisticsList_result implements org.apache.thrift.TBase<getSellerStatisticsList_result, getSellerStatisticsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerStatisticsList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerStatisticsList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerStatisticsList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerStatisticsList_resultTupleSchemeFactory());
    }

    public SellerStatistics success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SellerStatistics.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerStatisticsList_result.class, metaDataMap);
    }

    public getSellerStatisticsList_result() {
    }

    public getSellerStatisticsList_result(
      SellerStatistics success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerStatisticsList_result(getSellerStatisticsList_result other) {
      if (other.isSetSuccess()) {
        this.success = new SellerStatistics(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSellerStatisticsList_result deepCopy() {
      return new getSellerStatisticsList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public SellerStatistics getSuccess() {
      return this.success;
    }

    public getSellerStatisticsList_result setSuccess(SellerStatistics success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSellerStatisticsList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SellerStatistics)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerStatisticsList_result)
        return this.equals((getSellerStatisticsList_result)that);
      return false;
    }

    public boolean equals(getSellerStatisticsList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerStatisticsList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerStatisticsList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerStatisticsList_resultStandardSchemeFactory implements SchemeFactory {
      public getSellerStatisticsList_resultStandardScheme getScheme() {
        return new getSellerStatisticsList_resultStandardScheme();
      }
    }

    private static class getSellerStatisticsList_resultStandardScheme extends StandardScheme<getSellerStatisticsList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerStatisticsList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SellerStatistics();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerStatisticsList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerStatisticsList_resultTupleSchemeFactory implements SchemeFactory {
      public getSellerStatisticsList_resultTupleScheme getScheme() {
        return new getSellerStatisticsList_resultTupleScheme();
      }
    }

    private static class getSellerStatisticsList_resultTupleScheme extends TupleScheme<getSellerStatisticsList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerStatisticsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerStatisticsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SellerStatistics();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSellerDetailList_args implements org.apache.thrift.TBase<getSellerDetailList_args, getSellerDetailList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerDetailList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerDetailList_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerDetailList_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerDetailList_args.class, metaDataMap);
    }

    public getSellerDetailList_args() {
    }

    public getSellerDetailList_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerDetailList_args(getSellerDetailList_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getSellerDetailList_args deepCopy() {
      return new getSellerDetailList_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getSellerDetailList_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerDetailList_args)
        return this.equals((getSellerDetailList_args)that);
      return false;
    }

    public boolean equals(getSellerDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerDetailList_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public getSellerDetailList_argsStandardScheme getScheme() {
        return new getSellerDetailList_argsStandardScheme();
      }
    }

    private static class getSellerDetailList_argsStandardScheme extends StandardScheme<getSellerDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map594 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map594.size);
                  for (int _i595 = 0; _i595 < _map594.size; ++_i595)
                  {
                    String _key596;
                    String _val597;
                    _key596 = iprot.readString();
                    _val597 = iprot.readString();
                    struct.paramMap.put(_key596, _val597);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter598 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter598.getKey());
              oprot.writeString(_iter598.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public getSellerDetailList_argsTupleScheme getScheme() {
        return new getSellerDetailList_argsTupleScheme();
      }
    }

    private static class getSellerDetailList_argsTupleScheme extends TupleScheme<getSellerDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter599 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter599.getKey());
              oprot.writeString(_iter599.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map600 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map600.size);
            for (int _i601 = 0; _i601 < _map600.size; ++_i601)
            {
              String _key602;
              String _val603;
              _key602 = iprot.readString();
              _val603 = iprot.readString();
              struct.paramMap.put(_key602, _val603);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getSellerDetailList_result implements org.apache.thrift.TBase<getSellerDetailList_result, getSellerDetailList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerDetailList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerDetailList_resultTupleSchemeFactory());
    }

    public SellerStatistics success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SellerStatistics.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerDetailList_result.class, metaDataMap);
    }

    public getSellerDetailList_result() {
    }

    public getSellerDetailList_result(
      SellerStatistics success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerDetailList_result(getSellerDetailList_result other) {
      if (other.isSetSuccess()) {
        this.success = new SellerStatistics(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSellerDetailList_result deepCopy() {
      return new getSellerDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public SellerStatistics getSuccess() {
      return this.success;
    }

    public getSellerDetailList_result setSuccess(SellerStatistics success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSellerDetailList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SellerStatistics)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerDetailList_result)
        return this.equals((getSellerDetailList_result)that);
      return false;
    }

    public boolean equals(getSellerDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public getSellerDetailList_resultStandardScheme getScheme() {
        return new getSellerDetailList_resultStandardScheme();
      }
    }

    private static class getSellerDetailList_resultStandardScheme extends StandardScheme<getSellerDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SellerStatistics();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public getSellerDetailList_resultTupleScheme getScheme() {
        return new getSellerDetailList_resultTupleScheme();
      }
    }

    private static class getSellerDetailList_resultTupleScheme extends TupleScheme<getSellerDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SellerStatistics();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSellerMonthlyStatistics_args implements org.apache.thrift.TBase<getSellerMonthlyStatistics_args, getSellerMonthlyStatistics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerMonthlyStatistics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerMonthlyStatistics_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerMonthlyStatistics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerMonthlyStatistics_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerMonthlyStatistics_args.class, metaDataMap);
    }

    public getSellerMonthlyStatistics_args() {
    }

    public getSellerMonthlyStatistics_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerMonthlyStatistics_args(getSellerMonthlyStatistics_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getSellerMonthlyStatistics_args deepCopy() {
      return new getSellerMonthlyStatistics_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getSellerMonthlyStatistics_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerMonthlyStatistics_args)
        return this.equals((getSellerMonthlyStatistics_args)that);
      return false;
    }

    public boolean equals(getSellerMonthlyStatistics_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerMonthlyStatistics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerMonthlyStatistics_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerMonthlyStatistics_argsStandardSchemeFactory implements SchemeFactory {
      public getSellerMonthlyStatistics_argsStandardScheme getScheme() {
        return new getSellerMonthlyStatistics_argsStandardScheme();
      }
    }

    private static class getSellerMonthlyStatistics_argsStandardScheme extends StandardScheme<getSellerMonthlyStatistics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerMonthlyStatistics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map604 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map604.size);
                  for (int _i605 = 0; _i605 < _map604.size; ++_i605)
                  {
                    String _key606;
                    String _val607;
                    _key606 = iprot.readString();
                    _val607 = iprot.readString();
                    struct.paramMap.put(_key606, _val607);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerMonthlyStatistics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter608 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter608.getKey());
              oprot.writeString(_iter608.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerMonthlyStatistics_argsTupleSchemeFactory implements SchemeFactory {
      public getSellerMonthlyStatistics_argsTupleScheme getScheme() {
        return new getSellerMonthlyStatistics_argsTupleScheme();
      }
    }

    private static class getSellerMonthlyStatistics_argsTupleScheme extends TupleScheme<getSellerMonthlyStatistics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerMonthlyStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter609 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter609.getKey());
              oprot.writeString(_iter609.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerMonthlyStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map610 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map610.size);
            for (int _i611 = 0; _i611 < _map610.size; ++_i611)
            {
              String _key612;
              String _val613;
              _key612 = iprot.readString();
              _val613 = iprot.readString();
              struct.paramMap.put(_key612, _val613);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getSellerMonthlyStatistics_result implements org.apache.thrift.TBase<getSellerMonthlyStatistics_result, getSellerMonthlyStatistics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerMonthlyStatistics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerMonthlyStatistics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerMonthlyStatistics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerMonthlyStatistics_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerMonthlyStatistics_result.class, metaDataMap);
    }

    public getSellerMonthlyStatistics_result() {
    }

    public getSellerMonthlyStatistics_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerMonthlyStatistics_result(getSellerMonthlyStatistics_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSellerMonthlyStatistics_result deepCopy() {
      return new getSellerMonthlyStatistics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getSellerMonthlyStatistics_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSellerMonthlyStatistics_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerMonthlyStatistics_result)
        return this.equals((getSellerMonthlyStatistics_result)that);
      return false;
    }

    public boolean equals(getSellerMonthlyStatistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerMonthlyStatistics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerMonthlyStatistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerMonthlyStatistics_resultStandardSchemeFactory implements SchemeFactory {
      public getSellerMonthlyStatistics_resultStandardScheme getScheme() {
        return new getSellerMonthlyStatistics_resultStandardScheme();
      }
    }

    private static class getSellerMonthlyStatistics_resultStandardScheme extends StandardScheme<getSellerMonthlyStatistics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerMonthlyStatistics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map614 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map614.size);
                  for (int _i615 = 0; _i615 < _map614.size; ++_i615)
                  {
                    String _key616;
                    String _val617;
                    _key616 = iprot.readString();
                    _val617 = iprot.readString();
                    struct.success.put(_key616, _val617);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerMonthlyStatistics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter618 : struct.success.entrySet())
            {
              oprot.writeString(_iter618.getKey());
              oprot.writeString(_iter618.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerMonthlyStatistics_resultTupleSchemeFactory implements SchemeFactory {
      public getSellerMonthlyStatistics_resultTupleScheme getScheme() {
        return new getSellerMonthlyStatistics_resultTupleScheme();
      }
    }

    private static class getSellerMonthlyStatistics_resultTupleScheme extends TupleScheme<getSellerMonthlyStatistics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerMonthlyStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter619 : struct.success.entrySet())
            {
              oprot.writeString(_iter619.getKey());
              oprot.writeString(_iter619.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerMonthlyStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map620 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map620.size);
            for (int _i621 = 0; _i621 < _map620.size; ++_i621)
            {
              String _key622;
              String _val623;
              _key622 = iprot.readString();
              _val623 = iprot.readString();
              struct.success.put(_key622, _val623);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class xmerTransferDeposit_args implements org.apache.thrift.TBase<xmerTransferDeposit_args, xmerTransferDeposit_args._Fields>, java.io.Serializable, Cloneable, Comparable<xmerTransferDeposit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("xmerTransferDeposit_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new xmerTransferDeposit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new xmerTransferDeposit_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(xmerTransferDeposit_args.class, metaDataMap);
    }

    public xmerTransferDeposit_args() {
    }

    public xmerTransferDeposit_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public xmerTransferDeposit_args(xmerTransferDeposit_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public xmerTransferDeposit_args deepCopy() {
      return new xmerTransferDeposit_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public xmerTransferDeposit_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof xmerTransferDeposit_args)
        return this.equals((xmerTransferDeposit_args)that);
      return false;
    }

    public boolean equals(xmerTransferDeposit_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(xmerTransferDeposit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("xmerTransferDeposit_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class xmerTransferDeposit_argsStandardSchemeFactory implements SchemeFactory {
      public xmerTransferDeposit_argsStandardScheme getScheme() {
        return new xmerTransferDeposit_argsStandardScheme();
      }
    }

    private static class xmerTransferDeposit_argsStandardScheme extends StandardScheme<xmerTransferDeposit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, xmerTransferDeposit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map624 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map624.size);
                  for (int _i625 = 0; _i625 < _map624.size; ++_i625)
                  {
                    String _key626;
                    String _val627;
                    _key626 = iprot.readString();
                    _val627 = iprot.readString();
                    struct.paramMap.put(_key626, _val627);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, xmerTransferDeposit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter628 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter628.getKey());
              oprot.writeString(_iter628.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class xmerTransferDeposit_argsTupleSchemeFactory implements SchemeFactory {
      public xmerTransferDeposit_argsTupleScheme getScheme() {
        return new xmerTransferDeposit_argsTupleScheme();
      }
    }

    private static class xmerTransferDeposit_argsTupleScheme extends TupleScheme<xmerTransferDeposit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, xmerTransferDeposit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter629 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter629.getKey());
              oprot.writeString(_iter629.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, xmerTransferDeposit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map630 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map630.size);
            for (int _i631 = 0; _i631 < _map630.size; ++_i631)
            {
              String _key632;
              String _val633;
              _key632 = iprot.readString();
              _val633 = iprot.readString();
              struct.paramMap.put(_key632, _val633);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class xmerTransferDeposit_result implements org.apache.thrift.TBase<xmerTransferDeposit_result, xmerTransferDeposit_result._Fields>, java.io.Serializable, Cloneable, Comparable<xmerTransferDeposit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("xmerTransferDeposit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new xmerTransferDeposit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new xmerTransferDeposit_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(xmerTransferDeposit_result.class, metaDataMap);
    }

    public xmerTransferDeposit_result() {
    }

    public xmerTransferDeposit_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public xmerTransferDeposit_result(xmerTransferDeposit_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public xmerTransferDeposit_result deepCopy() {
      return new xmerTransferDeposit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public xmerTransferDeposit_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public xmerTransferDeposit_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof xmerTransferDeposit_result)
        return this.equals((xmerTransferDeposit_result)that);
      return false;
    }

    public boolean equals(xmerTransferDeposit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(xmerTransferDeposit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("xmerTransferDeposit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class xmerTransferDeposit_resultStandardSchemeFactory implements SchemeFactory {
      public xmerTransferDeposit_resultStandardScheme getScheme() {
        return new xmerTransferDeposit_resultStandardScheme();
      }
    }

    private static class xmerTransferDeposit_resultStandardScheme extends StandardScheme<xmerTransferDeposit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, xmerTransferDeposit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map634 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map634.size);
                  for (int _i635 = 0; _i635 < _map634.size; ++_i635)
                  {
                    String _key636;
                    String _val637;
                    _key636 = iprot.readString();
                    _val637 = iprot.readString();
                    struct.success.put(_key636, _val637);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, xmerTransferDeposit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter638 : struct.success.entrySet())
            {
              oprot.writeString(_iter638.getKey());
              oprot.writeString(_iter638.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class xmerTransferDeposit_resultTupleSchemeFactory implements SchemeFactory {
      public xmerTransferDeposit_resultTupleScheme getScheme() {
        return new xmerTransferDeposit_resultTupleScheme();
      }
    }

    private static class xmerTransferDeposit_resultTupleScheme extends TupleScheme<xmerTransferDeposit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, xmerTransferDeposit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter639 : struct.success.entrySet())
            {
              oprot.writeString(_iter639.getKey());
              oprot.writeString(_iter639.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, xmerTransferDeposit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map640 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map640.size);
            for (int _i641 = 0; _i641 < _map640.size; ++_i641)
            {
              String _key642;
              String _val643;
              _key642 = iprot.readString();
              _val643 = iprot.readString();
              struct.success.put(_key642, _val643);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class xmerReturnDeposit_args implements org.apache.thrift.TBase<xmerReturnDeposit_args, xmerReturnDeposit_args._Fields>, java.io.Serializable, Cloneable, Comparable<xmerReturnDeposit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("xmerReturnDeposit_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new xmerReturnDeposit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new xmerReturnDeposit_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(xmerReturnDeposit_args.class, metaDataMap);
    }

    public xmerReturnDeposit_args() {
    }

    public xmerReturnDeposit_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public xmerReturnDeposit_args(xmerReturnDeposit_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public xmerReturnDeposit_args deepCopy() {
      return new xmerReturnDeposit_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public xmerReturnDeposit_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof xmerReturnDeposit_args)
        return this.equals((xmerReturnDeposit_args)that);
      return false;
    }

    public boolean equals(xmerReturnDeposit_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(xmerReturnDeposit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("xmerReturnDeposit_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class xmerReturnDeposit_argsStandardSchemeFactory implements SchemeFactory {
      public xmerReturnDeposit_argsStandardScheme getScheme() {
        return new xmerReturnDeposit_argsStandardScheme();
      }
    }

    private static class xmerReturnDeposit_argsStandardScheme extends StandardScheme<xmerReturnDeposit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, xmerReturnDeposit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map644 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map644.size);
                  for (int _i645 = 0; _i645 < _map644.size; ++_i645)
                  {
                    String _key646;
                    String _val647;
                    _key646 = iprot.readString();
                    _val647 = iprot.readString();
                    struct.paramMap.put(_key646, _val647);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, xmerReturnDeposit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter648 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter648.getKey());
              oprot.writeString(_iter648.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class xmerReturnDeposit_argsTupleSchemeFactory implements SchemeFactory {
      public xmerReturnDeposit_argsTupleScheme getScheme() {
        return new xmerReturnDeposit_argsTupleScheme();
      }
    }

    private static class xmerReturnDeposit_argsTupleScheme extends TupleScheme<xmerReturnDeposit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, xmerReturnDeposit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter649 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter649.getKey());
              oprot.writeString(_iter649.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, xmerReturnDeposit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map650 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map650.size);
            for (int _i651 = 0; _i651 < _map650.size; ++_i651)
            {
              String _key652;
              String _val653;
              _key652 = iprot.readString();
              _val653 = iprot.readString();
              struct.paramMap.put(_key652, _val653);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class xmerReturnDeposit_result implements org.apache.thrift.TBase<xmerReturnDeposit_result, xmerReturnDeposit_result._Fields>, java.io.Serializable, Cloneable, Comparable<xmerReturnDeposit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("xmerReturnDeposit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new xmerReturnDeposit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new xmerReturnDeposit_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(xmerReturnDeposit_result.class, metaDataMap);
    }

    public xmerReturnDeposit_result() {
    }

    public xmerReturnDeposit_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public xmerReturnDeposit_result(xmerReturnDeposit_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public xmerReturnDeposit_result deepCopy() {
      return new xmerReturnDeposit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public xmerReturnDeposit_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public xmerReturnDeposit_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof xmerReturnDeposit_result)
        return this.equals((xmerReturnDeposit_result)that);
      return false;
    }

    public boolean equals(xmerReturnDeposit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(xmerReturnDeposit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("xmerReturnDeposit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class xmerReturnDeposit_resultStandardSchemeFactory implements SchemeFactory {
      public xmerReturnDeposit_resultStandardScheme getScheme() {
        return new xmerReturnDeposit_resultStandardScheme();
      }
    }

    private static class xmerReturnDeposit_resultStandardScheme extends StandardScheme<xmerReturnDeposit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, xmerReturnDeposit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map654 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map654.size);
                  for (int _i655 = 0; _i655 < _map654.size; ++_i655)
                  {
                    String _key656;
                    String _val657;
                    _key656 = iprot.readString();
                    _val657 = iprot.readString();
                    struct.success.put(_key656, _val657);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, xmerReturnDeposit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter658 : struct.success.entrySet())
            {
              oprot.writeString(_iter658.getKey());
              oprot.writeString(_iter658.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class xmerReturnDeposit_resultTupleSchemeFactory implements SchemeFactory {
      public xmerReturnDeposit_resultTupleScheme getScheme() {
        return new xmerReturnDeposit_resultTupleScheme();
      }
    }

    private static class xmerReturnDeposit_resultTupleScheme extends TupleScheme<xmerReturnDeposit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, xmerReturnDeposit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter659 : struct.success.entrySet())
            {
              oprot.writeString(_iter659.getKey());
              oprot.writeString(_iter659.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, xmerReturnDeposit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map660 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map660.size);
            for (int _i661 = 0; _i661 < _map660.size; ++_i661)
            {
              String _key662;
              String _val663;
              _key662 = iprot.readString();
              _val663 = iprot.readString();
              struct.success.put(_key662, _val663);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class deductionsOrderLedger_args implements org.apache.thrift.TBase<deductionsOrderLedger_args, deductionsOrderLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<deductionsOrderLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deductionsOrderLedger_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deductionsOrderLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deductionsOrderLedger_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deductionsOrderLedger_args.class, metaDataMap);
    }

    public deductionsOrderLedger_args() {
    }

    public deductionsOrderLedger_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deductionsOrderLedger_args(deductionsOrderLedger_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public deductionsOrderLedger_args deepCopy() {
      return new deductionsOrderLedger_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public deductionsOrderLedger_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deductionsOrderLedger_args)
        return this.equals((deductionsOrderLedger_args)that);
      return false;
    }

    public boolean equals(deductionsOrderLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deductionsOrderLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deductionsOrderLedger_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deductionsOrderLedger_argsStandardSchemeFactory implements SchemeFactory {
      public deductionsOrderLedger_argsStandardScheme getScheme() {
        return new deductionsOrderLedger_argsStandardScheme();
      }
    }

    private static class deductionsOrderLedger_argsStandardScheme extends StandardScheme<deductionsOrderLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deductionsOrderLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map664 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map664.size);
                  for (int _i665 = 0; _i665 < _map664.size; ++_i665)
                  {
                    String _key666;
                    String _val667;
                    _key666 = iprot.readString();
                    _val667 = iprot.readString();
                    struct.param.put(_key666, _val667);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deductionsOrderLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter668 : struct.param.entrySet())
            {
              oprot.writeString(_iter668.getKey());
              oprot.writeString(_iter668.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deductionsOrderLedger_argsTupleSchemeFactory implements SchemeFactory {
      public deductionsOrderLedger_argsTupleScheme getScheme() {
        return new deductionsOrderLedger_argsTupleScheme();
      }
    }

    private static class deductionsOrderLedger_argsTupleScheme extends TupleScheme<deductionsOrderLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deductionsOrderLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter669 : struct.param.entrySet())
            {
              oprot.writeString(_iter669.getKey());
              oprot.writeString(_iter669.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deductionsOrderLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map670 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map670.size);
            for (int _i671 = 0; _i671 < _map670.size; ++_i671)
            {
              String _key672;
              String _val673;
              _key672 = iprot.readString();
              _val673 = iprot.readString();
              struct.param.put(_key672, _val673);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class deductionsOrderLedger_result implements org.apache.thrift.TBase<deductionsOrderLedger_result, deductionsOrderLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<deductionsOrderLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deductionsOrderLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deductionsOrderLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deductionsOrderLedger_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deductionsOrderLedger_result.class, metaDataMap);
    }

    public deductionsOrderLedger_result() {
    }

    public deductionsOrderLedger_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deductionsOrderLedger_result(deductionsOrderLedger_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public deductionsOrderLedger_result deepCopy() {
      return new deductionsOrderLedger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public deductionsOrderLedger_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public deductionsOrderLedger_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deductionsOrderLedger_result)
        return this.equals((deductionsOrderLedger_result)that);
      return false;
    }

    public boolean equals(deductionsOrderLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deductionsOrderLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deductionsOrderLedger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deductionsOrderLedger_resultStandardSchemeFactory implements SchemeFactory {
      public deductionsOrderLedger_resultStandardScheme getScheme() {
        return new deductionsOrderLedger_resultStandardScheme();
      }
    }

    private static class deductionsOrderLedger_resultStandardScheme extends StandardScheme<deductionsOrderLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deductionsOrderLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map674 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map674.size);
                  for (int _i675 = 0; _i675 < _map674.size; ++_i675)
                  {
                    String _key676;
                    String _val677;
                    _key676 = iprot.readString();
                    _val677 = iprot.readString();
                    struct.success.put(_key676, _val677);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deductionsOrderLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter678 : struct.success.entrySet())
            {
              oprot.writeString(_iter678.getKey());
              oprot.writeString(_iter678.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deductionsOrderLedger_resultTupleSchemeFactory implements SchemeFactory {
      public deductionsOrderLedger_resultTupleScheme getScheme() {
        return new deductionsOrderLedger_resultTupleScheme();
      }
    }

    private static class deductionsOrderLedger_resultTupleScheme extends TupleScheme<deductionsOrderLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deductionsOrderLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter679 : struct.success.entrySet())
            {
              oprot.writeString(_iter679.getKey());
              oprot.writeString(_iter679.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deductionsOrderLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map680 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map680.size);
            for (int _i681 = 0; _i681 < _map680.size; ++_i681)
            {
              String _key682;
              String _val683;
              _key682 = iprot.readString();
              _val683 = iprot.readString();
              struct.success.put(_key682, _val683);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWalletAmount_args implements org.apache.thrift.TBase<updateWalletAmount_args, updateWalletAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletAmount_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletAmount_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletAmount_args.class, metaDataMap);
    }

    public updateWalletAmount_args() {
    }

    public updateWalletAmount_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletAmount_args(updateWalletAmount_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public updateWalletAmount_args deepCopy() {
      return new updateWalletAmount_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public updateWalletAmount_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletAmount_args)
        return this.equals((updateWalletAmount_args)that);
      return false;
    }

    public boolean equals(updateWalletAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletAmount_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletAmount_argsStandardSchemeFactory implements SchemeFactory {
      public updateWalletAmount_argsStandardScheme getScheme() {
        return new updateWalletAmount_argsStandardScheme();
      }
    }

    private static class updateWalletAmount_argsStandardScheme extends StandardScheme<updateWalletAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map684 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map684.size);
                  for (int _i685 = 0; _i685 < _map684.size; ++_i685)
                  {
                    String _key686;
                    String _val687;
                    _key686 = iprot.readString();
                    _val687 = iprot.readString();
                    struct.param.put(_key686, _val687);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter688 : struct.param.entrySet())
            {
              oprot.writeString(_iter688.getKey());
              oprot.writeString(_iter688.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletAmount_argsTupleSchemeFactory implements SchemeFactory {
      public updateWalletAmount_argsTupleScheme getScheme() {
        return new updateWalletAmount_argsTupleScheme();
      }
    }

    private static class updateWalletAmount_argsTupleScheme extends TupleScheme<updateWalletAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter689 : struct.param.entrySet())
            {
              oprot.writeString(_iter689.getKey());
              oprot.writeString(_iter689.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map690 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map690.size);
            for (int _i691 = 0; _i691 < _map690.size; ++_i691)
            {
              String _key692;
              String _val693;
              _key692 = iprot.readString();
              _val693 = iprot.readString();
              struct.param.put(_key692, _val693);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class updateWalletAmount_result implements org.apache.thrift.TBase<updateWalletAmount_result, updateWalletAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletAmount_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletAmount_result.class, metaDataMap);
    }

    public updateWalletAmount_result() {
    }

    public updateWalletAmount_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletAmount_result(updateWalletAmount_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWalletAmount_result deepCopy() {
      return new updateWalletAmount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public updateWalletAmount_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWalletAmount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletAmount_result)
        return this.equals((updateWalletAmount_result)that);
      return false;
    }

    public boolean equals(updateWalletAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletAmount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletAmount_resultStandardSchemeFactory implements SchemeFactory {
      public updateWalletAmount_resultStandardScheme getScheme() {
        return new updateWalletAmount_resultStandardScheme();
      }
    }

    private static class updateWalletAmount_resultStandardScheme extends StandardScheme<updateWalletAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map694 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map694.size);
                  for (int _i695 = 0; _i695 < _map694.size; ++_i695)
                  {
                    String _key696;
                    String _val697;
                    _key696 = iprot.readString();
                    _val697 = iprot.readString();
                    struct.success.put(_key696, _val697);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter698 : struct.success.entrySet())
            {
              oprot.writeString(_iter698.getKey());
              oprot.writeString(_iter698.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletAmount_resultTupleSchemeFactory implements SchemeFactory {
      public updateWalletAmount_resultTupleScheme getScheme() {
        return new updateWalletAmount_resultTupleScheme();
      }
    }

    private static class updateWalletAmount_resultTupleScheme extends TupleScheme<updateWalletAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter699 : struct.success.entrySet())
            {
              oprot.writeString(_iter699.getKey());
              oprot.writeString(_iter699.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map700 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map700.size);
            for (int _i701 = 0; _i701 < _map700.size; ++_i701)
            {
              String _key702;
              String _val703;
              _key702 = iprot.readString();
              _val703 = iprot.readString();
              struct.success.put(_key702, _val703);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSingleMentionAccount_args implements org.apache.thrift.TBase<getSingleMentionAccount_args, getSingleMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSingleMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSingleMentionAccount_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSingleMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSingleMentionAccount_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSingleMentionAccount_args.class, metaDataMap);
    }

    public getSingleMentionAccount_args() {
    }

    public getSingleMentionAccount_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSingleMentionAccount_args(getSingleMentionAccount_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public getSingleMentionAccount_args deepCopy() {
      return new getSingleMentionAccount_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public getSingleMentionAccount_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSingleMentionAccount_args)
        return this.equals((getSingleMentionAccount_args)that);
      return false;
    }

    public boolean equals(getSingleMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSingleMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSingleMentionAccount_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSingleMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public getSingleMentionAccount_argsStandardScheme getScheme() {
        return new getSingleMentionAccount_argsStandardScheme();
      }
    }

    private static class getSingleMentionAccount_argsStandardScheme extends StandardScheme<getSingleMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSingleMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map704 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map704.size);
                  for (int _i705 = 0; _i705 < _map704.size; ++_i705)
                  {
                    String _key706;
                    String _val707;
                    _key706 = iprot.readString();
                    _val707 = iprot.readString();
                    struct.param.put(_key706, _val707);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSingleMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter708 : struct.param.entrySet())
            {
              oprot.writeString(_iter708.getKey());
              oprot.writeString(_iter708.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSingleMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public getSingleMentionAccount_argsTupleScheme getScheme() {
        return new getSingleMentionAccount_argsTupleScheme();
      }
    }

    private static class getSingleMentionAccount_argsTupleScheme extends TupleScheme<getSingleMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSingleMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter709 : struct.param.entrySet())
            {
              oprot.writeString(_iter709.getKey());
              oprot.writeString(_iter709.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSingleMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map710 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map710.size);
            for (int _i711 = 0; _i711 < _map710.size; ++_i711)
            {
              String _key712;
              String _val713;
              _key712 = iprot.readString();
              _val713 = iprot.readString();
              struct.param.put(_key712, _val713);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class getSingleMentionAccount_result implements org.apache.thrift.TBase<getSingleMentionAccount_result, getSingleMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSingleMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSingleMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSingleMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSingleMentionAccount_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSingleMentionAccount_result.class, metaDataMap);
    }

    public getSingleMentionAccount_result() {
    }

    public getSingleMentionAccount_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSingleMentionAccount_result(getSingleMentionAccount_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSingleMentionAccount_result deepCopy() {
      return new getSingleMentionAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getSingleMentionAccount_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSingleMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSingleMentionAccount_result)
        return this.equals((getSingleMentionAccount_result)that);
      return false;
    }

    public boolean equals(getSingleMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSingleMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSingleMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSingleMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public getSingleMentionAccount_resultStandardScheme getScheme() {
        return new getSingleMentionAccount_resultStandardScheme();
      }
    }

    private static class getSingleMentionAccount_resultStandardScheme extends StandardScheme<getSingleMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSingleMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map714 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map714.size);
                  for (int _i715 = 0; _i715 < _map714.size; ++_i715)
                  {
                    String _key716;
                    String _val717;
                    _key716 = iprot.readString();
                    _val717 = iprot.readString();
                    struct.success.put(_key716, _val717);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSingleMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter718 : struct.success.entrySet())
            {
              oprot.writeString(_iter718.getKey());
              oprot.writeString(_iter718.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSingleMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public getSingleMentionAccount_resultTupleScheme getScheme() {
        return new getSingleMentionAccount_resultTupleScheme();
      }
    }

    private static class getSingleMentionAccount_resultTupleScheme extends TupleScheme<getSingleMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSingleMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter719 : struct.success.entrySet())
            {
              oprot.writeString(_iter719.getKey());
              oprot.writeString(_iter719.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSingleMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map720 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map720.size);
            for (int _i721 = 0; _i721 < _map720.size; ++_i721)
            {
              String _key722;
              String _val723;
              _key722 = iprot.readString();
              _val723 = iprot.readString();
              struct.success.put(_key722, _val723);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
