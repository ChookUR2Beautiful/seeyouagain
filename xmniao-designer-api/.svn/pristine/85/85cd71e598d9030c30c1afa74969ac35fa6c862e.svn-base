package com.xmn.designer.service.image.impl;


import com.xmn.designer.base.GlobalConfig;
import com.xmn.designer.base.UploadClientFactory;
import com.xmn.designer.entity.iamge.Image;
import com.xmn.designer.exception.CustomException;
import com.xmn.designer.service.image.ImageService;
import org.csource.common.NameValuePair;
import org.csource.fastdfs.StorageClient1;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;

/**
 * 图片服务实现类
 * create 2016/09/29
 *
 * @author yangQiang
 */

@Service("imageService")
public class ImageServiceImpl implements ImageService {
    // 初始化日志类
    private final Logger logger = LoggerFactory.getLogger(ImageServiceImpl.class);

    @Autowired
    private GlobalConfig globalConfig;

    // 注入FastDfs客户端工厂
    @Autowired
    private UploadClientFactory uploadClientFactory;

    @Override
    public List<Image> upload(List<MultipartFile> files) throws CustomException {
        StorageClient1 client = uploadClientFactory.getStorageClients();
        List<Image> imageList = new ArrayList<>();

        try {
            // 将文件通过DFS客户端存入,返回URI
            for (MultipartFile file : files) {
                String filename = file.getOriginalFilename();
                NameValuePair[] metaList = new NameValuePair[3];
                metaList[0] = new NameValuePair("fileName", filename);
                metaList[1] = new NameValuePair("fileExtName","jpg");
                metaList[2] = new NameValuePair("fileLength",file.getSize()+"");
                String fileUri = client.upload_file1(file.getBytes(), "", metaList);
                imageList.add(new Image(fileUri,globalConfig.getImageHost(),filename));
            }
            return imageList;
        } catch (Exception e) {
            logger.error("调用DFS服务器出现异常",e);
            throw new CustomException("图片上传内部异常!");
        } finally {
            uploadClientFactory.close();
        }
    }



}
