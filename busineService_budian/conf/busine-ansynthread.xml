<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 	
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	
	<!-- 所有异步线程配置 -->
	
	<!-- thrift异步线程监听配置 -->
	<bean id="thriftPoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="thriftServerFactory" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>
	
	<!-- 绑定向蜜客异步消息监听器 -->
	<bean id="queuePool" class="com.xmniao.service.message.xmike.RedisQueuePool">
		<property name="threadSize" value="1" />
		<!-- 注入向蜜客redis队列 -->
		<property name="mikeQueue" ref="xmkqueue" />
	</bean>
	<bean id="xmikeRedisPoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="queuePool" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>

	<!-- 推送消息异步消息监听器 -->
	<bean id="pushMsgQueuePool" class="com.xmniao.service.message.push.PushMsgRedisPool">
		<!-- 线程大小 -->
		<property name="threadSize" value="1" />
		<!-- 注入推送消息redis队列 -->
		<property name="pushMsgQueue" ref="pushmsgqueue" />
	</bean>
	<bean id="pushMsgRedisPoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="pushMsgQueuePool" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>

	<!-- 发送短信队列异步消息监听器 -->
	<bean id="sendSmsQueuePool" class="com.xmniao.service.message.sms.SendSmsPool">
		<!-- 线程大小 -->
		<property name="threadSize" value="1" />
		<!-- 注入发送短信redis队列 -->
		<property name="smsQueue" ref="smsqueue" />
	</bean>
	<bean id="sendSmsQueuePoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="sendSmsQueuePool" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>

	<bean id="maibaoAdvenceLedgerThread" class="com.xmniao.service.message.maibao.MaibaoAdvenceLedgerPool">
        <constructor-arg name="queueKey" ref="maibaoLedgerQueueKey"/>
	</bean>
	<bean id="maibaoAdvenceLedgerExecutor" class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="maibaoAdvenceLedgerThread"/>
		<property name="delay" value="1000"/>
	</bean>


	
	<!-- 发送用户行为队列异步消息监听器 -->
	<bean id="userActionQueuePool" class="com.xmniao.service.message.useraction.UserActionRedisPool">
		<!-- 线程大小 -->
		<property name="threadSize" value="1" />
		<!-- 注入用户行为redis队列 -->
		<property name="userActionQueue" ref="userActionQueue" />
	</bean>
	<bean id="userActionQueuePoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="userActionQueuePool" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>

	<!-- 发送商家信息更新队列异步消息监听器 -->
	<bean id="sellerInfoQueuePool" class="com.xmniao.service.message.seller.SellerInfoRedisPool">
		<!-- 线程大小 -->
		<property name="threadSize" value="1" />
		<!-- 注入用户行为redis队列 -->
	</bean>
	<bean id="sellerInfoQueuePoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="sellerInfoQueuePool" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>

	<!-- 发送Ecache缓存容错机制异步消息监听器 -->
	<bean id="faultTolerantPool" class="com.xmniao.service.message.fault.FaultTolerantPool">
		<!-- 线程大小 -->
		<property name="threadSize" value="1" />
	</bean>
	<bean id="faultTolerantPoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="faultTolerantPool" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>
	
	<!-- 更新直播会员分账统计信息 -->
	<bean id="liverLedgerPool" class="com.xmniao.service.message.liverLedger.LiveLedgerRedisPool">
		<!-- 线程大小 -->
		<property name="threadSize" value="1" />
	</bean>
	<bean id="liverLedgerPoolExecutor"
		class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
		<property name="runnable" ref="liverLedgerPool" />
		<!-- 容器加载1秒后开始执行 -->
		<property name="delay" value="1000" />
	</bean>
	
	
<!--<bean id="taskExecutor" 
    class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"> 
    <property name="corePoolSize" value="3" /> 
    <property name="keepAliveSeconds" value="200" /> 
    <property name="maxPoolSize" value="5" /> 
    <property name="queueCapacity" value="25" /> 
  </bean> -->
</beans>