/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.thrift.ledger;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SplitService {

  public interface Iface {

    public ResponseSplitMap ledger(double orderMoney, double baseagio, int mikeType, boolean isMike, boolean isTopMike, boolean isParentMike, boolean isSellerMoney, boolean isCpartner) throws org.apache.thrift.TException;

    public ResponseSplitMap freshLedger(double purchaseMoney, double sellMoney, double payment, boolean isBseller) throws org.apache.thrift.TException;

    public ResponseSplitMap goodsLedger(double purchaseMoney, double sellMoney, boolean isBseller, boolean isSellerArea) throws org.apache.thrift.TException;

    public ResponseSplitMap saasLedger(double saasPricee, boolean isReturn, int type, double discount, boolean isSellerArea, boolean isAgentscope, double purchaseDiscount, boolean isOneLevelXmer, boolean isTwoLevelXmer) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ledger(double orderMoney, double baseagio, int mikeType, boolean isMike, boolean isTopMike, boolean isParentMike, boolean isSellerMoney, boolean isCpartner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void freshLedger(double purchaseMoney, double sellMoney, double payment, boolean isBseller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void goodsLedger(double purchaseMoney, double sellMoney, boolean isBseller, boolean isSellerArea, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saasLedger(double saasPricee, boolean isReturn, int type, double discount, boolean isSellerArea, boolean isAgentscope, double purchaseDiscount, boolean isOneLevelXmer, boolean isTwoLevelXmer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResponseSplitMap ledger(double orderMoney, double baseagio, int mikeType, boolean isMike, boolean isTopMike, boolean isParentMike, boolean isSellerMoney, boolean isCpartner) throws org.apache.thrift.TException
    {
      send_ledger(orderMoney, baseagio, mikeType, isMike, isTopMike, isParentMike, isSellerMoney, isCpartner);
      return recv_ledger();
    }

    public void send_ledger(double orderMoney, double baseagio, int mikeType, boolean isMike, boolean isTopMike, boolean isParentMike, boolean isSellerMoney, boolean isCpartner) throws org.apache.thrift.TException
    {
      ledger_args args = new ledger_args();
      args.setOrderMoney(orderMoney);
      args.setBaseagio(baseagio);
      args.setMikeType(mikeType);
      args.setIsMike(isMike);
      args.setIsTopMike(isTopMike);
      args.setIsParentMike(isParentMike);
      args.setIsSellerMoney(isSellerMoney);
      args.setIsCpartner(isCpartner);
      sendBase("ledger", args);
    }

    public ResponseSplitMap recv_ledger() throws org.apache.thrift.TException
    {
      ledger_result result = new ledger_result();
      receiveBase(result, "ledger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ledger failed: unknown result");
    }

    public ResponseSplitMap freshLedger(double purchaseMoney, double sellMoney, double payment, boolean isBseller) throws org.apache.thrift.TException
    {
      send_freshLedger(purchaseMoney, sellMoney, payment, isBseller);
      return recv_freshLedger();
    }

    public void send_freshLedger(double purchaseMoney, double sellMoney, double payment, boolean isBseller) throws org.apache.thrift.TException
    {
      freshLedger_args args = new freshLedger_args();
      args.setPurchaseMoney(purchaseMoney);
      args.setSellMoney(sellMoney);
      args.setPayment(payment);
      args.setIsBseller(isBseller);
      sendBase("freshLedger", args);
    }

    public ResponseSplitMap recv_freshLedger() throws org.apache.thrift.TException
    {
      freshLedger_result result = new freshLedger_result();
      receiveBase(result, "freshLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "freshLedger failed: unknown result");
    }

    public ResponseSplitMap goodsLedger(double purchaseMoney, double sellMoney, boolean isBseller, boolean isSellerArea) throws org.apache.thrift.TException
    {
      send_goodsLedger(purchaseMoney, sellMoney, isBseller, isSellerArea);
      return recv_goodsLedger();
    }

    public void send_goodsLedger(double purchaseMoney, double sellMoney, boolean isBseller, boolean isSellerArea) throws org.apache.thrift.TException
    {
      goodsLedger_args args = new goodsLedger_args();
      args.setPurchaseMoney(purchaseMoney);
      args.setSellMoney(sellMoney);
      args.setIsBseller(isBseller);
      args.setIsSellerArea(isSellerArea);
      sendBase("goodsLedger", args);
    }

    public ResponseSplitMap recv_goodsLedger() throws org.apache.thrift.TException
    {
      goodsLedger_result result = new goodsLedger_result();
      receiveBase(result, "goodsLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "goodsLedger failed: unknown result");
    }

    public ResponseSplitMap saasLedger(double saasPricee, boolean isReturn, int type, double discount, boolean isSellerArea, boolean isAgentscope, double purchaseDiscount, boolean isOneLevelXmer, boolean isTwoLevelXmer) throws org.apache.thrift.TException
    {
      send_saasLedger(saasPricee, isReturn, type, discount, isSellerArea, isAgentscope, purchaseDiscount, isOneLevelXmer, isTwoLevelXmer);
      return recv_saasLedger();
    }

    public void send_saasLedger(double saasPricee, boolean isReturn, int type, double discount, boolean isSellerArea, boolean isAgentscope, double purchaseDiscount, boolean isOneLevelXmer, boolean isTwoLevelXmer) throws org.apache.thrift.TException
    {
      saasLedger_args args = new saasLedger_args();
      args.setSaasPricee(saasPricee);
      args.setIsReturn(isReturn);
      args.setType(type);
      args.setDiscount(discount);
      args.setIsSellerArea(isSellerArea);
      args.setIsAgentscope(isAgentscope);
      args.setPurchaseDiscount(purchaseDiscount);
      args.setIsOneLevelXmer(isOneLevelXmer);
      args.setIsTwoLevelXmer(isTwoLevelXmer);
      sendBase("saasLedger", args);
    }

    public ResponseSplitMap recv_saasLedger() throws org.apache.thrift.TException
    {
      saasLedger_result result = new saasLedger_result();
      receiveBase(result, "saasLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saasLedger failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ledger(double orderMoney, double baseagio, int mikeType, boolean isMike, boolean isTopMike, boolean isParentMike, boolean isSellerMoney, boolean isCpartner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ledger_call method_call = new ledger_call(orderMoney, baseagio, mikeType, isMike, isTopMike, isParentMike, isSellerMoney, isCpartner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ledger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double orderMoney;
      private double baseagio;
      private int mikeType;
      private boolean isMike;
      private boolean isTopMike;
      private boolean isParentMike;
      private boolean isSellerMoney;
      private boolean isCpartner;
      public ledger_call(double orderMoney, double baseagio, int mikeType, boolean isMike, boolean isTopMike, boolean isParentMike, boolean isSellerMoney, boolean isCpartner, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderMoney = orderMoney;
        this.baseagio = baseagio;
        this.mikeType = mikeType;
        this.isMike = isMike;
        this.isTopMike = isTopMike;
        this.isParentMike = isParentMike;
        this.isSellerMoney = isSellerMoney;
        this.isCpartner = isCpartner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ledger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ledger_args args = new ledger_args();
        args.setOrderMoney(orderMoney);
        args.setBaseagio(baseagio);
        args.setMikeType(mikeType);
        args.setIsMike(isMike);
        args.setIsTopMike(isTopMike);
        args.setIsParentMike(isParentMike);
        args.setIsSellerMoney(isSellerMoney);
        args.setIsCpartner(isCpartner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseSplitMap getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ledger();
      }
    }

    public void freshLedger(double purchaseMoney, double sellMoney, double payment, boolean isBseller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      freshLedger_call method_call = new freshLedger_call(purchaseMoney, sellMoney, payment, isBseller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class freshLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double purchaseMoney;
      private double sellMoney;
      private double payment;
      private boolean isBseller;
      public freshLedger_call(double purchaseMoney, double sellMoney, double payment, boolean isBseller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.purchaseMoney = purchaseMoney;
        this.sellMoney = sellMoney;
        this.payment = payment;
        this.isBseller = isBseller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("freshLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        freshLedger_args args = new freshLedger_args();
        args.setPurchaseMoney(purchaseMoney);
        args.setSellMoney(sellMoney);
        args.setPayment(payment);
        args.setIsBseller(isBseller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseSplitMap getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_freshLedger();
      }
    }

    public void goodsLedger(double purchaseMoney, double sellMoney, boolean isBseller, boolean isSellerArea, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      goodsLedger_call method_call = new goodsLedger_call(purchaseMoney, sellMoney, isBseller, isSellerArea, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class goodsLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double purchaseMoney;
      private double sellMoney;
      private boolean isBseller;
      private boolean isSellerArea;
      public goodsLedger_call(double purchaseMoney, double sellMoney, boolean isBseller, boolean isSellerArea, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.purchaseMoney = purchaseMoney;
        this.sellMoney = sellMoney;
        this.isBseller = isBseller;
        this.isSellerArea = isSellerArea;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("goodsLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        goodsLedger_args args = new goodsLedger_args();
        args.setPurchaseMoney(purchaseMoney);
        args.setSellMoney(sellMoney);
        args.setIsBseller(isBseller);
        args.setIsSellerArea(isSellerArea);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseSplitMap getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_goodsLedger();
      }
    }

    public void saasLedger(double saasPricee, boolean isReturn, int type, double discount, boolean isSellerArea, boolean isAgentscope, double purchaseDiscount, boolean isOneLevelXmer, boolean isTwoLevelXmer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saasLedger_call method_call = new saasLedger_call(saasPricee, isReturn, type, discount, isSellerArea, isAgentscope, purchaseDiscount, isOneLevelXmer, isTwoLevelXmer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saasLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double saasPricee;
      private boolean isReturn;
      private int type;
      private double discount;
      private boolean isSellerArea;
      private boolean isAgentscope;
      private double purchaseDiscount;
      private boolean isOneLevelXmer;
      private boolean isTwoLevelXmer;
      public saasLedger_call(double saasPricee, boolean isReturn, int type, double discount, boolean isSellerArea, boolean isAgentscope, double purchaseDiscount, boolean isOneLevelXmer, boolean isTwoLevelXmer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.saasPricee = saasPricee;
        this.isReturn = isReturn;
        this.type = type;
        this.discount = discount;
        this.isSellerArea = isSellerArea;
        this.isAgentscope = isAgentscope;
        this.purchaseDiscount = purchaseDiscount;
        this.isOneLevelXmer = isOneLevelXmer;
        this.isTwoLevelXmer = isTwoLevelXmer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saasLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saasLedger_args args = new saasLedger_args();
        args.setSaasPricee(saasPricee);
        args.setIsReturn(isReturn);
        args.setType(type);
        args.setDiscount(discount);
        args.setIsSellerArea(isSellerArea);
        args.setIsAgentscope(isAgentscope);
        args.setPurchaseDiscount(purchaseDiscount);
        args.setIsOneLevelXmer(isOneLevelXmer);
        args.setIsTwoLevelXmer(isTwoLevelXmer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseSplitMap getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saasLedger();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ledger", new ledger());
      processMap.put("freshLedger", new freshLedger());
      processMap.put("goodsLedger", new goodsLedger());
      processMap.put("saasLedger", new saasLedger());
      return processMap;
    }

    public static class ledger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ledger_args> {
      public ledger() {
        super("ledger");
      }

      public ledger_args getEmptyArgsInstance() {
        return new ledger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ledger_result getResult(I iface, ledger_args args) throws org.apache.thrift.TException {
        ledger_result result = new ledger_result();
        result.success = iface.ledger(args.orderMoney, args.baseagio, args.mikeType, args.isMike, args.isTopMike, args.isParentMike, args.isSellerMoney, args.isCpartner);
        return result;
      }
    }

    public static class freshLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, freshLedger_args> {
      public freshLedger() {
        super("freshLedger");
      }

      public freshLedger_args getEmptyArgsInstance() {
        return new freshLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public freshLedger_result getResult(I iface, freshLedger_args args) throws org.apache.thrift.TException {
        freshLedger_result result = new freshLedger_result();
        result.success = iface.freshLedger(args.purchaseMoney, args.sellMoney, args.payment, args.isBseller);
        return result;
      }
    }

    public static class goodsLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, goodsLedger_args> {
      public goodsLedger() {
        super("goodsLedger");
      }

      public goodsLedger_args getEmptyArgsInstance() {
        return new goodsLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public goodsLedger_result getResult(I iface, goodsLedger_args args) throws org.apache.thrift.TException {
        goodsLedger_result result = new goodsLedger_result();
        result.success = iface.goodsLedger(args.purchaseMoney, args.sellMoney, args.isBseller, args.isSellerArea);
        return result;
      }
    }

    public static class saasLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saasLedger_args> {
      public saasLedger() {
        super("saasLedger");
      }

      public saasLedger_args getEmptyArgsInstance() {
        return new saasLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saasLedger_result getResult(I iface, saasLedger_args args) throws org.apache.thrift.TException {
        saasLedger_result result = new saasLedger_result();
        result.success = iface.saasLedger(args.saasPricee, args.isReturn, args.type, args.discount, args.isSellerArea, args.isAgentscope, args.purchaseDiscount, args.isOneLevelXmer, args.isTwoLevelXmer);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ledger", new ledger());
      processMap.put("freshLedger", new freshLedger());
      processMap.put("goodsLedger", new goodsLedger());
      processMap.put("saasLedger", new saasLedger());
      return processMap;
    }

    public static class ledger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ledger_args, ResponseSplitMap> {
      public ledger() {
        super("ledger");
      }

      public ledger_args getEmptyArgsInstance() {
        return new ledger_args();
      }

      public AsyncMethodCallback<ResponseSplitMap> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseSplitMap>() { 
          public void onComplete(ResponseSplitMap o) {
            ledger_result result = new ledger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ledger_result result = new ledger_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ledger_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseSplitMap> resultHandler) throws TException {
        iface.ledger(args.orderMoney, args.baseagio, args.mikeType, args.isMike, args.isTopMike, args.isParentMike, args.isSellerMoney, args.isCpartner,resultHandler);
      }
    }

    public static class freshLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, freshLedger_args, ResponseSplitMap> {
      public freshLedger() {
        super("freshLedger");
      }

      public freshLedger_args getEmptyArgsInstance() {
        return new freshLedger_args();
      }

      public AsyncMethodCallback<ResponseSplitMap> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseSplitMap>() { 
          public void onComplete(ResponseSplitMap o) {
            freshLedger_result result = new freshLedger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            freshLedger_result result = new freshLedger_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, freshLedger_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseSplitMap> resultHandler) throws TException {
        iface.freshLedger(args.purchaseMoney, args.sellMoney, args.payment, args.isBseller,resultHandler);
      }
    }

    public static class goodsLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, goodsLedger_args, ResponseSplitMap> {
      public goodsLedger() {
        super("goodsLedger");
      }

      public goodsLedger_args getEmptyArgsInstance() {
        return new goodsLedger_args();
      }

      public AsyncMethodCallback<ResponseSplitMap> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseSplitMap>() { 
          public void onComplete(ResponseSplitMap o) {
            goodsLedger_result result = new goodsLedger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            goodsLedger_result result = new goodsLedger_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, goodsLedger_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseSplitMap> resultHandler) throws TException {
        iface.goodsLedger(args.purchaseMoney, args.sellMoney, args.isBseller, args.isSellerArea,resultHandler);
      }
    }

    public static class saasLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saasLedger_args, ResponseSplitMap> {
      public saasLedger() {
        super("saasLedger");
      }

      public saasLedger_args getEmptyArgsInstance() {
        return new saasLedger_args();
      }

      public AsyncMethodCallback<ResponseSplitMap> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseSplitMap>() { 
          public void onComplete(ResponseSplitMap o) {
            saasLedger_result result = new saasLedger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saasLedger_result result = new saasLedger_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saasLedger_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseSplitMap> resultHandler) throws TException {
        iface.saasLedger(args.saasPricee, args.isReturn, args.type, args.discount, args.isSellerArea, args.isAgentscope, args.purchaseDiscount, args.isOneLevelXmer, args.isTwoLevelXmer,resultHandler);
      }
    }

  }

  public static class ledger_args implements org.apache.thrift.TBase<ledger_args, ledger_args._Fields>, java.io.Serializable, Cloneable, Comparable<ledger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ledger_args");

    private static final org.apache.thrift.protocol.TField ORDER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField BASEAGIO_FIELD_DESC = new org.apache.thrift.protocol.TField("baseagio", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField MIKE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mikeType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField IS_MIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMike", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField IS_TOP_MIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("isTopMike", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField IS_PARENT_MIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("isParentMike", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField IS_SELLER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("isSellerMoney", org.apache.thrift.protocol.TType.BOOL, (short)7);
    private static final org.apache.thrift.protocol.TField IS_CPARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("isCpartner", org.apache.thrift.protocol.TType.BOOL, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ledger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ledger_argsTupleSchemeFactory());
    }

    public double orderMoney; // required
    public double baseagio; // required
    public int mikeType; // required
    public boolean isMike; // required
    public boolean isTopMike; // required
    public boolean isParentMike; // required
    public boolean isSellerMoney; // required
    public boolean isCpartner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_MONEY((short)1, "orderMoney"),
      BASEAGIO((short)2, "baseagio"),
      MIKE_TYPE((short)3, "mikeType"),
      IS_MIKE((short)4, "isMike"),
      IS_TOP_MIKE((short)5, "isTopMike"),
      IS_PARENT_MIKE((short)6, "isParentMike"),
      IS_SELLER_MONEY((short)7, "isSellerMoney"),
      IS_CPARTNER((short)8, "isCpartner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_MONEY
            return ORDER_MONEY;
          case 2: // BASEAGIO
            return BASEAGIO;
          case 3: // MIKE_TYPE
            return MIKE_TYPE;
          case 4: // IS_MIKE
            return IS_MIKE;
          case 5: // IS_TOP_MIKE
            return IS_TOP_MIKE;
          case 6: // IS_PARENT_MIKE
            return IS_PARENT_MIKE;
          case 7: // IS_SELLER_MONEY
            return IS_SELLER_MONEY;
          case 8: // IS_CPARTNER
            return IS_CPARTNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERMONEY_ISSET_ID = 0;
    private static final int __BASEAGIO_ISSET_ID = 1;
    private static final int __MIKETYPE_ISSET_ID = 2;
    private static final int __ISMIKE_ISSET_ID = 3;
    private static final int __ISTOPMIKE_ISSET_ID = 4;
    private static final int __ISPARENTMIKE_ISSET_ID = 5;
    private static final int __ISSELLERMONEY_ISSET_ID = 6;
    private static final int __ISCPARTNER_ISSET_ID = 7;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("orderMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.BASEAGIO, new org.apache.thrift.meta_data.FieldMetaData("baseagio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.MIKE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mikeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_MIKE, new org.apache.thrift.meta_data.FieldMetaData("isMike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_TOP_MIKE, new org.apache.thrift.meta_data.FieldMetaData("isTopMike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_PARENT_MIKE, new org.apache.thrift.meta_data.FieldMetaData("isParentMike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_SELLER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("isSellerMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_CPARTNER, new org.apache.thrift.meta_data.FieldMetaData("isCpartner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ledger_args.class, metaDataMap);
    }

    public ledger_args() {
    }

    public ledger_args(
      double orderMoney,
      double baseagio,
      int mikeType,
      boolean isMike,
      boolean isTopMike,
      boolean isParentMike,
      boolean isSellerMoney,
      boolean isCpartner)
    {
      this();
      this.orderMoney = orderMoney;
      setOrderMoneyIsSet(true);
      this.baseagio = baseagio;
      setBaseagioIsSet(true);
      this.mikeType = mikeType;
      setMikeTypeIsSet(true);
      this.isMike = isMike;
      setIsMikeIsSet(true);
      this.isTopMike = isTopMike;
      setIsTopMikeIsSet(true);
      this.isParentMike = isParentMike;
      setIsParentMikeIsSet(true);
      this.isSellerMoney = isSellerMoney;
      setIsSellerMoneyIsSet(true);
      this.isCpartner = isCpartner;
      setIsCpartnerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ledger_args(ledger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderMoney = other.orderMoney;
      this.baseagio = other.baseagio;
      this.mikeType = other.mikeType;
      this.isMike = other.isMike;
      this.isTopMike = other.isTopMike;
      this.isParentMike = other.isParentMike;
      this.isSellerMoney = other.isSellerMoney;
      this.isCpartner = other.isCpartner;
    }

    public ledger_args deepCopy() {
      return new ledger_args(this);
    }

    @Override
    public void clear() {
      setOrderMoneyIsSet(false);
      this.orderMoney = 0.0;
      setBaseagioIsSet(false);
      this.baseagio = 0.0;
      setMikeTypeIsSet(false);
      this.mikeType = 0;
      setIsMikeIsSet(false);
      this.isMike = false;
      setIsTopMikeIsSet(false);
      this.isTopMike = false;
      setIsParentMikeIsSet(false);
      this.isParentMike = false;
      setIsSellerMoneyIsSet(false);
      this.isSellerMoney = false;
      setIsCpartnerIsSet(false);
      this.isCpartner = false;
    }

    public double getOrderMoney() {
      return this.orderMoney;
    }

    public ledger_args setOrderMoney(double orderMoney) {
      this.orderMoney = orderMoney;
      setOrderMoneyIsSet(true);
      return this;
    }

    public void unsetOrderMoney() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERMONEY_ISSET_ID);
    }

    /** Returns true if field orderMoney is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMoney() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERMONEY_ISSET_ID);
    }

    public void setOrderMoneyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERMONEY_ISSET_ID, value);
    }

    public double getBaseagio() {
      return this.baseagio;
    }

    public ledger_args setBaseagio(double baseagio) {
      this.baseagio = baseagio;
      setBaseagioIsSet(true);
      return this;
    }

    public void unsetBaseagio() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEAGIO_ISSET_ID);
    }

    /** Returns true if field baseagio is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseagio() {
      return EncodingUtils.testBit(__isset_bitfield, __BASEAGIO_ISSET_ID);
    }

    public void setBaseagioIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEAGIO_ISSET_ID, value);
    }

    public int getMikeType() {
      return this.mikeType;
    }

    public ledger_args setMikeType(int mikeType) {
      this.mikeType = mikeType;
      setMikeTypeIsSet(true);
      return this;
    }

    public void unsetMikeType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIKETYPE_ISSET_ID);
    }

    /** Returns true if field mikeType is set (has been assigned a value) and false otherwise */
    public boolean isSetMikeType() {
      return EncodingUtils.testBit(__isset_bitfield, __MIKETYPE_ISSET_ID);
    }

    public void setMikeTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIKETYPE_ISSET_ID, value);
    }

    public boolean isIsMike() {
      return this.isMike;
    }

    public ledger_args setIsMike(boolean isMike) {
      this.isMike = isMike;
      setIsMikeIsSet(true);
      return this;
    }

    public void unsetIsMike() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMIKE_ISSET_ID);
    }

    /** Returns true if field isMike is set (has been assigned a value) and false otherwise */
    public boolean isSetIsMike() {
      return EncodingUtils.testBit(__isset_bitfield, __ISMIKE_ISSET_ID);
    }

    public void setIsMikeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMIKE_ISSET_ID, value);
    }

    public boolean isIsTopMike() {
      return this.isTopMike;
    }

    public ledger_args setIsTopMike(boolean isTopMike) {
      this.isTopMike = isTopMike;
      setIsTopMikeIsSet(true);
      return this;
    }

    public void unsetIsTopMike() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTOPMIKE_ISSET_ID);
    }

    /** Returns true if field isTopMike is set (has been assigned a value) and false otherwise */
    public boolean isSetIsTopMike() {
      return EncodingUtils.testBit(__isset_bitfield, __ISTOPMIKE_ISSET_ID);
    }

    public void setIsTopMikeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTOPMIKE_ISSET_ID, value);
    }

    public boolean isIsParentMike() {
      return this.isParentMike;
    }

    public ledger_args setIsParentMike(boolean isParentMike) {
      this.isParentMike = isParentMike;
      setIsParentMikeIsSet(true);
      return this;
    }

    public void unsetIsParentMike() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPARENTMIKE_ISSET_ID);
    }

    /** Returns true if field isParentMike is set (has been assigned a value) and false otherwise */
    public boolean isSetIsParentMike() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPARENTMIKE_ISSET_ID);
    }

    public void setIsParentMikeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPARENTMIKE_ISSET_ID, value);
    }

    public boolean isIsSellerMoney() {
      return this.isSellerMoney;
    }

    public ledger_args setIsSellerMoney(boolean isSellerMoney) {
      this.isSellerMoney = isSellerMoney;
      setIsSellerMoneyIsSet(true);
      return this;
    }

    public void unsetIsSellerMoney() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSELLERMONEY_ISSET_ID);
    }

    /** Returns true if field isSellerMoney is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSellerMoney() {
      return EncodingUtils.testBit(__isset_bitfield, __ISSELLERMONEY_ISSET_ID);
    }

    public void setIsSellerMoneyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSELLERMONEY_ISSET_ID, value);
    }

    public boolean isIsCpartner() {
      return this.isCpartner;
    }

    public ledger_args setIsCpartner(boolean isCpartner) {
      this.isCpartner = isCpartner;
      setIsCpartnerIsSet(true);
      return this;
    }

    public void unsetIsCpartner() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCPARTNER_ISSET_ID);
    }

    /** Returns true if field isCpartner is set (has been assigned a value) and false otherwise */
    public boolean isSetIsCpartner() {
      return EncodingUtils.testBit(__isset_bitfield, __ISCPARTNER_ISSET_ID);
    }

    public void setIsCpartnerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCPARTNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_MONEY:
        if (value == null) {
          unsetOrderMoney();
        } else {
          setOrderMoney((Double)value);
        }
        break;

      case BASEAGIO:
        if (value == null) {
          unsetBaseagio();
        } else {
          setBaseagio((Double)value);
        }
        break;

      case MIKE_TYPE:
        if (value == null) {
          unsetMikeType();
        } else {
          setMikeType((Integer)value);
        }
        break;

      case IS_MIKE:
        if (value == null) {
          unsetIsMike();
        } else {
          setIsMike((Boolean)value);
        }
        break;

      case IS_TOP_MIKE:
        if (value == null) {
          unsetIsTopMike();
        } else {
          setIsTopMike((Boolean)value);
        }
        break;

      case IS_PARENT_MIKE:
        if (value == null) {
          unsetIsParentMike();
        } else {
          setIsParentMike((Boolean)value);
        }
        break;

      case IS_SELLER_MONEY:
        if (value == null) {
          unsetIsSellerMoney();
        } else {
          setIsSellerMoney((Boolean)value);
        }
        break;

      case IS_CPARTNER:
        if (value == null) {
          unsetIsCpartner();
        } else {
          setIsCpartner((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_MONEY:
        return Double.valueOf(getOrderMoney());

      case BASEAGIO:
        return Double.valueOf(getBaseagio());

      case MIKE_TYPE:
        return Integer.valueOf(getMikeType());

      case IS_MIKE:
        return Boolean.valueOf(isIsMike());

      case IS_TOP_MIKE:
        return Boolean.valueOf(isIsTopMike());

      case IS_PARENT_MIKE:
        return Boolean.valueOf(isIsParentMike());

      case IS_SELLER_MONEY:
        return Boolean.valueOf(isIsSellerMoney());

      case IS_CPARTNER:
        return Boolean.valueOf(isIsCpartner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_MONEY:
        return isSetOrderMoney();
      case BASEAGIO:
        return isSetBaseagio();
      case MIKE_TYPE:
        return isSetMikeType();
      case IS_MIKE:
        return isSetIsMike();
      case IS_TOP_MIKE:
        return isSetIsTopMike();
      case IS_PARENT_MIKE:
        return isSetIsParentMike();
      case IS_SELLER_MONEY:
        return isSetIsSellerMoney();
      case IS_CPARTNER:
        return isSetIsCpartner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ledger_args)
        return this.equals((ledger_args)that);
      return false;
    }

    public boolean equals(ledger_args that) {
      if (that == null)
        return false;

      boolean this_present_orderMoney = true;
      boolean that_present_orderMoney = true;
      if (this_present_orderMoney || that_present_orderMoney) {
        if (!(this_present_orderMoney && that_present_orderMoney))
          return false;
        if (this.orderMoney != that.orderMoney)
          return false;
      }

      boolean this_present_baseagio = true;
      boolean that_present_baseagio = true;
      if (this_present_baseagio || that_present_baseagio) {
        if (!(this_present_baseagio && that_present_baseagio))
          return false;
        if (this.baseagio != that.baseagio)
          return false;
      }

      boolean this_present_mikeType = true;
      boolean that_present_mikeType = true;
      if (this_present_mikeType || that_present_mikeType) {
        if (!(this_present_mikeType && that_present_mikeType))
          return false;
        if (this.mikeType != that.mikeType)
          return false;
      }

      boolean this_present_isMike = true;
      boolean that_present_isMike = true;
      if (this_present_isMike || that_present_isMike) {
        if (!(this_present_isMike && that_present_isMike))
          return false;
        if (this.isMike != that.isMike)
          return false;
      }

      boolean this_present_isTopMike = true;
      boolean that_present_isTopMike = true;
      if (this_present_isTopMike || that_present_isTopMike) {
        if (!(this_present_isTopMike && that_present_isTopMike))
          return false;
        if (this.isTopMike != that.isTopMike)
          return false;
      }

      boolean this_present_isParentMike = true;
      boolean that_present_isParentMike = true;
      if (this_present_isParentMike || that_present_isParentMike) {
        if (!(this_present_isParentMike && that_present_isParentMike))
          return false;
        if (this.isParentMike != that.isParentMike)
          return false;
      }

      boolean this_present_isSellerMoney = true;
      boolean that_present_isSellerMoney = true;
      if (this_present_isSellerMoney || that_present_isSellerMoney) {
        if (!(this_present_isSellerMoney && that_present_isSellerMoney))
          return false;
        if (this.isSellerMoney != that.isSellerMoney)
          return false;
      }

      boolean this_present_isCpartner = true;
      boolean that_present_isCpartner = true;
      if (this_present_isCpartner || that_present_isCpartner) {
        if (!(this_present_isCpartner && that_present_isCpartner))
          return false;
        if (this.isCpartner != that.isCpartner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ledger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderMoney()).compareTo(other.isSetOrderMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMoney, other.orderMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBaseagio()).compareTo(other.isSetBaseagio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseagio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseagio, other.baseagio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMikeType()).compareTo(other.isSetMikeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMikeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mikeType, other.mikeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsMike()).compareTo(other.isSetIsMike());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsMike()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMike, other.isMike);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsTopMike()).compareTo(other.isSetIsTopMike());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsTopMike()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTopMike, other.isTopMike);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsParentMike()).compareTo(other.isSetIsParentMike());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsParentMike()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isParentMike, other.isParentMike);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsSellerMoney()).compareTo(other.isSetIsSellerMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsSellerMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSellerMoney, other.isSellerMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsCpartner()).compareTo(other.isSetIsCpartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsCpartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCpartner, other.isCpartner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ledger_args(");
      boolean first = true;

      sb.append("orderMoney:");
      sb.append(this.orderMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("baseagio:");
      sb.append(this.baseagio);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mikeType:");
      sb.append(this.mikeType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isMike:");
      sb.append(this.isMike);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isTopMike:");
      sb.append(this.isTopMike);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isParentMike:");
      sb.append(this.isParentMike);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isSellerMoney:");
      sb.append(this.isSellerMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isCpartner:");
      sb.append(this.isCpartner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ledger_argsStandardSchemeFactory implements SchemeFactory {
      public ledger_argsStandardScheme getScheme() {
        return new ledger_argsStandardScheme();
      }
    }

    private static class ledger_argsStandardScheme extends StandardScheme<ledger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ledger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.orderMoney = iprot.readDouble();
                struct.setOrderMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BASEAGIO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.baseagio = iprot.readDouble();
                struct.setBaseagioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MIKE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mikeType = iprot.readI32();
                struct.setMikeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_MIKE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isMike = iprot.readBool();
                struct.setIsMikeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IS_TOP_MIKE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isTopMike = iprot.readBool();
                struct.setIsTopMikeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // IS_PARENT_MIKE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isParentMike = iprot.readBool();
                struct.setIsParentMikeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // IS_SELLER_MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isSellerMoney = iprot.readBool();
                struct.setIsSellerMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // IS_CPARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isCpartner = iprot.readBool();
                struct.setIsCpartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ledger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.orderMoney);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BASEAGIO_FIELD_DESC);
        oprot.writeDouble(struct.baseagio);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIKE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.mikeType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_MIKE_FIELD_DESC);
        oprot.writeBool(struct.isMike);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_TOP_MIKE_FIELD_DESC);
        oprot.writeBool(struct.isTopMike);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_PARENT_MIKE_FIELD_DESC);
        oprot.writeBool(struct.isParentMike);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_SELLER_MONEY_FIELD_DESC);
        oprot.writeBool(struct.isSellerMoney);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_CPARTNER_FIELD_DESC);
        oprot.writeBool(struct.isCpartner);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ledger_argsTupleSchemeFactory implements SchemeFactory {
      public ledger_argsTupleScheme getScheme() {
        return new ledger_argsTupleScheme();
      }
    }

    private static class ledger_argsTupleScheme extends TupleScheme<ledger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ledger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderMoney()) {
          optionals.set(0);
        }
        if (struct.isSetBaseagio()) {
          optionals.set(1);
        }
        if (struct.isSetMikeType()) {
          optionals.set(2);
        }
        if (struct.isSetIsMike()) {
          optionals.set(3);
        }
        if (struct.isSetIsTopMike()) {
          optionals.set(4);
        }
        if (struct.isSetIsParentMike()) {
          optionals.set(5);
        }
        if (struct.isSetIsSellerMoney()) {
          optionals.set(6);
        }
        if (struct.isSetIsCpartner()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetOrderMoney()) {
          oprot.writeDouble(struct.orderMoney);
        }
        if (struct.isSetBaseagio()) {
          oprot.writeDouble(struct.baseagio);
        }
        if (struct.isSetMikeType()) {
          oprot.writeI32(struct.mikeType);
        }
        if (struct.isSetIsMike()) {
          oprot.writeBool(struct.isMike);
        }
        if (struct.isSetIsTopMike()) {
          oprot.writeBool(struct.isTopMike);
        }
        if (struct.isSetIsParentMike()) {
          oprot.writeBool(struct.isParentMike);
        }
        if (struct.isSetIsSellerMoney()) {
          oprot.writeBool(struct.isSellerMoney);
        }
        if (struct.isSetIsCpartner()) {
          oprot.writeBool(struct.isCpartner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ledger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.orderMoney = iprot.readDouble();
          struct.setOrderMoneyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.baseagio = iprot.readDouble();
          struct.setBaseagioIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mikeType = iprot.readI32();
          struct.setMikeTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isMike = iprot.readBool();
          struct.setIsMikeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.isTopMike = iprot.readBool();
          struct.setIsTopMikeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.isParentMike = iprot.readBool();
          struct.setIsParentMikeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.isSellerMoney = iprot.readBool();
          struct.setIsSellerMoneyIsSet(true);
        }
        if (incoming.get(7)) {
          struct.isCpartner = iprot.readBool();
          struct.setIsCpartnerIsSet(true);
        }
      }
    }

  }

  public static class ledger_result implements org.apache.thrift.TBase<ledger_result, ledger_result._Fields>, java.io.Serializable, Cloneable, Comparable<ledger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ledger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ledger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ledger_resultTupleSchemeFactory());
    }

    public ResponseSplitMap success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseSplitMap.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ledger_result.class, metaDataMap);
    }

    public ledger_result() {
    }

    public ledger_result(
      ResponseSplitMap success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ledger_result(ledger_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseSplitMap(other.success);
      }
    }

    public ledger_result deepCopy() {
      return new ledger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseSplitMap getSuccess() {
      return this.success;
    }

    public ledger_result setSuccess(ResponseSplitMap success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseSplitMap)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ledger_result)
        return this.equals((ledger_result)that);
      return false;
    }

    public boolean equals(ledger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ledger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ledger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ledger_resultStandardSchemeFactory implements SchemeFactory {
      public ledger_resultStandardScheme getScheme() {
        return new ledger_resultStandardScheme();
      }
    }

    private static class ledger_resultStandardScheme extends StandardScheme<ledger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ledger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseSplitMap();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ledger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ledger_resultTupleSchemeFactory implements SchemeFactory {
      public ledger_resultTupleScheme getScheme() {
        return new ledger_resultTupleScheme();
      }
    }

    private static class ledger_resultTupleScheme extends TupleScheme<ledger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ledger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ledger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseSplitMap();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class freshLedger_args implements org.apache.thrift.TBase<freshLedger_args, freshLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<freshLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freshLedger_args");

    private static final org.apache.thrift.protocol.TField PURCHASE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField SELL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sellMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("payment", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField IS_BSELLER_FIELD_DESC = new org.apache.thrift.protocol.TField("isBseller", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new freshLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new freshLedger_argsTupleSchemeFactory());
    }

    public double purchaseMoney; // required
    public double sellMoney; // required
    public double payment; // required
    public boolean isBseller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PURCHASE_MONEY((short)1, "purchaseMoney"),
      SELL_MONEY((short)2, "sellMoney"),
      PAYMENT((short)3, "payment"),
      IS_BSELLER((short)4, "isBseller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PURCHASE_MONEY
            return PURCHASE_MONEY;
          case 2: // SELL_MONEY
            return SELL_MONEY;
          case 3: // PAYMENT
            return PAYMENT;
          case 4: // IS_BSELLER
            return IS_BSELLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURCHASEMONEY_ISSET_ID = 0;
    private static final int __SELLMONEY_ISSET_ID = 1;
    private static final int __PAYMENT_ISSET_ID = 2;
    private static final int __ISBSELLER_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PURCHASE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("purchaseMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SELL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("sellMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("payment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.IS_BSELLER, new org.apache.thrift.meta_data.FieldMetaData("isBseller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freshLedger_args.class, metaDataMap);
    }

    public freshLedger_args() {
    }

    public freshLedger_args(
      double purchaseMoney,
      double sellMoney,
      double payment,
      boolean isBseller)
    {
      this();
      this.purchaseMoney = purchaseMoney;
      setPurchaseMoneyIsSet(true);
      this.sellMoney = sellMoney;
      setSellMoneyIsSet(true);
      this.payment = payment;
      setPaymentIsSet(true);
      this.isBseller = isBseller;
      setIsBsellerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public freshLedger_args(freshLedger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.purchaseMoney = other.purchaseMoney;
      this.sellMoney = other.sellMoney;
      this.payment = other.payment;
      this.isBseller = other.isBseller;
    }

    public freshLedger_args deepCopy() {
      return new freshLedger_args(this);
    }

    @Override
    public void clear() {
      setPurchaseMoneyIsSet(false);
      this.purchaseMoney = 0.0;
      setSellMoneyIsSet(false);
      this.sellMoney = 0.0;
      setPaymentIsSet(false);
      this.payment = 0.0;
      setIsBsellerIsSet(false);
      this.isBseller = false;
    }

    public double getPurchaseMoney() {
      return this.purchaseMoney;
    }

    public freshLedger_args setPurchaseMoney(double purchaseMoney) {
      this.purchaseMoney = purchaseMoney;
      setPurchaseMoneyIsSet(true);
      return this;
    }

    public void unsetPurchaseMoney() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURCHASEMONEY_ISSET_ID);
    }

    /** Returns true if field purchaseMoney is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseMoney() {
      return EncodingUtils.testBit(__isset_bitfield, __PURCHASEMONEY_ISSET_ID);
    }

    public void setPurchaseMoneyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURCHASEMONEY_ISSET_ID, value);
    }

    public double getSellMoney() {
      return this.sellMoney;
    }

    public freshLedger_args setSellMoney(double sellMoney) {
      this.sellMoney = sellMoney;
      setSellMoneyIsSet(true);
      return this;
    }

    public void unsetSellMoney() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLMONEY_ISSET_ID);
    }

    /** Returns true if field sellMoney is set (has been assigned a value) and false otherwise */
    public boolean isSetSellMoney() {
      return EncodingUtils.testBit(__isset_bitfield, __SELLMONEY_ISSET_ID);
    }

    public void setSellMoneyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLMONEY_ISSET_ID, value);
    }

    public double getPayment() {
      return this.payment;
    }

    public freshLedger_args setPayment(double payment) {
      this.payment = payment;
      setPaymentIsSet(true);
      return this;
    }

    public void unsetPayment() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENT_ISSET_ID);
    }

    /** Returns true if field payment is set (has been assigned a value) and false otherwise */
    public boolean isSetPayment() {
      return EncodingUtils.testBit(__isset_bitfield, __PAYMENT_ISSET_ID);
    }

    public void setPaymentIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENT_ISSET_ID, value);
    }

    public boolean isIsBseller() {
      return this.isBseller;
    }

    public freshLedger_args setIsBseller(boolean isBseller) {
      this.isBseller = isBseller;
      setIsBsellerIsSet(true);
      return this;
    }

    public void unsetIsBseller() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBSELLER_ISSET_ID);
    }

    /** Returns true if field isBseller is set (has been assigned a value) and false otherwise */
    public boolean isSetIsBseller() {
      return EncodingUtils.testBit(__isset_bitfield, __ISBSELLER_ISSET_ID);
    }

    public void setIsBsellerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBSELLER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PURCHASE_MONEY:
        if (value == null) {
          unsetPurchaseMoney();
        } else {
          setPurchaseMoney((Double)value);
        }
        break;

      case SELL_MONEY:
        if (value == null) {
          unsetSellMoney();
        } else {
          setSellMoney((Double)value);
        }
        break;

      case PAYMENT:
        if (value == null) {
          unsetPayment();
        } else {
          setPayment((Double)value);
        }
        break;

      case IS_BSELLER:
        if (value == null) {
          unsetIsBseller();
        } else {
          setIsBseller((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PURCHASE_MONEY:
        return Double.valueOf(getPurchaseMoney());

      case SELL_MONEY:
        return Double.valueOf(getSellMoney());

      case PAYMENT:
        return Double.valueOf(getPayment());

      case IS_BSELLER:
        return Boolean.valueOf(isIsBseller());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PURCHASE_MONEY:
        return isSetPurchaseMoney();
      case SELL_MONEY:
        return isSetSellMoney();
      case PAYMENT:
        return isSetPayment();
      case IS_BSELLER:
        return isSetIsBseller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof freshLedger_args)
        return this.equals((freshLedger_args)that);
      return false;
    }

    public boolean equals(freshLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_purchaseMoney = true;
      boolean that_present_purchaseMoney = true;
      if (this_present_purchaseMoney || that_present_purchaseMoney) {
        if (!(this_present_purchaseMoney && that_present_purchaseMoney))
          return false;
        if (this.purchaseMoney != that.purchaseMoney)
          return false;
      }

      boolean this_present_sellMoney = true;
      boolean that_present_sellMoney = true;
      if (this_present_sellMoney || that_present_sellMoney) {
        if (!(this_present_sellMoney && that_present_sellMoney))
          return false;
        if (this.sellMoney != that.sellMoney)
          return false;
      }

      boolean this_present_payment = true;
      boolean that_present_payment = true;
      if (this_present_payment || that_present_payment) {
        if (!(this_present_payment && that_present_payment))
          return false;
        if (this.payment != that.payment)
          return false;
      }

      boolean this_present_isBseller = true;
      boolean that_present_isBseller = true;
      if (this_present_isBseller || that_present_isBseller) {
        if (!(this_present_isBseller && that_present_isBseller))
          return false;
        if (this.isBseller != that.isBseller)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(freshLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPurchaseMoney()).compareTo(other.isSetPurchaseMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseMoney, other.purchaseMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSellMoney()).compareTo(other.isSetSellMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSellMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellMoney, other.sellMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayment()).compareTo(other.isSetPayment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payment, other.payment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsBseller()).compareTo(other.isSetIsBseller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsBseller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBseller, other.isBseller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("freshLedger_args(");
      boolean first = true;

      sb.append("purchaseMoney:");
      sb.append(this.purchaseMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sellMoney:");
      sb.append(this.sellMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("payment:");
      sb.append(this.payment);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isBseller:");
      sb.append(this.isBseller);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class freshLedger_argsStandardSchemeFactory implements SchemeFactory {
      public freshLedger_argsStandardScheme getScheme() {
        return new freshLedger_argsStandardScheme();
      }
    }

    private static class freshLedger_argsStandardScheme extends StandardScheme<freshLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, freshLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PURCHASE_MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.purchaseMoney = iprot.readDouble();
                struct.setPurchaseMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SELL_MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.sellMoney = iprot.readDouble();
                struct.setSellMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAYMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.payment = iprot.readDouble();
                struct.setPaymentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_BSELLER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isBseller = iprot.readBool();
                struct.setIsBsellerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, freshLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PURCHASE_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.purchaseMoney);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SELL_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.sellMoney);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAYMENT_FIELD_DESC);
        oprot.writeDouble(struct.payment);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_BSELLER_FIELD_DESC);
        oprot.writeBool(struct.isBseller);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class freshLedger_argsTupleSchemeFactory implements SchemeFactory {
      public freshLedger_argsTupleScheme getScheme() {
        return new freshLedger_argsTupleScheme();
      }
    }

    private static class freshLedger_argsTupleScheme extends TupleScheme<freshLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, freshLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPurchaseMoney()) {
          optionals.set(0);
        }
        if (struct.isSetSellMoney()) {
          optionals.set(1);
        }
        if (struct.isSetPayment()) {
          optionals.set(2);
        }
        if (struct.isSetIsBseller()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPurchaseMoney()) {
          oprot.writeDouble(struct.purchaseMoney);
        }
        if (struct.isSetSellMoney()) {
          oprot.writeDouble(struct.sellMoney);
        }
        if (struct.isSetPayment()) {
          oprot.writeDouble(struct.payment);
        }
        if (struct.isSetIsBseller()) {
          oprot.writeBool(struct.isBseller);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, freshLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.purchaseMoney = iprot.readDouble();
          struct.setPurchaseMoneyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sellMoney = iprot.readDouble();
          struct.setSellMoneyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.payment = iprot.readDouble();
          struct.setPaymentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isBseller = iprot.readBool();
          struct.setIsBsellerIsSet(true);
        }
      }
    }

  }

  public static class freshLedger_result implements org.apache.thrift.TBase<freshLedger_result, freshLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<freshLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freshLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new freshLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new freshLedger_resultTupleSchemeFactory());
    }

    public ResponseSplitMap success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseSplitMap.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freshLedger_result.class, metaDataMap);
    }

    public freshLedger_result() {
    }

    public freshLedger_result(
      ResponseSplitMap success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public freshLedger_result(freshLedger_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseSplitMap(other.success);
      }
    }

    public freshLedger_result deepCopy() {
      return new freshLedger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseSplitMap getSuccess() {
      return this.success;
    }

    public freshLedger_result setSuccess(ResponseSplitMap success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseSplitMap)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof freshLedger_result)
        return this.equals((freshLedger_result)that);
      return false;
    }

    public boolean equals(freshLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(freshLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("freshLedger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class freshLedger_resultStandardSchemeFactory implements SchemeFactory {
      public freshLedger_resultStandardScheme getScheme() {
        return new freshLedger_resultStandardScheme();
      }
    }

    private static class freshLedger_resultStandardScheme extends StandardScheme<freshLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, freshLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseSplitMap();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, freshLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class freshLedger_resultTupleSchemeFactory implements SchemeFactory {
      public freshLedger_resultTupleScheme getScheme() {
        return new freshLedger_resultTupleScheme();
      }
    }

    private static class freshLedger_resultTupleScheme extends TupleScheme<freshLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, freshLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, freshLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseSplitMap();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class goodsLedger_args implements org.apache.thrift.TBase<goodsLedger_args, goodsLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<goodsLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("goodsLedger_args");

    private static final org.apache.thrift.protocol.TField PURCHASE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField SELL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sellMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField IS_BSELLER_FIELD_DESC = new org.apache.thrift.protocol.TField("isBseller", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField IS_SELLER_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("isSellerArea", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new goodsLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new goodsLedger_argsTupleSchemeFactory());
    }

    public double purchaseMoney; // required
    public double sellMoney; // required
    public boolean isBseller; // required
    public boolean isSellerArea; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PURCHASE_MONEY((short)1, "purchaseMoney"),
      SELL_MONEY((short)2, "sellMoney"),
      IS_BSELLER((short)3, "isBseller"),
      IS_SELLER_AREA((short)4, "isSellerArea");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PURCHASE_MONEY
            return PURCHASE_MONEY;
          case 2: // SELL_MONEY
            return SELL_MONEY;
          case 3: // IS_BSELLER
            return IS_BSELLER;
          case 4: // IS_SELLER_AREA
            return IS_SELLER_AREA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURCHASEMONEY_ISSET_ID = 0;
    private static final int __SELLMONEY_ISSET_ID = 1;
    private static final int __ISBSELLER_ISSET_ID = 2;
    private static final int __ISSELLERAREA_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PURCHASE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("purchaseMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SELL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("sellMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.IS_BSELLER, new org.apache.thrift.meta_data.FieldMetaData("isBseller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_SELLER_AREA, new org.apache.thrift.meta_data.FieldMetaData("isSellerArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(goodsLedger_args.class, metaDataMap);
    }

    public goodsLedger_args() {
    }

    public goodsLedger_args(
      double purchaseMoney,
      double sellMoney,
      boolean isBseller,
      boolean isSellerArea)
    {
      this();
      this.purchaseMoney = purchaseMoney;
      setPurchaseMoneyIsSet(true);
      this.sellMoney = sellMoney;
      setSellMoneyIsSet(true);
      this.isBseller = isBseller;
      setIsBsellerIsSet(true);
      this.isSellerArea = isSellerArea;
      setIsSellerAreaIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public goodsLedger_args(goodsLedger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.purchaseMoney = other.purchaseMoney;
      this.sellMoney = other.sellMoney;
      this.isBseller = other.isBseller;
      this.isSellerArea = other.isSellerArea;
    }

    public goodsLedger_args deepCopy() {
      return new goodsLedger_args(this);
    }

    @Override
    public void clear() {
      setPurchaseMoneyIsSet(false);
      this.purchaseMoney = 0.0;
      setSellMoneyIsSet(false);
      this.sellMoney = 0.0;
      setIsBsellerIsSet(false);
      this.isBseller = false;
      setIsSellerAreaIsSet(false);
      this.isSellerArea = false;
    }

    public double getPurchaseMoney() {
      return this.purchaseMoney;
    }

    public goodsLedger_args setPurchaseMoney(double purchaseMoney) {
      this.purchaseMoney = purchaseMoney;
      setPurchaseMoneyIsSet(true);
      return this;
    }

    public void unsetPurchaseMoney() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURCHASEMONEY_ISSET_ID);
    }

    /** Returns true if field purchaseMoney is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseMoney() {
      return EncodingUtils.testBit(__isset_bitfield, __PURCHASEMONEY_ISSET_ID);
    }

    public void setPurchaseMoneyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURCHASEMONEY_ISSET_ID, value);
    }

    public double getSellMoney() {
      return this.sellMoney;
    }

    public goodsLedger_args setSellMoney(double sellMoney) {
      this.sellMoney = sellMoney;
      setSellMoneyIsSet(true);
      return this;
    }

    public void unsetSellMoney() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLMONEY_ISSET_ID);
    }

    /** Returns true if field sellMoney is set (has been assigned a value) and false otherwise */
    public boolean isSetSellMoney() {
      return EncodingUtils.testBit(__isset_bitfield, __SELLMONEY_ISSET_ID);
    }

    public void setSellMoneyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLMONEY_ISSET_ID, value);
    }

    public boolean isIsBseller() {
      return this.isBseller;
    }

    public goodsLedger_args setIsBseller(boolean isBseller) {
      this.isBseller = isBseller;
      setIsBsellerIsSet(true);
      return this;
    }

    public void unsetIsBseller() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBSELLER_ISSET_ID);
    }

    /** Returns true if field isBseller is set (has been assigned a value) and false otherwise */
    public boolean isSetIsBseller() {
      return EncodingUtils.testBit(__isset_bitfield, __ISBSELLER_ISSET_ID);
    }

    public void setIsBsellerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBSELLER_ISSET_ID, value);
    }

    public boolean isIsSellerArea() {
      return this.isSellerArea;
    }

    public goodsLedger_args setIsSellerArea(boolean isSellerArea) {
      this.isSellerArea = isSellerArea;
      setIsSellerAreaIsSet(true);
      return this;
    }

    public void unsetIsSellerArea() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSELLERAREA_ISSET_ID);
    }

    /** Returns true if field isSellerArea is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSellerArea() {
      return EncodingUtils.testBit(__isset_bitfield, __ISSELLERAREA_ISSET_ID);
    }

    public void setIsSellerAreaIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSELLERAREA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PURCHASE_MONEY:
        if (value == null) {
          unsetPurchaseMoney();
        } else {
          setPurchaseMoney((Double)value);
        }
        break;

      case SELL_MONEY:
        if (value == null) {
          unsetSellMoney();
        } else {
          setSellMoney((Double)value);
        }
        break;

      case IS_BSELLER:
        if (value == null) {
          unsetIsBseller();
        } else {
          setIsBseller((Boolean)value);
        }
        break;

      case IS_SELLER_AREA:
        if (value == null) {
          unsetIsSellerArea();
        } else {
          setIsSellerArea((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PURCHASE_MONEY:
        return Double.valueOf(getPurchaseMoney());

      case SELL_MONEY:
        return Double.valueOf(getSellMoney());

      case IS_BSELLER:
        return Boolean.valueOf(isIsBseller());

      case IS_SELLER_AREA:
        return Boolean.valueOf(isIsSellerArea());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PURCHASE_MONEY:
        return isSetPurchaseMoney();
      case SELL_MONEY:
        return isSetSellMoney();
      case IS_BSELLER:
        return isSetIsBseller();
      case IS_SELLER_AREA:
        return isSetIsSellerArea();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof goodsLedger_args)
        return this.equals((goodsLedger_args)that);
      return false;
    }

    public boolean equals(goodsLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_purchaseMoney = true;
      boolean that_present_purchaseMoney = true;
      if (this_present_purchaseMoney || that_present_purchaseMoney) {
        if (!(this_present_purchaseMoney && that_present_purchaseMoney))
          return false;
        if (this.purchaseMoney != that.purchaseMoney)
          return false;
      }

      boolean this_present_sellMoney = true;
      boolean that_present_sellMoney = true;
      if (this_present_sellMoney || that_present_sellMoney) {
        if (!(this_present_sellMoney && that_present_sellMoney))
          return false;
        if (this.sellMoney != that.sellMoney)
          return false;
      }

      boolean this_present_isBseller = true;
      boolean that_present_isBseller = true;
      if (this_present_isBseller || that_present_isBseller) {
        if (!(this_present_isBseller && that_present_isBseller))
          return false;
        if (this.isBseller != that.isBseller)
          return false;
      }

      boolean this_present_isSellerArea = true;
      boolean that_present_isSellerArea = true;
      if (this_present_isSellerArea || that_present_isSellerArea) {
        if (!(this_present_isSellerArea && that_present_isSellerArea))
          return false;
        if (this.isSellerArea != that.isSellerArea)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(goodsLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPurchaseMoney()).compareTo(other.isSetPurchaseMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseMoney, other.purchaseMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSellMoney()).compareTo(other.isSetSellMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSellMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellMoney, other.sellMoney);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsBseller()).compareTo(other.isSetIsBseller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsBseller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBseller, other.isBseller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsSellerArea()).compareTo(other.isSetIsSellerArea());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsSellerArea()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSellerArea, other.isSellerArea);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("goodsLedger_args(");
      boolean first = true;

      sb.append("purchaseMoney:");
      sb.append(this.purchaseMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sellMoney:");
      sb.append(this.sellMoney);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isBseller:");
      sb.append(this.isBseller);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isSellerArea:");
      sb.append(this.isSellerArea);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class goodsLedger_argsStandardSchemeFactory implements SchemeFactory {
      public goodsLedger_argsStandardScheme getScheme() {
        return new goodsLedger_argsStandardScheme();
      }
    }

    private static class goodsLedger_argsStandardScheme extends StandardScheme<goodsLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, goodsLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PURCHASE_MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.purchaseMoney = iprot.readDouble();
                struct.setPurchaseMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SELL_MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.sellMoney = iprot.readDouble();
                struct.setSellMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_BSELLER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isBseller = iprot.readBool();
                struct.setIsBsellerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_SELLER_AREA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isSellerArea = iprot.readBool();
                struct.setIsSellerAreaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, goodsLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PURCHASE_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.purchaseMoney);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SELL_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.sellMoney);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_BSELLER_FIELD_DESC);
        oprot.writeBool(struct.isBseller);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_SELLER_AREA_FIELD_DESC);
        oprot.writeBool(struct.isSellerArea);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class goodsLedger_argsTupleSchemeFactory implements SchemeFactory {
      public goodsLedger_argsTupleScheme getScheme() {
        return new goodsLedger_argsTupleScheme();
      }
    }

    private static class goodsLedger_argsTupleScheme extends TupleScheme<goodsLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, goodsLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPurchaseMoney()) {
          optionals.set(0);
        }
        if (struct.isSetSellMoney()) {
          optionals.set(1);
        }
        if (struct.isSetIsBseller()) {
          optionals.set(2);
        }
        if (struct.isSetIsSellerArea()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPurchaseMoney()) {
          oprot.writeDouble(struct.purchaseMoney);
        }
        if (struct.isSetSellMoney()) {
          oprot.writeDouble(struct.sellMoney);
        }
        if (struct.isSetIsBseller()) {
          oprot.writeBool(struct.isBseller);
        }
        if (struct.isSetIsSellerArea()) {
          oprot.writeBool(struct.isSellerArea);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, goodsLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.purchaseMoney = iprot.readDouble();
          struct.setPurchaseMoneyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sellMoney = iprot.readDouble();
          struct.setSellMoneyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isBseller = iprot.readBool();
          struct.setIsBsellerIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isSellerArea = iprot.readBool();
          struct.setIsSellerAreaIsSet(true);
        }
      }
    }

  }

  public static class goodsLedger_result implements org.apache.thrift.TBase<goodsLedger_result, goodsLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<goodsLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("goodsLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new goodsLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new goodsLedger_resultTupleSchemeFactory());
    }

    public ResponseSplitMap success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseSplitMap.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(goodsLedger_result.class, metaDataMap);
    }

    public goodsLedger_result() {
    }

    public goodsLedger_result(
      ResponseSplitMap success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public goodsLedger_result(goodsLedger_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseSplitMap(other.success);
      }
    }

    public goodsLedger_result deepCopy() {
      return new goodsLedger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseSplitMap getSuccess() {
      return this.success;
    }

    public goodsLedger_result setSuccess(ResponseSplitMap success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseSplitMap)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof goodsLedger_result)
        return this.equals((goodsLedger_result)that);
      return false;
    }

    public boolean equals(goodsLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(goodsLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("goodsLedger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class goodsLedger_resultStandardSchemeFactory implements SchemeFactory {
      public goodsLedger_resultStandardScheme getScheme() {
        return new goodsLedger_resultStandardScheme();
      }
    }

    private static class goodsLedger_resultStandardScheme extends StandardScheme<goodsLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, goodsLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseSplitMap();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, goodsLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class goodsLedger_resultTupleSchemeFactory implements SchemeFactory {
      public goodsLedger_resultTupleScheme getScheme() {
        return new goodsLedger_resultTupleScheme();
      }
    }

    private static class goodsLedger_resultTupleScheme extends TupleScheme<goodsLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, goodsLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, goodsLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseSplitMap();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saasLedger_args implements org.apache.thrift.TBase<saasLedger_args, saasLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<saasLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saasLedger_args");

    private static final org.apache.thrift.protocol.TField SAAS_PRICEE_FIELD_DESC = new org.apache.thrift.protocol.TField("saasPricee", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField IS_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("isReturn", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField IS_SELLER_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("isSellerArea", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField IS_AGENTSCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("isAgentscope", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField PURCHASE_DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseDiscount", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField IS_ONE_LEVEL_XMER_FIELD_DESC = new org.apache.thrift.protocol.TField("isOneLevelXmer", org.apache.thrift.protocol.TType.BOOL, (short)8);
    private static final org.apache.thrift.protocol.TField IS_TWO_LEVEL_XMER_FIELD_DESC = new org.apache.thrift.protocol.TField("isTwoLevelXmer", org.apache.thrift.protocol.TType.BOOL, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saasLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saasLedger_argsTupleSchemeFactory());
    }

    public double saasPricee; // required
    public boolean isReturn; // required
    public int type; // required
    public double discount; // required
    public boolean isSellerArea; // required
    public boolean isAgentscope; // required
    public double purchaseDiscount; // required
    public boolean isOneLevelXmer; // required
    public boolean isTwoLevelXmer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SAAS_PRICEE((short)1, "saasPricee"),
      IS_RETURN((short)2, "isReturn"),
      TYPE((short)3, "type"),
      DISCOUNT((short)4, "discount"),
      IS_SELLER_AREA((short)5, "isSellerArea"),
      IS_AGENTSCOPE((short)6, "isAgentscope"),
      PURCHASE_DISCOUNT((short)7, "purchaseDiscount"),
      IS_ONE_LEVEL_XMER((short)8, "isOneLevelXmer"),
      IS_TWO_LEVEL_XMER((short)9, "isTwoLevelXmer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SAAS_PRICEE
            return SAAS_PRICEE;
          case 2: // IS_RETURN
            return IS_RETURN;
          case 3: // TYPE
            return TYPE;
          case 4: // DISCOUNT
            return DISCOUNT;
          case 5: // IS_SELLER_AREA
            return IS_SELLER_AREA;
          case 6: // IS_AGENTSCOPE
            return IS_AGENTSCOPE;
          case 7: // PURCHASE_DISCOUNT
            return PURCHASE_DISCOUNT;
          case 8: // IS_ONE_LEVEL_XMER
            return IS_ONE_LEVEL_XMER;
          case 9: // IS_TWO_LEVEL_XMER
            return IS_TWO_LEVEL_XMER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SAASPRICEE_ISSET_ID = 0;
    private static final int __ISRETURN_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __DISCOUNT_ISSET_ID = 3;
    private static final int __ISSELLERAREA_ISSET_ID = 4;
    private static final int __ISAGENTSCOPE_ISSET_ID = 5;
    private static final int __PURCHASEDISCOUNT_ISSET_ID = 6;
    private static final int __ISONELEVELXMER_ISSET_ID = 7;
    private static final int __ISTWOLEVELXMER_ISSET_ID = 8;
    private short __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SAAS_PRICEE, new org.apache.thrift.meta_data.FieldMetaData("saasPricee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.IS_RETURN, new org.apache.thrift.meta_data.FieldMetaData("isReturn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.IS_SELLER_AREA, new org.apache.thrift.meta_data.FieldMetaData("isSellerArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_AGENTSCOPE, new org.apache.thrift.meta_data.FieldMetaData("isAgentscope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PURCHASE_DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("purchaseDiscount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.IS_ONE_LEVEL_XMER, new org.apache.thrift.meta_data.FieldMetaData("isOneLevelXmer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_TWO_LEVEL_XMER, new org.apache.thrift.meta_data.FieldMetaData("isTwoLevelXmer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saasLedger_args.class, metaDataMap);
    }

    public saasLedger_args() {
    }

    public saasLedger_args(
      double saasPricee,
      boolean isReturn,
      int type,
      double discount,
      boolean isSellerArea,
      boolean isAgentscope,
      double purchaseDiscount,
      boolean isOneLevelXmer,
      boolean isTwoLevelXmer)
    {
      this();
      this.saasPricee = saasPricee;
      setSaasPriceeIsSet(true);
      this.isReturn = isReturn;
      setIsReturnIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.discount = discount;
      setDiscountIsSet(true);
      this.isSellerArea = isSellerArea;
      setIsSellerAreaIsSet(true);
      this.isAgentscope = isAgentscope;
      setIsAgentscopeIsSet(true);
      this.purchaseDiscount = purchaseDiscount;
      setPurchaseDiscountIsSet(true);
      this.isOneLevelXmer = isOneLevelXmer;
      setIsOneLevelXmerIsSet(true);
      this.isTwoLevelXmer = isTwoLevelXmer;
      setIsTwoLevelXmerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saasLedger_args(saasLedger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.saasPricee = other.saasPricee;
      this.isReturn = other.isReturn;
      this.type = other.type;
      this.discount = other.discount;
      this.isSellerArea = other.isSellerArea;
      this.isAgentscope = other.isAgentscope;
      this.purchaseDiscount = other.purchaseDiscount;
      this.isOneLevelXmer = other.isOneLevelXmer;
      this.isTwoLevelXmer = other.isTwoLevelXmer;
    }

    public saasLedger_args deepCopy() {
      return new saasLedger_args(this);
    }

    @Override
    public void clear() {
      setSaasPriceeIsSet(false);
      this.saasPricee = 0.0;
      setIsReturnIsSet(false);
      this.isReturn = false;
      setTypeIsSet(false);
      this.type = 0;
      setDiscountIsSet(false);
      this.discount = 0.0;
      setIsSellerAreaIsSet(false);
      this.isSellerArea = false;
      setIsAgentscopeIsSet(false);
      this.isAgentscope = false;
      setPurchaseDiscountIsSet(false);
      this.purchaseDiscount = 0.0;
      setIsOneLevelXmerIsSet(false);
      this.isOneLevelXmer = false;
      setIsTwoLevelXmerIsSet(false);
      this.isTwoLevelXmer = false;
    }

    public double getSaasPricee() {
      return this.saasPricee;
    }

    public saasLedger_args setSaasPricee(double saasPricee) {
      this.saasPricee = saasPricee;
      setSaasPriceeIsSet(true);
      return this;
    }

    public void unsetSaasPricee() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAASPRICEE_ISSET_ID);
    }

    /** Returns true if field saasPricee is set (has been assigned a value) and false otherwise */
    public boolean isSetSaasPricee() {
      return EncodingUtils.testBit(__isset_bitfield, __SAASPRICEE_ISSET_ID);
    }

    public void setSaasPriceeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAASPRICEE_ISSET_ID, value);
    }

    public boolean isIsReturn() {
      return this.isReturn;
    }

    public saasLedger_args setIsReturn(boolean isReturn) {
      this.isReturn = isReturn;
      setIsReturnIsSet(true);
      return this;
    }

    public void unsetIsReturn() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRETURN_ISSET_ID);
    }

    /** Returns true if field isReturn is set (has been assigned a value) and false otherwise */
    public boolean isSetIsReturn() {
      return EncodingUtils.testBit(__isset_bitfield, __ISRETURN_ISSET_ID);
    }

    public void setIsReturnIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRETURN_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public saasLedger_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public double getDiscount() {
      return this.discount;
    }

    public saasLedger_args setDiscount(double discount) {
      this.discount = discount;
      setDiscountIsSet(true);
      return this;
    }

    public void unsetDiscount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
    }

    /** Returns true if field discount is set (has been assigned a value) and false otherwise */
    public boolean isSetDiscount() {
      return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
    }

    public void setDiscountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
    }

    public boolean isIsSellerArea() {
      return this.isSellerArea;
    }

    public saasLedger_args setIsSellerArea(boolean isSellerArea) {
      this.isSellerArea = isSellerArea;
      setIsSellerAreaIsSet(true);
      return this;
    }

    public void unsetIsSellerArea() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSELLERAREA_ISSET_ID);
    }

    /** Returns true if field isSellerArea is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSellerArea() {
      return EncodingUtils.testBit(__isset_bitfield, __ISSELLERAREA_ISSET_ID);
    }

    public void setIsSellerAreaIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSELLERAREA_ISSET_ID, value);
    }

    public boolean isIsAgentscope() {
      return this.isAgentscope;
    }

    public saasLedger_args setIsAgentscope(boolean isAgentscope) {
      this.isAgentscope = isAgentscope;
      setIsAgentscopeIsSet(true);
      return this;
    }

    public void unsetIsAgentscope() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAGENTSCOPE_ISSET_ID);
    }

    /** Returns true if field isAgentscope is set (has been assigned a value) and false otherwise */
    public boolean isSetIsAgentscope() {
      return EncodingUtils.testBit(__isset_bitfield, __ISAGENTSCOPE_ISSET_ID);
    }

    public void setIsAgentscopeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAGENTSCOPE_ISSET_ID, value);
    }

    public double getPurchaseDiscount() {
      return this.purchaseDiscount;
    }

    public saasLedger_args setPurchaseDiscount(double purchaseDiscount) {
      this.purchaseDiscount = purchaseDiscount;
      setPurchaseDiscountIsSet(true);
      return this;
    }

    public void unsetPurchaseDiscount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURCHASEDISCOUNT_ISSET_ID);
    }

    /** Returns true if field purchaseDiscount is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseDiscount() {
      return EncodingUtils.testBit(__isset_bitfield, __PURCHASEDISCOUNT_ISSET_ID);
    }

    public void setPurchaseDiscountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURCHASEDISCOUNT_ISSET_ID, value);
    }

    public boolean isIsOneLevelXmer() {
      return this.isOneLevelXmer;
    }

    public saasLedger_args setIsOneLevelXmer(boolean isOneLevelXmer) {
      this.isOneLevelXmer = isOneLevelXmer;
      setIsOneLevelXmerIsSet(true);
      return this;
    }

    public void unsetIsOneLevelXmer() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISONELEVELXMER_ISSET_ID);
    }

    /** Returns true if field isOneLevelXmer is set (has been assigned a value) and false otherwise */
    public boolean isSetIsOneLevelXmer() {
      return EncodingUtils.testBit(__isset_bitfield, __ISONELEVELXMER_ISSET_ID);
    }

    public void setIsOneLevelXmerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISONELEVELXMER_ISSET_ID, value);
    }

    public boolean isIsTwoLevelXmer() {
      return this.isTwoLevelXmer;
    }

    public saasLedger_args setIsTwoLevelXmer(boolean isTwoLevelXmer) {
      this.isTwoLevelXmer = isTwoLevelXmer;
      setIsTwoLevelXmerIsSet(true);
      return this;
    }

    public void unsetIsTwoLevelXmer() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTWOLEVELXMER_ISSET_ID);
    }

    /** Returns true if field isTwoLevelXmer is set (has been assigned a value) and false otherwise */
    public boolean isSetIsTwoLevelXmer() {
      return EncodingUtils.testBit(__isset_bitfield, __ISTWOLEVELXMER_ISSET_ID);
    }

    public void setIsTwoLevelXmerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTWOLEVELXMER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SAAS_PRICEE:
        if (value == null) {
          unsetSaasPricee();
        } else {
          setSaasPricee((Double)value);
        }
        break;

      case IS_RETURN:
        if (value == null) {
          unsetIsReturn();
        } else {
          setIsReturn((Boolean)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case DISCOUNT:
        if (value == null) {
          unsetDiscount();
        } else {
          setDiscount((Double)value);
        }
        break;

      case IS_SELLER_AREA:
        if (value == null) {
          unsetIsSellerArea();
        } else {
          setIsSellerArea((Boolean)value);
        }
        break;

      case IS_AGENTSCOPE:
        if (value == null) {
          unsetIsAgentscope();
        } else {
          setIsAgentscope((Boolean)value);
        }
        break;

      case PURCHASE_DISCOUNT:
        if (value == null) {
          unsetPurchaseDiscount();
        } else {
          setPurchaseDiscount((Double)value);
        }
        break;

      case IS_ONE_LEVEL_XMER:
        if (value == null) {
          unsetIsOneLevelXmer();
        } else {
          setIsOneLevelXmer((Boolean)value);
        }
        break;

      case IS_TWO_LEVEL_XMER:
        if (value == null) {
          unsetIsTwoLevelXmer();
        } else {
          setIsTwoLevelXmer((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SAAS_PRICEE:
        return Double.valueOf(getSaasPricee());

      case IS_RETURN:
        return Boolean.valueOf(isIsReturn());

      case TYPE:
        return Integer.valueOf(getType());

      case DISCOUNT:
        return Double.valueOf(getDiscount());

      case IS_SELLER_AREA:
        return Boolean.valueOf(isIsSellerArea());

      case IS_AGENTSCOPE:
        return Boolean.valueOf(isIsAgentscope());

      case PURCHASE_DISCOUNT:
        return Double.valueOf(getPurchaseDiscount());

      case IS_ONE_LEVEL_XMER:
        return Boolean.valueOf(isIsOneLevelXmer());

      case IS_TWO_LEVEL_XMER:
        return Boolean.valueOf(isIsTwoLevelXmer());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SAAS_PRICEE:
        return isSetSaasPricee();
      case IS_RETURN:
        return isSetIsReturn();
      case TYPE:
        return isSetType();
      case DISCOUNT:
        return isSetDiscount();
      case IS_SELLER_AREA:
        return isSetIsSellerArea();
      case IS_AGENTSCOPE:
        return isSetIsAgentscope();
      case PURCHASE_DISCOUNT:
        return isSetPurchaseDiscount();
      case IS_ONE_LEVEL_XMER:
        return isSetIsOneLevelXmer();
      case IS_TWO_LEVEL_XMER:
        return isSetIsTwoLevelXmer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saasLedger_args)
        return this.equals((saasLedger_args)that);
      return false;
    }

    public boolean equals(saasLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_saasPricee = true;
      boolean that_present_saasPricee = true;
      if (this_present_saasPricee || that_present_saasPricee) {
        if (!(this_present_saasPricee && that_present_saasPricee))
          return false;
        if (this.saasPricee != that.saasPricee)
          return false;
      }

      boolean this_present_isReturn = true;
      boolean that_present_isReturn = true;
      if (this_present_isReturn || that_present_isReturn) {
        if (!(this_present_isReturn && that_present_isReturn))
          return false;
        if (this.isReturn != that.isReturn)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_discount = true;
      boolean that_present_discount = true;
      if (this_present_discount || that_present_discount) {
        if (!(this_present_discount && that_present_discount))
          return false;
        if (this.discount != that.discount)
          return false;
      }

      boolean this_present_isSellerArea = true;
      boolean that_present_isSellerArea = true;
      if (this_present_isSellerArea || that_present_isSellerArea) {
        if (!(this_present_isSellerArea && that_present_isSellerArea))
          return false;
        if (this.isSellerArea != that.isSellerArea)
          return false;
      }

      boolean this_present_isAgentscope = true;
      boolean that_present_isAgentscope = true;
      if (this_present_isAgentscope || that_present_isAgentscope) {
        if (!(this_present_isAgentscope && that_present_isAgentscope))
          return false;
        if (this.isAgentscope != that.isAgentscope)
          return false;
      }

      boolean this_present_purchaseDiscount = true;
      boolean that_present_purchaseDiscount = true;
      if (this_present_purchaseDiscount || that_present_purchaseDiscount) {
        if (!(this_present_purchaseDiscount && that_present_purchaseDiscount))
          return false;
        if (this.purchaseDiscount != that.purchaseDiscount)
          return false;
      }

      boolean this_present_isOneLevelXmer = true;
      boolean that_present_isOneLevelXmer = true;
      if (this_present_isOneLevelXmer || that_present_isOneLevelXmer) {
        if (!(this_present_isOneLevelXmer && that_present_isOneLevelXmer))
          return false;
        if (this.isOneLevelXmer != that.isOneLevelXmer)
          return false;
      }

      boolean this_present_isTwoLevelXmer = true;
      boolean that_present_isTwoLevelXmer = true;
      if (this_present_isTwoLevelXmer || that_present_isTwoLevelXmer) {
        if (!(this_present_isTwoLevelXmer && that_present_isTwoLevelXmer))
          return false;
        if (this.isTwoLevelXmer != that.isTwoLevelXmer)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saasLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSaasPricee()).compareTo(other.isSetSaasPricee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSaasPricee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saasPricee, other.saasPricee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsReturn()).compareTo(other.isSetIsReturn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsReturn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReturn, other.isReturn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDiscount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsSellerArea()).compareTo(other.isSetIsSellerArea());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsSellerArea()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSellerArea, other.isSellerArea);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsAgentscope()).compareTo(other.isSetIsAgentscope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsAgentscope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAgentscope, other.isAgentscope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurchaseDiscount()).compareTo(other.isSetPurchaseDiscount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseDiscount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseDiscount, other.purchaseDiscount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsOneLevelXmer()).compareTo(other.isSetIsOneLevelXmer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsOneLevelXmer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOneLevelXmer, other.isOneLevelXmer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsTwoLevelXmer()).compareTo(other.isSetIsTwoLevelXmer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsTwoLevelXmer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTwoLevelXmer, other.isTwoLevelXmer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saasLedger_args(");
      boolean first = true;

      sb.append("saasPricee:");
      sb.append(this.saasPricee);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isReturn:");
      sb.append(this.isReturn);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("discount:");
      sb.append(this.discount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isSellerArea:");
      sb.append(this.isSellerArea);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isAgentscope:");
      sb.append(this.isAgentscope);
      first = false;
      if (!first) sb.append(", ");
      sb.append("purchaseDiscount:");
      sb.append(this.purchaseDiscount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isOneLevelXmer:");
      sb.append(this.isOneLevelXmer);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isTwoLevelXmer:");
      sb.append(this.isTwoLevelXmer);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saasLedger_argsStandardSchemeFactory implements SchemeFactory {
      public saasLedger_argsStandardScheme getScheme() {
        return new saasLedger_argsStandardScheme();
      }
    }

    private static class saasLedger_argsStandardScheme extends StandardScheme<saasLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saasLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SAAS_PRICEE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.saasPricee = iprot.readDouble();
                struct.setSaasPriceeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_RETURN
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isReturn = iprot.readBool();
                struct.setIsReturnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DISCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.discount = iprot.readDouble();
                struct.setDiscountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IS_SELLER_AREA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isSellerArea = iprot.readBool();
                struct.setIsSellerAreaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // IS_AGENTSCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isAgentscope = iprot.readBool();
                struct.setIsAgentscopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PURCHASE_DISCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.purchaseDiscount = iprot.readDouble();
                struct.setPurchaseDiscountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // IS_ONE_LEVEL_XMER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isOneLevelXmer = iprot.readBool();
                struct.setIsOneLevelXmerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // IS_TWO_LEVEL_XMER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isTwoLevelXmer = iprot.readBool();
                struct.setIsTwoLevelXmerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saasLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SAAS_PRICEE_FIELD_DESC);
        oprot.writeDouble(struct.saasPricee);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_RETURN_FIELD_DESC);
        oprot.writeBool(struct.isReturn);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
        oprot.writeDouble(struct.discount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_SELLER_AREA_FIELD_DESC);
        oprot.writeBool(struct.isSellerArea);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_AGENTSCOPE_FIELD_DESC);
        oprot.writeBool(struct.isAgentscope);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PURCHASE_DISCOUNT_FIELD_DESC);
        oprot.writeDouble(struct.purchaseDiscount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_ONE_LEVEL_XMER_FIELD_DESC);
        oprot.writeBool(struct.isOneLevelXmer);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_TWO_LEVEL_XMER_FIELD_DESC);
        oprot.writeBool(struct.isTwoLevelXmer);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saasLedger_argsTupleSchemeFactory implements SchemeFactory {
      public saasLedger_argsTupleScheme getScheme() {
        return new saasLedger_argsTupleScheme();
      }
    }

    private static class saasLedger_argsTupleScheme extends TupleScheme<saasLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saasLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSaasPricee()) {
          optionals.set(0);
        }
        if (struct.isSetIsReturn()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetDiscount()) {
          optionals.set(3);
        }
        if (struct.isSetIsSellerArea()) {
          optionals.set(4);
        }
        if (struct.isSetIsAgentscope()) {
          optionals.set(5);
        }
        if (struct.isSetPurchaseDiscount()) {
          optionals.set(6);
        }
        if (struct.isSetIsOneLevelXmer()) {
          optionals.set(7);
        }
        if (struct.isSetIsTwoLevelXmer()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetSaasPricee()) {
          oprot.writeDouble(struct.saasPricee);
        }
        if (struct.isSetIsReturn()) {
          oprot.writeBool(struct.isReturn);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetDiscount()) {
          oprot.writeDouble(struct.discount);
        }
        if (struct.isSetIsSellerArea()) {
          oprot.writeBool(struct.isSellerArea);
        }
        if (struct.isSetIsAgentscope()) {
          oprot.writeBool(struct.isAgentscope);
        }
        if (struct.isSetPurchaseDiscount()) {
          oprot.writeDouble(struct.purchaseDiscount);
        }
        if (struct.isSetIsOneLevelXmer()) {
          oprot.writeBool(struct.isOneLevelXmer);
        }
        if (struct.isSetIsTwoLevelXmer()) {
          oprot.writeBool(struct.isTwoLevelXmer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saasLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.saasPricee = iprot.readDouble();
          struct.setSaasPriceeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isReturn = iprot.readBool();
          struct.setIsReturnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.discount = iprot.readDouble();
          struct.setDiscountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.isSellerArea = iprot.readBool();
          struct.setIsSellerAreaIsSet(true);
        }
        if (incoming.get(5)) {
          struct.isAgentscope = iprot.readBool();
          struct.setIsAgentscopeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.purchaseDiscount = iprot.readDouble();
          struct.setPurchaseDiscountIsSet(true);
        }
        if (incoming.get(7)) {
          struct.isOneLevelXmer = iprot.readBool();
          struct.setIsOneLevelXmerIsSet(true);
        }
        if (incoming.get(8)) {
          struct.isTwoLevelXmer = iprot.readBool();
          struct.setIsTwoLevelXmerIsSet(true);
        }
      }
    }

  }

  public static class saasLedger_result implements org.apache.thrift.TBase<saasLedger_result, saasLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<saasLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saasLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saasLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saasLedger_resultTupleSchemeFactory());
    }

    public ResponseSplitMap success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseSplitMap.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saasLedger_result.class, metaDataMap);
    }

    public saasLedger_result() {
    }

    public saasLedger_result(
      ResponseSplitMap success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saasLedger_result(saasLedger_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseSplitMap(other.success);
      }
    }

    public saasLedger_result deepCopy() {
      return new saasLedger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResponseSplitMap getSuccess() {
      return this.success;
    }

    public saasLedger_result setSuccess(ResponseSplitMap success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseSplitMap)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saasLedger_result)
        return this.equals((saasLedger_result)that);
      return false;
    }

    public boolean equals(saasLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saasLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saasLedger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saasLedger_resultStandardSchemeFactory implements SchemeFactory {
      public saasLedger_resultStandardScheme getScheme() {
        return new saasLedger_resultStandardScheme();
      }
    }

    private static class saasLedger_resultStandardScheme extends StandardScheme<saasLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saasLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseSplitMap();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saasLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saasLedger_resultTupleSchemeFactory implements SchemeFactory {
      public saasLedger_resultTupleScheme getScheme() {
        return new saasLedger_resultTupleScheme();
      }
    }

    private static class saasLedger_resultTupleScheme extends TupleScheme<saasLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saasLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saasLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResponseSplitMap();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
