/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.thrift.pay;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResponseSubList implements org.apache.thrift.TBase<ResponseSubList, ResponseSubList._Fields>, java.io.Serializable, Cloneable, Comparable<ResponseSubList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseSubList");

  private static final org.apache.thrift.protocol.TField COUNT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("countNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("countSum", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField COUNT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("countDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("subList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseSubListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseSubListTupleSchemeFactory());
  }

  public int countNum; // required
  public double countSum; // required
  public String countDate; // required
  public List<Map<String,String>> subList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNT_NUM((short)1, "countNum"),
    COUNT_SUM((short)2, "countSum"),
    COUNT_DATE((short)3, "countDate"),
    SUB_LIST((short)4, "subList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNT_NUM
          return COUNT_NUM;
        case 2: // COUNT_SUM
          return COUNT_SUM;
        case 3: // COUNT_DATE
          return COUNT_DATE;
        case 4: // SUB_LIST
          return SUB_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNTNUM_ISSET_ID = 0;
  private static final int __COUNTSUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNT_NUM, new org.apache.thrift.meta_data.FieldMetaData("countNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT_SUM, new org.apache.thrift.meta_data.FieldMetaData("countSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUNT_DATE, new org.apache.thrift.meta_data.FieldMetaData("countDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_LIST, new org.apache.thrift.meta_data.FieldMetaData("subList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseSubList.class, metaDataMap);
  }

  public ResponseSubList() {
  }

  public ResponseSubList(
    int countNum,
    double countSum,
    String countDate,
    List<Map<String,String>> subList)
  {
    this();
    this.countNum = countNum;
    setCountNumIsSet(true);
    this.countSum = countSum;
    setCountSumIsSet(true);
    this.countDate = countDate;
    this.subList = subList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseSubList(ResponseSubList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.countNum = other.countNum;
    this.countSum = other.countSum;
    if (other.isSetCountDate()) {
      this.countDate = other.countDate;
    }
    if (other.isSetSubList()) {
      List<Map<String,String>> __this__subList = new ArrayList<Map<String,String>>(other.subList.size());
      for (Map<String,String> other_element : other.subList) {
        Map<String,String> __this__subList_copy = new HashMap<String,String>(other_element);
        __this__subList.add(__this__subList_copy);
      }
      this.subList = __this__subList;
    }
  }

  public ResponseSubList deepCopy() {
    return new ResponseSubList(this);
  }

  @Override
  public void clear() {
    setCountNumIsSet(false);
    this.countNum = 0;
    setCountSumIsSet(false);
    this.countSum = 0.0;
    this.countDate = null;
    this.subList = null;
  }

  public int getCountNum() {
    return this.countNum;
  }

  public ResponseSubList setCountNum(int countNum) {
    this.countNum = countNum;
    setCountNumIsSet(true);
    return this;
  }

  public void unsetCountNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTNUM_ISSET_ID);
  }

  /** Returns true if field countNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCountNum() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTNUM_ISSET_ID);
  }

  public void setCountNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTNUM_ISSET_ID, value);
  }

  public double getCountSum() {
    return this.countSum;
  }

  public ResponseSubList setCountSum(double countSum) {
    this.countSum = countSum;
    setCountSumIsSet(true);
    return this;
  }

  public void unsetCountSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTSUM_ISSET_ID);
  }

  /** Returns true if field countSum is set (has been assigned a value) and false otherwise */
  public boolean isSetCountSum() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTSUM_ISSET_ID);
  }

  public void setCountSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTSUM_ISSET_ID, value);
  }

  public String getCountDate() {
    return this.countDate;
  }

  public ResponseSubList setCountDate(String countDate) {
    this.countDate = countDate;
    return this;
  }

  public void unsetCountDate() {
    this.countDate = null;
  }

  /** Returns true if field countDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCountDate() {
    return this.countDate != null;
  }

  public void setCountDateIsSet(boolean value) {
    if (!value) {
      this.countDate = null;
    }
  }

  public int getSubListSize() {
    return (this.subList == null) ? 0 : this.subList.size();
  }

  public java.util.Iterator<Map<String,String>> getSubListIterator() {
    return (this.subList == null) ? null : this.subList.iterator();
  }

  public void addToSubList(Map<String,String> elem) {
    if (this.subList == null) {
      this.subList = new ArrayList<Map<String,String>>();
    }
    this.subList.add(elem);
  }

  public List<Map<String,String>> getSubList() {
    return this.subList;
  }

  public ResponseSubList setSubList(List<Map<String,String>> subList) {
    this.subList = subList;
    return this;
  }

  public void unsetSubList() {
    this.subList = null;
  }

  /** Returns true if field subList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubList() {
    return this.subList != null;
  }

  public void setSubListIsSet(boolean value) {
    if (!value) {
      this.subList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNT_NUM:
      if (value == null) {
        unsetCountNum();
      } else {
        setCountNum((Integer)value);
      }
      break;

    case COUNT_SUM:
      if (value == null) {
        unsetCountSum();
      } else {
        setCountSum((Double)value);
      }
      break;

    case COUNT_DATE:
      if (value == null) {
        unsetCountDate();
      } else {
        setCountDate((String)value);
      }
      break;

    case SUB_LIST:
      if (value == null) {
        unsetSubList();
      } else {
        setSubList((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNT_NUM:
      return Integer.valueOf(getCountNum());

    case COUNT_SUM:
      return Double.valueOf(getCountSum());

    case COUNT_DATE:
      return getCountDate();

    case SUB_LIST:
      return getSubList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNT_NUM:
      return isSetCountNum();
    case COUNT_SUM:
      return isSetCountSum();
    case COUNT_DATE:
      return isSetCountDate();
    case SUB_LIST:
      return isSetSubList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseSubList)
      return this.equals((ResponseSubList)that);
    return false;
  }

  public boolean equals(ResponseSubList that) {
    if (that == null)
      return false;

    boolean this_present_countNum = true;
    boolean that_present_countNum = true;
    if (this_present_countNum || that_present_countNum) {
      if (!(this_present_countNum && that_present_countNum))
        return false;
      if (this.countNum != that.countNum)
        return false;
    }

    boolean this_present_countSum = true;
    boolean that_present_countSum = true;
    if (this_present_countSum || that_present_countSum) {
      if (!(this_present_countSum && that_present_countSum))
        return false;
      if (this.countSum != that.countSum)
        return false;
    }

    boolean this_present_countDate = true && this.isSetCountDate();
    boolean that_present_countDate = true && that.isSetCountDate();
    if (this_present_countDate || that_present_countDate) {
      if (!(this_present_countDate && that_present_countDate))
        return false;
      if (!this.countDate.equals(that.countDate))
        return false;
    }

    boolean this_present_subList = true && this.isSetSubList();
    boolean that_present_subList = true && that.isSetSubList();
    if (this_present_subList || that_present_subList) {
      if (!(this_present_subList && that_present_subList))
        return false;
      if (!this.subList.equals(that.subList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ResponseSubList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCountNum()).compareTo(other.isSetCountNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countNum, other.countNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountSum()).compareTo(other.isSetCountSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countSum, other.countSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountDate()).compareTo(other.isSetCountDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countDate, other.countDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubList()).compareTo(other.isSetSubList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subList, other.subList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseSubList(");
    boolean first = true;

    sb.append("countNum:");
    sb.append(this.countNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countSum:");
    sb.append(this.countSum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countDate:");
    if (this.countDate == null) {
      sb.append("null");
    } else {
      sb.append(this.countDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subList:");
    if (this.subList == null) {
      sb.append("null");
    } else {
      sb.append(this.subList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseSubListStandardSchemeFactory implements SchemeFactory {
    public ResponseSubListStandardScheme getScheme() {
      return new ResponseSubListStandardScheme();
    }
  }

  private static class ResponseSubListStandardScheme extends StandardScheme<ResponseSubList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseSubList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countNum = iprot.readI32();
              struct.setCountNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.countSum = iprot.readDouble();
              struct.setCountSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countDate = iprot.readString();
              struct.setCountDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.subList = new ArrayList<Map<String,String>>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  Map<String,String> _elem58;
                  {
                    org.apache.thrift.protocol.TMap _map59 = iprot.readMapBegin();
                    _elem58 = new HashMap<String,String>(2*_map59.size);
                    for (int _i60 = 0; _i60 < _map59.size; ++_i60)
                    {
                      String _key61;
                      String _val62;
                      _key61 = iprot.readString();
                      _val62 = iprot.readString();
                      _elem58.put(_key61, _val62);
                    }
                    iprot.readMapEnd();
                  }
                  struct.subList.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setSubListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseSubList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COUNT_NUM_FIELD_DESC);
      oprot.writeI32(struct.countNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_SUM_FIELD_DESC);
      oprot.writeDouble(struct.countSum);
      oprot.writeFieldEnd();
      if (struct.countDate != null) {
        oprot.writeFieldBegin(COUNT_DATE_FIELD_DESC);
        oprot.writeString(struct.countDate);
        oprot.writeFieldEnd();
      }
      if (struct.subList != null) {
        oprot.writeFieldBegin(SUB_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.subList.size()));
          for (Map<String,String> _iter63 : struct.subList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter63.size()));
              for (Map.Entry<String, String> _iter64 : _iter63.entrySet())
              {
                oprot.writeString(_iter64.getKey());
                oprot.writeString(_iter64.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseSubListTupleSchemeFactory implements SchemeFactory {
    public ResponseSubListTupleScheme getScheme() {
      return new ResponseSubListTupleScheme();
    }
  }

  private static class ResponseSubListTupleScheme extends TupleScheme<ResponseSubList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseSubList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCountNum()) {
        optionals.set(0);
      }
      if (struct.isSetCountSum()) {
        optionals.set(1);
      }
      if (struct.isSetCountDate()) {
        optionals.set(2);
      }
      if (struct.isSetSubList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCountNum()) {
        oprot.writeI32(struct.countNum);
      }
      if (struct.isSetCountSum()) {
        oprot.writeDouble(struct.countSum);
      }
      if (struct.isSetCountDate()) {
        oprot.writeString(struct.countDate);
      }
      if (struct.isSetSubList()) {
        {
          oprot.writeI32(struct.subList.size());
          for (Map<String,String> _iter65 : struct.subList)
          {
            {
              oprot.writeI32(_iter65.size());
              for (Map.Entry<String, String> _iter66 : _iter65.entrySet())
              {
                oprot.writeString(_iter66.getKey());
                oprot.writeString(_iter66.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseSubList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.countNum = iprot.readI32();
        struct.setCountNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.countSum = iprot.readDouble();
        struct.setCountSumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.countDate = iprot.readString();
        struct.setCountDateIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.subList = new ArrayList<Map<String,String>>(_list67.size);
          for (int _i68 = 0; _i68 < _list67.size; ++_i68)
          {
            Map<String,String> _elem69;
            {
              org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem69 = new HashMap<String,String>(2*_map70.size);
              for (int _i71 = 0; _i71 < _map70.size; ++_i71)
              {
                String _key72;
                String _val73;
                _key72 = iprot.readString();
                _val73 = iprot.readString();
                _elem69.put(_key72, _val73);
              }
            }
            struct.subList.add(_elem69);
          }
        }
        struct.setSubListIsSet(true);
      }
    }
  }

}

