/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.thrift.busine.manor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ManorService {

  public interface Iface {

    /**
     * 1.20.1 激活/续租黄金庄园
     * params :
     *     uid : 用户id
     *     transNo : 交易号
     * 
     * @param params
     */
    public com.xmniao.thrift.busine.common.ResponseData activateManor(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

    /**
     * 1.20.2 种植花朵
     * 
     * uid : 用户id
     * plantParam: 种植参数每个花田一条数据, 如果有3个花田都要种植 则list有3条数据
     *     location : 线路位置 0:走  1:中  2:右
     *     quantity : 种植数量
     * transNo : 交易号
     * 
     * @param uid
     * @param plantParam
     * @param transNo
     */
    public com.xmniao.thrift.busine.common.ThriftResult plantFlower(int uid, List<Map<String,String>> plantParam, String transNo) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

    /**
     * 1.20.3 施肥
     * uid : 用户id
     * fertilizeParam : 施肥参数
     *     location : 线路位置 0:走  1:中  2:右
     *     quantity : 种植数量
     *     flowerType : 施肥类型 0:花苗；1:花朵
     * transNo : 交易号
     * 
     * @param uid
     * @param fertilizeParam
     * @param transNo
     */
    public com.xmniao.thrift.busine.common.ResponsePageList fertilization(int uid, List<Map<String,String>> fertilizeParam, String transNo) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

    /**
     * 1.20.4 兑换(废弃)
     * 
     * @param params
     */
    public com.xmniao.thrift.busine.common.ResponseData convertReward(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

    /**
     * 1.20.5 领取每日收益
     * 
     * @param params
     */
    public com.xmniao.thrift.busine.common.ResponseData receiveDailyEarnings(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

    /**
     * 1.20.6 查询用户花田开启资格
     * 
     * params:
     *     uid : 用户id
     *     location :  2 右花田
     * 
     * @param params
     */
    public com.xmniao.thrift.busine.common.ThriftResult filedPlantable(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

    /**
     * 1.20.7 统计用户花朵数量
     * 
     * params:
     *     uid : 用户id
     * 
     * @param params
     */
    public com.xmniao.thrift.busine.common.ThriftResult statFlower(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

    /**
     * 1.20.8 种植园友赠送的花苗
     * uid : 用户id
     * plantParam: 种植参数每个花田一条数据, 如果有3个花田都要种植 则list有3条数据
     *     location : 线路位置 0:走  1:中  2:右
     *     giveUid  : 花苗赠送人uid
     * transNo : 交易号
     * 
     * @param uid
     * @param plantParam
     * @param transNo
     */
    public com.xmniao.thrift.busine.common.ThriftResult plantFlowerWithGive(int uid, List<Map<String,String>> plantParam, String transNo) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void activateManor(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void plantFlower(int uid, List<Map<String,String>> plantParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fertilization(int uid, List<Map<String,String>> fertilizeParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void convertReward(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void receiveDailyEarnings(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void filedPlantable(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statFlower(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void plantFlowerWithGive(int uid, List<Map<String,String>> plantParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.xmniao.thrift.busine.common.ResponseData activateManor(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_activateManor(params);
      return recv_activateManor();
    }

    public void send_activateManor(Map<String,String> params) throws org.apache.thrift.TException
    {
      activateManor_args args = new activateManor_args();
      args.setParams(params);
      sendBase("activateManor", args);
    }

    public com.xmniao.thrift.busine.common.ResponseData recv_activateManor() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      activateManor_result result = new activateManor_result();
      receiveBase(result, "activateManor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateManor failed: unknown result");
    }

    public com.xmniao.thrift.busine.common.ThriftResult plantFlower(int uid, List<Map<String,String>> plantParam, String transNo) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_plantFlower(uid, plantParam, transNo);
      return recv_plantFlower();
    }

    public void send_plantFlower(int uid, List<Map<String,String>> plantParam, String transNo) throws org.apache.thrift.TException
    {
      plantFlower_args args = new plantFlower_args();
      args.setUid(uid);
      args.setPlantParam(plantParam);
      args.setTransNo(transNo);
      sendBase("plantFlower", args);
    }

    public com.xmniao.thrift.busine.common.ThriftResult recv_plantFlower() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      plantFlower_result result = new plantFlower_result();
      receiveBase(result, "plantFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "plantFlower failed: unknown result");
    }

    public com.xmniao.thrift.busine.common.ResponsePageList fertilization(int uid, List<Map<String,String>> fertilizeParam, String transNo) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_fertilization(uid, fertilizeParam, transNo);
      return recv_fertilization();
    }

    public void send_fertilization(int uid, List<Map<String,String>> fertilizeParam, String transNo) throws org.apache.thrift.TException
    {
      fertilization_args args = new fertilization_args();
      args.setUid(uid);
      args.setFertilizeParam(fertilizeParam);
      args.setTransNo(transNo);
      sendBase("fertilization", args);
    }

    public com.xmniao.thrift.busine.common.ResponsePageList recv_fertilization() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      fertilization_result result = new fertilization_result();
      receiveBase(result, "fertilization");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fertilization failed: unknown result");
    }

    public com.xmniao.thrift.busine.common.ResponseData convertReward(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_convertReward(params);
      return recv_convertReward();
    }

    public void send_convertReward(Map<String,String> params) throws org.apache.thrift.TException
    {
      convertReward_args args = new convertReward_args();
      args.setParams(params);
      sendBase("convertReward", args);
    }

    public com.xmniao.thrift.busine.common.ResponseData recv_convertReward() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      convertReward_result result = new convertReward_result();
      receiveBase(result, "convertReward");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "convertReward failed: unknown result");
    }

    public com.xmniao.thrift.busine.common.ResponseData receiveDailyEarnings(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_receiveDailyEarnings(params);
      return recv_receiveDailyEarnings();
    }

    public void send_receiveDailyEarnings(Map<String,String> params) throws org.apache.thrift.TException
    {
      receiveDailyEarnings_args args = new receiveDailyEarnings_args();
      args.setParams(params);
      sendBase("receiveDailyEarnings", args);
    }

    public com.xmniao.thrift.busine.common.ResponseData recv_receiveDailyEarnings() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      receiveDailyEarnings_result result = new receiveDailyEarnings_result();
      receiveBase(result, "receiveDailyEarnings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveDailyEarnings failed: unknown result");
    }

    public com.xmniao.thrift.busine.common.ThriftResult filedPlantable(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_filedPlantable(params);
      return recv_filedPlantable();
    }

    public void send_filedPlantable(Map<String,String> params) throws org.apache.thrift.TException
    {
      filedPlantable_args args = new filedPlantable_args();
      args.setParams(params);
      sendBase("filedPlantable", args);
    }

    public com.xmniao.thrift.busine.common.ThriftResult recv_filedPlantable() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      filedPlantable_result result = new filedPlantable_result();
      receiveBase(result, "filedPlantable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "filedPlantable failed: unknown result");
    }

    public com.xmniao.thrift.busine.common.ThriftResult statFlower(Map<String,String> params) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_statFlower(params);
      return recv_statFlower();
    }

    public void send_statFlower(Map<String,String> params) throws org.apache.thrift.TException
    {
      statFlower_args args = new statFlower_args();
      args.setParams(params);
      sendBase("statFlower", args);
    }

    public com.xmniao.thrift.busine.common.ThriftResult recv_statFlower() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      statFlower_result result = new statFlower_result();
      receiveBase(result, "statFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statFlower failed: unknown result");
    }

    public com.xmniao.thrift.busine.common.ThriftResult plantFlowerWithGive(int uid, List<Map<String,String>> plantParam, String transNo) throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      send_plantFlowerWithGive(uid, plantParam, transNo);
      return recv_plantFlowerWithGive();
    }

    public void send_plantFlowerWithGive(int uid, List<Map<String,String>> plantParam, String transNo) throws org.apache.thrift.TException
    {
      plantFlowerWithGive_args args = new plantFlowerWithGive_args();
      args.setUid(uid);
      args.setPlantParam(plantParam);
      args.setTransNo(transNo);
      sendBase("plantFlowerWithGive", args);
    }

    public com.xmniao.thrift.busine.common.ThriftResult recv_plantFlowerWithGive() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException
    {
      plantFlowerWithGive_result result = new plantFlowerWithGive_result();
      receiveBase(result, "plantFlowerWithGive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "plantFlowerWithGive failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void activateManor(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateManor_call method_call = new activateManor_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateManor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      public activateManor_call(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateManor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateManor_args args = new activateManor_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ResponseData getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateManor();
      }
    }

    public void plantFlower(int uid, List<Map<String,String>> plantParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      plantFlower_call method_call = new plantFlower_call(uid, plantParam, transNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class plantFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      private List<Map<String,String>> plantParam;
      private String transNo;
      public plantFlower_call(int uid, List<Map<String,String>> plantParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.plantParam = plantParam;
        this.transNo = transNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("plantFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        plantFlower_args args = new plantFlower_args();
        args.setUid(uid);
        args.setPlantParam(plantParam);
        args.setTransNo(transNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ThriftResult getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_plantFlower();
      }
    }

    public void fertilization(int uid, List<Map<String,String>> fertilizeParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fertilization_call method_call = new fertilization_call(uid, fertilizeParam, transNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fertilization_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      private List<Map<String,String>> fertilizeParam;
      private String transNo;
      public fertilization_call(int uid, List<Map<String,String>> fertilizeParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.fertilizeParam = fertilizeParam;
        this.transNo = transNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fertilization", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fertilization_args args = new fertilization_args();
        args.setUid(uid);
        args.setFertilizeParam(fertilizeParam);
        args.setTransNo(transNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ResponsePageList getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fertilization();
      }
    }

    public void convertReward(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      convertReward_call method_call = new convertReward_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class convertReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      public convertReward_call(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("convertReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        convertReward_args args = new convertReward_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ResponseData getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_convertReward();
      }
    }

    public void receiveDailyEarnings(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveDailyEarnings_call method_call = new receiveDailyEarnings_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveDailyEarnings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      public receiveDailyEarnings_call(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveDailyEarnings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveDailyEarnings_args args = new receiveDailyEarnings_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ResponseData getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveDailyEarnings();
      }
    }

    public void filedPlantable(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      filedPlantable_call method_call = new filedPlantable_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class filedPlantable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      public filedPlantable_call(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("filedPlantable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        filedPlantable_args args = new filedPlantable_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ThriftResult getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_filedPlantable();
      }
    }

    public void statFlower(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statFlower_call method_call = new statFlower_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      public statFlower_call(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statFlower_args args = new statFlower_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ThriftResult getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statFlower();
      }
    }

    public void plantFlowerWithGive(int uid, List<Map<String,String>> plantParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      plantFlowerWithGive_call method_call = new plantFlowerWithGive_call(uid, plantParam, transNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class plantFlowerWithGive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      private List<Map<String,String>> plantParam;
      private String transNo;
      public plantFlowerWithGive_call(int uid, List<Map<String,String>> plantParam, String transNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.plantParam = plantParam;
        this.transNo = transNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("plantFlowerWithGive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        plantFlowerWithGive_args args = new plantFlowerWithGive_args();
        args.setUid(uid);
        args.setPlantParam(plantParam);
        args.setTransNo(transNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xmniao.thrift.busine.common.ThriftResult getResult() throws com.xmniao.thrift.busine.common.FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_plantFlowerWithGive();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("activateManor", new activateManor());
      processMap.put("plantFlower", new plantFlower());
      processMap.put("fertilization", new fertilization());
      processMap.put("convertReward", new convertReward());
      processMap.put("receiveDailyEarnings", new receiveDailyEarnings());
      processMap.put("filedPlantable", new filedPlantable());
      processMap.put("statFlower", new statFlower());
      processMap.put("plantFlowerWithGive", new plantFlowerWithGive());
      return processMap;
    }

    public static class activateManor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateManor_args> {
      public activateManor() {
        super("activateManor");
      }

      public activateManor_args getEmptyArgsInstance() {
        return new activateManor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateManor_result getResult(I iface, activateManor_args args) throws org.apache.thrift.TException {
        activateManor_result result = new activateManor_result();
        try {
          result.success = iface.activateManor(args.params);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class plantFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, plantFlower_args> {
      public plantFlower() {
        super("plantFlower");
      }

      public plantFlower_args getEmptyArgsInstance() {
        return new plantFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public plantFlower_result getResult(I iface, plantFlower_args args) throws org.apache.thrift.TException {
        plantFlower_result result = new plantFlower_result();
        try {
          result.success = iface.plantFlower(args.uid, args.plantParam, args.transNo);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class fertilization<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fertilization_args> {
      public fertilization() {
        super("fertilization");
      }

      public fertilization_args getEmptyArgsInstance() {
        return new fertilization_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fertilization_result getResult(I iface, fertilization_args args) throws org.apache.thrift.TException {
        fertilization_result result = new fertilization_result();
        try {
          result.success = iface.fertilization(args.uid, args.fertilizeParam, args.transNo);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class convertReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, convertReward_args> {
      public convertReward() {
        super("convertReward");
      }

      public convertReward_args getEmptyArgsInstance() {
        return new convertReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public convertReward_result getResult(I iface, convertReward_args args) throws org.apache.thrift.TException {
        convertReward_result result = new convertReward_result();
        try {
          result.success = iface.convertReward(args.params);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class receiveDailyEarnings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveDailyEarnings_args> {
      public receiveDailyEarnings() {
        super("receiveDailyEarnings");
      }

      public receiveDailyEarnings_args getEmptyArgsInstance() {
        return new receiveDailyEarnings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveDailyEarnings_result getResult(I iface, receiveDailyEarnings_args args) throws org.apache.thrift.TException {
        receiveDailyEarnings_result result = new receiveDailyEarnings_result();
        try {
          result.success = iface.receiveDailyEarnings(args.params);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class filedPlantable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, filedPlantable_args> {
      public filedPlantable() {
        super("filedPlantable");
      }

      public filedPlantable_args getEmptyArgsInstance() {
        return new filedPlantable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public filedPlantable_result getResult(I iface, filedPlantable_args args) throws org.apache.thrift.TException {
        filedPlantable_result result = new filedPlantable_result();
        try {
          result.success = iface.filedPlantable(args.params);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class statFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statFlower_args> {
      public statFlower() {
        super("statFlower");
      }

      public statFlower_args getEmptyArgsInstance() {
        return new statFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statFlower_result getResult(I iface, statFlower_args args) throws org.apache.thrift.TException {
        statFlower_result result = new statFlower_result();
        try {
          result.success = iface.statFlower(args.params);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class plantFlowerWithGive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, plantFlowerWithGive_args> {
      public plantFlowerWithGive() {
        super("plantFlowerWithGive");
      }

      public plantFlowerWithGive_args getEmptyArgsInstance() {
        return new plantFlowerWithGive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public plantFlowerWithGive_result getResult(I iface, plantFlowerWithGive_args args) throws org.apache.thrift.TException {
        plantFlowerWithGive_result result = new plantFlowerWithGive_result();
        try {
          result.success = iface.plantFlowerWithGive(args.uid, args.plantParam, args.transNo);
        } catch (com.xmniao.thrift.busine.common.FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("activateManor", new activateManor());
      processMap.put("plantFlower", new plantFlower());
      processMap.put("fertilization", new fertilization());
      processMap.put("convertReward", new convertReward());
      processMap.put("receiveDailyEarnings", new receiveDailyEarnings());
      processMap.put("filedPlantable", new filedPlantable());
      processMap.put("statFlower", new statFlower());
      processMap.put("plantFlowerWithGive", new plantFlowerWithGive());
      return processMap;
    }

    public static class activateManor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateManor_args, com.xmniao.thrift.busine.common.ResponseData> {
      public activateManor() {
        super("activateManor");
      }

      public activateManor_args getEmptyArgsInstance() {
        return new activateManor_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ResponseData o) {
            activateManor_result result = new activateManor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateManor_result result = new activateManor_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateManor_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData> resultHandler) throws TException {
        iface.activateManor(args.params,resultHandler);
      }
    }

    public static class plantFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, plantFlower_args, com.xmniao.thrift.busine.common.ThriftResult> {
      public plantFlower() {
        super("plantFlower");
      }

      public plantFlower_args getEmptyArgsInstance() {
        return new plantFlower_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ThriftResult o) {
            plantFlower_result result = new plantFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            plantFlower_result result = new plantFlower_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, plantFlower_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> resultHandler) throws TException {
        iface.plantFlower(args.uid, args.plantParam, args.transNo,resultHandler);
      }
    }

    public static class fertilization<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fertilization_args, com.xmniao.thrift.busine.common.ResponsePageList> {
      public fertilization() {
        super("fertilization");
      }

      public fertilization_args getEmptyArgsInstance() {
        return new fertilization_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponsePageList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponsePageList>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ResponsePageList o) {
            fertilization_result result = new fertilization_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fertilization_result result = new fertilization_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fertilization_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponsePageList> resultHandler) throws TException {
        iface.fertilization(args.uid, args.fertilizeParam, args.transNo,resultHandler);
      }
    }

    public static class convertReward<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, convertReward_args, com.xmniao.thrift.busine.common.ResponseData> {
      public convertReward() {
        super("convertReward");
      }

      public convertReward_args getEmptyArgsInstance() {
        return new convertReward_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ResponseData o) {
            convertReward_result result = new convertReward_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            convertReward_result result = new convertReward_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, convertReward_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData> resultHandler) throws TException {
        iface.convertReward(args.params,resultHandler);
      }
    }

    public static class receiveDailyEarnings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveDailyEarnings_args, com.xmniao.thrift.busine.common.ResponseData> {
      public receiveDailyEarnings() {
        super("receiveDailyEarnings");
      }

      public receiveDailyEarnings_args getEmptyArgsInstance() {
        return new receiveDailyEarnings_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ResponseData o) {
            receiveDailyEarnings_result result = new receiveDailyEarnings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveDailyEarnings_result result = new receiveDailyEarnings_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveDailyEarnings_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ResponseData> resultHandler) throws TException {
        iface.receiveDailyEarnings(args.params,resultHandler);
      }
    }

    public static class filedPlantable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, filedPlantable_args, com.xmniao.thrift.busine.common.ThriftResult> {
      public filedPlantable() {
        super("filedPlantable");
      }

      public filedPlantable_args getEmptyArgsInstance() {
        return new filedPlantable_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ThriftResult o) {
            filedPlantable_result result = new filedPlantable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            filedPlantable_result result = new filedPlantable_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, filedPlantable_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> resultHandler) throws TException {
        iface.filedPlantable(args.params,resultHandler);
      }
    }

    public static class statFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statFlower_args, com.xmniao.thrift.busine.common.ThriftResult> {
      public statFlower() {
        super("statFlower");
      }

      public statFlower_args getEmptyArgsInstance() {
        return new statFlower_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ThriftResult o) {
            statFlower_result result = new statFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statFlower_result result = new statFlower_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statFlower_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> resultHandler) throws TException {
        iface.statFlower(args.params,resultHandler);
      }
    }

    public static class plantFlowerWithGive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, plantFlowerWithGive_args, com.xmniao.thrift.busine.common.ThriftResult> {
      public plantFlowerWithGive() {
        super("plantFlowerWithGive");
      }

      public plantFlowerWithGive_args getEmptyArgsInstance() {
        return new plantFlowerWithGive_args();
      }

      public AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult>() { 
          public void onComplete(com.xmniao.thrift.busine.common.ThriftResult o) {
            plantFlowerWithGive_result result = new plantFlowerWithGive_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            plantFlowerWithGive_result result = new plantFlowerWithGive_result();
            if (e instanceof com.xmniao.thrift.busine.common.FailureException) {
                        result.qe = (com.xmniao.thrift.busine.common.FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, plantFlowerWithGive_args args, org.apache.thrift.async.AsyncMethodCallback<com.xmniao.thrift.busine.common.ThriftResult> resultHandler) throws TException {
        iface.plantFlowerWithGive(args.uid, args.plantParam, args.transNo,resultHandler);
      }
    }

  }

  public static class activateManor_args implements org.apache.thrift.TBase<activateManor_args, activateManor_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateManor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateManor_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateManor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateManor_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateManor_args.class, metaDataMap);
    }

    public activateManor_args() {
    }

    public activateManor_args(
      Map<String,String> params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateManor_args(activateManor_args other) {
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>(other.params);
        this.params = __this__params;
      }
    }

    public activateManor_args deepCopy() {
      return new activateManor_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public activateManor_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateManor_args)
        return this.equals((activateManor_args)that);
      return false;
    }

    public boolean equals(activateManor_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(activateManor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateManor_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateManor_argsStandardSchemeFactory implements SchemeFactory {
      public activateManor_argsStandardScheme getScheme() {
        return new activateManor_argsStandardScheme();
      }
    }

    private static class activateManor_argsStandardScheme extends StandardScheme<activateManor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateManor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2;
                    String _val3;
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.params.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateManor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter4 : struct.params.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateManor_argsTupleSchemeFactory implements SchemeFactory {
      public activateManor_argsTupleScheme getScheme() {
        return new activateManor_argsTupleScheme();
      }
    }

    private static class activateManor_argsTupleScheme extends TupleScheme<activateManor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateManor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter5 : struct.params.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateManor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8;
              String _val9;
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.params.put(_key8, _val9);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class activateManor_result implements org.apache.thrift.TBase<activateManor_result, activateManor_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateManor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateManor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateManor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateManor_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ResponseData success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateManor_result.class, metaDataMap);
    }

    public activateManor_result() {
    }

    public activateManor_result(
      com.xmniao.thrift.busine.common.ResponseData success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateManor_result(activateManor_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public activateManor_result deepCopy() {
      return new activateManor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ResponseData getSuccess() {
      return this.success;
    }

    public activateManor_result setSuccess(com.xmniao.thrift.busine.common.ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public activateManor_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateManor_result)
        return this.equals((activateManor_result)that);
      return false;
    }

    public boolean equals(activateManor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(activateManor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateManor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateManor_resultStandardSchemeFactory implements SchemeFactory {
      public activateManor_resultStandardScheme getScheme() {
        return new activateManor_resultStandardScheme();
      }
    }

    private static class activateManor_resultStandardScheme extends StandardScheme<activateManor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateManor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateManor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateManor_resultTupleSchemeFactory implements SchemeFactory {
      public activateManor_resultTupleScheme getScheme() {
        return new activateManor_resultTupleScheme();
      }
    }

    private static class activateManor_resultTupleScheme extends TupleScheme<activateManor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateManor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateManor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class plantFlower_args implements org.apache.thrift.TBase<plantFlower_args, plantFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<plantFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plantFlower_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PLANT_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("plantParam", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new plantFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new plantFlower_argsTupleSchemeFactory());
    }

    public int uid; // required
    public List<Map<String,String>> plantParam; // required
    public String transNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PLANT_PARAM((short)2, "plantParam"),
      TRANS_NO((short)3, "transNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PLANT_PARAM
            return PLANT_PARAM;
          case 3: // TRANS_NO
            return TRANS_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLANT_PARAM, new org.apache.thrift.meta_data.FieldMetaData("plantParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plantFlower_args.class, metaDataMap);
    }

    public plantFlower_args() {
    }

    public plantFlower_args(
      int uid,
      List<Map<String,String>> plantParam,
      String transNo)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.plantParam = plantParam;
      this.transNo = transNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public plantFlower_args(plantFlower_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetPlantParam()) {
        List<Map<String,String>> __this__plantParam = new ArrayList<Map<String,String>>(other.plantParam.size());
        for (Map<String,String> other_element : other.plantParam) {
          Map<String,String> __this__plantParam_copy = new HashMap<String,String>(other_element);
          __this__plantParam.add(__this__plantParam_copy);
        }
        this.plantParam = __this__plantParam;
      }
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
    }

    public plantFlower_args deepCopy() {
      return new plantFlower_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.plantParam = null;
      this.transNo = null;
    }

    public int getUid() {
      return this.uid;
    }

    public plantFlower_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getPlantParamSize() {
      return (this.plantParam == null) ? 0 : this.plantParam.size();
    }

    public java.util.Iterator<Map<String,String>> getPlantParamIterator() {
      return (this.plantParam == null) ? null : this.plantParam.iterator();
    }

    public void addToPlantParam(Map<String,String> elem) {
      if (this.plantParam == null) {
        this.plantParam = new ArrayList<Map<String,String>>();
      }
      this.plantParam.add(elem);
    }

    public List<Map<String,String>> getPlantParam() {
      return this.plantParam;
    }

    public plantFlower_args setPlantParam(List<Map<String,String>> plantParam) {
      this.plantParam = plantParam;
      return this;
    }

    public void unsetPlantParam() {
      this.plantParam = null;
    }

    /** Returns true if field plantParam is set (has been assigned a value) and false otherwise */
    public boolean isSetPlantParam() {
      return this.plantParam != null;
    }

    public void setPlantParamIsSet(boolean value) {
      if (!value) {
        this.plantParam = null;
      }
    }

    public String getTransNo() {
      return this.transNo;
    }

    public plantFlower_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      case PLANT_PARAM:
        if (value == null) {
          unsetPlantParam();
        } else {
          setPlantParam((List<Map<String,String>>)value);
        }
        break;

      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      case PLANT_PARAM:
        return getPlantParam();

      case TRANS_NO:
        return getTransNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PLANT_PARAM:
        return isSetPlantParam();
      case TRANS_NO:
        return isSetTransNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof plantFlower_args)
        return this.equals((plantFlower_args)that);
      return false;
    }

    public boolean equals(plantFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_plantParam = true && this.isSetPlantParam();
      boolean that_present_plantParam = true && that.isSetPlantParam();
      if (this_present_plantParam || that_present_plantParam) {
        if (!(this_present_plantParam && that_present_plantParam))
          return false;
        if (!this.plantParam.equals(that.plantParam))
          return false;
      }

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(plantFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlantParam()).compareTo(other.isSetPlantParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlantParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plantParam, other.plantParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("plantFlower_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("plantParam:");
      if (this.plantParam == null) {
        sb.append("null");
      } else {
        sb.append(this.plantParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class plantFlower_argsStandardSchemeFactory implements SchemeFactory {
      public plantFlower_argsStandardScheme getScheme() {
        return new plantFlower_argsStandardScheme();
      }
    }

    private static class plantFlower_argsStandardScheme extends StandardScheme<plantFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, plantFlower_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLANT_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.plantParam = new ArrayList<Map<String,String>>(_list10.size);
                  for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                  {
                    Map<String,String> _elem12;
                    {
                      org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                      _elem12 = new HashMap<String,String>(2*_map13.size);
                      for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                      {
                        String _key15;
                        String _val16;
                        _key15 = iprot.readString();
                        _val16 = iprot.readString();
                        _elem12.put(_key15, _val16);
                      }
                      iprot.readMapEnd();
                    }
                    struct.plantParam.add(_elem12);
                  }
                  iprot.readListEnd();
                }
                struct.setPlantParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, plantFlower_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        if (struct.plantParam != null) {
          oprot.writeFieldBegin(PLANT_PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.plantParam.size()));
            for (Map<String,String> _iter17 : struct.plantParam)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter17.size()));
                for (Map.Entry<String, String> _iter18 : _iter17.entrySet())
                {
                  oprot.writeString(_iter18.getKey());
                  oprot.writeString(_iter18.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class plantFlower_argsTupleSchemeFactory implements SchemeFactory {
      public plantFlower_argsTupleScheme getScheme() {
        return new plantFlower_argsTupleScheme();
      }
    }

    private static class plantFlower_argsTupleScheme extends TupleScheme<plantFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, plantFlower_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetPlantParam()) {
          optionals.set(1);
        }
        if (struct.isSetTransNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
        if (struct.isSetPlantParam()) {
          {
            oprot.writeI32(struct.plantParam.size());
            for (Map<String,String> _iter19 : struct.plantParam)
            {
              {
                oprot.writeI32(_iter19.size());
                for (Map.Entry<String, String> _iter20 : _iter19.entrySet())
                {
                  oprot.writeString(_iter20.getKey());
                  oprot.writeString(_iter20.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, plantFlower_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.plantParam = new ArrayList<Map<String,String>>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Map<String,String> _elem23;
              {
                org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem23 = new HashMap<String,String>(2*_map24.size);
                for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                {
                  String _key26;
                  String _val27;
                  _key26 = iprot.readString();
                  _val27 = iprot.readString();
                  _elem23.put(_key26, _val27);
                }
              }
              struct.plantParam.add(_elem23);
            }
          }
          struct.setPlantParamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
      }
    }

  }

  public static class plantFlower_result implements org.apache.thrift.TBase<plantFlower_result, plantFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<plantFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plantFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new plantFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new plantFlower_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ThriftResult success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ThriftResult.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plantFlower_result.class, metaDataMap);
    }

    public plantFlower_result() {
    }

    public plantFlower_result(
      com.xmniao.thrift.busine.common.ThriftResult success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public plantFlower_result(plantFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ThriftResult(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public plantFlower_result deepCopy() {
      return new plantFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ThriftResult getSuccess() {
      return this.success;
    }

    public plantFlower_result setSuccess(com.xmniao.thrift.busine.common.ThriftResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public plantFlower_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ThriftResult)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof plantFlower_result)
        return this.equals((plantFlower_result)that);
      return false;
    }

    public boolean equals(plantFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(plantFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("plantFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class plantFlower_resultStandardSchemeFactory implements SchemeFactory {
      public plantFlower_resultStandardScheme getScheme() {
        return new plantFlower_resultStandardScheme();
      }
    }

    private static class plantFlower_resultStandardScheme extends StandardScheme<plantFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, plantFlower_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, plantFlower_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class plantFlower_resultTupleSchemeFactory implements SchemeFactory {
      public plantFlower_resultTupleScheme getScheme() {
        return new plantFlower_resultTupleScheme();
      }
    }

    private static class plantFlower_resultTupleScheme extends TupleScheme<plantFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, plantFlower_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, plantFlower_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class fertilization_args implements org.apache.thrift.TBase<fertilization_args, fertilization_args._Fields>, java.io.Serializable, Cloneable, Comparable<fertilization_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fertilization_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FERTILIZE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("fertilizeParam", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fertilization_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fertilization_argsTupleSchemeFactory());
    }

    public int uid; // required
    public List<Map<String,String>> fertilizeParam; // required
    public String transNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      FERTILIZE_PARAM((short)2, "fertilizeParam"),
      TRANS_NO((short)3, "transNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // FERTILIZE_PARAM
            return FERTILIZE_PARAM;
          case 3: // TRANS_NO
            return TRANS_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FERTILIZE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("fertilizeParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fertilization_args.class, metaDataMap);
    }

    public fertilization_args() {
    }

    public fertilization_args(
      int uid,
      List<Map<String,String>> fertilizeParam,
      String transNo)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.fertilizeParam = fertilizeParam;
      this.transNo = transNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fertilization_args(fertilization_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetFertilizeParam()) {
        List<Map<String,String>> __this__fertilizeParam = new ArrayList<Map<String,String>>(other.fertilizeParam.size());
        for (Map<String,String> other_element : other.fertilizeParam) {
          Map<String,String> __this__fertilizeParam_copy = new HashMap<String,String>(other_element);
          __this__fertilizeParam.add(__this__fertilizeParam_copy);
        }
        this.fertilizeParam = __this__fertilizeParam;
      }
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
    }

    public fertilization_args deepCopy() {
      return new fertilization_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.fertilizeParam = null;
      this.transNo = null;
    }

    public int getUid() {
      return this.uid;
    }

    public fertilization_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getFertilizeParamSize() {
      return (this.fertilizeParam == null) ? 0 : this.fertilizeParam.size();
    }

    public java.util.Iterator<Map<String,String>> getFertilizeParamIterator() {
      return (this.fertilizeParam == null) ? null : this.fertilizeParam.iterator();
    }

    public void addToFertilizeParam(Map<String,String> elem) {
      if (this.fertilizeParam == null) {
        this.fertilizeParam = new ArrayList<Map<String,String>>();
      }
      this.fertilizeParam.add(elem);
    }

    public List<Map<String,String>> getFertilizeParam() {
      return this.fertilizeParam;
    }

    public fertilization_args setFertilizeParam(List<Map<String,String>> fertilizeParam) {
      this.fertilizeParam = fertilizeParam;
      return this;
    }

    public void unsetFertilizeParam() {
      this.fertilizeParam = null;
    }

    /** Returns true if field fertilizeParam is set (has been assigned a value) and false otherwise */
    public boolean isSetFertilizeParam() {
      return this.fertilizeParam != null;
    }

    public void setFertilizeParamIsSet(boolean value) {
      if (!value) {
        this.fertilizeParam = null;
      }
    }

    public String getTransNo() {
      return this.transNo;
    }

    public fertilization_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      case FERTILIZE_PARAM:
        if (value == null) {
          unsetFertilizeParam();
        } else {
          setFertilizeParam((List<Map<String,String>>)value);
        }
        break;

      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      case FERTILIZE_PARAM:
        return getFertilizeParam();

      case TRANS_NO:
        return getTransNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case FERTILIZE_PARAM:
        return isSetFertilizeParam();
      case TRANS_NO:
        return isSetTransNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fertilization_args)
        return this.equals((fertilization_args)that);
      return false;
    }

    public boolean equals(fertilization_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_fertilizeParam = true && this.isSetFertilizeParam();
      boolean that_present_fertilizeParam = true && that.isSetFertilizeParam();
      if (this_present_fertilizeParam || that_present_fertilizeParam) {
        if (!(this_present_fertilizeParam && that_present_fertilizeParam))
          return false;
        if (!this.fertilizeParam.equals(that.fertilizeParam))
          return false;
      }

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(fertilization_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFertilizeParam()).compareTo(other.isSetFertilizeParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFertilizeParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fertilizeParam, other.fertilizeParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fertilization_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fertilizeParam:");
      if (this.fertilizeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.fertilizeParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fertilization_argsStandardSchemeFactory implements SchemeFactory {
      public fertilization_argsStandardScheme getScheme() {
        return new fertilization_argsStandardScheme();
      }
    }

    private static class fertilization_argsStandardScheme extends StandardScheme<fertilization_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fertilization_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FERTILIZE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.fertilizeParam = new ArrayList<Map<String,String>>(_list28.size);
                  for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                  {
                    Map<String,String> _elem30;
                    {
                      org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                      _elem30 = new HashMap<String,String>(2*_map31.size);
                      for (int _i32 = 0; _i32 < _map31.size; ++_i32)
                      {
                        String _key33;
                        String _val34;
                        _key33 = iprot.readString();
                        _val34 = iprot.readString();
                        _elem30.put(_key33, _val34);
                      }
                      iprot.readMapEnd();
                    }
                    struct.fertilizeParam.add(_elem30);
                  }
                  iprot.readListEnd();
                }
                struct.setFertilizeParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fertilization_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        if (struct.fertilizeParam != null) {
          oprot.writeFieldBegin(FERTILIZE_PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.fertilizeParam.size()));
            for (Map<String,String> _iter35 : struct.fertilizeParam)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter35.size()));
                for (Map.Entry<String, String> _iter36 : _iter35.entrySet())
                {
                  oprot.writeString(_iter36.getKey());
                  oprot.writeString(_iter36.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fertilization_argsTupleSchemeFactory implements SchemeFactory {
      public fertilization_argsTupleScheme getScheme() {
        return new fertilization_argsTupleScheme();
      }
    }

    private static class fertilization_argsTupleScheme extends TupleScheme<fertilization_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fertilization_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetFertilizeParam()) {
          optionals.set(1);
        }
        if (struct.isSetTransNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
        if (struct.isSetFertilizeParam()) {
          {
            oprot.writeI32(struct.fertilizeParam.size());
            for (Map<String,String> _iter37 : struct.fertilizeParam)
            {
              {
                oprot.writeI32(_iter37.size());
                for (Map.Entry<String, String> _iter38 : _iter37.entrySet())
                {
                  oprot.writeString(_iter38.getKey());
                  oprot.writeString(_iter38.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fertilization_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.fertilizeParam = new ArrayList<Map<String,String>>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              Map<String,String> _elem41;
              {
                org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem41 = new HashMap<String,String>(2*_map42.size);
                for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                {
                  String _key44;
                  String _val45;
                  _key44 = iprot.readString();
                  _val45 = iprot.readString();
                  _elem41.put(_key44, _val45);
                }
              }
              struct.fertilizeParam.add(_elem41);
            }
          }
          struct.setFertilizeParamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
      }
    }

  }

  public static class fertilization_result implements org.apache.thrift.TBase<fertilization_result, fertilization_result._Fields>, java.io.Serializable, Cloneable, Comparable<fertilization_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fertilization_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fertilization_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fertilization_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ResponsePageList success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ResponsePageList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fertilization_result.class, metaDataMap);
    }

    public fertilization_result() {
    }

    public fertilization_result(
      com.xmniao.thrift.busine.common.ResponsePageList success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fertilization_result(fertilization_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ResponsePageList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public fertilization_result deepCopy() {
      return new fertilization_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ResponsePageList getSuccess() {
      return this.success;
    }

    public fertilization_result setSuccess(com.xmniao.thrift.busine.common.ResponsePageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public fertilization_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ResponsePageList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fertilization_result)
        return this.equals((fertilization_result)that);
      return false;
    }

    public boolean equals(fertilization_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(fertilization_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fertilization_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fertilization_resultStandardSchemeFactory implements SchemeFactory {
      public fertilization_resultStandardScheme getScheme() {
        return new fertilization_resultStandardScheme();
      }
    }

    private static class fertilization_resultStandardScheme extends StandardScheme<fertilization_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fertilization_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ResponsePageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fertilization_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fertilization_resultTupleSchemeFactory implements SchemeFactory {
      public fertilization_resultTupleScheme getScheme() {
        return new fertilization_resultTupleScheme();
      }
    }

    private static class fertilization_resultTupleScheme extends TupleScheme<fertilization_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fertilization_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fertilization_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ResponsePageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class convertReward_args implements org.apache.thrift.TBase<convertReward_args, convertReward_args._Fields>, java.io.Serializable, Cloneable, Comparable<convertReward_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertReward_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new convertReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new convertReward_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertReward_args.class, metaDataMap);
    }

    public convertReward_args() {
    }

    public convertReward_args(
      Map<String,String> params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertReward_args(convertReward_args other) {
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>(other.params);
        this.params = __this__params;
      }
    }

    public convertReward_args deepCopy() {
      return new convertReward_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public convertReward_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof convertReward_args)
        return this.equals((convertReward_args)that);
      return false;
    }

    public boolean equals(convertReward_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(convertReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("convertReward_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertReward_argsStandardSchemeFactory implements SchemeFactory {
      public convertReward_argsStandardScheme getScheme() {
        return new convertReward_argsStandardScheme();
      }
    }

    private static class convertReward_argsStandardScheme extends StandardScheme<convertReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map46.size);
                  for (int _i47 = 0; _i47 < _map46.size; ++_i47)
                  {
                    String _key48;
                    String _val49;
                    _key48 = iprot.readString();
                    _val49 = iprot.readString();
                    struct.params.put(_key48, _val49);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter50 : struct.params.entrySet())
            {
              oprot.writeString(_iter50.getKey());
              oprot.writeString(_iter50.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertReward_argsTupleSchemeFactory implements SchemeFactory {
      public convertReward_argsTupleScheme getScheme() {
        return new convertReward_argsTupleScheme();
      }
    }

    private static class convertReward_argsTupleScheme extends TupleScheme<convertReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter51 : struct.params.entrySet())
            {
              oprot.writeString(_iter51.getKey());
              oprot.writeString(_iter51.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map52 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map52.size);
            for (int _i53 = 0; _i53 < _map52.size; ++_i53)
            {
              String _key54;
              String _val55;
              _key54 = iprot.readString();
              _val55 = iprot.readString();
              struct.params.put(_key54, _val55);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class convertReward_result implements org.apache.thrift.TBase<convertReward_result, convertReward_result._Fields>, java.io.Serializable, Cloneable, Comparable<convertReward_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertReward_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new convertReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new convertReward_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ResponseData success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertReward_result.class, metaDataMap);
    }

    public convertReward_result() {
    }

    public convertReward_result(
      com.xmniao.thrift.busine.common.ResponseData success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertReward_result(convertReward_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public convertReward_result deepCopy() {
      return new convertReward_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ResponseData getSuccess() {
      return this.success;
    }

    public convertReward_result setSuccess(com.xmniao.thrift.busine.common.ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public convertReward_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof convertReward_result)
        return this.equals((convertReward_result)that);
      return false;
    }

    public boolean equals(convertReward_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(convertReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("convertReward_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertReward_resultStandardSchemeFactory implements SchemeFactory {
      public convertReward_resultStandardScheme getScheme() {
        return new convertReward_resultStandardScheme();
      }
    }

    private static class convertReward_resultStandardScheme extends StandardScheme<convertReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertReward_resultTupleSchemeFactory implements SchemeFactory {
      public convertReward_resultTupleScheme getScheme() {
        return new convertReward_resultTupleScheme();
      }
    }

    private static class convertReward_resultTupleScheme extends TupleScheme<convertReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class receiveDailyEarnings_args implements org.apache.thrift.TBase<receiveDailyEarnings_args, receiveDailyEarnings_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveDailyEarnings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveDailyEarnings_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveDailyEarnings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveDailyEarnings_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveDailyEarnings_args.class, metaDataMap);
    }

    public receiveDailyEarnings_args() {
    }

    public receiveDailyEarnings_args(
      Map<String,String> params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveDailyEarnings_args(receiveDailyEarnings_args other) {
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>(other.params);
        this.params = __this__params;
      }
    }

    public receiveDailyEarnings_args deepCopy() {
      return new receiveDailyEarnings_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public receiveDailyEarnings_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveDailyEarnings_args)
        return this.equals((receiveDailyEarnings_args)that);
      return false;
    }

    public boolean equals(receiveDailyEarnings_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveDailyEarnings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveDailyEarnings_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveDailyEarnings_argsStandardSchemeFactory implements SchemeFactory {
      public receiveDailyEarnings_argsStandardScheme getScheme() {
        return new receiveDailyEarnings_argsStandardScheme();
      }
    }

    private static class receiveDailyEarnings_argsStandardScheme extends StandardScheme<receiveDailyEarnings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveDailyEarnings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map56.size);
                  for (int _i57 = 0; _i57 < _map56.size; ++_i57)
                  {
                    String _key58;
                    String _val59;
                    _key58 = iprot.readString();
                    _val59 = iprot.readString();
                    struct.params.put(_key58, _val59);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveDailyEarnings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter60 : struct.params.entrySet())
            {
              oprot.writeString(_iter60.getKey());
              oprot.writeString(_iter60.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveDailyEarnings_argsTupleSchemeFactory implements SchemeFactory {
      public receiveDailyEarnings_argsTupleScheme getScheme() {
        return new receiveDailyEarnings_argsTupleScheme();
      }
    }

    private static class receiveDailyEarnings_argsTupleScheme extends TupleScheme<receiveDailyEarnings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveDailyEarnings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter61 : struct.params.entrySet())
            {
              oprot.writeString(_iter61.getKey());
              oprot.writeString(_iter61.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveDailyEarnings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map62 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map62.size);
            for (int _i63 = 0; _i63 < _map62.size; ++_i63)
            {
              String _key64;
              String _val65;
              _key64 = iprot.readString();
              _val65 = iprot.readString();
              struct.params.put(_key64, _val65);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class receiveDailyEarnings_result implements org.apache.thrift.TBase<receiveDailyEarnings_result, receiveDailyEarnings_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveDailyEarnings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveDailyEarnings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveDailyEarnings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveDailyEarnings_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ResponseData success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveDailyEarnings_result.class, metaDataMap);
    }

    public receiveDailyEarnings_result() {
    }

    public receiveDailyEarnings_result(
      com.xmniao.thrift.busine.common.ResponseData success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveDailyEarnings_result(receiveDailyEarnings_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public receiveDailyEarnings_result deepCopy() {
      return new receiveDailyEarnings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ResponseData getSuccess() {
      return this.success;
    }

    public receiveDailyEarnings_result setSuccess(com.xmniao.thrift.busine.common.ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public receiveDailyEarnings_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveDailyEarnings_result)
        return this.equals((receiveDailyEarnings_result)that);
      return false;
    }

    public boolean equals(receiveDailyEarnings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveDailyEarnings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveDailyEarnings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveDailyEarnings_resultStandardSchemeFactory implements SchemeFactory {
      public receiveDailyEarnings_resultStandardScheme getScheme() {
        return new receiveDailyEarnings_resultStandardScheme();
      }
    }

    private static class receiveDailyEarnings_resultStandardScheme extends StandardScheme<receiveDailyEarnings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveDailyEarnings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveDailyEarnings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveDailyEarnings_resultTupleSchemeFactory implements SchemeFactory {
      public receiveDailyEarnings_resultTupleScheme getScheme() {
        return new receiveDailyEarnings_resultTupleScheme();
      }
    }

    private static class receiveDailyEarnings_resultTupleScheme extends TupleScheme<receiveDailyEarnings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveDailyEarnings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveDailyEarnings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class filedPlantable_args implements org.apache.thrift.TBase<filedPlantable_args, filedPlantable_args._Fields>, java.io.Serializable, Cloneable, Comparable<filedPlantable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filedPlantable_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new filedPlantable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new filedPlantable_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filedPlantable_args.class, metaDataMap);
    }

    public filedPlantable_args() {
    }

    public filedPlantable_args(
      Map<String,String> params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filedPlantable_args(filedPlantable_args other) {
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>(other.params);
        this.params = __this__params;
      }
    }

    public filedPlantable_args deepCopy() {
      return new filedPlantable_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public filedPlantable_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof filedPlantable_args)
        return this.equals((filedPlantable_args)that);
      return false;
    }

    public boolean equals(filedPlantable_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(filedPlantable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("filedPlantable_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filedPlantable_argsStandardSchemeFactory implements SchemeFactory {
      public filedPlantable_argsStandardScheme getScheme() {
        return new filedPlantable_argsStandardScheme();
      }
    }

    private static class filedPlantable_argsStandardScheme extends StandardScheme<filedPlantable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filedPlantable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map66.size);
                  for (int _i67 = 0; _i67 < _map66.size; ++_i67)
                  {
                    String _key68;
                    String _val69;
                    _key68 = iprot.readString();
                    _val69 = iprot.readString();
                    struct.params.put(_key68, _val69);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filedPlantable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter70 : struct.params.entrySet())
            {
              oprot.writeString(_iter70.getKey());
              oprot.writeString(_iter70.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filedPlantable_argsTupleSchemeFactory implements SchemeFactory {
      public filedPlantable_argsTupleScheme getScheme() {
        return new filedPlantable_argsTupleScheme();
      }
    }

    private static class filedPlantable_argsTupleScheme extends TupleScheme<filedPlantable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filedPlantable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter71 : struct.params.entrySet())
            {
              oprot.writeString(_iter71.getKey());
              oprot.writeString(_iter71.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filedPlantable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map72 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map72.size);
            for (int _i73 = 0; _i73 < _map72.size; ++_i73)
            {
              String _key74;
              String _val75;
              _key74 = iprot.readString();
              _val75 = iprot.readString();
              struct.params.put(_key74, _val75);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class filedPlantable_result implements org.apache.thrift.TBase<filedPlantable_result, filedPlantable_result._Fields>, java.io.Serializable, Cloneable, Comparable<filedPlantable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filedPlantable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new filedPlantable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new filedPlantable_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ThriftResult success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ThriftResult.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filedPlantable_result.class, metaDataMap);
    }

    public filedPlantable_result() {
    }

    public filedPlantable_result(
      com.xmniao.thrift.busine.common.ThriftResult success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filedPlantable_result(filedPlantable_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ThriftResult(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public filedPlantable_result deepCopy() {
      return new filedPlantable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ThriftResult getSuccess() {
      return this.success;
    }

    public filedPlantable_result setSuccess(com.xmniao.thrift.busine.common.ThriftResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public filedPlantable_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ThriftResult)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof filedPlantable_result)
        return this.equals((filedPlantable_result)that);
      return false;
    }

    public boolean equals(filedPlantable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(filedPlantable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("filedPlantable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filedPlantable_resultStandardSchemeFactory implements SchemeFactory {
      public filedPlantable_resultStandardScheme getScheme() {
        return new filedPlantable_resultStandardScheme();
      }
    }

    private static class filedPlantable_resultStandardScheme extends StandardScheme<filedPlantable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filedPlantable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filedPlantable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filedPlantable_resultTupleSchemeFactory implements SchemeFactory {
      public filedPlantable_resultTupleScheme getScheme() {
        return new filedPlantable_resultTupleScheme();
      }
    }

    private static class filedPlantable_resultTupleScheme extends TupleScheme<filedPlantable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filedPlantable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filedPlantable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class statFlower_args implements org.apache.thrift.TBase<statFlower_args, statFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<statFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statFlower_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statFlower_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statFlower_args.class, metaDataMap);
    }

    public statFlower_args() {
    }

    public statFlower_args(
      Map<String,String> params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statFlower_args(statFlower_args other) {
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>(other.params);
        this.params = __this__params;
      }
    }

    public statFlower_args deepCopy() {
      return new statFlower_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public statFlower_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statFlower_args)
        return this.equals((statFlower_args)that);
      return false;
    }

    public boolean equals(statFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statFlower_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statFlower_argsStandardSchemeFactory implements SchemeFactory {
      public statFlower_argsStandardScheme getScheme() {
        return new statFlower_argsStandardScheme();
      }
    }

    private static class statFlower_argsStandardScheme extends StandardScheme<statFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statFlower_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map76.size);
                  for (int _i77 = 0; _i77 < _map76.size; ++_i77)
                  {
                    String _key78;
                    String _val79;
                    _key78 = iprot.readString();
                    _val79 = iprot.readString();
                    struct.params.put(_key78, _val79);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statFlower_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter80 : struct.params.entrySet())
            {
              oprot.writeString(_iter80.getKey());
              oprot.writeString(_iter80.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statFlower_argsTupleSchemeFactory implements SchemeFactory {
      public statFlower_argsTupleScheme getScheme() {
        return new statFlower_argsTupleScheme();
      }
    }

    private static class statFlower_argsTupleScheme extends TupleScheme<statFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statFlower_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter81 : struct.params.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              oprot.writeString(_iter81.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statFlower_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map82.size);
            for (int _i83 = 0; _i83 < _map82.size; ++_i83)
            {
              String _key84;
              String _val85;
              _key84 = iprot.readString();
              _val85 = iprot.readString();
              struct.params.put(_key84, _val85);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class statFlower_result implements org.apache.thrift.TBase<statFlower_result, statFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<statFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statFlower_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ThriftResult success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ThriftResult.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statFlower_result.class, metaDataMap);
    }

    public statFlower_result() {
    }

    public statFlower_result(
      com.xmniao.thrift.busine.common.ThriftResult success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statFlower_result(statFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ThriftResult(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public statFlower_result deepCopy() {
      return new statFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ThriftResult getSuccess() {
      return this.success;
    }

    public statFlower_result setSuccess(com.xmniao.thrift.busine.common.ThriftResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public statFlower_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ThriftResult)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statFlower_result)
        return this.equals((statFlower_result)that);
      return false;
    }

    public boolean equals(statFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statFlower_resultStandardSchemeFactory implements SchemeFactory {
      public statFlower_resultStandardScheme getScheme() {
        return new statFlower_resultStandardScheme();
      }
    }

    private static class statFlower_resultStandardScheme extends StandardScheme<statFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statFlower_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statFlower_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statFlower_resultTupleSchemeFactory implements SchemeFactory {
      public statFlower_resultTupleScheme getScheme() {
        return new statFlower_resultTupleScheme();
      }
    }

    private static class statFlower_resultTupleScheme extends TupleScheme<statFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statFlower_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statFlower_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class plantFlowerWithGive_args implements org.apache.thrift.TBase<plantFlowerWithGive_args, plantFlowerWithGive_args._Fields>, java.io.Serializable, Cloneable, Comparable<plantFlowerWithGive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plantFlowerWithGive_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PLANT_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("plantParam", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new plantFlowerWithGive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new plantFlowerWithGive_argsTupleSchemeFactory());
    }

    public int uid; // required
    public List<Map<String,String>> plantParam; // required
    public String transNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PLANT_PARAM((short)2, "plantParam"),
      TRANS_NO((short)3, "transNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PLANT_PARAM
            return PLANT_PARAM;
          case 3: // TRANS_NO
            return TRANS_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLANT_PARAM, new org.apache.thrift.meta_data.FieldMetaData("plantParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plantFlowerWithGive_args.class, metaDataMap);
    }

    public plantFlowerWithGive_args() {
    }

    public plantFlowerWithGive_args(
      int uid,
      List<Map<String,String>> plantParam,
      String transNo)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.plantParam = plantParam;
      this.transNo = transNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public plantFlowerWithGive_args(plantFlowerWithGive_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetPlantParam()) {
        List<Map<String,String>> __this__plantParam = new ArrayList<Map<String,String>>(other.plantParam.size());
        for (Map<String,String> other_element : other.plantParam) {
          Map<String,String> __this__plantParam_copy = new HashMap<String,String>(other_element);
          __this__plantParam.add(__this__plantParam_copy);
        }
        this.plantParam = __this__plantParam;
      }
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
    }

    public plantFlowerWithGive_args deepCopy() {
      return new plantFlowerWithGive_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.plantParam = null;
      this.transNo = null;
    }

    public int getUid() {
      return this.uid;
    }

    public plantFlowerWithGive_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getPlantParamSize() {
      return (this.plantParam == null) ? 0 : this.plantParam.size();
    }

    public java.util.Iterator<Map<String,String>> getPlantParamIterator() {
      return (this.plantParam == null) ? null : this.plantParam.iterator();
    }

    public void addToPlantParam(Map<String,String> elem) {
      if (this.plantParam == null) {
        this.plantParam = new ArrayList<Map<String,String>>();
      }
      this.plantParam.add(elem);
    }

    public List<Map<String,String>> getPlantParam() {
      return this.plantParam;
    }

    public plantFlowerWithGive_args setPlantParam(List<Map<String,String>> plantParam) {
      this.plantParam = plantParam;
      return this;
    }

    public void unsetPlantParam() {
      this.plantParam = null;
    }

    /** Returns true if field plantParam is set (has been assigned a value) and false otherwise */
    public boolean isSetPlantParam() {
      return this.plantParam != null;
    }

    public void setPlantParamIsSet(boolean value) {
      if (!value) {
        this.plantParam = null;
      }
    }

    public String getTransNo() {
      return this.transNo;
    }

    public plantFlowerWithGive_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      case PLANT_PARAM:
        if (value == null) {
          unsetPlantParam();
        } else {
          setPlantParam((List<Map<String,String>>)value);
        }
        break;

      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      case PLANT_PARAM:
        return getPlantParam();

      case TRANS_NO:
        return getTransNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PLANT_PARAM:
        return isSetPlantParam();
      case TRANS_NO:
        return isSetTransNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof plantFlowerWithGive_args)
        return this.equals((plantFlowerWithGive_args)that);
      return false;
    }

    public boolean equals(plantFlowerWithGive_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_plantParam = true && this.isSetPlantParam();
      boolean that_present_plantParam = true && that.isSetPlantParam();
      if (this_present_plantParam || that_present_plantParam) {
        if (!(this_present_plantParam && that_present_plantParam))
          return false;
        if (!this.plantParam.equals(that.plantParam))
          return false;
      }

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(plantFlowerWithGive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlantParam()).compareTo(other.isSetPlantParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlantParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plantParam, other.plantParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("plantFlowerWithGive_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("plantParam:");
      if (this.plantParam == null) {
        sb.append("null");
      } else {
        sb.append(this.plantParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class plantFlowerWithGive_argsStandardSchemeFactory implements SchemeFactory {
      public plantFlowerWithGive_argsStandardScheme getScheme() {
        return new plantFlowerWithGive_argsStandardScheme();
      }
    }

    private static class plantFlowerWithGive_argsStandardScheme extends StandardScheme<plantFlowerWithGive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, plantFlowerWithGive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLANT_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                  struct.plantParam = new ArrayList<Map<String,String>>(_list86.size);
                  for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                  {
                    Map<String,String> _elem88;
                    {
                      org.apache.thrift.protocol.TMap _map89 = iprot.readMapBegin();
                      _elem88 = new HashMap<String,String>(2*_map89.size);
                      for (int _i90 = 0; _i90 < _map89.size; ++_i90)
                      {
                        String _key91;
                        String _val92;
                        _key91 = iprot.readString();
                        _val92 = iprot.readString();
                        _elem88.put(_key91, _val92);
                      }
                      iprot.readMapEnd();
                    }
                    struct.plantParam.add(_elem88);
                  }
                  iprot.readListEnd();
                }
                struct.setPlantParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, plantFlowerWithGive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        if (struct.plantParam != null) {
          oprot.writeFieldBegin(PLANT_PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.plantParam.size()));
            for (Map<String,String> _iter93 : struct.plantParam)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter93.size()));
                for (Map.Entry<String, String> _iter94 : _iter93.entrySet())
                {
                  oprot.writeString(_iter94.getKey());
                  oprot.writeString(_iter94.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class plantFlowerWithGive_argsTupleSchemeFactory implements SchemeFactory {
      public plantFlowerWithGive_argsTupleScheme getScheme() {
        return new plantFlowerWithGive_argsTupleScheme();
      }
    }

    private static class plantFlowerWithGive_argsTupleScheme extends TupleScheme<plantFlowerWithGive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, plantFlowerWithGive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetPlantParam()) {
          optionals.set(1);
        }
        if (struct.isSetTransNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
        if (struct.isSetPlantParam()) {
          {
            oprot.writeI32(struct.plantParam.size());
            for (Map<String,String> _iter95 : struct.plantParam)
            {
              {
                oprot.writeI32(_iter95.size());
                for (Map.Entry<String, String> _iter96 : _iter95.entrySet())
                {
                  oprot.writeString(_iter96.getKey());
                  oprot.writeString(_iter96.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, plantFlowerWithGive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.plantParam = new ArrayList<Map<String,String>>(_list97.size);
            for (int _i98 = 0; _i98 < _list97.size; ++_i98)
            {
              Map<String,String> _elem99;
              {
                org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem99 = new HashMap<String,String>(2*_map100.size);
                for (int _i101 = 0; _i101 < _map100.size; ++_i101)
                {
                  String _key102;
                  String _val103;
                  _key102 = iprot.readString();
                  _val103 = iprot.readString();
                  _elem99.put(_key102, _val103);
                }
              }
              struct.plantParam.add(_elem99);
            }
          }
          struct.setPlantParamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
      }
    }

  }

  public static class plantFlowerWithGive_result implements org.apache.thrift.TBase<plantFlowerWithGive_result, plantFlowerWithGive_result._Fields>, java.io.Serializable, Cloneable, Comparable<plantFlowerWithGive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plantFlowerWithGive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new plantFlowerWithGive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new plantFlowerWithGive_resultTupleSchemeFactory());
    }

    public com.xmniao.thrift.busine.common.ThriftResult success; // required
    public com.xmniao.thrift.busine.common.FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xmniao.thrift.busine.common.ThriftResult.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plantFlowerWithGive_result.class, metaDataMap);
    }

    public plantFlowerWithGive_result() {
    }

    public plantFlowerWithGive_result(
      com.xmniao.thrift.busine.common.ThriftResult success,
      com.xmniao.thrift.busine.common.FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public plantFlowerWithGive_result(plantFlowerWithGive_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xmniao.thrift.busine.common.ThriftResult(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new com.xmniao.thrift.busine.common.FailureException(other.qe);
      }
    }

    public plantFlowerWithGive_result deepCopy() {
      return new plantFlowerWithGive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public com.xmniao.thrift.busine.common.ThriftResult getSuccess() {
      return this.success;
    }

    public plantFlowerWithGive_result setSuccess(com.xmniao.thrift.busine.common.ThriftResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xmniao.thrift.busine.common.FailureException getQe() {
      return this.qe;
    }

    public plantFlowerWithGive_result setQe(com.xmniao.thrift.busine.common.FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xmniao.thrift.busine.common.ThriftResult)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((com.xmniao.thrift.busine.common.FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof plantFlowerWithGive_result)
        return this.equals((plantFlowerWithGive_result)that);
      return false;
    }

    public boolean equals(plantFlowerWithGive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(plantFlowerWithGive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("plantFlowerWithGive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class plantFlowerWithGive_resultStandardSchemeFactory implements SchemeFactory {
      public plantFlowerWithGive_resultStandardScheme getScheme() {
        return new plantFlowerWithGive_resultStandardScheme();
      }
    }

    private static class plantFlowerWithGive_resultStandardScheme extends StandardScheme<plantFlowerWithGive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, plantFlowerWithGive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new com.xmniao.thrift.busine.common.FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, plantFlowerWithGive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class plantFlowerWithGive_resultTupleSchemeFactory implements SchemeFactory {
      public plantFlowerWithGive_resultTupleScheme getScheme() {
        return new plantFlowerWithGive_resultTupleScheme();
      }
    }

    private static class plantFlowerWithGive_resultTupleScheme extends TupleScheme<plantFlowerWithGive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, plantFlowerWithGive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, plantFlowerWithGive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xmniao.thrift.busine.common.ThriftResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new com.xmniao.thrift.busine.common.FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
