package com.xmniao.thrift.busine.common; /**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class ResponsePageList implements org.apache.thrift.TBase<ResponsePageList, ResponsePageList._Fields>, java.io.Serializable, Cloneable, Comparable<ResponsePageList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponsePageList");

  private static final org.apache.thrift.protocol.TField DATA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("dataInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pageList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponsePageListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponsePageListTupleSchemeFactory());
  }

  public ResponseData dataInfo; // required
  public List<Map<String,String>> pageList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_INFO((short)1, "dataInfo"),
    PAGE_LIST((short)3, "pageList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_INFO
          return DATA_INFO;
        case 3: // PAGE_LIST
          return PAGE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_INFO, new org.apache.thrift.meta_data.FieldMetaData("dataInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
    tmpMap.put(_Fields.PAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("pageList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponsePageList.class, metaDataMap);
  }

  public ResponsePageList() {
  }

  public ResponsePageList(
    ResponseData dataInfo,
    List<Map<String,String>> pageList)
  {
    this();
    this.dataInfo = dataInfo;
    this.pageList = pageList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponsePageList(ResponsePageList other) {
    if (other.isSetDataInfo()) {
      this.dataInfo = new ResponseData(other.dataInfo);
    }
    if (other.isSetPageList()) {
      List<Map<String,String>> __this__pageList = new ArrayList<Map<String,String>>(other.pageList.size());
      for (Map<String,String> other_element : other.pageList) {
        Map<String,String> __this__pageList_copy = new HashMap<String,String>(other_element);
        __this__pageList.add(__this__pageList_copy);
      }
      this.pageList = __this__pageList;
    }
  }

  public ResponsePageList deepCopy() {
    return new ResponsePageList(this);
  }

  @Override
  public void clear() {
    this.dataInfo = null;
    this.pageList = null;
  }

  public ResponseData getDataInfo() {
    return this.dataInfo;
  }

  public ResponsePageList setDataInfo(ResponseData dataInfo) {
    this.dataInfo = dataInfo;
    return this;
  }

  public void unsetDataInfo() {
    this.dataInfo = null;
  }

  /** Returns true if field dataInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDataInfo() {
    return this.dataInfo != null;
  }

  public void setDataInfoIsSet(boolean value) {
    if (!value) {
      this.dataInfo = null;
    }
  }

  public int getPageListSize() {
    return (this.pageList == null) ? 0 : this.pageList.size();
  }

  public java.util.Iterator<Map<String,String>> getPageListIterator() {
    return (this.pageList == null) ? null : this.pageList.iterator();
  }

  public void addToPageList(Map<String,String> elem) {
    if (this.pageList == null) {
      this.pageList = new ArrayList<Map<String,String>>();
    }
    this.pageList.add(elem);
  }

  public List<Map<String,String>> getPageList() {
    return this.pageList;
  }

  public ResponsePageList setPageList(List<Map<String,String>> pageList) {
    this.pageList = pageList;
    return this;
  }

  public void unsetPageList() {
    this.pageList = null;
  }

  /** Returns true if field pageList is set (has been assigned a value) and false otherwise */
  public boolean isSetPageList() {
    return this.pageList != null;
  }

  public void setPageListIsSet(boolean value) {
    if (!value) {
      this.pageList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_INFO:
      if (value == null) {
        unsetDataInfo();
      } else {
        setDataInfo((ResponseData)value);
      }
      break;

    case PAGE_LIST:
      if (value == null) {
        unsetPageList();
      } else {
        setPageList((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_INFO:
      return getDataInfo();

    case PAGE_LIST:
      return getPageList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_INFO:
      return isSetDataInfo();
    case PAGE_LIST:
      return isSetPageList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponsePageList)
      return this.equals((ResponsePageList)that);
    return false;
  }

  public boolean equals(ResponsePageList that) {
    if (that == null)
      return false;

    boolean this_present_dataInfo = true && this.isSetDataInfo();
    boolean that_present_dataInfo = true && that.isSetDataInfo();
    if (this_present_dataInfo || that_present_dataInfo) {
      if (!(this_present_dataInfo && that_present_dataInfo))
        return false;
      if (!this.dataInfo.equals(that.dataInfo))
        return false;
    }

    boolean this_present_pageList = true && this.isSetPageList();
    boolean that_present_pageList = true && that.isSetPageList();
    if (this_present_pageList || that_present_pageList) {
      if (!(this_present_pageList && that_present_pageList))
        return false;
      if (!this.pageList.equals(that.pageList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ResponsePageList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDataInfo()).compareTo(other.isSetDataInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataInfo, other.dataInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageList()).compareTo(other.isSetPageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageList, other.pageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponsePageList(");
    boolean first = true;

    sb.append("dataInfo:");
    if (this.dataInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.dataInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageList:");
    if (this.pageList == null) {
      sb.append("null");
    } else {
      sb.append(this.pageList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (dataInfo != null) {
      dataInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponsePageListStandardSchemeFactory implements SchemeFactory {
    public ResponsePageListStandardScheme getScheme() {
      return new ResponsePageListStandardScheme();
    }
  }

  private static class ResponsePageListStandardScheme extends StandardScheme<ResponsePageList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponsePageList struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dataInfo = new ResponseData();
              struct.dataInfo.read(iprot);
              struct.setDataInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.pageList = new ArrayList<Map<String,String>>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  Map<String,String> _elem12;
                  {
                    org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                    _elem12 = new HashMap<String,String>(2*_map13.size);
                    for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                    {
                      String _key15;
                      String _val16;
                      _key15 = iprot.readString();
                      _val16 = iprot.readString();
                      _elem12.put(_key15, _val16);
                    }
                    iprot.readMapEnd();
                  }
                  struct.pageList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setPageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponsePageList struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dataInfo != null) {
        oprot.writeFieldBegin(DATA_INFO_FIELD_DESC);
        struct.dataInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pageList != null) {
        oprot.writeFieldBegin(PAGE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.pageList.size()));
          for (Map<String,String> _iter17 : struct.pageList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter17.size()));
              for (Map.Entry<String, String> _iter18 : _iter17.entrySet())
              {
                oprot.writeString(_iter18.getKey());
                oprot.writeString(_iter18.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponsePageListTupleSchemeFactory implements SchemeFactory {
    public ResponsePageListTupleScheme getScheme() {
      return new ResponsePageListTupleScheme();
    }
  }

  private static class ResponsePageListTupleScheme extends TupleScheme<ResponsePageList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponsePageList struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDataInfo()) {
        optionals.set(0);
      }
      if (struct.isSetPageList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDataInfo()) {
        struct.dataInfo.write(oprot);
      }
      if (struct.isSetPageList()) {
        {
          oprot.writeI32(struct.pageList.size());
          for (Map<String,String> _iter19 : struct.pageList)
          {
            {
              oprot.writeI32(_iter19.size());
              for (Map.Entry<String, String> _iter20 : _iter19.entrySet())
              {
                oprot.writeString(_iter20.getKey());
                oprot.writeString(_iter20.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponsePageList struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.dataInfo = new ResponseData();
        struct.dataInfo.read(iprot);
        struct.setDataInfoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.pageList = new ArrayList<Map<String,String>>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            Map<String,String> _elem23;
            {
              org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem23 = new HashMap<String,String>(2*_map24.size);
              for (int _i25 = 0; _i25 < _map24.size; ++_i25)
              {
                String _key26;
                String _val27;
                _key26 = iprot.readString();
                _val27 = iprot.readString();
                _elem23.put(_key26, _val27);
              }
            }
            struct.pageList.add(_elem23);
          }
        }
        struct.setPageListIsSet(true);
      }
    }
  }

}

