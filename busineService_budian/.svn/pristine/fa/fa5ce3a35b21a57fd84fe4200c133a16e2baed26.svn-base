package com.xmniao.thrift.pay;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SynthesizeService {

  public interface Iface {

    public Map<String,String> getWalletBalance(String uId, int typeId) throws FailureException, org.apache.thrift.TException;

    public int updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money) throws FailureException, org.apache.thrift.TException;

    public Map<String,String> getMentionLedger(int typeId, String uId) throws FailureException, org.apache.thrift.TException;

    public int checkWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException;

    public int updateWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException;

    public int addWallet(String uId, String userType, String password, String sellerName) throws FailureException, org.apache.thrift.TException;

    public int AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname) throws FailureException, org.apache.thrift.TException;

    public List<Map<String,String>> getMentionAccount(String uId, int userType) throws FailureException, org.apache.thrift.TException;

    public int updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province) throws FailureException, org.apache.thrift.TException;

    public int delMentionAccount(String id) throws FailureException, org.apache.thrift.TException;

    public int checkWallet(String uId, String userType) throws FailureException, org.apache.thrift.TException;

    public int updateWalletBalance(List<Map<String,String>> walletMap) throws FailureException, org.apache.thrift.TException;

    public int updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException;

    public int updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException;

    public int getUpdatePwdNum(String uId, String userType) throws FailureException, org.apache.thrift.TException;

    public WalletRecord getWalletRecord(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    public double getMentionBalance(String uId, String userType) throws FailureException, org.apache.thrift.TException;

    public Map<String,String> updateBalance(List<Map<String,String>> paramMap) throws FailureException, org.apache.thrift.TException;

    public Wallet getWalletList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException;

    public double getWRAmount(String uId, String userType, int rType) throws FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getWalletBalance(String uId, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionLedger(int typeId, String uId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addWallet(String uId, String userType, String password, String sellerName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionAccount(String uId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delMentionAccount(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkWallet(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWalletBalance(List<Map<String,String>> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUpdatePwdNum(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletRecord(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMentionBalance(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBalance(List<Map<String,String>> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWRAmount(String uId, String userType, int rType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,String> getWalletBalance(String uId, int typeId) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletBalance(uId, typeId);
      return recv_getWalletBalance();
    }

    public void send_getWalletBalance(String uId, int typeId) throws org.apache.thrift.TException
    {
      getWalletBalance_args args = new getWalletBalance_args();
      args.setUId(uId);
      args.setTypeId(typeId);
      sendBase("getWalletBalance", args);
    }

    public Map<String,String> recv_getWalletBalance() throws FailureException, org.apache.thrift.TException
    {
      getWalletBalance_result result = new getWalletBalance_result();
      receiveBase(result, "getWalletBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletBalance failed: unknown result");
    }

    public int updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money) throws FailureException, org.apache.thrift.TException
    {
      send_updateMentionLedger(typeId, typeValue, uId, amount, money);
      return recv_updateMentionLedger();
    }

    public void send_updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money) throws org.apache.thrift.TException
    {
      updateMentionLedger_args args = new updateMentionLedger_args();
      args.setTypeId(typeId);
      args.setTypeValue(typeValue);
      args.setUId(uId);
      args.setAmount(amount);
      args.setMoney(money);
      sendBase("updateMentionLedger", args);
    }

    public int recv_updateMentionLedger() throws FailureException, org.apache.thrift.TException
    {
      updateMentionLedger_result result = new updateMentionLedger_result();
      receiveBase(result, "updateMentionLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMentionLedger failed: unknown result");
    }

    public Map<String,String> getMentionLedger(int typeId, String uId) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionLedger(typeId, uId);
      return recv_getMentionLedger();
    }

    public void send_getMentionLedger(int typeId, String uId) throws org.apache.thrift.TException
    {
      getMentionLedger_args args = new getMentionLedger_args();
      args.setTypeId(typeId);
      args.setUId(uId);
      sendBase("getMentionLedger", args);
    }

    public Map<String,String> recv_getMentionLedger() throws FailureException, org.apache.thrift.TException
    {
      getMentionLedger_result result = new getMentionLedger_result();
      receiveBase(result, "getMentionLedger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionLedger failed: unknown result");
    }

    public int checkWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException
    {
      send_checkWalletPwd(uId, pwd, typeId);
      return recv_checkWalletPwd();
    }

    public void send_checkWalletPwd(String uId, String pwd, int typeId) throws org.apache.thrift.TException
    {
      checkWalletPwd_args args = new checkWalletPwd_args();
      args.setUId(uId);
      args.setPwd(pwd);
      args.setTypeId(typeId);
      sendBase("checkWalletPwd", args);
    }

    public int recv_checkWalletPwd() throws FailureException, org.apache.thrift.TException
    {
      checkWalletPwd_result result = new checkWalletPwd_result();
      receiveBase(result, "checkWalletPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ge != null) {
        throw result.ge;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkWalletPwd failed: unknown result");
    }

    public int updateWalletPwd(String uId, String pwd, int typeId) throws FailureException, org.apache.thrift.TException
    {
      send_updateWalletPwd(uId, pwd, typeId);
      return recv_updateWalletPwd();
    }

    public void send_updateWalletPwd(String uId, String pwd, int typeId) throws org.apache.thrift.TException
    {
      updateWalletPwd_args args = new updateWalletPwd_args();
      args.setUId(uId);
      args.setPwd(pwd);
      args.setTypeId(typeId);
      sendBase("updateWalletPwd", args);
    }

    public int recv_updateWalletPwd() throws FailureException, org.apache.thrift.TException
    {
      updateWalletPwd_result result = new updateWalletPwd_result();
      receiveBase(result, "updateWalletPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ge != null) {
        throw result.ge;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWalletPwd failed: unknown result");
    }

    public int addWallet(String uId, String userType, String password, String sellerName) throws FailureException, org.apache.thrift.TException
    {
      send_addWallet(uId, userType, password, sellerName);
      return recv_addWallet();
    }

    public void send_addWallet(String uId, String userType, String password, String sellerName) throws org.apache.thrift.TException
    {
      addWallet_args args = new addWallet_args();
      args.setUId(uId);
      args.setUserType(userType);
      args.setPassword(password);
      args.setSellerName(sellerName);
      sendBase("addWallet", args);
    }

    public int recv_addWallet() throws FailureException, org.apache.thrift.TException
    {
      addWallet_result result = new addWallet_result();
      receiveBase(result, "addWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addWallet failed: unknown result");
    }

    public int AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname) throws FailureException, org.apache.thrift.TException
    {
      send_AddMentionAccount(isuse, uId, type, account, cardType, userName, bankName, mobileId, userType, ispublic, idtype, identity, bank, abbrev, province, cityname);
      return recv_AddMentionAccount();
    }

    public void send_AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname) throws org.apache.thrift.TException
    {
      AddMentionAccount_args args = new AddMentionAccount_args();
      args.setIsuse(isuse);
      args.setUId(uId);
      args.setType(type);
      args.setAccount(account);
      args.setCardType(cardType);
      args.setUserName(userName);
      args.setBankName(bankName);
      args.setMobileId(mobileId);
      args.setUserType(userType);
      args.setIspublic(ispublic);
      args.setIdtype(idtype);
      args.setIdentity(identity);
      args.setBank(bank);
      args.setAbbrev(abbrev);
      args.setProvince(province);
      args.setCityname(cityname);
      sendBase("AddMentionAccount", args);
    }

    public int recv_AddMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      AddMentionAccount_result result = new AddMentionAccount_result();
      receiveBase(result, "AddMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddMentionAccount failed: unknown result");
    }

    public List<Map<String,String>> getMentionAccount(String uId, int userType) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionAccount(uId, userType);
      return recv_getMentionAccount();
    }

    public void send_getMentionAccount(String uId, int userType) throws org.apache.thrift.TException
    {
      getMentionAccount_args args = new getMentionAccount_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("getMentionAccount", args);
    }

    public List<Map<String,String>> recv_getMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      getMentionAccount_result result = new getMentionAccount_result();
      receiveBase(result, "getMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionAccount failed: unknown result");
    }

    public int updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province) throws FailureException, org.apache.thrift.TException
    {
      send_updateMentionAccount(id, type, account, cardType, userName, bankName, mobileId, isuse, cityname, ispublic, idtype, identity, bank, abbrev, province);
      return recv_updateMentionAccount();
    }

    public void send_updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province) throws org.apache.thrift.TException
    {
      updateMentionAccount_args args = new updateMentionAccount_args();
      args.setId(id);
      args.setType(type);
      args.setAccount(account);
      args.setCardType(cardType);
      args.setUserName(userName);
      args.setBankName(bankName);
      args.setMobileId(mobileId);
      args.setIsuse(isuse);
      args.setCityname(cityname);
      args.setIspublic(ispublic);
      args.setIdtype(idtype);
      args.setIdentity(identity);
      args.setBank(bank);
      args.setAbbrev(abbrev);
      args.setProvince(province);
      sendBase("updateMentionAccount", args);
    }

    public int recv_updateMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      updateMentionAccount_result result = new updateMentionAccount_result();
      receiveBase(result, "updateMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMentionAccount failed: unknown result");
    }

    public int delMentionAccount(String id) throws FailureException, org.apache.thrift.TException
    {
      send_delMentionAccount(id);
      return recv_delMentionAccount();
    }

    public void send_delMentionAccount(String id) throws org.apache.thrift.TException
    {
      delMentionAccount_args args = new delMentionAccount_args();
      args.setId(id);
      sendBase("delMentionAccount", args);
    }

    public int recv_delMentionAccount() throws FailureException, org.apache.thrift.TException
    {
      delMentionAccount_result result = new delMentionAccount_result();
      receiveBase(result, "delMentionAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delMentionAccount failed: unknown result");
    }

    public int checkWallet(String uId, String userType) throws FailureException, org.apache.thrift.TException
    {
      send_checkWallet(uId, userType);
      return recv_checkWallet();
    }

    public void send_checkWallet(String uId, String userType) throws org.apache.thrift.TException
    {
      checkWallet_args args = new checkWallet_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("checkWallet", args);
    }

    public int recv_checkWallet() throws FailureException, org.apache.thrift.TException
    {
      checkWallet_result result = new checkWallet_result();
      receiveBase(result, "checkWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkWallet failed: unknown result");
    }

    public int updateWalletBalance(List<Map<String,String>> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateWalletBalance(walletMap);
      return recv_updateWalletBalance();
    }

    public void send_updateWalletBalance(List<Map<String,String>> walletMap) throws org.apache.thrift.TException
    {
      updateWalletBalance_args args = new updateWalletBalance_args();
      args.setWalletMap(walletMap);
      sendBase("updateWalletBalance", args);
    }

    public int recv_updateWalletBalance() throws FailureException, org.apache.thrift.TException
    {
      updateWalletBalance_result result = new updateWalletBalance_result();
      receiveBase(result, "updateWalletBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWalletBalance failed: unknown result");
    }

    public int updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateWithdrawalsRecord(amountMapList, orderMap);
      return recv_updateWithdrawalsRecord();
    }

    public void send_updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws org.apache.thrift.TException
    {
      updateWithdrawalsRecord_args args = new updateWithdrawalsRecord_args();
      args.setAmountMapList(amountMapList);
      args.setOrderMap(orderMap);
      sendBase("updateWithdrawalsRecord", args);
    }

    public int recv_updateWithdrawalsRecord() throws FailureException, org.apache.thrift.TException
    {
      updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
      receiveBase(result, "updateWithdrawalsRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWithdrawalsRecord failed: unknown result");
    }

    public int updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateJointWithdrawalsRecord(amountMapList, orderMap);
      return recv_updateJointWithdrawalsRecord();
    }

    public void send_updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws org.apache.thrift.TException
    {
      updateJointWithdrawalsRecord_args args = new updateJointWithdrawalsRecord_args();
      args.setAmountMapList(amountMapList);
      args.setOrderMap(orderMap);
      sendBase("updateJointWithdrawalsRecord", args);
    }

    public int recv_updateJointWithdrawalsRecord() throws FailureException, org.apache.thrift.TException
    {
      updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
      receiveBase(result, "updateJointWithdrawalsRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateJointWithdrawalsRecord failed: unknown result");
    }

    public int getUpdatePwdNum(String uId, String userType) throws FailureException, org.apache.thrift.TException
    {
      send_getUpdatePwdNum(uId, userType);
      return recv_getUpdatePwdNum();
    }

    public void send_getUpdatePwdNum(String uId, String userType) throws org.apache.thrift.TException
    {
      getUpdatePwdNum_args args = new getUpdatePwdNum_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("getUpdatePwdNum", args);
    }

    public int recv_getUpdatePwdNum() throws FailureException, org.apache.thrift.TException
    {
      getUpdatePwdNum_result result = new getUpdatePwdNum_result();
      receiveBase(result, "getUpdatePwdNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUpdatePwdNum failed: unknown result");
    }

    public WalletRecord getWalletRecord(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletRecord(paramMap);
      return recv_getWalletRecord();
    }

    public void send_getWalletRecord(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getWalletRecord_args args = new getWalletRecord_args();
      args.setParamMap(paramMap);
      sendBase("getWalletRecord", args);
    }

    public WalletRecord recv_getWalletRecord() throws FailureException, org.apache.thrift.TException
    {
      getWalletRecord_result result = new getWalletRecord_result();
      receiveBase(result, "getWalletRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletRecord failed: unknown result");
    }

    public double getMentionBalance(String uId, String userType) throws FailureException, org.apache.thrift.TException
    {
      send_getMentionBalance(uId, userType);
      return recv_getMentionBalance();
    }

    public void send_getMentionBalance(String uId, String userType) throws org.apache.thrift.TException
    {
      getMentionBalance_args args = new getMentionBalance_args();
      args.setUId(uId);
      args.setUserType(userType);
      sendBase("getMentionBalance", args);
    }

    public double recv_getMentionBalance() throws FailureException, org.apache.thrift.TException
    {
      getMentionBalance_result result = new getMentionBalance_result();
      receiveBase(result, "getMentionBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentionBalance failed: unknown result");
    }

    public Map<String,String> updateBalance(List<Map<String,String>> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateBalance(paramMap);
      return recv_updateBalance();
    }

    public void send_updateBalance(List<Map<String,String>> paramMap) throws org.apache.thrift.TException
    {
      updateBalance_args args = new updateBalance_args();
      args.setParamMap(paramMap);
      sendBase("updateBalance", args);
    }

    public Map<String,String> recv_updateBalance() throws FailureException, org.apache.thrift.TException
    {
      updateBalance_result result = new updateBalance_result();
      receiveBase(result, "updateBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBalance failed: unknown result");
    }

    public Wallet getWalletList(Map<String,String> paramMap) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletList(paramMap);
      return recv_getWalletList();
    }

    public void send_getWalletList(Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getWalletList_args args = new getWalletList_args();
      args.setParamMap(paramMap);
      sendBase("getWalletList", args);
    }

    public Wallet recv_getWalletList() throws FailureException, org.apache.thrift.TException
    {
      getWalletList_result result = new getWalletList_result();
      receiveBase(result, "getWalletList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletList failed: unknown result");
    }

    public double getWRAmount(String uId, String userType, int rType) throws FailureException, org.apache.thrift.TException
    {
      send_getWRAmount(uId, userType, rType);
      return recv_getWRAmount();
    }

    public void send_getWRAmount(String uId, String userType, int rType) throws org.apache.thrift.TException
    {
      getWRAmount_args args = new getWRAmount_args();
      args.setUId(uId);
      args.setUserType(userType);
      args.setRType(rType);
      sendBase("getWRAmount", args);
    }

    public double recv_getWRAmount() throws FailureException, org.apache.thrift.TException
    {
      getWRAmount_result result = new getWRAmount_result();
      receiveBase(result, "getWRAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWRAmount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getWalletBalance(String uId, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletBalance_call method_call = new getWalletBalance_call(uId, typeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private int typeId;
      public getWalletBalance_call(String uId, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.typeId = typeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletBalance_args args = new getWalletBalance_args();
        args.setUId(uId);
        args.setTypeId(typeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletBalance();
      }
    }

    public void updateMentionLedger(int typeId, int typeValue, String uId, String amount, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMentionLedger_call method_call = new updateMentionLedger_call(typeId, typeValue, uId, amount, money, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMentionLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int typeId;
      private int typeValue;
      private String uId;
      private String amount;
      private String money;
      public updateMentionLedger_call(int typeId, int typeValue, String uId, String amount, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.typeId = typeId;
        this.typeValue = typeValue;
        this.uId = uId;
        this.amount = amount;
        this.money = money;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMentionLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMentionLedger_args args = new updateMentionLedger_args();
        args.setTypeId(typeId);
        args.setTypeValue(typeValue);
        args.setUId(uId);
        args.setAmount(amount);
        args.setMoney(money);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMentionLedger();
      }
    }

    public void getMentionLedger(int typeId, String uId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionLedger_call method_call = new getMentionLedger_call(typeId, uId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionLedger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int typeId;
      private String uId;
      public getMentionLedger_call(int typeId, String uId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.typeId = typeId;
        this.uId = uId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionLedger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionLedger_args args = new getMentionLedger_args();
        args.setTypeId(typeId);
        args.setUId(uId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionLedger();
      }
    }

    public void checkWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkWalletPwd_call method_call = new checkWalletPwd_call(uId, pwd, typeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkWalletPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String pwd;
      private int typeId;
      public checkWalletPwd_call(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.pwd = pwd;
        this.typeId = typeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkWalletPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkWalletPwd_args args = new checkWalletPwd_args();
        args.setUId(uId);
        args.setPwd(pwd);
        args.setTypeId(typeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkWalletPwd();
      }
    }

    public void updateWalletPwd(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWalletPwd_call method_call = new updateWalletPwd_call(uId, pwd, typeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWalletPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String pwd;
      private int typeId;
      public updateWalletPwd_call(String uId, String pwd, int typeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.pwd = pwd;
        this.typeId = typeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWalletPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWalletPwd_args args = new updateWalletPwd_args();
        args.setUId(uId);
        args.setPwd(pwd);
        args.setTypeId(typeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWalletPwd();
      }
    }

    public void addWallet(String uId, String userType, String password, String sellerName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addWallet_call method_call = new addWallet_call(uId, userType, password, sellerName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      private String password;
      private String sellerName;
      public addWallet_call(String uId, String userType, String password, String sellerName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
        this.password = password;
        this.sellerName = sellerName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addWallet_args args = new addWallet_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.setPassword(password);
        args.setSellerName(sellerName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addWallet();
      }
    }

    public void AddMentionAccount(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddMentionAccount_call method_call = new AddMentionAccount_call(isuse, uId, type, account, cardType, userName, bankName, mobileId, userType, ispublic, idtype, identity, bank, abbrev, province, cityname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int isuse;
      private String uId;
      private int type;
      private String account;
      private int cardType;
      private String userName;
      private String bankName;
      private String mobileId;
      private int userType;
      private int ispublic;
      private int idtype;
      private String identity;
      private String bank;
      private String abbrev;
      private String province;
      private String cityname;
      public AddMentionAccount_call(int isuse, String uId, int type, String account, int cardType, String userName, String bankName, String mobileId, int userType, int ispublic, int idtype, String identity, String bank, String abbrev, String province, String cityname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.isuse = isuse;
        this.uId = uId;
        this.type = type;
        this.account = account;
        this.cardType = cardType;
        this.userName = userName;
        this.bankName = bankName;
        this.mobileId = mobileId;
        this.userType = userType;
        this.ispublic = ispublic;
        this.idtype = idtype;
        this.identity = identity;
        this.bank = bank;
        this.abbrev = abbrev;
        this.province = province;
        this.cityname = cityname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddMentionAccount_args args = new AddMentionAccount_args();
        args.setIsuse(isuse);
        args.setUId(uId);
        args.setType(type);
        args.setAccount(account);
        args.setCardType(cardType);
        args.setUserName(userName);
        args.setBankName(bankName);
        args.setMobileId(mobileId);
        args.setUserType(userType);
        args.setIspublic(ispublic);
        args.setIdtype(idtype);
        args.setIdentity(identity);
        args.setBank(bank);
        args.setAbbrev(abbrev);
        args.setProvince(province);
        args.setCityname(cityname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddMentionAccount();
      }
    }

    public void getMentionAccount(String uId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionAccount_call method_call = new getMentionAccount_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private int userType;
      public getMentionAccount_call(String uId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionAccount_args args = new getMentionAccount_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionAccount();
      }
    }

    public void updateMentionAccount(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMentionAccount_call method_call = new updateMentionAccount_call(id, type, account, cardType, userName, bankName, mobileId, isuse, cityname, ispublic, idtype, identity, bank, abbrev, province, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private int type;
      private String account;
      private int cardType;
      private String userName;
      private String bankName;
      private String mobileId;
      private int isuse;
      private String cityname;
      private int ispublic;
      private int idtype;
      private String identity;
      private String bank;
      private String abbrev;
      private String province;
      public updateMentionAccount_call(String id, int type, String account, int cardType, String userName, String bankName, String mobileId, int isuse, String cityname, int ispublic, int idtype, String identity, String bank, String abbrev, String province, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.type = type;
        this.account = account;
        this.cardType = cardType;
        this.userName = userName;
        this.bankName = bankName;
        this.mobileId = mobileId;
        this.isuse = isuse;
        this.cityname = cityname;
        this.ispublic = ispublic;
        this.idtype = idtype;
        this.identity = identity;
        this.bank = bank;
        this.abbrev = abbrev;
        this.province = province;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMentionAccount_args args = new updateMentionAccount_args();
        args.setId(id);
        args.setType(type);
        args.setAccount(account);
        args.setCardType(cardType);
        args.setUserName(userName);
        args.setBankName(bankName);
        args.setMobileId(mobileId);
        args.setIsuse(isuse);
        args.setCityname(cityname);
        args.setIspublic(ispublic);
        args.setIdtype(idtype);
        args.setIdentity(identity);
        args.setBank(bank);
        args.setAbbrev(abbrev);
        args.setProvince(province);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMentionAccount();
      }
    }

    public void delMentionAccount(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delMentionAccount_call method_call = new delMentionAccount_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delMentionAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delMentionAccount_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delMentionAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delMentionAccount_args args = new delMentionAccount_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delMentionAccount();
      }
    }

    public void checkWallet(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkWallet_call method_call = new checkWallet_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      public checkWallet_call(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkWallet_args args = new checkWallet_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkWallet();
      }
    }

    public void updateWalletBalance(List<Map<String,String>> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWalletBalance_call method_call = new updateWalletBalance_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWalletBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> walletMap;
      public updateWalletBalance_call(List<Map<String,String>> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWalletBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWalletBalance_args args = new updateWalletBalance_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWalletBalance();
      }
    }

    public void updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWithdrawalsRecord_call method_call = new updateWithdrawalsRecord_call(amountMapList, orderMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWithdrawalsRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> amountMapList;
      private Map<String,String> orderMap;
      public updateWithdrawalsRecord_call(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amountMapList = amountMapList;
        this.orderMap = orderMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWithdrawalsRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWithdrawalsRecord_args args = new updateWithdrawalsRecord_args();
        args.setAmountMapList(amountMapList);
        args.setOrderMap(orderMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWithdrawalsRecord();
      }
    }

    public void updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateJointWithdrawalsRecord_call method_call = new updateJointWithdrawalsRecord_call(amountMapList, orderMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateJointWithdrawalsRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> amountMapList;
      private Map<String,String> orderMap;
      public updateJointWithdrawalsRecord_call(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amountMapList = amountMapList;
        this.orderMap = orderMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateJointWithdrawalsRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateJointWithdrawalsRecord_args args = new updateJointWithdrawalsRecord_args();
        args.setAmountMapList(amountMapList);
        args.setOrderMap(orderMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateJointWithdrawalsRecord();
      }
    }

    public void getUpdatePwdNum(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUpdatePwdNum_call method_call = new getUpdatePwdNum_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUpdatePwdNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      public getUpdatePwdNum_call(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUpdatePwdNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUpdatePwdNum_args args = new getUpdatePwdNum_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUpdatePwdNum();
      }
    }

    public void getWalletRecord(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletRecord_call method_call = new getWalletRecord_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getWalletRecord_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletRecord_args args = new getWalletRecord_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WalletRecord getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletRecord();
      }
    }

    public void getMentionBalance(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentionBalance_call method_call = new getMentionBalance_call(uId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentionBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      public getMentionBalance_call(String uId, String userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentionBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentionBalance_args args = new getMentionBalance_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentionBalance();
      }
    }

    public void updateBalance(List<Map<String,String>> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBalance_call method_call = new updateBalance_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> paramMap;
      public updateBalance_call(List<Map<String,String>> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBalance_args args = new updateBalance_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBalance();
      }
    }

    public void getWalletList(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletList_call method_call = new getWalletList_call(paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      public getWalletList_call(Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletList_args args = new getWalletList_args();
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Wallet getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletList();
      }
    }

    public void getWRAmount(String uId, String userType, int rType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWRAmount_call method_call = new getWRAmount_call(uId, userType, rType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWRAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uId;
      private String userType;
      private int rType;
      public getWRAmount_call(String uId, String userType, int rType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uId = uId;
        this.userType = userType;
        this.rType = rType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWRAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWRAmount_args args = new getWRAmount_args();
        args.setUId(uId);
        args.setUserType(userType);
        args.setRType(rType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWRAmount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getWalletBalance", new getWalletBalance());
      processMap.put("updateMentionLedger", new updateMentionLedger());
      processMap.put("getMentionLedger", new getMentionLedger());
      processMap.put("checkWalletPwd", new checkWalletPwd());
      processMap.put("updateWalletPwd", new updateWalletPwd());
      processMap.put("addWallet", new addWallet());
      processMap.put("AddMentionAccount", new AddMentionAccount());
      processMap.put("getMentionAccount", new getMentionAccount());
      processMap.put("updateMentionAccount", new updateMentionAccount());
      processMap.put("delMentionAccount", new delMentionAccount());
      processMap.put("checkWallet", new checkWallet());
      processMap.put("updateWalletBalance", new updateWalletBalance());
      processMap.put("updateWithdrawalsRecord", new updateWithdrawalsRecord());
      processMap.put("updateJointWithdrawalsRecord", new updateJointWithdrawalsRecord());
      processMap.put("getUpdatePwdNum", new getUpdatePwdNum());
      processMap.put("getWalletRecord", new getWalletRecord());
      processMap.put("getMentionBalance", new getMentionBalance());
      processMap.put("updateBalance", new updateBalance());
      processMap.put("getWalletList", new getWalletList());
      processMap.put("getWRAmount", new getWRAmount());
      return processMap;
    }

    public static class getWalletBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletBalance_args> {
      public getWalletBalance() {
        super("getWalletBalance");
      }

      public getWalletBalance_args getEmptyArgsInstance() {
        return new getWalletBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletBalance_result getResult(I iface, getWalletBalance_args args) throws org.apache.thrift.TException {
        getWalletBalance_result result = new getWalletBalance_result();
        try {
          result.success = iface.getWalletBalance(args.uId, args.typeId);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateMentionLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMentionLedger_args> {
      public updateMentionLedger() {
        super("updateMentionLedger");
      }

      public updateMentionLedger_args getEmptyArgsInstance() {
        return new updateMentionLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMentionLedger_result getResult(I iface, updateMentionLedger_args args) throws org.apache.thrift.TException {
        updateMentionLedger_result result = new updateMentionLedger_result();
        try {
          result.success = iface.updateMentionLedger(args.typeId, args.typeValue, args.uId, args.amount, args.money);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionLedger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionLedger_args> {
      public getMentionLedger() {
        super("getMentionLedger");
      }

      public getMentionLedger_args getEmptyArgsInstance() {
        return new getMentionLedger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionLedger_result getResult(I iface, getMentionLedger_args args) throws org.apache.thrift.TException {
        getMentionLedger_result result = new getMentionLedger_result();
        try {
          result.success = iface.getMentionLedger(args.typeId, args.uId);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class checkWalletPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkWalletPwd_args> {
      public checkWalletPwd() {
        super("checkWalletPwd");
      }

      public checkWalletPwd_args getEmptyArgsInstance() {
        return new checkWalletPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkWalletPwd_result getResult(I iface, checkWalletPwd_args args) throws org.apache.thrift.TException {
        checkWalletPwd_result result = new checkWalletPwd_result();
        try {
          result.success = iface.checkWalletPwd(args.uId, args.pwd, args.typeId);
          result.setSuccessIsSet(true);
        } catch (FailureException ge) {
          result.ge = ge;
        }
        return result;
      }
    }

    public static class updateWalletPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWalletPwd_args> {
      public updateWalletPwd() {
        super("updateWalletPwd");
      }

      public updateWalletPwd_args getEmptyArgsInstance() {
        return new updateWalletPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWalletPwd_result getResult(I iface, updateWalletPwd_args args) throws org.apache.thrift.TException {
        updateWalletPwd_result result = new updateWalletPwd_result();
        try {
          result.success = iface.updateWalletPwd(args.uId, args.pwd, args.typeId);
          result.setSuccessIsSet(true);
        } catch (FailureException ge) {
          result.ge = ge;
        }
        return result;
      }
    }

    public static class addWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addWallet_args> {
      public addWallet() {
        super("addWallet");
      }

      public addWallet_args getEmptyArgsInstance() {
        return new addWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addWallet_result getResult(I iface, addWallet_args args) throws org.apache.thrift.TException {
        addWallet_result result = new addWallet_result();
        try {
          result.success = iface.addWallet(args.uId, args.userType, args.password, args.sellerName);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class AddMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddMentionAccount_args> {
      public AddMentionAccount() {
        super("AddMentionAccount");
      }

      public AddMentionAccount_args getEmptyArgsInstance() {
        return new AddMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddMentionAccount_result getResult(I iface, AddMentionAccount_args args) throws org.apache.thrift.TException {
        AddMentionAccount_result result = new AddMentionAccount_result();
        try {
          result.success = iface.AddMentionAccount(args.isuse, args.uId, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.userType, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province, args.cityname);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionAccount_args> {
      public getMentionAccount() {
        super("getMentionAccount");
      }

      public getMentionAccount_args getEmptyArgsInstance() {
        return new getMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionAccount_result getResult(I iface, getMentionAccount_args args) throws org.apache.thrift.TException {
        getMentionAccount_result result = new getMentionAccount_result();
        try {
          result.success = iface.getMentionAccount(args.uId, args.userType);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMentionAccount_args> {
      public updateMentionAccount() {
        super("updateMentionAccount");
      }

      public updateMentionAccount_args getEmptyArgsInstance() {
        return new updateMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMentionAccount_result getResult(I iface, updateMentionAccount_args args) throws org.apache.thrift.TException {
        updateMentionAccount_result result = new updateMentionAccount_result();
        try {
          result.success = iface.updateMentionAccount(args.id, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.isuse, args.cityname, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class delMentionAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delMentionAccount_args> {
      public delMentionAccount() {
        super("delMentionAccount");
      }

      public delMentionAccount_args getEmptyArgsInstance() {
        return new delMentionAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delMentionAccount_result getResult(I iface, delMentionAccount_args args) throws org.apache.thrift.TException {
        delMentionAccount_result result = new delMentionAccount_result();
        try {
          result.success = iface.delMentionAccount(args.id);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class checkWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkWallet_args> {
      public checkWallet() {
        super("checkWallet");
      }

      public checkWallet_args getEmptyArgsInstance() {
        return new checkWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkWallet_result getResult(I iface, checkWallet_args args) throws org.apache.thrift.TException {
        checkWallet_result result = new checkWallet_result();
        try {
          result.success = iface.checkWallet(args.uId, args.userType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWalletBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWalletBalance_args> {
      public updateWalletBalance() {
        super("updateWalletBalance");
      }

      public updateWalletBalance_args getEmptyArgsInstance() {
        return new updateWalletBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWalletBalance_result getResult(I iface, updateWalletBalance_args args) throws org.apache.thrift.TException {
        updateWalletBalance_result result = new updateWalletBalance_result();
        try {
          result.success = iface.updateWalletBalance(args.walletMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWithdrawalsRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWithdrawalsRecord_args> {
      public updateWithdrawalsRecord() {
        super("updateWithdrawalsRecord");
      }

      public updateWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWithdrawalsRecord_result getResult(I iface, updateWithdrawalsRecord_args args) throws org.apache.thrift.TException {
        updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
        try {
          result.success = iface.updateWithdrawalsRecord(args.amountMapList, args.orderMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateJointWithdrawalsRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateJointWithdrawalsRecord_args> {
      public updateJointWithdrawalsRecord() {
        super("updateJointWithdrawalsRecord");
      }

      public updateJointWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateJointWithdrawalsRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateJointWithdrawalsRecord_result getResult(I iface, updateJointWithdrawalsRecord_args args) throws org.apache.thrift.TException {
        updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
        try {
          result.success = iface.updateJointWithdrawalsRecord(args.amountMapList, args.orderMap);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getUpdatePwdNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUpdatePwdNum_args> {
      public getUpdatePwdNum() {
        super("getUpdatePwdNum");
      }

      public getUpdatePwdNum_args getEmptyArgsInstance() {
        return new getUpdatePwdNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUpdatePwdNum_result getResult(I iface, getUpdatePwdNum_args args) throws org.apache.thrift.TException {
        getUpdatePwdNum_result result = new getUpdatePwdNum_result();
        try {
          result.success = iface.getUpdatePwdNum(args.uId, args.userType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletRecord_args> {
      public getWalletRecord() {
        super("getWalletRecord");
      }

      public getWalletRecord_args getEmptyArgsInstance() {
        return new getWalletRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletRecord_result getResult(I iface, getWalletRecord_args args) throws org.apache.thrift.TException {
        getWalletRecord_result result = new getWalletRecord_result();
        try {
          result.success = iface.getWalletRecord(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getMentionBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentionBalance_args> {
      public getMentionBalance() {
        super("getMentionBalance");
      }

      public getMentionBalance_args getEmptyArgsInstance() {
        return new getMentionBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentionBalance_result getResult(I iface, getMentionBalance_args args) throws org.apache.thrift.TException {
        getMentionBalance_result result = new getMentionBalance_result();
        try {
          result.success = iface.getMentionBalance(args.uId, args.userType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBalance_args> {
      public updateBalance() {
        super("updateBalance");
      }

      public updateBalance_args getEmptyArgsInstance() {
        return new updateBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBalance_result getResult(I iface, updateBalance_args args) throws org.apache.thrift.TException {
        updateBalance_result result = new updateBalance_result();
        try {
          result.success = iface.updateBalance(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletList_args> {
      public getWalletList() {
        super("getWalletList");
      }

      public getWalletList_args getEmptyArgsInstance() {
        return new getWalletList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletList_result getResult(I iface, getWalletList_args args) throws org.apache.thrift.TException {
        getWalletList_result result = new getWalletList_result();
        try {
          result.success = iface.getWalletList(args.paramMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWRAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWRAmount_args> {
      public getWRAmount() {
        super("getWRAmount");
      }

      public getWRAmount_args getEmptyArgsInstance() {
        return new getWRAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWRAmount_result getResult(I iface, getWRAmount_args args) throws org.apache.thrift.TException {
        getWRAmount_result result = new getWRAmount_result();
        try {
          result.success = iface.getWRAmount(args.uId, args.userType, args.rType);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getWalletBalance", new getWalletBalance());
      processMap.put("updateMentionLedger", new updateMentionLedger());
      processMap.put("getMentionLedger", new getMentionLedger());
      processMap.put("checkWalletPwd", new checkWalletPwd());
      processMap.put("updateWalletPwd", new updateWalletPwd());
      processMap.put("addWallet", new addWallet());
      processMap.put("AddMentionAccount", new AddMentionAccount());
      processMap.put("getMentionAccount", new getMentionAccount());
      processMap.put("updateMentionAccount", new updateMentionAccount());
      processMap.put("delMentionAccount", new delMentionAccount());
      processMap.put("checkWallet", new checkWallet());
      processMap.put("updateWalletBalance", new updateWalletBalance());
      processMap.put("updateWithdrawalsRecord", new updateWithdrawalsRecord());
      processMap.put("updateJointWithdrawalsRecord", new updateJointWithdrawalsRecord());
      processMap.put("getUpdatePwdNum", new getUpdatePwdNum());
      processMap.put("getWalletRecord", new getWalletRecord());
      processMap.put("getMentionBalance", new getMentionBalance());
      processMap.put("updateBalance", new updateBalance());
      processMap.put("getWalletList", new getWalletList());
      processMap.put("getWRAmount", new getWRAmount());
      return processMap;
    }

    public static class getWalletBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletBalance_args, Map<String,String>> {
      public getWalletBalance() {
        super("getWalletBalance");
      }

      public getWalletBalance_args getEmptyArgsInstance() {
        return new getWalletBalance_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getWalletBalance_result result = new getWalletBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletBalance_result result = new getWalletBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getWalletBalance(args.uId, args.typeId,resultHandler);
      }
    }

    public static class updateMentionLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMentionLedger_args, Integer> {
      public updateMentionLedger() {
        super("updateMentionLedger");
      }

      public updateMentionLedger_args getEmptyArgsInstance() {
        return new updateMentionLedger_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateMentionLedger_result result = new updateMentionLedger_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMentionLedger_result result = new updateMentionLedger_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMentionLedger_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateMentionLedger(args.typeId, args.typeValue, args.uId, args.amount, args.money,resultHandler);
      }
    }

    public static class getMentionLedger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionLedger_args, Map<String,String>> {
      public getMentionLedger() {
        super("getMentionLedger");
      }

      public getMentionLedger_args getEmptyArgsInstance() {
        return new getMentionLedger_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getMentionLedger_result result = new getMentionLedger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionLedger_result result = new getMentionLedger_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionLedger_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getMentionLedger(args.typeId, args.uId,resultHandler);
      }
    }

    public static class checkWalletPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkWalletPwd_args, Integer> {
      public checkWalletPwd() {
        super("checkWalletPwd");
      }

      public checkWalletPwd_args getEmptyArgsInstance() {
        return new checkWalletPwd_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkWalletPwd_result result = new checkWalletPwd_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkWalletPwd_result result = new checkWalletPwd_result();
            if (e instanceof FailureException) {
                        result.ge = (FailureException) e;
                        result.setGeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkWalletPwd_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkWalletPwd(args.uId, args.pwd, args.typeId,resultHandler);
      }
    }

    public static class updateWalletPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWalletPwd_args, Integer> {
      public updateWalletPwd() {
        super("updateWalletPwd");
      }

      public updateWalletPwd_args getEmptyArgsInstance() {
        return new updateWalletPwd_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateWalletPwd_result result = new updateWalletPwd_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWalletPwd_result result = new updateWalletPwd_result();
            if (e instanceof FailureException) {
                        result.ge = (FailureException) e;
                        result.setGeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWalletPwd_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateWalletPwd(args.uId, args.pwd, args.typeId,resultHandler);
      }
    }

    public static class addWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addWallet_args, Integer> {
      public addWallet() {
        super("addWallet");
      }

      public addWallet_args getEmptyArgsInstance() {
        return new addWallet_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addWallet_result result = new addWallet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addWallet_result result = new addWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addWallet_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addWallet(args.uId, args.userType, args.password, args.sellerName,resultHandler);
      }
    }

    public static class AddMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddMentionAccount_args, Integer> {
      public AddMentionAccount() {
        super("AddMentionAccount");
      }

      public AddMentionAccount_args getEmptyArgsInstance() {
        return new AddMentionAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            AddMentionAccount_result result = new AddMentionAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AddMentionAccount_result result = new AddMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.AddMentionAccount(args.isuse, args.uId, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.userType, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province, args.cityname,resultHandler);
      }
    }

    public static class getMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionAccount_args, List<Map<String,String>>> {
      public getMentionAccount() {
        super("getMentionAccount");
      }

      public getMentionAccount_args getEmptyArgsInstance() {
        return new getMentionAccount_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getMentionAccount_result result = new getMentionAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionAccount_result result = new getMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getMentionAccount(args.uId, args.userType,resultHandler);
      }
    }

    public static class updateMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMentionAccount_args, Integer> {
      public updateMentionAccount() {
        super("updateMentionAccount");
      }

      public updateMentionAccount_args getEmptyArgsInstance() {
        return new updateMentionAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateMentionAccount_result result = new updateMentionAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMentionAccount_result result = new updateMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateMentionAccount(args.id, args.type, args.account, args.cardType, args.userName, args.bankName, args.mobileId, args.isuse, args.cityname, args.ispublic, args.idtype, args.identity, args.bank, args.abbrev, args.province,resultHandler);
      }
    }

    public static class delMentionAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delMentionAccount_args, Integer> {
      public delMentionAccount() {
        super("delMentionAccount");
      }

      public delMentionAccount_args getEmptyArgsInstance() {
        return new delMentionAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delMentionAccount_result result = new delMentionAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delMentionAccount_result result = new delMentionAccount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delMentionAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delMentionAccount(args.id,resultHandler);
      }
    }

    public static class checkWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkWallet_args, Integer> {
      public checkWallet() {
        super("checkWallet");
      }

      public checkWallet_args getEmptyArgsInstance() {
        return new checkWallet_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkWallet_result result = new checkWallet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkWallet_result result = new checkWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkWallet_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkWallet(args.uId, args.userType,resultHandler);
      }
    }

    public static class updateWalletBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWalletBalance_args, Integer> {
      public updateWalletBalance() {
        super("updateWalletBalance");
      }

      public updateWalletBalance_args getEmptyArgsInstance() {
        return new updateWalletBalance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateWalletBalance_result result = new updateWalletBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWalletBalance_result result = new updateWalletBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWalletBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateWalletBalance(args.walletMap,resultHandler);
      }
    }

    public static class updateWithdrawalsRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWithdrawalsRecord_args, Integer> {
      public updateWithdrawalsRecord() {
        super("updateWithdrawalsRecord");
      }

      public updateWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWithdrawalsRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateWithdrawalsRecord(args.amountMapList, args.orderMap,resultHandler);
      }
    }

    public static class updateJointWithdrawalsRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateJointWithdrawalsRecord_args, Integer> {
      public updateJointWithdrawalsRecord() {
        super("updateJointWithdrawalsRecord");
      }

      public updateJointWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateJointWithdrawalsRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateJointWithdrawalsRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateJointWithdrawalsRecord(args.amountMapList, args.orderMap,resultHandler);
      }
    }

    public static class getUpdatePwdNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUpdatePwdNum_args, Integer> {
      public getUpdatePwdNum() {
        super("getUpdatePwdNum");
      }

      public getUpdatePwdNum_args getEmptyArgsInstance() {
        return new getUpdatePwdNum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getUpdatePwdNum_result result = new getUpdatePwdNum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUpdatePwdNum_result result = new getUpdatePwdNum_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUpdatePwdNum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getUpdatePwdNum(args.uId, args.userType,resultHandler);
      }
    }

    public static class getWalletRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletRecord_args, WalletRecord> {
      public getWalletRecord() {
        super("getWalletRecord");
      }

      public getWalletRecord_args getEmptyArgsInstance() {
        return new getWalletRecord_args();
      }

      public AsyncMethodCallback<WalletRecord> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WalletRecord>() { 
          public void onComplete(WalletRecord o) {
            getWalletRecord_result result = new getWalletRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletRecord_result result = new getWalletRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletRecord_args args, org.apache.thrift.async.AsyncMethodCallback<WalletRecord> resultHandler) throws TException {
        iface.getWalletRecord(args.paramMap,resultHandler);
      }
    }

    public static class getMentionBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMentionBalance_args, Double> {
      public getMentionBalance() {
        super("getMentionBalance");
      }

      public getMentionBalance_args getEmptyArgsInstance() {
        return new getMentionBalance_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getMentionBalance_result result = new getMentionBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMentionBalance_result result = new getMentionBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMentionBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getMentionBalance(args.uId, args.userType,resultHandler);
      }
    }

    public static class updateBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBalance_args, Map<String,String>> {
      public updateBalance() {
        super("updateBalance");
      }

      public updateBalance_args getEmptyArgsInstance() {
        return new updateBalance_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            updateBalance_result result = new updateBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBalance_result result = new updateBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.updateBalance(args.paramMap,resultHandler);
      }
    }

    public static class getWalletList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletList_args, Wallet> {
      public getWalletList() {
        super("getWalletList");
      }

      public getWalletList_args getEmptyArgsInstance() {
        return new getWalletList_args();
      }

      public AsyncMethodCallback<Wallet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Wallet>() { 
          public void onComplete(Wallet o) {
            getWalletList_result result = new getWalletList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletList_result result = new getWalletList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletList_args args, org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler) throws TException {
        iface.getWalletList(args.paramMap,resultHandler);
      }
    }

    public static class getWRAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWRAmount_args, Double> {
      public getWRAmount() {
        super("getWRAmount");
      }

      public getWRAmount_args getEmptyArgsInstance() {
        return new getWRAmount_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getWRAmount_result result = new getWRAmount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWRAmount_result result = new getWRAmount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWRAmount_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getWRAmount(args.uId, args.userType, args.rType,resultHandler);
      }
    }

  }

  public static class getWalletBalance_args implements org.apache.thrift.TBase<getWalletBalance_args, getWalletBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletBalance_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletBalance_argsTupleSchemeFactory());
    }

    public String uId; // required
    public int typeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      TYPE_ID((short)2, "typeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // TYPE_ID
            return TYPE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletBalance_args.class, metaDataMap);
    }

    public getWalletBalance_args() {
    }

    public getWalletBalance_args(
      String uId,
      int typeId)
    {
      this();
      this.uId = uId;
      this.typeId = typeId;
      setTypeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletBalance_args(getWalletBalance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      this.typeId = other.typeId;
    }

    public getWalletBalance_args deepCopy() {
      return new getWalletBalance_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      setTypeIdIsSet(false);
      this.typeId = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public getWalletBalance_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public int getTypeId() {
      return this.typeId;
    }

    public getWalletBalance_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case TYPE_ID:
        return isSetTypeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletBalance_args)
        return this.equals((getWalletBalance_args)that);
      return false;
    }

    public boolean equals(getWalletBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletBalance_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletBalance_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletBalance_argsStandardScheme getScheme() {
        return new getWalletBalance_argsStandardScheme();
      }
    }

    private static class getWalletBalance_argsStandardScheme extends StandardScheme<getWalletBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletBalance_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletBalance_argsTupleScheme getScheme() {
        return new getWalletBalance_argsTupleScheme();
      }
    }

    private static class getWalletBalance_argsTupleScheme extends TupleScheme<getWalletBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetTypeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
      }
    }

  }

  public static class getWalletBalance_result implements org.apache.thrift.TBase<getWalletBalance_result, getWalletBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletBalance_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletBalance_result.class, metaDataMap);
    }

    public getWalletBalance_result() {
    }

    public getWalletBalance_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletBalance_result(getWalletBalance_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletBalance_result deepCopy() {
      return new getWalletBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getWalletBalance_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletBalance_result)
        return this.equals((getWalletBalance_result)that);
      return false;
    }

    public boolean equals(getWalletBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletBalance_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletBalance_resultStandardScheme getScheme() {
        return new getWalletBalance_resultStandardScheme();
      }
    }

    private static class getWalletBalance_resultStandardScheme extends StandardScheme<getWalletBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map36.size);
                  for (int _i37 = 0; _i37 < _map36.size; ++_i37)
                  {
                    String _key38;
                    String _val39;
                    _key38 = iprot.readString();
                    _val39 = iprot.readString();
                    struct.success.put(_key38, _val39);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter40 : struct.success.entrySet())
            {
              oprot.writeString(_iter40.getKey());
              oprot.writeString(_iter40.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletBalance_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletBalance_resultTupleScheme getScheme() {
        return new getWalletBalance_resultTupleScheme();
      }
    }

    private static class getWalletBalance_resultTupleScheme extends TupleScheme<getWalletBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter41 : struct.success.entrySet())
            {
              oprot.writeString(_iter41.getKey());
              oprot.writeString(_iter41.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map42.size);
            for (int _i43 = 0; _i43 < _map42.size; ++_i43)
            {
              String _key44;
              String _val45;
              _key44 = iprot.readString();
              _val45 = iprot.readString();
              struct.success.put(_key44, _val45);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateMentionLedger_args implements org.apache.thrift.TBase<updateMentionLedger_args, updateMentionLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionLedger_args");

    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("typeValue", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionLedger_argsTupleSchemeFactory());
    }

    public int typeId; // required
    public int typeValue; // required
    public String uId; // required
    public String amount; // required
    public String money; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE_ID((short)1, "typeId"),
      TYPE_VALUE((short)2, "typeValue"),
      U_ID((short)3, "uId"),
      AMOUNT((short)4, "amount"),
      MONEY((short)5, "money");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE_ID
            return TYPE_ID;
          case 2: // TYPE_VALUE
            return TYPE_VALUE;
          case 3: // U_ID
            return U_ID;
          case 4: // AMOUNT
            return AMOUNT;
          case 5: // MONEY
            return MONEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private static final int __TYPEVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("typeValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionLedger_args.class, metaDataMap);
    }

    public updateMentionLedger_args() {
    }

    public updateMentionLedger_args(
      int typeId,
      int typeValue,
      String uId,
      String amount,
      String money)
    {
      this();
      this.typeId = typeId;
      setTypeIdIsSet(true);
      this.typeValue = typeValue;
      setTypeValueIsSet(true);
      this.uId = uId;
      this.amount = amount;
      this.money = money;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionLedger_args(updateMentionLedger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.typeId = other.typeId;
      this.typeValue = other.typeValue;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetAmount()) {
        this.amount = other.amount;
      }
      if (other.isSetMoney()) {
        this.money = other.money;
      }
    }

    public updateMentionLedger_args deepCopy() {
      return new updateMentionLedger_args(this);
    }

    @Override
    public void clear() {
      setTypeIdIsSet(false);
      this.typeId = 0;
      setTypeValueIsSet(false);
      this.typeValue = 0;
      this.uId = null;
      this.amount = null;
      this.money = null;
    }

    public int getTypeId() {
      return this.typeId;
    }

    public updateMentionLedger_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public int getTypeValue() {
      return this.typeValue;
    }

    public updateMentionLedger_args setTypeValue(int typeValue) {
      this.typeValue = typeValue;
      setTypeValueIsSet(true);
      return this;
    }

    public void unsetTypeValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEVALUE_ISSET_ID);
    }

    /** Returns true if field typeValue is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeValue() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEVALUE_ISSET_ID);
    }

    public void setTypeValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEVALUE_ISSET_ID, value);
    }

    public String getUId() {
      return this.uId;
    }

    public updateMentionLedger_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getAmount() {
      return this.amount;
    }

    public updateMentionLedger_args setAmount(String amount) {
      this.amount = amount;
      return this;
    }

    public void unsetAmount() {
      this.amount = null;
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return this.amount != null;
    }

    public void setAmountIsSet(boolean value) {
      if (!value) {
        this.amount = null;
      }
    }

    public String getMoney() {
      return this.money;
    }

    public updateMentionLedger_args setMoney(String money) {
      this.money = money;
      return this;
    }

    public void unsetMoney() {
      this.money = null;
    }

    /** Returns true if field money is set (has been assigned a value) and false otherwise */
    public boolean isSetMoney() {
      return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
      if (!value) {
        this.money = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      case TYPE_VALUE:
        if (value == null) {
          unsetTypeValue();
        } else {
          setTypeValue((Integer)value);
        }
        break;

      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((String)value);
        }
        break;

      case MONEY:
        if (value == null) {
          unsetMoney();
        } else {
          setMoney((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      case TYPE_VALUE:
        return Integer.valueOf(getTypeValue());

      case U_ID:
        return getUId();

      case AMOUNT:
        return getAmount();

      case MONEY:
        return getMoney();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE_ID:
        return isSetTypeId();
      case TYPE_VALUE:
        return isSetTypeValue();
      case U_ID:
        return isSetUId();
      case AMOUNT:
        return isSetAmount();
      case MONEY:
        return isSetMoney();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionLedger_args)
        return this.equals((updateMentionLedger_args)that);
      return false;
    }

    public boolean equals(updateMentionLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      boolean this_present_typeValue = true;
      boolean that_present_typeValue = true;
      if (this_present_typeValue || that_present_typeValue) {
        if (!(this_present_typeValue && that_present_typeValue))
          return false;
        if (this.typeValue != that.typeValue)
          return false;
      }

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_amount = true && this.isSetAmount();
      boolean that_present_amount = true && that.isSetAmount();
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (!this.amount.equals(that.amount))
          return false;
      }

      boolean this_present_money = true && this.isSetMoney();
      boolean that_present_money = true && that.isSetMoney();
      if (this_present_money || that_present_money) {
        if (!(this_present_money && that_present_money))
          return false;
        if (!this.money.equals(that.money))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeValue()).compareTo(other.isSetTypeValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeValue, other.typeValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionLedger_args(");
      boolean first = true;

      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeValue:");
      sb.append(this.typeValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      if (this.amount == null) {
        sb.append("null");
      } else {
        sb.append(this.amount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("money:");
      if (this.money == null) {
        sb.append("null");
      } else {
        sb.append(this.money);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionLedger_argsStandardSchemeFactory implements SchemeFactory {
      public updateMentionLedger_argsStandardScheme getScheme() {
        return new updateMentionLedger_argsStandardScheme();
      }
    }

    private static class updateMentionLedger_argsStandardScheme extends StandardScheme<updateMentionLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeValue = iprot.readI32();
                struct.setTypeValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.amount = iprot.readString();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.money = iprot.readString();
                struct.setMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.typeValue);
        oprot.writeFieldEnd();
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.amount != null) {
          oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
          oprot.writeString(struct.amount);
          oprot.writeFieldEnd();
        }
        if (struct.money != null) {
          oprot.writeFieldBegin(MONEY_FIELD_DESC);
          oprot.writeString(struct.money);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionLedger_argsTupleSchemeFactory implements SchemeFactory {
      public updateMentionLedger_argsTupleScheme getScheme() {
        return new updateMentionLedger_argsTupleScheme();
      }
    }

    private static class updateMentionLedger_argsTupleScheme extends TupleScheme<updateMentionLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTypeId()) {
          optionals.set(0);
        }
        if (struct.isSetTypeValue()) {
          optionals.set(1);
        }
        if (struct.isSetUId()) {
          optionals.set(2);
        }
        if (struct.isSetAmount()) {
          optionals.set(3);
        }
        if (struct.isSetMoney()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
        if (struct.isSetTypeValue()) {
          oprot.writeI32(struct.typeValue);
        }
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetAmount()) {
          oprot.writeString(struct.amount);
        }
        if (struct.isSetMoney()) {
          oprot.writeString(struct.money);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeValue = iprot.readI32();
          struct.setTypeValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.amount = iprot.readString();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.money = iprot.readString();
          struct.setMoneyIsSet(true);
        }
      }
    }

  }

  public static class updateMentionLedger_result implements org.apache.thrift.TBase<updateMentionLedger_result, updateMentionLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionLedger_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionLedger_result.class, metaDataMap);
    }

    public updateMentionLedger_result() {
    }

    public updateMentionLedger_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionLedger_result(updateMentionLedger_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateMentionLedger_result deepCopy() {
      return new updateMentionLedger_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateMentionLedger_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateMentionLedger_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionLedger_result)
        return this.equals((updateMentionLedger_result)that);
      return false;
    }

    public boolean equals(updateMentionLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionLedger_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionLedger_resultStandardSchemeFactory implements SchemeFactory {
      public updateMentionLedger_resultStandardScheme getScheme() {
        return new updateMentionLedger_resultStandardScheme();
      }
    }

    private static class updateMentionLedger_resultStandardScheme extends StandardScheme<updateMentionLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionLedger_resultTupleSchemeFactory implements SchemeFactory {
      public updateMentionLedger_resultTupleScheme getScheme() {
        return new updateMentionLedger_resultTupleScheme();
      }
    }

    private static class updateMentionLedger_resultTupleScheme extends TupleScheme<updateMentionLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionLedger_args implements org.apache.thrift.TBase<getMentionLedger_args, getMentionLedger_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionLedger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionLedger_args");

    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionLedger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionLedger_argsTupleSchemeFactory());
    }

    public int typeId; // required
    public String uId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE_ID((short)1, "typeId"),
      U_ID((short)2, "uId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE_ID
            return TYPE_ID;
          case 2: // U_ID
            return U_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionLedger_args.class, metaDataMap);
    }

    public getMentionLedger_args() {
    }

    public getMentionLedger_args(
      int typeId,
      String uId)
    {
      this();
      this.typeId = typeId;
      setTypeIdIsSet(true);
      this.uId = uId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionLedger_args(getMentionLedger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.typeId = other.typeId;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
    }

    public getMentionLedger_args deepCopy() {
      return new getMentionLedger_args(this);
    }

    @Override
    public void clear() {
      setTypeIdIsSet(false);
      this.typeId = 0;
      this.uId = null;
    }

    public int getTypeId() {
      return this.typeId;
    }

    public getMentionLedger_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public String getUId() {
      return this.uId;
    }

    public getMentionLedger_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      case U_ID:
        return getUId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE_ID:
        return isSetTypeId();
      case U_ID:
        return isSetUId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionLedger_args)
        return this.equals((getMentionLedger_args)that);
      return false;
    }

    public boolean equals(getMentionLedger_args that) {
      if (that == null)
        return false;

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionLedger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionLedger_args(");
      boolean first = true;

      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionLedger_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionLedger_argsStandardScheme getScheme() {
        return new getMentionLedger_argsStandardScheme();
      }
    }

    private static class getMentionLedger_argsStandardScheme extends StandardScheme<getMentionLedger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionLedger_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionLedger_argsTupleScheme getScheme() {
        return new getMentionLedger_argsTupleScheme();
      }
    }

    private static class getMentionLedger_argsTupleScheme extends TupleScheme<getMentionLedger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTypeId()) {
          optionals.set(0);
        }
        if (struct.isSetUId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
      }
    }

  }

  public static class getMentionLedger_result implements org.apache.thrift.TBase<getMentionLedger_result, getMentionLedger_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionLedger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionLedger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionLedger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionLedger_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionLedger_result.class, metaDataMap);
    }

    public getMentionLedger_result() {
    }

    public getMentionLedger_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionLedger_result(getMentionLedger_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionLedger_result deepCopy() {
      return new getMentionLedger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getMentionLedger_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionLedger_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionLedger_result)
        return this.equals((getMentionLedger_result)that);
      return false;
    }

    public boolean equals(getMentionLedger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionLedger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionLedger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionLedger_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionLedger_resultStandardScheme getScheme() {
        return new getMentionLedger_resultStandardScheme();
      }
    }

    private static class getMentionLedger_resultStandardScheme extends StandardScheme<getMentionLedger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map46.size);
                  for (int _i47 = 0; _i47 < _map46.size; ++_i47)
                  {
                    String _key48;
                    String _val49;
                    _key48 = iprot.readString();
                    _val49 = iprot.readString();
                    struct.success.put(_key48, _val49);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter50 : struct.success.entrySet())
            {
              oprot.writeString(_iter50.getKey());
              oprot.writeString(_iter50.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionLedger_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionLedger_resultTupleScheme getScheme() {
        return new getMentionLedger_resultTupleScheme();
      }
    }

    private static class getMentionLedger_resultTupleScheme extends TupleScheme<getMentionLedger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter51 : struct.success.entrySet())
            {
              oprot.writeString(_iter51.getKey());
              oprot.writeString(_iter51.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionLedger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map52 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map52.size);
            for (int _i53 = 0; _i53 < _map52.size; ++_i53)
            {
              String _key54;
              String _val55;
              _key54 = iprot.readString();
              _val55 = iprot.readString();
              struct.success.put(_key54, _val55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class checkWalletPwd_args implements org.apache.thrift.TBase<checkWalletPwd_args, checkWalletPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkWalletPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWalletPwd_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWalletPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWalletPwd_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String pwd; // required
    public int typeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      PWD((short)2, "pwd"),
      TYPE_ID((short)3, "typeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // PWD
            return PWD;
          case 3: // TYPE_ID
            return TYPE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWalletPwd_args.class, metaDataMap);
    }

    public checkWalletPwd_args() {
    }

    public checkWalletPwd_args(
      String uId,
      String pwd,
      int typeId)
    {
      this();
      this.uId = uId;
      this.pwd = pwd;
      this.typeId = typeId;
      setTypeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWalletPwd_args(checkWalletPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      this.typeId = other.typeId;
    }

    public checkWalletPwd_args deepCopy() {
      return new checkWalletPwd_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.pwd = null;
      setTypeIdIsSet(false);
      this.typeId = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public checkWalletPwd_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public checkWalletPwd_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public int getTypeId() {
      return this.typeId;
    }

    public checkWalletPwd_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case PWD:
        return getPwd();

      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case PWD:
        return isSetPwd();
      case TYPE_ID:
        return isSetTypeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWalletPwd_args)
        return this.equals((checkWalletPwd_args)that);
      return false;
    }

    public boolean equals(checkWalletPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWalletPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWalletPwd_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWalletPwd_argsStandardSchemeFactory implements SchemeFactory {
      public checkWalletPwd_argsStandardScheme getScheme() {
        return new checkWalletPwd_argsStandardScheme();
      }
    }

    private static class checkWalletPwd_argsStandardScheme extends StandardScheme<checkWalletPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWalletPwd_argsTupleSchemeFactory implements SchemeFactory {
      public checkWalletPwd_argsTupleScheme getScheme() {
        return new checkWalletPwd_argsTupleScheme();
      }
    }

    private static class checkWalletPwd_argsTupleScheme extends TupleScheme<checkWalletPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        if (struct.isSetTypeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
      }
    }

  }

  public static class checkWalletPwd_result implements org.apache.thrift.TBase<checkWalletPwd_result, checkWalletPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkWalletPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWalletPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField GE_FIELD_DESC = new org.apache.thrift.protocol.TField("ge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWalletPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWalletPwd_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException ge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GE((short)1, "ge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GE
            return GE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GE, new org.apache.thrift.meta_data.FieldMetaData("ge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWalletPwd_result.class, metaDataMap);
    }

    public checkWalletPwd_result() {
    }

    public checkWalletPwd_result(
      int success,
      FailureException ge)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ge = ge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWalletPwd_result(checkWalletPwd_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGe()) {
        this.ge = new FailureException(other.ge);
      }
    }

    public checkWalletPwd_result deepCopy() {
      return new checkWalletPwd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ge = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkWalletPwd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getGe() {
      return this.ge;
    }

    public checkWalletPwd_result setGe(FailureException ge) {
      this.ge = ge;
      return this;
    }

    public void unsetGe() {
      this.ge = null;
    }

    /** Returns true if field ge is set (has been assigned a value) and false otherwise */
    public boolean isSetGe() {
      return this.ge != null;
    }

    public void setGeIsSet(boolean value) {
      if (!value) {
        this.ge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case GE:
        if (value == null) {
          unsetGe();
        } else {
          setGe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case GE:
        return getGe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GE:
        return isSetGe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWalletPwd_result)
        return this.equals((checkWalletPwd_result)that);
      return false;
    }

    public boolean equals(checkWalletPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ge = true && this.isSetGe();
      boolean that_present_ge = true && that.isSetGe();
      if (this_present_ge || that_present_ge) {
        if (!(this_present_ge && that_present_ge))
          return false;
        if (!this.ge.equals(that.ge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWalletPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGe()).compareTo(other.isSetGe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ge, other.ge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWalletPwd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ge:");
      if (this.ge == null) {
        sb.append("null");
      } else {
        sb.append(this.ge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWalletPwd_resultStandardSchemeFactory implements SchemeFactory {
      public checkWalletPwd_resultStandardScheme getScheme() {
        return new checkWalletPwd_resultStandardScheme();
      }
    }

    private static class checkWalletPwd_resultStandardScheme extends StandardScheme<checkWalletPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ge = new FailureException();
                struct.ge.read(iprot);
                struct.setGeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ge != null) {
          oprot.writeFieldBegin(GE_FIELD_DESC);
          struct.ge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWalletPwd_resultTupleSchemeFactory implements SchemeFactory {
      public checkWalletPwd_resultTupleScheme getScheme() {
        return new checkWalletPwd_resultTupleScheme();
      }
    }

    private static class checkWalletPwd_resultTupleScheme extends TupleScheme<checkWalletPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetGe()) {
          struct.ge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ge = new FailureException();
          struct.ge.read(iprot);
          struct.setGeIsSet(true);
        }
      }
    }

  }

  public static class updateWalletPwd_args implements org.apache.thrift.TBase<updateWalletPwd_args, updateWalletPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletPwd_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletPwd_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String pwd; // required
    public int typeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      PWD((short)2, "pwd"),
      TYPE_ID((short)3, "typeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // PWD
            return PWD;
          case 3: // TYPE_ID
            return TYPE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletPwd_args.class, metaDataMap);
    }

    public updateWalletPwd_args() {
    }

    public updateWalletPwd_args(
      String uId,
      String pwd,
      int typeId)
    {
      this();
      this.uId = uId;
      this.pwd = pwd;
      this.typeId = typeId;
      setTypeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletPwd_args(updateWalletPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      this.typeId = other.typeId;
    }

    public updateWalletPwd_args deepCopy() {
      return new updateWalletPwd_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.pwd = null;
      setTypeIdIsSet(false);
      this.typeId = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public updateWalletPwd_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public updateWalletPwd_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public int getTypeId() {
      return this.typeId;
    }

    public updateWalletPwd_args setTypeId(int typeId) {
      this.typeId = typeId;
      setTypeIdIsSet(true);
      return this;
    }

    public void unsetTypeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeId() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
    }

    public void setTypeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case TYPE_ID:
        if (value == null) {
          unsetTypeId();
        } else {
          setTypeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case PWD:
        return getPwd();

      case TYPE_ID:
        return Integer.valueOf(getTypeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case PWD:
        return isSetPwd();
      case TYPE_ID:
        return isSetTypeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletPwd_args)
        return this.equals((updateWalletPwd_args)that);
      return false;
    }

    public boolean equals(updateWalletPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_typeId = true;
      boolean that_present_typeId = true;
      if (this_present_typeId || that_present_typeId) {
        if (!(this_present_typeId && that_present_typeId))
          return false;
        if (this.typeId != that.typeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletPwd_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletPwd_argsStandardSchemeFactory implements SchemeFactory {
      public updateWalletPwd_argsStandardScheme getScheme() {
        return new updateWalletPwd_argsStandardScheme();
      }
    }

    private static class updateWalletPwd_argsStandardScheme extends StandardScheme<updateWalletPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeId = iprot.readI32();
                struct.setTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletPwd_argsTupleSchemeFactory implements SchemeFactory {
      public updateWalletPwd_argsTupleScheme getScheme() {
        return new updateWalletPwd_argsTupleScheme();
      }
    }

    private static class updateWalletPwd_argsTupleScheme extends TupleScheme<updateWalletPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        if (struct.isSetTypeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
        if (struct.isSetTypeId()) {
          oprot.writeI32(struct.typeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeId = iprot.readI32();
          struct.setTypeIdIsSet(true);
        }
      }
    }

  }

  public static class updateWalletPwd_result implements org.apache.thrift.TBase<updateWalletPwd_result, updateWalletPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField GE_FIELD_DESC = new org.apache.thrift.protocol.TField("ge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletPwd_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException ge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GE((short)1, "ge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GE
            return GE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GE, new org.apache.thrift.meta_data.FieldMetaData("ge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletPwd_result.class, metaDataMap);
    }

    public updateWalletPwd_result() {
    }

    public updateWalletPwd_result(
      int success,
      FailureException ge)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ge = ge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletPwd_result(updateWalletPwd_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGe()) {
        this.ge = new FailureException(other.ge);
      }
    }

    public updateWalletPwd_result deepCopy() {
      return new updateWalletPwd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ge = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateWalletPwd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getGe() {
      return this.ge;
    }

    public updateWalletPwd_result setGe(FailureException ge) {
      this.ge = ge;
      return this;
    }

    public void unsetGe() {
      this.ge = null;
    }

    /** Returns true if field ge is set (has been assigned a value) and false otherwise */
    public boolean isSetGe() {
      return this.ge != null;
    }

    public void setGeIsSet(boolean value) {
      if (!value) {
        this.ge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case GE:
        if (value == null) {
          unsetGe();
        } else {
          setGe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case GE:
        return getGe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GE:
        return isSetGe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletPwd_result)
        return this.equals((updateWalletPwd_result)that);
      return false;
    }

    public boolean equals(updateWalletPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ge = true && this.isSetGe();
      boolean that_present_ge = true && that.isSetGe();
      if (this_present_ge || that_present_ge) {
        if (!(this_present_ge && that_present_ge))
          return false;
        if (!this.ge.equals(that.ge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGe()).compareTo(other.isSetGe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ge, other.ge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletPwd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ge:");
      if (this.ge == null) {
        sb.append("null");
      } else {
        sb.append(this.ge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletPwd_resultStandardSchemeFactory implements SchemeFactory {
      public updateWalletPwd_resultStandardScheme getScheme() {
        return new updateWalletPwd_resultStandardScheme();
      }
    }

    private static class updateWalletPwd_resultStandardScheme extends StandardScheme<updateWalletPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ge = new FailureException();
                struct.ge.read(iprot);
                struct.setGeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ge != null) {
          oprot.writeFieldBegin(GE_FIELD_DESC);
          struct.ge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletPwd_resultTupleSchemeFactory implements SchemeFactory {
      public updateWalletPwd_resultTupleScheme getScheme() {
        return new updateWalletPwd_resultTupleScheme();
      }
    }

    private static class updateWalletPwd_resultTupleScheme extends TupleScheme<updateWalletPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetGe()) {
          struct.ge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ge = new FailureException();
          struct.ge.read(iprot);
          struct.setGeIsSet(true);
        }
      }
    }

  }

  public static class addWallet_args implements org.apache.thrift.TBase<addWallet_args, addWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<addWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWallet_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addWallet_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required
    public String password; // required
    public String sellerName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType"),
      PASSWORD((short)3, "password"),
      SELLER_NAME((short)4, "sellerName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // SELLER_NAME
            return SELLER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWallet_args.class, metaDataMap);
    }

    public addWallet_args() {
    }

    public addWallet_args(
      String uId,
      String userType,
      String password,
      String sellerName)
    {
      this();
      this.uId = uId;
      this.userType = userType;
      this.password = password;
      this.sellerName = sellerName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWallet_args(addWallet_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetSellerName()) {
        this.sellerName = other.sellerName;
      }
    }

    public addWallet_args deepCopy() {
      return new addWallet_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
      this.password = null;
      this.sellerName = null;
    }

    public String getUId() {
      return this.uId;
    }

    public addWallet_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public addWallet_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public addWallet_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getSellerName() {
      return this.sellerName;
    }

    public addWallet_args setSellerName(String sellerName) {
      this.sellerName = sellerName;
      return this;
    }

    public void unsetSellerName() {
      this.sellerName = null;
    }

    /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
    public boolean isSetSellerName() {
      return this.sellerName != null;
    }

    public void setSellerNameIsSet(boolean value) {
      if (!value) {
        this.sellerName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case SELLER_NAME:
        if (value == null) {
          unsetSellerName();
        } else {
          setSellerName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      case PASSWORD:
        return getPassword();

      case SELLER_NAME:
        return getSellerName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      case PASSWORD:
        return isSetPassword();
      case SELLER_NAME:
        return isSetSellerName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWallet_args)
        return this.equals((addWallet_args)that);
      return false;
    }

    public boolean equals(addWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_sellerName = true && this.isSetSellerName();
      boolean that_present_sellerName = true && that.isSetSellerName();
      if (this_present_sellerName || that_present_sellerName) {
        if (!(this_present_sellerName && that_present_sellerName))
          return false;
        if (!this.sellerName.equals(that.sellerName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSellerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWallet_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sellerName:");
      if (this.sellerName == null) {
        sb.append("null");
      } else {
        sb.append(this.sellerName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addWallet_argsStandardSchemeFactory implements SchemeFactory {
      public addWallet_argsStandardScheme getScheme() {
        return new addWallet_argsStandardScheme();
      }
    }

    private static class addWallet_argsStandardScheme extends StandardScheme<addWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SELLER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sellerName = iprot.readString();
                struct.setSellerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.sellerName != null) {
          oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
          oprot.writeString(struct.sellerName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addWallet_argsTupleSchemeFactory implements SchemeFactory {
      public addWallet_argsTupleScheme getScheme() {
        return new addWallet_argsTupleScheme();
      }
    }

    private static class addWallet_argsTupleScheme extends TupleScheme<addWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetSellerName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetSellerName()) {
          oprot.writeString(struct.sellerName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sellerName = iprot.readString();
          struct.setSellerNameIsSet(true);
        }
      }
    }

  }

  public static class addWallet_result implements org.apache.thrift.TBase<addWallet_result, addWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<addWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addWallet_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addWallet_result.class, metaDataMap);
    }

    public addWallet_result() {
    }

    public addWallet_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addWallet_result(addWallet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public addWallet_result deepCopy() {
      return new addWallet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addWallet_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public addWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addWallet_result)
        return this.equals((addWallet_result)that);
      return false;
    }

    public boolean equals(addWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addWallet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addWallet_resultStandardSchemeFactory implements SchemeFactory {
      public addWallet_resultStandardScheme getScheme() {
        return new addWallet_resultStandardScheme();
      }
    }

    private static class addWallet_resultStandardScheme extends StandardScheme<addWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addWallet_resultTupleSchemeFactory implements SchemeFactory {
      public addWallet_resultTupleScheme getScheme() {
        return new addWallet_resultTupleScheme();
      }
    }

    private static class addWallet_resultTupleScheme extends TupleScheme<addWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class AddMentionAccount_args implements org.apache.thrift.TBase<AddMentionAccount_args, AddMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMentionAccount_args");

    private static final org.apache.thrift.protocol.TField ISUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("isuse", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField MOBILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileId", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField ISPUBLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("ispublic", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField IDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idtype", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("bank", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField ABBREV_FIELD_DESC = new org.apache.thrift.protocol.TField("abbrev", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)15);
    private static final org.apache.thrift.protocol.TField CITYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityname", org.apache.thrift.protocol.TType.STRING, (short)16);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMentionAccount_argsTupleSchemeFactory());
    }

    public int isuse; // required
    public String uId; // required
    public int type; // required
    public String account; // required
    public int cardType; // required
    public String userName; // required
    public String bankName; // required
    public String mobileId; // required
    public int userType; // required
    public int ispublic; // required
    public int idtype; // required
    public String identity; // required
    public String bank; // required
    public String abbrev; // required
    public String province; // required
    public String cityname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ISUSE((short)1, "isuse"),
      U_ID((short)2, "uId"),
      TYPE((short)3, "type"),
      ACCOUNT((short)4, "account"),
      CARD_TYPE((short)5, "cardType"),
      USER_NAME((short)6, "userName"),
      BANK_NAME((short)7, "bankName"),
      MOBILE_ID((short)8, "mobileId"),
      USER_TYPE((short)9, "userType"),
      ISPUBLIC((short)10, "ispublic"),
      IDTYPE((short)11, "idtype"),
      IDENTITY((short)12, "identity"),
      BANK((short)13, "bank"),
      ABBREV((short)14, "abbrev"),
      PROVINCE((short)15, "province"),
      CITYNAME((short)16, "cityname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ISUSE
            return ISUSE;
          case 2: // U_ID
            return U_ID;
          case 3: // TYPE
            return TYPE;
          case 4: // ACCOUNT
            return ACCOUNT;
          case 5: // CARD_TYPE
            return CARD_TYPE;
          case 6: // USER_NAME
            return USER_NAME;
          case 7: // BANK_NAME
            return BANK_NAME;
          case 8: // MOBILE_ID
            return MOBILE_ID;
          case 9: // USER_TYPE
            return USER_TYPE;
          case 10: // ISPUBLIC
            return ISPUBLIC;
          case 11: // IDTYPE
            return IDTYPE;
          case 12: // IDENTITY
            return IDENTITY;
          case 13: // BANK
            return BANK;
          case 14: // ABBREV
            return ABBREV;
          case 15: // PROVINCE
            return PROVINCE;
          case 16: // CITYNAME
            return CITYNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISUSE_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private static final int __CARDTYPE_ISSET_ID = 2;
    private static final int __USERTYPE_ISSET_ID = 3;
    private static final int __ISPUBLIC_ISSET_ID = 4;
    private static final int __IDTYPE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ISUSE, new org.apache.thrift.meta_data.FieldMetaData("isuse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_ID, new org.apache.thrift.meta_data.FieldMetaData("mobileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ISPUBLIC, new org.apache.thrift.meta_data.FieldMetaData("ispublic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDTYPE, new org.apache.thrift.meta_data.FieldMetaData("idtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK, new org.apache.thrift.meta_data.FieldMetaData("bank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ABBREV, new org.apache.thrift.meta_data.FieldMetaData("abbrev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITYNAME, new org.apache.thrift.meta_data.FieldMetaData("cityname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMentionAccount_args.class, metaDataMap);
    }

    public AddMentionAccount_args() {
    }

    public AddMentionAccount_args(
      int isuse,
      String uId,
      int type,
      String account,
      int cardType,
      String userName,
      String bankName,
      String mobileId,
      int userType,
      int ispublic,
      int idtype,
      String identity,
      String bank,
      String abbrev,
      String province,
      String cityname)
    {
      this();
      this.isuse = isuse;
      setIsuseIsSet(true);
      this.uId = uId;
      this.type = type;
      setTypeIsSet(true);
      this.account = account;
      this.cardType = cardType;
      setCardTypeIsSet(true);
      this.userName = userName;
      this.bankName = bankName;
      this.mobileId = mobileId;
      this.userType = userType;
      setUserTypeIsSet(true);
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      this.idtype = idtype;
      setIdtypeIsSet(true);
      this.identity = identity;
      this.bank = bank;
      this.abbrev = abbrev;
      this.province = province;
      this.cityname = cityname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMentionAccount_args(AddMentionAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.isuse = other.isuse;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      this.type = other.type;
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      this.cardType = other.cardType;
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetBankName()) {
        this.bankName = other.bankName;
      }
      if (other.isSetMobileId()) {
        this.mobileId = other.mobileId;
      }
      this.userType = other.userType;
      this.ispublic = other.ispublic;
      this.idtype = other.idtype;
      if (other.isSetIdentity()) {
        this.identity = other.identity;
      }
      if (other.isSetBank()) {
        this.bank = other.bank;
      }
      if (other.isSetAbbrev()) {
        this.abbrev = other.abbrev;
      }
      if (other.isSetProvince()) {
        this.province = other.province;
      }
      if (other.isSetCityname()) {
        this.cityname = other.cityname;
      }
    }

    public AddMentionAccount_args deepCopy() {
      return new AddMentionAccount_args(this);
    }

    @Override
    public void clear() {
      setIsuseIsSet(false);
      this.isuse = 0;
      this.uId = null;
      setTypeIsSet(false);
      this.type = 0;
      this.account = null;
      setCardTypeIsSet(false);
      this.cardType = 0;
      this.userName = null;
      this.bankName = null;
      this.mobileId = null;
      setUserTypeIsSet(false);
      this.userType = 0;
      setIspublicIsSet(false);
      this.ispublic = 0;
      setIdtypeIsSet(false);
      this.idtype = 0;
      this.identity = null;
      this.bank = null;
      this.abbrev = null;
      this.province = null;
      this.cityname = null;
    }

    public int getIsuse() {
      return this.isuse;
    }

    public AddMentionAccount_args setIsuse(int isuse) {
      this.isuse = isuse;
      setIsuseIsSet(true);
      return this;
    }

    public void unsetIsuse() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    /** Returns true if field isuse is set (has been assigned a value) and false otherwise */
    public boolean isSetIsuse() {
      return EncodingUtils.testBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    public void setIsuseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSE_ISSET_ID, value);
    }

    public String getUId() {
      return this.uId;
    }

    public AddMentionAccount_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public AddMentionAccount_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getAccount() {
      return this.account;
    }

    public AddMentionAccount_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public int getCardType() {
      return this.cardType;
    }

    public AddMentionAccount_args setCardType(int cardType) {
      this.cardType = cardType;
      setCardTypeIsSet(true);
      return this;
    }

    public void unsetCardType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
    public boolean isSetCardType() {
      return EncodingUtils.testBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    public void setCardTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARDTYPE_ISSET_ID, value);
    }

    public String getUserName() {
      return this.userName;
    }

    public AddMentionAccount_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getBankName() {
      return this.bankName;
    }

    public AddMentionAccount_args setBankName(String bankName) {
      this.bankName = bankName;
      return this;
    }

    public void unsetBankName() {
      this.bankName = null;
    }

    /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
    public boolean isSetBankName() {
      return this.bankName != null;
    }

    public void setBankNameIsSet(boolean value) {
      if (!value) {
        this.bankName = null;
      }
    }

    public String getMobileId() {
      return this.mobileId;
    }

    public AddMentionAccount_args setMobileId(String mobileId) {
      this.mobileId = mobileId;
      return this;
    }

    public void unsetMobileId() {
      this.mobileId = null;
    }

    /** Returns true if field mobileId is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileId() {
      return this.mobileId != null;
    }

    public void setMobileIdIsSet(boolean value) {
      if (!value) {
        this.mobileId = null;
      }
    }

    public int getUserType() {
      return this.userType;
    }

    public AddMentionAccount_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public int getIspublic() {
      return this.ispublic;
    }

    public AddMentionAccount_args setIspublic(int ispublic) {
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      return this;
    }

    public void unsetIspublic() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    /** Returns true if field ispublic is set (has been assigned a value) and false otherwise */
    public boolean isSetIspublic() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    public void setIspublicIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLIC_ISSET_ID, value);
    }

    public int getIdtype() {
      return this.idtype;
    }

    public AddMentionAccount_args setIdtype(int idtype) {
      this.idtype = idtype;
      setIdtypeIsSet(true);
      return this;
    }

    public void unsetIdtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    /** Returns true if field idtype is set (has been assigned a value) and false otherwise */
    public boolean isSetIdtype() {
      return EncodingUtils.testBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    public void setIdtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDTYPE_ISSET_ID, value);
    }

    public String getIdentity() {
      return this.identity;
    }

    public AddMentionAccount_args setIdentity(String identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public String getBank() {
      return this.bank;
    }

    public AddMentionAccount_args setBank(String bank) {
      this.bank = bank;
      return this;
    }

    public void unsetBank() {
      this.bank = null;
    }

    /** Returns true if field bank is set (has been assigned a value) and false otherwise */
    public boolean isSetBank() {
      return this.bank != null;
    }

    public void setBankIsSet(boolean value) {
      if (!value) {
        this.bank = null;
      }
    }

    public String getAbbrev() {
      return this.abbrev;
    }

    public AddMentionAccount_args setAbbrev(String abbrev) {
      this.abbrev = abbrev;
      return this;
    }

    public void unsetAbbrev() {
      this.abbrev = null;
    }

    /** Returns true if field abbrev is set (has been assigned a value) and false otherwise */
    public boolean isSetAbbrev() {
      return this.abbrev != null;
    }

    public void setAbbrevIsSet(boolean value) {
      if (!value) {
        this.abbrev = null;
      }
    }

    public String getProvince() {
      return this.province;
    }

    public AddMentionAccount_args setProvince(String province) {
      this.province = province;
      return this;
    }

    public void unsetProvince() {
      this.province = null;
    }

    /** Returns true if field province is set (has been assigned a value) and false otherwise */
    public boolean isSetProvince() {
      return this.province != null;
    }

    public void setProvinceIsSet(boolean value) {
      if (!value) {
        this.province = null;
      }
    }

    public String getCityname() {
      return this.cityname;
    }

    public AddMentionAccount_args setCityname(String cityname) {
      this.cityname = cityname;
      return this;
    }

    public void unsetCityname() {
      this.cityname = null;
    }

    /** Returns true if field cityname is set (has been assigned a value) and false otherwise */
    public boolean isSetCityname() {
      return this.cityname != null;
    }

    public void setCitynameIsSet(boolean value) {
      if (!value) {
        this.cityname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ISUSE:
        if (value == null) {
          unsetIsuse();
        } else {
          setIsuse((Integer)value);
        }
        break;

      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case CARD_TYPE:
        if (value == null) {
          unsetCardType();
        } else {
          setCardType((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case BANK_NAME:
        if (value == null) {
          unsetBankName();
        } else {
          setBankName((String)value);
        }
        break;

      case MOBILE_ID:
        if (value == null) {
          unsetMobileId();
        } else {
          setMobileId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      case ISPUBLIC:
        if (value == null) {
          unsetIspublic();
        } else {
          setIspublic((Integer)value);
        }
        break;

      case IDTYPE:
        if (value == null) {
          unsetIdtype();
        } else {
          setIdtype((Integer)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((String)value);
        }
        break;

      case BANK:
        if (value == null) {
          unsetBank();
        } else {
          setBank((String)value);
        }
        break;

      case ABBREV:
        if (value == null) {
          unsetAbbrev();
        } else {
          setAbbrev((String)value);
        }
        break;

      case PROVINCE:
        if (value == null) {
          unsetProvince();
        } else {
          setProvince((String)value);
        }
        break;

      case CITYNAME:
        if (value == null) {
          unsetCityname();
        } else {
          setCityname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ISUSE:
        return Integer.valueOf(getIsuse());

      case U_ID:
        return getUId();

      case TYPE:
        return Integer.valueOf(getType());

      case ACCOUNT:
        return getAccount();

      case CARD_TYPE:
        return Integer.valueOf(getCardType());

      case USER_NAME:
        return getUserName();

      case BANK_NAME:
        return getBankName();

      case MOBILE_ID:
        return getMobileId();

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      case ISPUBLIC:
        return Integer.valueOf(getIspublic());

      case IDTYPE:
        return Integer.valueOf(getIdtype());

      case IDENTITY:
        return getIdentity();

      case BANK:
        return getBank();

      case ABBREV:
        return getAbbrev();

      case PROVINCE:
        return getProvince();

      case CITYNAME:
        return getCityname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ISUSE:
        return isSetIsuse();
      case U_ID:
        return isSetUId();
      case TYPE:
        return isSetType();
      case ACCOUNT:
        return isSetAccount();
      case CARD_TYPE:
        return isSetCardType();
      case USER_NAME:
        return isSetUserName();
      case BANK_NAME:
        return isSetBankName();
      case MOBILE_ID:
        return isSetMobileId();
      case USER_TYPE:
        return isSetUserType();
      case ISPUBLIC:
        return isSetIspublic();
      case IDTYPE:
        return isSetIdtype();
      case IDENTITY:
        return isSetIdentity();
      case BANK:
        return isSetBank();
      case ABBREV:
        return isSetAbbrev();
      case PROVINCE:
        return isSetProvince();
      case CITYNAME:
        return isSetCityname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMentionAccount_args)
        return this.equals((AddMentionAccount_args)that);
      return false;
    }

    public boolean equals(AddMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_isuse = true;
      boolean that_present_isuse = true;
      if (this_present_isuse || that_present_isuse) {
        if (!(this_present_isuse && that_present_isuse))
          return false;
        if (this.isuse != that.isuse)
          return false;
      }

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_cardType = true;
      boolean that_present_cardType = true;
      if (this_present_cardType || that_present_cardType) {
        if (!(this_present_cardType && that_present_cardType))
          return false;
        if (this.cardType != that.cardType)
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_bankName = true && this.isSetBankName();
      boolean that_present_bankName = true && that.isSetBankName();
      if (this_present_bankName || that_present_bankName) {
        if (!(this_present_bankName && that_present_bankName))
          return false;
        if (!this.bankName.equals(that.bankName))
          return false;
      }

      boolean this_present_mobileId = true && this.isSetMobileId();
      boolean that_present_mobileId = true && that.isSetMobileId();
      if (this_present_mobileId || that_present_mobileId) {
        if (!(this_present_mobileId && that_present_mobileId))
          return false;
        if (!this.mobileId.equals(that.mobileId))
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      boolean this_present_ispublic = true;
      boolean that_present_ispublic = true;
      if (this_present_ispublic || that_present_ispublic) {
        if (!(this_present_ispublic && that_present_ispublic))
          return false;
        if (this.ispublic != that.ispublic)
          return false;
      }

      boolean this_present_idtype = true;
      boolean that_present_idtype = true;
      if (this_present_idtype || that_present_idtype) {
        if (!(this_present_idtype && that_present_idtype))
          return false;
        if (this.idtype != that.idtype)
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      boolean this_present_bank = true && this.isSetBank();
      boolean that_present_bank = true && that.isSetBank();
      if (this_present_bank || that_present_bank) {
        if (!(this_present_bank && that_present_bank))
          return false;
        if (!this.bank.equals(that.bank))
          return false;
      }

      boolean this_present_abbrev = true && this.isSetAbbrev();
      boolean that_present_abbrev = true && that.isSetAbbrev();
      if (this_present_abbrev || that_present_abbrev) {
        if (!(this_present_abbrev && that_present_abbrev))
          return false;
        if (!this.abbrev.equals(that.abbrev))
          return false;
      }

      boolean this_present_province = true && this.isSetProvince();
      boolean that_present_province = true && that.isSetProvince();
      if (this_present_province || that_present_province) {
        if (!(this_present_province && that_present_province))
          return false;
        if (!this.province.equals(that.province))
          return false;
      }

      boolean this_present_cityname = true && this.isSetCityname();
      boolean that_present_cityname = true && that.isSetCityname();
      if (this_present_cityname || that_present_cityname) {
        if (!(this_present_cityname && that_present_cityname))
          return false;
        if (!this.cityname.equals(that.cityname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(AddMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIsuse()).compareTo(other.isSetIsuse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsuse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isuse, other.isuse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileId()).compareTo(other.isSetMobileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileId, other.mobileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIspublic()).compareTo(other.isSetIspublic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIspublic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ispublic, other.ispublic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdtype()).compareTo(other.isSetIdtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idtype, other.idtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBank()).compareTo(other.isSetBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bank, other.bank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAbbrev()).compareTo(other.isSetAbbrev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbbrev()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbrev, other.abbrev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityname()).compareTo(other.isSetCityname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityname, other.cityname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMentionAccount_args(");
      boolean first = true;

      sb.append("isuse:");
      sb.append(this.isuse);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardType:");
      sb.append(this.cardType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankName:");
      if (this.bankName == null) {
        sb.append("null");
      } else {
        sb.append(this.bankName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileId:");
      if (this.mobileId == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ispublic:");
      sb.append(this.ispublic);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idtype:");
      sb.append(this.idtype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bank:");
      if (this.bank == null) {
        sb.append("null");
      } else {
        sb.append(this.bank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("abbrev:");
      if (this.abbrev == null) {
        sb.append("null");
      } else {
        sb.append(this.abbrev);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityname:");
      if (this.cityname == null) {
        sb.append("null");
      } else {
        sb.append(this.cityname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public AddMentionAccount_argsStandardScheme getScheme() {
        return new AddMentionAccount_argsStandardScheme();
      }
    }

    private static class AddMentionAccount_argsStandardScheme extends StandardScheme<AddMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ISUSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.isuse = iprot.readI32();
                struct.setIsuseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cardType = iprot.readI32();
                struct.setCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // BANK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankName = iprot.readString();
                struct.setBankNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // MOBILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileId = iprot.readString();
                struct.setMobileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // ISPUBLIC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ispublic = iprot.readI32();
                struct.setIspublicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // IDTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idtype = iprot.readI32();
                struct.setIdtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identity = iprot.readString();
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bank = iprot.readString();
                struct.setBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // ABBREV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.abbrev = iprot.readString();
                struct.setAbbrevIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // PROVINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.province = iprot.readString();
                struct.setProvinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 16: // CITYNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityname = iprot.readString();
                struct.setCitynameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ISUSE_FIELD_DESC);
        oprot.writeI32(struct.isuse);
        oprot.writeFieldEnd();
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cardType);
        oprot.writeFieldEnd();
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.bankName != null) {
          oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
          oprot.writeString(struct.bankName);
          oprot.writeFieldEnd();
        }
        if (struct.mobileId != null) {
          oprot.writeFieldBegin(MOBILE_ID_FIELD_DESC);
          oprot.writeString(struct.mobileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ISPUBLIC_FIELD_DESC);
        oprot.writeI32(struct.ispublic);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IDTYPE_FIELD_DESC);
        oprot.writeI32(struct.idtype);
        oprot.writeFieldEnd();
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          oprot.writeString(struct.identity);
          oprot.writeFieldEnd();
        }
        if (struct.bank != null) {
          oprot.writeFieldBegin(BANK_FIELD_DESC);
          oprot.writeString(struct.bank);
          oprot.writeFieldEnd();
        }
        if (struct.abbrev != null) {
          oprot.writeFieldBegin(ABBREV_FIELD_DESC);
          oprot.writeString(struct.abbrev);
          oprot.writeFieldEnd();
        }
        if (struct.province != null) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
        if (struct.cityname != null) {
          oprot.writeFieldBegin(CITYNAME_FIELD_DESC);
          oprot.writeString(struct.cityname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public AddMentionAccount_argsTupleScheme getScheme() {
        return new AddMentionAccount_argsTupleScheme();
      }
    }

    private static class AddMentionAccount_argsTupleScheme extends TupleScheme<AddMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIsuse()) {
          optionals.set(0);
        }
        if (struct.isSetUId()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetAccount()) {
          optionals.set(3);
        }
        if (struct.isSetCardType()) {
          optionals.set(4);
        }
        if (struct.isSetUserName()) {
          optionals.set(5);
        }
        if (struct.isSetBankName()) {
          optionals.set(6);
        }
        if (struct.isSetMobileId()) {
          optionals.set(7);
        }
        if (struct.isSetUserType()) {
          optionals.set(8);
        }
        if (struct.isSetIspublic()) {
          optionals.set(9);
        }
        if (struct.isSetIdtype()) {
          optionals.set(10);
        }
        if (struct.isSetIdentity()) {
          optionals.set(11);
        }
        if (struct.isSetBank()) {
          optionals.set(12);
        }
        if (struct.isSetAbbrev()) {
          optionals.set(13);
        }
        if (struct.isSetProvince()) {
          optionals.set(14);
        }
        if (struct.isSetCityname()) {
          optionals.set(15);
        }
        oprot.writeBitSet(optionals, 16);
        if (struct.isSetIsuse()) {
          oprot.writeI32(struct.isuse);
        }
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetCardType()) {
          oprot.writeI32(struct.cardType);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetBankName()) {
          oprot.writeString(struct.bankName);
        }
        if (struct.isSetMobileId()) {
          oprot.writeString(struct.mobileId);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
        if (struct.isSetIspublic()) {
          oprot.writeI32(struct.ispublic);
        }
        if (struct.isSetIdtype()) {
          oprot.writeI32(struct.idtype);
        }
        if (struct.isSetIdentity()) {
          oprot.writeString(struct.identity);
        }
        if (struct.isSetBank()) {
          oprot.writeString(struct.bank);
        }
        if (struct.isSetAbbrev()) {
          oprot.writeString(struct.abbrev);
        }
        if (struct.isSetProvince()) {
          oprot.writeString(struct.province);
        }
        if (struct.isSetCityname()) {
          oprot.writeString(struct.cityname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(16);
        if (incoming.get(0)) {
          struct.isuse = iprot.readI32();
          struct.setIsuseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.cardType = iprot.readI32();
          struct.setCardTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.bankName = iprot.readString();
          struct.setBankNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.mobileId = iprot.readString();
          struct.setMobileIdIsSet(true);
        }
        if (incoming.get(8)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(9)) {
          struct.ispublic = iprot.readI32();
          struct.setIspublicIsSet(true);
        }
        if (incoming.get(10)) {
          struct.idtype = iprot.readI32();
          struct.setIdtypeIsSet(true);
        }
        if (incoming.get(11)) {
          struct.identity = iprot.readString();
          struct.setIdentityIsSet(true);
        }
        if (incoming.get(12)) {
          struct.bank = iprot.readString();
          struct.setBankIsSet(true);
        }
        if (incoming.get(13)) {
          struct.abbrev = iprot.readString();
          struct.setAbbrevIsSet(true);
        }
        if (incoming.get(14)) {
          struct.province = iprot.readString();
          struct.setProvinceIsSet(true);
        }
        if (incoming.get(15)) {
          struct.cityname = iprot.readString();
          struct.setCitynameIsSet(true);
        }
      }
    }

  }

  public static class AddMentionAccount_result implements org.apache.thrift.TBase<AddMentionAccount_result, AddMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMentionAccount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMentionAccount_result.class, metaDataMap);
    }

    public AddMentionAccount_result() {
    }

    public AddMentionAccount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMentionAccount_result(AddMentionAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public AddMentionAccount_result deepCopy() {
      return new AddMentionAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddMentionAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public AddMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMentionAccount_result)
        return this.equals((AddMentionAccount_result)that);
      return false;
    }

    public boolean equals(AddMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(AddMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public AddMentionAccount_resultStandardScheme getScheme() {
        return new AddMentionAccount_resultStandardScheme();
      }
    }

    private static class AddMentionAccount_resultStandardScheme extends StandardScheme<AddMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public AddMentionAccount_resultTupleScheme getScheme() {
        return new AddMentionAccount_resultTupleScheme();
      }
    }

    private static class AddMentionAccount_resultTupleScheme extends TupleScheme<AddMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccount_args implements org.apache.thrift.TBase<getMentionAccount_args, getMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccount_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccount_argsTupleSchemeFactory());
    }

    public String uId; // required
    public int userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccount_args.class, metaDataMap);
    }

    public getMentionAccount_args() {
    }

    public getMentionAccount_args(
      String uId,
      int userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
      setUserTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccount_args(getMentionAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      this.userType = other.userType;
    }

    public getMentionAccount_args deepCopy() {
      return new getMentionAccount_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      setUserTypeIsSet(false);
      this.userType = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public getMentionAccount_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public int getUserType() {
      return this.userType;
    }

    public getMentionAccount_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccount_args)
        return this.equals((getMentionAccount_args)that);
      return false;
    }

    public boolean equals(getMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccount_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionAccount_argsStandardScheme getScheme() {
        return new getMentionAccount_argsStandardScheme();
      }
    }

    private static class getMentionAccount_argsStandardScheme extends StandardScheme<getMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionAccount_argsTupleScheme getScheme() {
        return new getMentionAccount_argsTupleScheme();
      }
    }

    private static class getMentionAccount_argsTupleScheme extends TupleScheme<getMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class getMentionAccount_result implements org.apache.thrift.TBase<getMentionAccount_result, getMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionAccount_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionAccount_result.class, metaDataMap);
    }

    public getMentionAccount_result() {
    }

    public getMentionAccount_result(
      List<Map<String,String>> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionAccount_result(getMentionAccount_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionAccount_result deepCopy() {
      return new getMentionAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getMentionAccount_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionAccount_result)
        return this.equals((getMentionAccount_result)that);
      return false;
    }

    public boolean equals(getMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionAccount_resultStandardScheme getScheme() {
        return new getMentionAccount_resultStandardScheme();
      }
    }

    private static class getMentionAccount_resultStandardScheme extends StandardScheme<getMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    Map<String,String> _elem58;
                    {
                      org.apache.thrift.protocol.TMap _map59 = iprot.readMapBegin();
                      _elem58 = new HashMap<String,String>(2*_map59.size);
                      for (int _i60 = 0; _i60 < _map59.size; ++_i60)
                      {
                        String _key61;
                        String _val62;
                        _key61 = iprot.readString();
                        _val62 = iprot.readString();
                        _elem58.put(_key61, _val62);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter63 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter63.size()));
                for (Map.Entry<String, String> _iter64 : _iter63.entrySet())
                {
                  oprot.writeString(_iter64.getKey());
                  oprot.writeString(_iter64.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionAccount_resultTupleScheme getScheme() {
        return new getMentionAccount_resultTupleScheme();
      }
    }

    private static class getMentionAccount_resultTupleScheme extends TupleScheme<getMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter65 : struct.success)
            {
              {
                oprot.writeI32(_iter65.size());
                for (Map.Entry<String, String> _iter66 : _iter65.entrySet())
                {
                  oprot.writeString(_iter66.getKey());
                  oprot.writeString(_iter66.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list67.size);
            for (int _i68 = 0; _i68 < _list67.size; ++_i68)
            {
              Map<String,String> _elem69;
              {
                org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem69 = new HashMap<String,String>(2*_map70.size);
                for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                {
                  String _key72;
                  String _val73;
                  _key72 = iprot.readString();
                  _val73 = iprot.readString();
                  _elem69.put(_key72, _val73);
                }
              }
              struct.success.add(_elem69);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateMentionAccount_args implements org.apache.thrift.TBase<updateMentionAccount_args, updateMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionAccount_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField MOBILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileId", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField ISUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("isuse", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField CITYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityname", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField ISPUBLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("ispublic", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField IDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idtype", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("bank", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField ABBREV_FIELD_DESC = new org.apache.thrift.protocol.TField("abbrev", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)15);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionAccount_argsTupleSchemeFactory());
    }

    public String id; // required
    public int type; // required
    public String account; // required
    public int cardType; // required
    public String userName; // required
    public String bankName; // required
    public String mobileId; // required
    public int isuse; // required
    public String cityname; // required
    public int ispublic; // required
    public int idtype; // required
    public String identity; // required
    public String bank; // required
    public String abbrev; // required
    public String province; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      TYPE((short)2, "type"),
      ACCOUNT((short)3, "account"),
      CARD_TYPE((short)4, "cardType"),
      USER_NAME((short)5, "userName"),
      BANK_NAME((short)6, "bankName"),
      MOBILE_ID((short)7, "mobileId"),
      ISUSE((short)8, "isuse"),
      CITYNAME((short)9, "cityname"),
      ISPUBLIC((short)10, "ispublic"),
      IDTYPE((short)11, "idtype"),
      IDENTITY((short)12, "identity"),
      BANK((short)13, "bank"),
      ABBREV((short)14, "abbrev"),
      PROVINCE((short)15, "province");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // TYPE
            return TYPE;
          case 3: // ACCOUNT
            return ACCOUNT;
          case 4: // CARD_TYPE
            return CARD_TYPE;
          case 5: // USER_NAME
            return USER_NAME;
          case 6: // BANK_NAME
            return BANK_NAME;
          case 7: // MOBILE_ID
            return MOBILE_ID;
          case 8: // ISUSE
            return ISUSE;
          case 9: // CITYNAME
            return CITYNAME;
          case 10: // ISPUBLIC
            return ISPUBLIC;
          case 11: // IDTYPE
            return IDTYPE;
          case 12: // IDENTITY
            return IDENTITY;
          case 13: // BANK
            return BANK;
          case 14: // ABBREV
            return ABBREV;
          case 15: // PROVINCE
            return PROVINCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __CARDTYPE_ISSET_ID = 1;
    private static final int __ISUSE_ISSET_ID = 2;
    private static final int __ISPUBLIC_ISSET_ID = 3;
    private static final int __IDTYPE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_ID, new org.apache.thrift.meta_data.FieldMetaData("mobileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISUSE, new org.apache.thrift.meta_data.FieldMetaData("isuse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CITYNAME, new org.apache.thrift.meta_data.FieldMetaData("cityname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISPUBLIC, new org.apache.thrift.meta_data.FieldMetaData("ispublic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDTYPE, new org.apache.thrift.meta_data.FieldMetaData("idtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK, new org.apache.thrift.meta_data.FieldMetaData("bank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ABBREV, new org.apache.thrift.meta_data.FieldMetaData("abbrev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionAccount_args.class, metaDataMap);
    }

    public updateMentionAccount_args() {
    }

    public updateMentionAccount_args(
      String id,
      int type,
      String account,
      int cardType,
      String userName,
      String bankName,
      String mobileId,
      int isuse,
      String cityname,
      int ispublic,
      int idtype,
      String identity,
      String bank,
      String abbrev,
      String province)
    {
      this();
      this.id = id;
      this.type = type;
      setTypeIsSet(true);
      this.account = account;
      this.cardType = cardType;
      setCardTypeIsSet(true);
      this.userName = userName;
      this.bankName = bankName;
      this.mobileId = mobileId;
      this.isuse = isuse;
      setIsuseIsSet(true);
      this.cityname = cityname;
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      this.idtype = idtype;
      setIdtypeIsSet(true);
      this.identity = identity;
      this.bank = bank;
      this.abbrev = abbrev;
      this.province = province;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionAccount_args(updateMentionAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = other.id;
      }
      this.type = other.type;
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      this.cardType = other.cardType;
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetBankName()) {
        this.bankName = other.bankName;
      }
      if (other.isSetMobileId()) {
        this.mobileId = other.mobileId;
      }
      this.isuse = other.isuse;
      if (other.isSetCityname()) {
        this.cityname = other.cityname;
      }
      this.ispublic = other.ispublic;
      this.idtype = other.idtype;
      if (other.isSetIdentity()) {
        this.identity = other.identity;
      }
      if (other.isSetBank()) {
        this.bank = other.bank;
      }
      if (other.isSetAbbrev()) {
        this.abbrev = other.abbrev;
      }
      if (other.isSetProvince()) {
        this.province = other.province;
      }
    }

    public updateMentionAccount_args deepCopy() {
      return new updateMentionAccount_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setTypeIsSet(false);
      this.type = 0;
      this.account = null;
      setCardTypeIsSet(false);
      this.cardType = 0;
      this.userName = null;
      this.bankName = null;
      this.mobileId = null;
      setIsuseIsSet(false);
      this.isuse = 0;
      this.cityname = null;
      setIspublicIsSet(false);
      this.ispublic = 0;
      setIdtypeIsSet(false);
      this.idtype = 0;
      this.identity = null;
      this.bank = null;
      this.abbrev = null;
      this.province = null;
    }

    public String getId() {
      return this.id;
    }

    public updateMentionAccount_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public updateMentionAccount_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getAccount() {
      return this.account;
    }

    public updateMentionAccount_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public int getCardType() {
      return this.cardType;
    }

    public updateMentionAccount_args setCardType(int cardType) {
      this.cardType = cardType;
      setCardTypeIsSet(true);
      return this;
    }

    public void unsetCardType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
    public boolean isSetCardType() {
      return EncodingUtils.testBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
    }

    public void setCardTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARDTYPE_ISSET_ID, value);
    }

    public String getUserName() {
      return this.userName;
    }

    public updateMentionAccount_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getBankName() {
      return this.bankName;
    }

    public updateMentionAccount_args setBankName(String bankName) {
      this.bankName = bankName;
      return this;
    }

    public void unsetBankName() {
      this.bankName = null;
    }

    /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
    public boolean isSetBankName() {
      return this.bankName != null;
    }

    public void setBankNameIsSet(boolean value) {
      if (!value) {
        this.bankName = null;
      }
    }

    public String getMobileId() {
      return this.mobileId;
    }

    public updateMentionAccount_args setMobileId(String mobileId) {
      this.mobileId = mobileId;
      return this;
    }

    public void unsetMobileId() {
      this.mobileId = null;
    }

    /** Returns true if field mobileId is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileId() {
      return this.mobileId != null;
    }

    public void setMobileIdIsSet(boolean value) {
      if (!value) {
        this.mobileId = null;
      }
    }

    public int getIsuse() {
      return this.isuse;
    }

    public updateMentionAccount_args setIsuse(int isuse) {
      this.isuse = isuse;
      setIsuseIsSet(true);
      return this;
    }

    public void unsetIsuse() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    /** Returns true if field isuse is set (has been assigned a value) and false otherwise */
    public boolean isSetIsuse() {
      return EncodingUtils.testBit(__isset_bitfield, __ISUSE_ISSET_ID);
    }

    public void setIsuseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSE_ISSET_ID, value);
    }

    public String getCityname() {
      return this.cityname;
    }

    public updateMentionAccount_args setCityname(String cityname) {
      this.cityname = cityname;
      return this;
    }

    public void unsetCityname() {
      this.cityname = null;
    }

    /** Returns true if field cityname is set (has been assigned a value) and false otherwise */
    public boolean isSetCityname() {
      return this.cityname != null;
    }

    public void setCitynameIsSet(boolean value) {
      if (!value) {
        this.cityname = null;
      }
    }

    public int getIspublic() {
      return this.ispublic;
    }

    public updateMentionAccount_args setIspublic(int ispublic) {
      this.ispublic = ispublic;
      setIspublicIsSet(true);
      return this;
    }

    public void unsetIspublic() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    /** Returns true if field ispublic is set (has been assigned a value) and false otherwise */
    public boolean isSetIspublic() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    public void setIspublicIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLIC_ISSET_ID, value);
    }

    public int getIdtype() {
      return this.idtype;
    }

    public updateMentionAccount_args setIdtype(int idtype) {
      this.idtype = idtype;
      setIdtypeIsSet(true);
      return this;
    }

    public void unsetIdtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    /** Returns true if field idtype is set (has been assigned a value) and false otherwise */
    public boolean isSetIdtype() {
      return EncodingUtils.testBit(__isset_bitfield, __IDTYPE_ISSET_ID);
    }

    public void setIdtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDTYPE_ISSET_ID, value);
    }

    public String getIdentity() {
      return this.identity;
    }

    public updateMentionAccount_args setIdentity(String identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public String getBank() {
      return this.bank;
    }

    public updateMentionAccount_args setBank(String bank) {
      this.bank = bank;
      return this;
    }

    public void unsetBank() {
      this.bank = null;
    }

    /** Returns true if field bank is set (has been assigned a value) and false otherwise */
    public boolean isSetBank() {
      return this.bank != null;
    }

    public void setBankIsSet(boolean value) {
      if (!value) {
        this.bank = null;
      }
    }

    public String getAbbrev() {
      return this.abbrev;
    }

    public updateMentionAccount_args setAbbrev(String abbrev) {
      this.abbrev = abbrev;
      return this;
    }

    public void unsetAbbrev() {
      this.abbrev = null;
    }

    /** Returns true if field abbrev is set (has been assigned a value) and false otherwise */
    public boolean isSetAbbrev() {
      return this.abbrev != null;
    }

    public void setAbbrevIsSet(boolean value) {
      if (!value) {
        this.abbrev = null;
      }
    }

    public String getProvince() {
      return this.province;
    }

    public updateMentionAccount_args setProvince(String province) {
      this.province = province;
      return this;
    }

    public void unsetProvince() {
      this.province = null;
    }

    /** Returns true if field province is set (has been assigned a value) and false otherwise */
    public boolean isSetProvince() {
      return this.province != null;
    }

    public void setProvinceIsSet(boolean value) {
      if (!value) {
        this.province = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case CARD_TYPE:
        if (value == null) {
          unsetCardType();
        } else {
          setCardType((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case BANK_NAME:
        if (value == null) {
          unsetBankName();
        } else {
          setBankName((String)value);
        }
        break;

      case MOBILE_ID:
        if (value == null) {
          unsetMobileId();
        } else {
          setMobileId((String)value);
        }
        break;

      case ISUSE:
        if (value == null) {
          unsetIsuse();
        } else {
          setIsuse((Integer)value);
        }
        break;

      case CITYNAME:
        if (value == null) {
          unsetCityname();
        } else {
          setCityname((String)value);
        }
        break;

      case ISPUBLIC:
        if (value == null) {
          unsetIspublic();
        } else {
          setIspublic((Integer)value);
        }
        break;

      case IDTYPE:
        if (value == null) {
          unsetIdtype();
        } else {
          setIdtype((Integer)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((String)value);
        }
        break;

      case BANK:
        if (value == null) {
          unsetBank();
        } else {
          setBank((String)value);
        }
        break;

      case ABBREV:
        if (value == null) {
          unsetAbbrev();
        } else {
          setAbbrev((String)value);
        }
        break;

      case PROVINCE:
        if (value == null) {
          unsetProvince();
        } else {
          setProvince((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case TYPE:
        return Integer.valueOf(getType());

      case ACCOUNT:
        return getAccount();

      case CARD_TYPE:
        return Integer.valueOf(getCardType());

      case USER_NAME:
        return getUserName();

      case BANK_NAME:
        return getBankName();

      case MOBILE_ID:
        return getMobileId();

      case ISUSE:
        return Integer.valueOf(getIsuse());

      case CITYNAME:
        return getCityname();

      case ISPUBLIC:
        return Integer.valueOf(getIspublic());

      case IDTYPE:
        return Integer.valueOf(getIdtype());

      case IDENTITY:
        return getIdentity();

      case BANK:
        return getBank();

      case ABBREV:
        return getAbbrev();

      case PROVINCE:
        return getProvince();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case TYPE:
        return isSetType();
      case ACCOUNT:
        return isSetAccount();
      case CARD_TYPE:
        return isSetCardType();
      case USER_NAME:
        return isSetUserName();
      case BANK_NAME:
        return isSetBankName();
      case MOBILE_ID:
        return isSetMobileId();
      case ISUSE:
        return isSetIsuse();
      case CITYNAME:
        return isSetCityname();
      case ISPUBLIC:
        return isSetIspublic();
      case IDTYPE:
        return isSetIdtype();
      case IDENTITY:
        return isSetIdentity();
      case BANK:
        return isSetBank();
      case ABBREV:
        return isSetAbbrev();
      case PROVINCE:
        return isSetProvince();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionAccount_args)
        return this.equals((updateMentionAccount_args)that);
      return false;
    }

    public boolean equals(updateMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_cardType = true;
      boolean that_present_cardType = true;
      if (this_present_cardType || that_present_cardType) {
        if (!(this_present_cardType && that_present_cardType))
          return false;
        if (this.cardType != that.cardType)
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_bankName = true && this.isSetBankName();
      boolean that_present_bankName = true && that.isSetBankName();
      if (this_present_bankName || that_present_bankName) {
        if (!(this_present_bankName && that_present_bankName))
          return false;
        if (!this.bankName.equals(that.bankName))
          return false;
      }

      boolean this_present_mobileId = true && this.isSetMobileId();
      boolean that_present_mobileId = true && that.isSetMobileId();
      if (this_present_mobileId || that_present_mobileId) {
        if (!(this_present_mobileId && that_present_mobileId))
          return false;
        if (!this.mobileId.equals(that.mobileId))
          return false;
      }

      boolean this_present_isuse = true;
      boolean that_present_isuse = true;
      if (this_present_isuse || that_present_isuse) {
        if (!(this_present_isuse && that_present_isuse))
          return false;
        if (this.isuse != that.isuse)
          return false;
      }

      boolean this_present_cityname = true && this.isSetCityname();
      boolean that_present_cityname = true && that.isSetCityname();
      if (this_present_cityname || that_present_cityname) {
        if (!(this_present_cityname && that_present_cityname))
          return false;
        if (!this.cityname.equals(that.cityname))
          return false;
      }

      boolean this_present_ispublic = true;
      boolean that_present_ispublic = true;
      if (this_present_ispublic || that_present_ispublic) {
        if (!(this_present_ispublic && that_present_ispublic))
          return false;
        if (this.ispublic != that.ispublic)
          return false;
      }

      boolean this_present_idtype = true;
      boolean that_present_idtype = true;
      if (this_present_idtype || that_present_idtype) {
        if (!(this_present_idtype && that_present_idtype))
          return false;
        if (this.idtype != that.idtype)
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      boolean this_present_bank = true && this.isSetBank();
      boolean that_present_bank = true && that.isSetBank();
      if (this_present_bank || that_present_bank) {
        if (!(this_present_bank && that_present_bank))
          return false;
        if (!this.bank.equals(that.bank))
          return false;
      }

      boolean this_present_abbrev = true && this.isSetAbbrev();
      boolean that_present_abbrev = true && that.isSetAbbrev();
      if (this_present_abbrev || that_present_abbrev) {
        if (!(this_present_abbrev && that_present_abbrev))
          return false;
        if (!this.abbrev.equals(that.abbrev))
          return false;
      }

      boolean this_present_province = true && this.isSetProvince();
      boolean that_present_province = true && that.isSetProvince();
      if (this_present_province || that_present_province) {
        if (!(this_present_province && that_present_province))
          return false;
        if (!this.province.equals(that.province))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileId()).compareTo(other.isSetMobileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileId, other.mobileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsuse()).compareTo(other.isSetIsuse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsuse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isuse, other.isuse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityname()).compareTo(other.isSetCityname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityname, other.cityname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIspublic()).compareTo(other.isSetIspublic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIspublic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ispublic, other.ispublic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdtype()).compareTo(other.isSetIdtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idtype, other.idtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBank()).compareTo(other.isSetBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bank, other.bank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAbbrev()).compareTo(other.isSetAbbrev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbbrev()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbrev, other.abbrev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionAccount_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardType:");
      sb.append(this.cardType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankName:");
      if (this.bankName == null) {
        sb.append("null");
      } else {
        sb.append(this.bankName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileId:");
      if (this.mobileId == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isuse:");
      sb.append(this.isuse);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityname:");
      if (this.cityname == null) {
        sb.append("null");
      } else {
        sb.append(this.cityname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ispublic:");
      sb.append(this.ispublic);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idtype:");
      sb.append(this.idtype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bank:");
      if (this.bank == null) {
        sb.append("null");
      } else {
        sb.append(this.bank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("abbrev:");
      if (this.abbrev == null) {
        sb.append("null");
      } else {
        sb.append(this.abbrev);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public updateMentionAccount_argsStandardScheme getScheme() {
        return new updateMentionAccount_argsStandardScheme();
      }
    }

    private static class updateMentionAccount_argsStandardScheme extends StandardScheme<updateMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cardType = iprot.readI32();
                struct.setCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BANK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankName = iprot.readString();
                struct.setBankNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MOBILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileId = iprot.readString();
                struct.setMobileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // ISUSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.isuse = iprot.readI32();
                struct.setIsuseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // CITYNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityname = iprot.readString();
                struct.setCitynameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // ISPUBLIC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ispublic = iprot.readI32();
                struct.setIspublicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // IDTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idtype = iprot.readI32();
                struct.setIdtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identity = iprot.readString();
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bank = iprot.readString();
                struct.setBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // ABBREV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.abbrev = iprot.readString();
                struct.setAbbrevIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // PROVINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.province = iprot.readString();
                struct.setProvinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cardType);
        oprot.writeFieldEnd();
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.bankName != null) {
          oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
          oprot.writeString(struct.bankName);
          oprot.writeFieldEnd();
        }
        if (struct.mobileId != null) {
          oprot.writeFieldBegin(MOBILE_ID_FIELD_DESC);
          oprot.writeString(struct.mobileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISUSE_FIELD_DESC);
        oprot.writeI32(struct.isuse);
        oprot.writeFieldEnd();
        if (struct.cityname != null) {
          oprot.writeFieldBegin(CITYNAME_FIELD_DESC);
          oprot.writeString(struct.cityname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISPUBLIC_FIELD_DESC);
        oprot.writeI32(struct.ispublic);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IDTYPE_FIELD_DESC);
        oprot.writeI32(struct.idtype);
        oprot.writeFieldEnd();
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          oprot.writeString(struct.identity);
          oprot.writeFieldEnd();
        }
        if (struct.bank != null) {
          oprot.writeFieldBegin(BANK_FIELD_DESC);
          oprot.writeString(struct.bank);
          oprot.writeFieldEnd();
        }
        if (struct.abbrev != null) {
          oprot.writeFieldBegin(ABBREV_FIELD_DESC);
          oprot.writeString(struct.abbrev);
          oprot.writeFieldEnd();
        }
        if (struct.province != null) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public updateMentionAccount_argsTupleScheme getScheme() {
        return new updateMentionAccount_argsTupleScheme();
      }
    }

    private static class updateMentionAccount_argsTupleScheme extends TupleScheme<updateMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetAccount()) {
          optionals.set(2);
        }
        if (struct.isSetCardType()) {
          optionals.set(3);
        }
        if (struct.isSetUserName()) {
          optionals.set(4);
        }
        if (struct.isSetBankName()) {
          optionals.set(5);
        }
        if (struct.isSetMobileId()) {
          optionals.set(6);
        }
        if (struct.isSetIsuse()) {
          optionals.set(7);
        }
        if (struct.isSetCityname()) {
          optionals.set(8);
        }
        if (struct.isSetIspublic()) {
          optionals.set(9);
        }
        if (struct.isSetIdtype()) {
          optionals.set(10);
        }
        if (struct.isSetIdentity()) {
          optionals.set(11);
        }
        if (struct.isSetBank()) {
          optionals.set(12);
        }
        if (struct.isSetAbbrev()) {
          optionals.set(13);
        }
        if (struct.isSetProvince()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetCardType()) {
          oprot.writeI32(struct.cardType);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetBankName()) {
          oprot.writeString(struct.bankName);
        }
        if (struct.isSetMobileId()) {
          oprot.writeString(struct.mobileId);
        }
        if (struct.isSetIsuse()) {
          oprot.writeI32(struct.isuse);
        }
        if (struct.isSetCityname()) {
          oprot.writeString(struct.cityname);
        }
        if (struct.isSetIspublic()) {
          oprot.writeI32(struct.ispublic);
        }
        if (struct.isSetIdtype()) {
          oprot.writeI32(struct.idtype);
        }
        if (struct.isSetIdentity()) {
          oprot.writeString(struct.identity);
        }
        if (struct.isSetBank()) {
          oprot.writeString(struct.bank);
        }
        if (struct.isSetAbbrev()) {
          oprot.writeString(struct.abbrev);
        }
        if (struct.isSetProvince()) {
          oprot.writeString(struct.province);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cardType = iprot.readI32();
          struct.setCardTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.bankName = iprot.readString();
          struct.setBankNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.mobileId = iprot.readString();
          struct.setMobileIdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.isuse = iprot.readI32();
          struct.setIsuseIsSet(true);
        }
        if (incoming.get(8)) {
          struct.cityname = iprot.readString();
          struct.setCitynameIsSet(true);
        }
        if (incoming.get(9)) {
          struct.ispublic = iprot.readI32();
          struct.setIspublicIsSet(true);
        }
        if (incoming.get(10)) {
          struct.idtype = iprot.readI32();
          struct.setIdtypeIsSet(true);
        }
        if (incoming.get(11)) {
          struct.identity = iprot.readString();
          struct.setIdentityIsSet(true);
        }
        if (incoming.get(12)) {
          struct.bank = iprot.readString();
          struct.setBankIsSet(true);
        }
        if (incoming.get(13)) {
          struct.abbrev = iprot.readString();
          struct.setAbbrevIsSet(true);
        }
        if (incoming.get(14)) {
          struct.province = iprot.readString();
          struct.setProvinceIsSet(true);
        }
      }
    }

  }

  public static class updateMentionAccount_result implements org.apache.thrift.TBase<updateMentionAccount_result, updateMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMentionAccount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMentionAccount_result.class, metaDataMap);
    }

    public updateMentionAccount_result() {
    }

    public updateMentionAccount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMentionAccount_result(updateMentionAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateMentionAccount_result deepCopy() {
      return new updateMentionAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateMentionAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMentionAccount_result)
        return this.equals((updateMentionAccount_result)that);
      return false;
    }

    public boolean equals(updateMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public updateMentionAccount_resultStandardScheme getScheme() {
        return new updateMentionAccount_resultStandardScheme();
      }
    }

    private static class updateMentionAccount_resultStandardScheme extends StandardScheme<updateMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public updateMentionAccount_resultTupleScheme getScheme() {
        return new updateMentionAccount_resultTupleScheme();
      }
    }

    private static class updateMentionAccount_resultTupleScheme extends TupleScheme<updateMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class delMentionAccount_args implements org.apache.thrift.TBase<delMentionAccount_args, delMentionAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<delMentionAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMentionAccount_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMentionAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMentionAccount_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMentionAccount_args.class, metaDataMap);
    }

    public delMentionAccount_args() {
    }

    public delMentionAccount_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMentionAccount_args(delMentionAccount_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delMentionAccount_args deepCopy() {
      return new delMentionAccount_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delMentionAccount_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMentionAccount_args)
        return this.equals((delMentionAccount_args)that);
      return false;
    }

    public boolean equals(delMentionAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delMentionAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMentionAccount_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMentionAccount_argsStandardSchemeFactory implements SchemeFactory {
      public delMentionAccount_argsStandardScheme getScheme() {
        return new delMentionAccount_argsStandardScheme();
      }
    }

    private static class delMentionAccount_argsStandardScheme extends StandardScheme<delMentionAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMentionAccount_argsTupleSchemeFactory implements SchemeFactory {
      public delMentionAccount_argsTupleScheme getScheme() {
        return new delMentionAccount_argsTupleScheme();
      }
    }

    private static class delMentionAccount_argsTupleScheme extends TupleScheme<delMentionAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delMentionAccount_result implements org.apache.thrift.TBase<delMentionAccount_result, delMentionAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<delMentionAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMentionAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMentionAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMentionAccount_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMentionAccount_result.class, metaDataMap);
    }

    public delMentionAccount_result() {
    }

    public delMentionAccount_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMentionAccount_result(delMentionAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public delMentionAccount_result deepCopy() {
      return new delMentionAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public delMentionAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public delMentionAccount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMentionAccount_result)
        return this.equals((delMentionAccount_result)that);
      return false;
    }

    public boolean equals(delMentionAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delMentionAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMentionAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMentionAccount_resultStandardSchemeFactory implements SchemeFactory {
      public delMentionAccount_resultStandardScheme getScheme() {
        return new delMentionAccount_resultStandardScheme();
      }
    }

    private static class delMentionAccount_resultStandardScheme extends StandardScheme<delMentionAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMentionAccount_resultTupleSchemeFactory implements SchemeFactory {
      public delMentionAccount_resultTupleScheme getScheme() {
        return new delMentionAccount_resultTupleScheme();
      }
    }

    private static class delMentionAccount_resultTupleScheme extends TupleScheme<delMentionAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMentionAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class checkWallet_args implements org.apache.thrift.TBase<checkWallet_args, checkWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWallet_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWallet_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWallet_args.class, metaDataMap);
    }

    public checkWallet_args() {
    }

    public checkWallet_args(
      String uId,
      String userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWallet_args(checkWallet_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
    }

    public checkWallet_args deepCopy() {
      return new checkWallet_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
    }

    public String getUId() {
      return this.uId;
    }

    public checkWallet_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public checkWallet_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWallet_args)
        return this.equals((checkWallet_args)that);
      return false;
    }

    public boolean equals(checkWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWallet_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWallet_argsStandardSchemeFactory implements SchemeFactory {
      public checkWallet_argsStandardScheme getScheme() {
        return new checkWallet_argsStandardScheme();
      }
    }

    private static class checkWallet_argsStandardScheme extends StandardScheme<checkWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWallet_argsTupleSchemeFactory implements SchemeFactory {
      public checkWallet_argsTupleScheme getScheme() {
        return new checkWallet_argsTupleScheme();
      }
    }

    private static class checkWallet_argsTupleScheme extends TupleScheme<checkWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class checkWallet_result implements org.apache.thrift.TBase<checkWallet_result, checkWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWallet_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWallet_result.class, metaDataMap);
    }

    public checkWallet_result() {
    }

    public checkWallet_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWallet_result(checkWallet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public checkWallet_result deepCopy() {
      return new checkWallet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkWallet_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public checkWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWallet_result)
        return this.equals((checkWallet_result)that);
      return false;
    }

    public boolean equals(checkWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWallet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWallet_resultStandardSchemeFactory implements SchemeFactory {
      public checkWallet_resultStandardScheme getScheme() {
        return new checkWallet_resultStandardScheme();
      }
    }

    private static class checkWallet_resultStandardScheme extends StandardScheme<checkWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWallet_resultTupleSchemeFactory implements SchemeFactory {
      public checkWallet_resultTupleScheme getScheme() {
        return new checkWallet_resultTupleScheme();
      }
    }

    private static class checkWallet_resultTupleScheme extends TupleScheme<checkWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWalletBalance_args implements org.apache.thrift.TBase<updateWalletBalance_args, updateWalletBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletBalance_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletBalance_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletBalance_args.class, metaDataMap);
    }

    public updateWalletBalance_args() {
    }

    public updateWalletBalance_args(
      List<Map<String,String>> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletBalance_args(updateWalletBalance_args other) {
      if (other.isSetWalletMap()) {
        List<Map<String,String>> __this__walletMap = new ArrayList<Map<String,String>>(other.walletMap.size());
        for (Map<String,String> other_element : other.walletMap) {
          Map<String,String> __this__walletMap_copy = new HashMap<String,String>(other_element);
          __this__walletMap.add(__this__walletMap_copy);
        }
        this.walletMap = __this__walletMap;
      }
    }

    public updateWalletBalance_args deepCopy() {
      return new updateWalletBalance_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public java.util.Iterator<Map<String,String>> getWalletMapIterator() {
      return (this.walletMap == null) ? null : this.walletMap.iterator();
    }

    public void addToWalletMap(Map<String,String> elem) {
      if (this.walletMap == null) {
        this.walletMap = new ArrayList<Map<String,String>>();
      }
      this.walletMap.add(elem);
    }

    public List<Map<String,String>> getWalletMap() {
      return this.walletMap;
    }

    public updateWalletBalance_args setWalletMap(List<Map<String,String>> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletBalance_args)
        return this.equals((updateWalletBalance_args)that);
      return false;
    }

    public boolean equals(updateWalletBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletBalance_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletBalance_argsStandardSchemeFactory implements SchemeFactory {
      public updateWalletBalance_argsStandardScheme getScheme() {
        return new updateWalletBalance_argsStandardScheme();
      }
    }

    private static class updateWalletBalance_argsStandardScheme extends StandardScheme<updateWalletBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.walletMap = new ArrayList<Map<String,String>>(_list74.size);
                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                  {
                    Map<String,String> _elem76;
                    {
                      org.apache.thrift.protocol.TMap _map77 = iprot.readMapBegin();
                      _elem76 = new HashMap<String,String>(2*_map77.size);
                      for (int _i78 = 0; _i78 < _map77.size; ++_i78)
                      {
                        String _key79;
                        String _val80;
                        _key79 = iprot.readString();
                        _val80 = iprot.readString();
                        _elem76.put(_key79, _val80);
                      }
                      iprot.readMapEnd();
                    }
                    struct.walletMap.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.walletMap.size()));
            for (Map<String,String> _iter81 : struct.walletMap)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter81.size()));
                for (Map.Entry<String, String> _iter82 : _iter81.entrySet())
                {
                  oprot.writeString(_iter82.getKey());
                  oprot.writeString(_iter82.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletBalance_argsTupleSchemeFactory implements SchemeFactory {
      public updateWalletBalance_argsTupleScheme getScheme() {
        return new updateWalletBalance_argsTupleScheme();
      }
    }

    private static class updateWalletBalance_argsTupleScheme extends TupleScheme<updateWalletBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map<String,String> _iter83 : struct.walletMap)
            {
              {
                oprot.writeI32(_iter83.size());
                for (Map.Entry<String, String> _iter84 : _iter83.entrySet())
                {
                  oprot.writeString(_iter84.getKey());
                  oprot.writeString(_iter84.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.walletMap = new ArrayList<Map<String,String>>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              Map<String,String> _elem87;
              {
                org.apache.thrift.protocol.TMap _map88 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem87 = new HashMap<String,String>(2*_map88.size);
                for (int _i89 = 0; _i89 < _map88.size; ++_i89)
                {
                  String _key90;
                  String _val91;
                  _key90 = iprot.readString();
                  _val91 = iprot.readString();
                  _elem87.put(_key90, _val91);
                }
              }
              struct.walletMap.add(_elem87);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class updateWalletBalance_result implements org.apache.thrift.TBase<updateWalletBalance_result, updateWalletBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletBalance_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletBalance_result.class, metaDataMap);
    }

    public updateWalletBalance_result() {
    }

    public updateWalletBalance_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletBalance_result(updateWalletBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWalletBalance_result deepCopy() {
      return new updateWalletBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateWalletBalance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWalletBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletBalance_result)
        return this.equals((updateWalletBalance_result)that);
      return false;
    }

    public boolean equals(updateWalletBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletBalance_resultStandardSchemeFactory implements SchemeFactory {
      public updateWalletBalance_resultStandardScheme getScheme() {
        return new updateWalletBalance_resultStandardScheme();
      }
    }

    private static class updateWalletBalance_resultStandardScheme extends StandardScheme<updateWalletBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletBalance_resultTupleSchemeFactory implements SchemeFactory {
      public updateWalletBalance_resultTupleScheme getScheme() {
        return new updateWalletBalance_resultTupleScheme();
      }
    }

    private static class updateWalletBalance_resultTupleScheme extends TupleScheme<updateWalletBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord_args implements org.apache.thrift.TBase<updateWithdrawalsRecord_args, updateWithdrawalsRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord_args");

    private static final org.apache.thrift.protocol.TField AMOUNT_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("amountMapList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> amountMapList; // required
    public Map<String,String> orderMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMOUNT_MAP_LIST((short)1, "amountMapList"),
      ORDER_MAP((short)2, "orderMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMOUNT_MAP_LIST
            return AMOUNT_MAP_LIST;
          case 2: // ORDER_MAP
            return ORDER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMOUNT_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("amountMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.ORDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord_args.class, metaDataMap);
    }

    public updateWithdrawalsRecord_args() {
    }

    public updateWithdrawalsRecord_args(
      List<Map<String,String>> amountMapList,
      Map<String,String> orderMap)
    {
      this();
      this.amountMapList = amountMapList;
      this.orderMap = orderMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord_args(updateWithdrawalsRecord_args other) {
      if (other.isSetAmountMapList()) {
        List<Map<String,String>> __this__amountMapList = new ArrayList<Map<String,String>>(other.amountMapList.size());
        for (Map<String,String> other_element : other.amountMapList) {
          Map<String,String> __this__amountMapList_copy = new HashMap<String,String>(other_element);
          __this__amountMapList.add(__this__amountMapList_copy);
        }
        this.amountMapList = __this__amountMapList;
      }
      if (other.isSetOrderMap()) {
        Map<String,String> __this__orderMap = new HashMap<String,String>(other.orderMap);
        this.orderMap = __this__orderMap;
      }
    }

    public updateWithdrawalsRecord_args deepCopy() {
      return new updateWithdrawalsRecord_args(this);
    }

    @Override
    public void clear() {
      this.amountMapList = null;
      this.orderMap = null;
    }

    public int getAmountMapListSize() {
      return (this.amountMapList == null) ? 0 : this.amountMapList.size();
    }

    public java.util.Iterator<Map<String,String>> getAmountMapListIterator() {
      return (this.amountMapList == null) ? null : this.amountMapList.iterator();
    }

    public void addToAmountMapList(Map<String,String> elem) {
      if (this.amountMapList == null) {
        this.amountMapList = new ArrayList<Map<String,String>>();
      }
      this.amountMapList.add(elem);
    }

    public List<Map<String,String>> getAmountMapList() {
      return this.amountMapList;
    }

    public updateWithdrawalsRecord_args setAmountMapList(List<Map<String,String>> amountMapList) {
      this.amountMapList = amountMapList;
      return this;
    }

    public void unsetAmountMapList() {
      this.amountMapList = null;
    }

    /** Returns true if field amountMapList is set (has been assigned a value) and false otherwise */
    public boolean isSetAmountMapList() {
      return this.amountMapList != null;
    }

    public void setAmountMapListIsSet(boolean value) {
      if (!value) {
        this.amountMapList = null;
      }
    }

    public int getOrderMapSize() {
      return (this.orderMap == null) ? 0 : this.orderMap.size();
    }

    public void putToOrderMap(String key, String val) {
      if (this.orderMap == null) {
        this.orderMap = new HashMap<String,String>();
      }
      this.orderMap.put(key, val);
    }

    public Map<String,String> getOrderMap() {
      return this.orderMap;
    }

    public updateWithdrawalsRecord_args setOrderMap(Map<String,String> orderMap) {
      this.orderMap = orderMap;
      return this;
    }

    public void unsetOrderMap() {
      this.orderMap = null;
    }

    /** Returns true if field orderMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMap() {
      return this.orderMap != null;
    }

    public void setOrderMapIsSet(boolean value) {
      if (!value) {
        this.orderMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        if (value == null) {
          unsetAmountMapList();
        } else {
          setAmountMapList((List<Map<String,String>>)value);
        }
        break;

      case ORDER_MAP:
        if (value == null) {
          unsetOrderMap();
        } else {
          setOrderMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        return getAmountMapList();

      case ORDER_MAP:
        return getOrderMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AMOUNT_MAP_LIST:
        return isSetAmountMapList();
      case ORDER_MAP:
        return isSetOrderMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord_args)
        return this.equals((updateWithdrawalsRecord_args)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_amountMapList = true && this.isSetAmountMapList();
      boolean that_present_amountMapList = true && that.isSetAmountMapList();
      if (this_present_amountMapList || that_present_amountMapList) {
        if (!(this_present_amountMapList && that_present_amountMapList))
          return false;
        if (!this.amountMapList.equals(that.amountMapList))
          return false;
      }

      boolean this_present_orderMap = true && this.isSetOrderMap();
      boolean that_present_orderMap = true && that.isSetOrderMap();
      if (this_present_orderMap || that_present_orderMap) {
        if (!(this_present_orderMap && that_present_orderMap))
          return false;
        if (!this.orderMap.equals(that.orderMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmountMapList()).compareTo(other.isSetAmountMapList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmountMapList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountMapList, other.amountMapList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderMap()).compareTo(other.isSetOrderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMap, other.orderMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord_args(");
      boolean first = true;

      sb.append("amountMapList:");
      if (this.amountMapList == null) {
        sb.append("null");
      } else {
        sb.append(this.amountMapList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderMap:");
      if (this.orderMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_argsStandardScheme getScheme() {
        return new updateWithdrawalsRecord_argsStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord_argsStandardScheme extends StandardScheme<updateWithdrawalsRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMOUNT_MAP_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                  struct.amountMapList = new ArrayList<Map<String,String>>(_list92.size);
                  for (int _i93 = 0; _i93 < _list92.size; ++_i93)
                  {
                    Map<String,String> _elem94;
                    {
                      org.apache.thrift.protocol.TMap _map95 = iprot.readMapBegin();
                      _elem94 = new HashMap<String,String>(2*_map95.size);
                      for (int _i96 = 0; _i96 < _map95.size; ++_i96)
                      {
                        String _key97;
                        String _val98;
                        _key97 = iprot.readString();
                        _val98 = iprot.readString();
                        _elem94.put(_key97, _val98);
                      }
                      iprot.readMapEnd();
                    }
                    struct.amountMapList.add(_elem94);
                  }
                  iprot.readListEnd();
                }
                struct.setAmountMapListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map99 = iprot.readMapBegin();
                  struct.orderMap = new HashMap<String,String>(2*_map99.size);
                  for (int _i100 = 0; _i100 < _map99.size; ++_i100)
                  {
                    String _key101;
                    String _val102;
                    _key101 = iprot.readString();
                    _val102 = iprot.readString();
                    struct.orderMap.put(_key101, _val102);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amountMapList != null) {
          oprot.writeFieldBegin(AMOUNT_MAP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.amountMapList.size()));
            for (Map<String,String> _iter103 : struct.amountMapList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter103.size()));
                for (Map.Entry<String, String> _iter104 : _iter103.entrySet())
                {
                  oprot.writeString(_iter104.getKey());
                  oprot.writeString(_iter104.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.orderMap != null) {
          oprot.writeFieldBegin(ORDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderMap.size()));
            for (Map.Entry<String, String> _iter105 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter105.getKey());
              oprot.writeString(_iter105.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_argsTupleScheme getScheme() {
        return new updateWithdrawalsRecord_argsTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord_argsTupleScheme extends TupleScheme<updateWithdrawalsRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmountMapList()) {
          optionals.set(0);
        }
        if (struct.isSetOrderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmountMapList()) {
          {
            oprot.writeI32(struct.amountMapList.size());
            for (Map<String,String> _iter106 : struct.amountMapList)
            {
              {
                oprot.writeI32(_iter106.size());
                for (Map.Entry<String, String> _iter107 : _iter106.entrySet())
                {
                  oprot.writeString(_iter107.getKey());
                  oprot.writeString(_iter107.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOrderMap()) {
          {
            oprot.writeI32(struct.orderMap.size());
            for (Map.Entry<String, String> _iter108 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter108.getKey());
              oprot.writeString(_iter108.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.amountMapList = new ArrayList<Map<String,String>>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              Map<String,String> _elem111;
              {
                org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem111 = new HashMap<String,String>(2*_map112.size);
                for (int _i113 = 0; _i113 < _map112.size; ++_i113)
                {
                  String _key114;
                  String _val115;
                  _key114 = iprot.readString();
                  _val115 = iprot.readString();
                  _elem111.put(_key114, _val115);
                }
              }
              struct.amountMapList.add(_elem111);
            }
          }
          struct.setAmountMapListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map116 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orderMap = new HashMap<String,String>(2*_map116.size);
            for (int _i117 = 0; _i117 < _map116.size; ++_i117)
            {
              String _key118;
              String _val119;
              _key118 = iprot.readString();
              _val119 = iprot.readString();
              struct.orderMap.put(_key118, _val119);
            }
          }
          struct.setOrderMapIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord_result implements org.apache.thrift.TBase<updateWithdrawalsRecord_result, updateWithdrawalsRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord_result.class, metaDataMap);
    }

    public updateWithdrawalsRecord_result() {
    }

    public updateWithdrawalsRecord_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord_result(updateWithdrawalsRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWithdrawalsRecord_result deepCopy() {
      return new updateWithdrawalsRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateWithdrawalsRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWithdrawalsRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord_result)
        return this.equals((updateWithdrawalsRecord_result)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_resultStandardScheme getScheme() {
        return new updateWithdrawalsRecord_resultStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord_resultStandardScheme extends StandardScheme<updateWithdrawalsRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_resultTupleScheme getScheme() {
        return new updateWithdrawalsRecord_resultTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord_resultTupleScheme extends TupleScheme<updateWithdrawalsRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateJointWithdrawalsRecord_args implements org.apache.thrift.TBase<updateJointWithdrawalsRecord_args, updateJointWithdrawalsRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateJointWithdrawalsRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJointWithdrawalsRecord_args");

    private static final org.apache.thrift.protocol.TField AMOUNT_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("amountMapList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJointWithdrawalsRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJointWithdrawalsRecord_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> amountMapList; // required
    public Map<String,String> orderMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMOUNT_MAP_LIST((short)1, "amountMapList"),
      ORDER_MAP((short)2, "orderMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMOUNT_MAP_LIST
            return AMOUNT_MAP_LIST;
          case 2: // ORDER_MAP
            return ORDER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMOUNT_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("amountMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.ORDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJointWithdrawalsRecord_args.class, metaDataMap);
    }

    public updateJointWithdrawalsRecord_args() {
    }

    public updateJointWithdrawalsRecord_args(
      List<Map<String,String>> amountMapList,
      Map<String,String> orderMap)
    {
      this();
      this.amountMapList = amountMapList;
      this.orderMap = orderMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJointWithdrawalsRecord_args(updateJointWithdrawalsRecord_args other) {
      if (other.isSetAmountMapList()) {
        List<Map<String,String>> __this__amountMapList = new ArrayList<Map<String,String>>(other.amountMapList.size());
        for (Map<String,String> other_element : other.amountMapList) {
          Map<String,String> __this__amountMapList_copy = new HashMap<String,String>(other_element);
          __this__amountMapList.add(__this__amountMapList_copy);
        }
        this.amountMapList = __this__amountMapList;
      }
      if (other.isSetOrderMap()) {
        Map<String,String> __this__orderMap = new HashMap<String,String>(other.orderMap);
        this.orderMap = __this__orderMap;
      }
    }

    public updateJointWithdrawalsRecord_args deepCopy() {
      return new updateJointWithdrawalsRecord_args(this);
    }

    @Override
    public void clear() {
      this.amountMapList = null;
      this.orderMap = null;
    }

    public int getAmountMapListSize() {
      return (this.amountMapList == null) ? 0 : this.amountMapList.size();
    }

    public java.util.Iterator<Map<String,String>> getAmountMapListIterator() {
      return (this.amountMapList == null) ? null : this.amountMapList.iterator();
    }

    public void addToAmountMapList(Map<String,String> elem) {
      if (this.amountMapList == null) {
        this.amountMapList = new ArrayList<Map<String,String>>();
      }
      this.amountMapList.add(elem);
    }

    public List<Map<String,String>> getAmountMapList() {
      return this.amountMapList;
    }

    public updateJointWithdrawalsRecord_args setAmountMapList(List<Map<String,String>> amountMapList) {
      this.amountMapList = amountMapList;
      return this;
    }

    public void unsetAmountMapList() {
      this.amountMapList = null;
    }

    /** Returns true if field amountMapList is set (has been assigned a value) and false otherwise */
    public boolean isSetAmountMapList() {
      return this.amountMapList != null;
    }

    public void setAmountMapListIsSet(boolean value) {
      if (!value) {
        this.amountMapList = null;
      }
    }

    public int getOrderMapSize() {
      return (this.orderMap == null) ? 0 : this.orderMap.size();
    }

    public void putToOrderMap(String key, String val) {
      if (this.orderMap == null) {
        this.orderMap = new HashMap<String,String>();
      }
      this.orderMap.put(key, val);
    }

    public Map<String,String> getOrderMap() {
      return this.orderMap;
    }

    public updateJointWithdrawalsRecord_args setOrderMap(Map<String,String> orderMap) {
      this.orderMap = orderMap;
      return this;
    }

    public void unsetOrderMap() {
      this.orderMap = null;
    }

    /** Returns true if field orderMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMap() {
      return this.orderMap != null;
    }

    public void setOrderMapIsSet(boolean value) {
      if (!value) {
        this.orderMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        if (value == null) {
          unsetAmountMapList();
        } else {
          setAmountMapList((List<Map<String,String>>)value);
        }
        break;

      case ORDER_MAP:
        if (value == null) {
          unsetOrderMap();
        } else {
          setOrderMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        return getAmountMapList();

      case ORDER_MAP:
        return getOrderMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AMOUNT_MAP_LIST:
        return isSetAmountMapList();
      case ORDER_MAP:
        return isSetOrderMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJointWithdrawalsRecord_args)
        return this.equals((updateJointWithdrawalsRecord_args)that);
      return false;
    }

    public boolean equals(updateJointWithdrawalsRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_amountMapList = true && this.isSetAmountMapList();
      boolean that_present_amountMapList = true && that.isSetAmountMapList();
      if (this_present_amountMapList || that_present_amountMapList) {
        if (!(this_present_amountMapList && that_present_amountMapList))
          return false;
        if (!this.amountMapList.equals(that.amountMapList))
          return false;
      }

      boolean this_present_orderMap = true && this.isSetOrderMap();
      boolean that_present_orderMap = true && that.isSetOrderMap();
      if (this_present_orderMap || that_present_orderMap) {
        if (!(this_present_orderMap && that_present_orderMap))
          return false;
        if (!this.orderMap.equals(that.orderMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateJointWithdrawalsRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmountMapList()).compareTo(other.isSetAmountMapList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmountMapList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountMapList, other.amountMapList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderMap()).compareTo(other.isSetOrderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMap, other.orderMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJointWithdrawalsRecord_args(");
      boolean first = true;

      sb.append("amountMapList:");
      if (this.amountMapList == null) {
        sb.append("null");
      } else {
        sb.append(this.amountMapList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderMap:");
      if (this.orderMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJointWithdrawalsRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_argsStandardScheme getScheme() {
        return new updateJointWithdrawalsRecord_argsStandardScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_argsStandardScheme extends StandardScheme<updateJointWithdrawalsRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMOUNT_MAP_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.amountMapList = new ArrayList<Map<String,String>>(_list120.size);
                  for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                  {
                    Map<String,String> _elem122;
                    {
                      org.apache.thrift.protocol.TMap _map123 = iprot.readMapBegin();
                      _elem122 = new HashMap<String,String>(2*_map123.size);
                      for (int _i124 = 0; _i124 < _map123.size; ++_i124)
                      {
                        String _key125;
                        String _val126;
                        _key125 = iprot.readString();
                        _val126 = iprot.readString();
                        _elem122.put(_key125, _val126);
                      }
                      iprot.readMapEnd();
                    }
                    struct.amountMapList.add(_elem122);
                  }
                  iprot.readListEnd();
                }
                struct.setAmountMapListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map127 = iprot.readMapBegin();
                  struct.orderMap = new HashMap<String,String>(2*_map127.size);
                  for (int _i128 = 0; _i128 < _map127.size; ++_i128)
                  {
                    String _key129;
                    String _val130;
                    _key129 = iprot.readString();
                    _val130 = iprot.readString();
                    struct.orderMap.put(_key129, _val130);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amountMapList != null) {
          oprot.writeFieldBegin(AMOUNT_MAP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.amountMapList.size()));
            for (Map<String,String> _iter131 : struct.amountMapList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter131.size()));
                for (Map.Entry<String, String> _iter132 : _iter131.entrySet())
                {
                  oprot.writeString(_iter132.getKey());
                  oprot.writeString(_iter132.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.orderMap != null) {
          oprot.writeFieldBegin(ORDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderMap.size()));
            for (Map.Entry<String, String> _iter133 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter133.getKey());
              oprot.writeString(_iter133.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJointWithdrawalsRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_argsTupleScheme getScheme() {
        return new updateJointWithdrawalsRecord_argsTupleScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_argsTupleScheme extends TupleScheme<updateJointWithdrawalsRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmountMapList()) {
          optionals.set(0);
        }
        if (struct.isSetOrderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmountMapList()) {
          {
            oprot.writeI32(struct.amountMapList.size());
            for (Map<String,String> _iter134 : struct.amountMapList)
            {
              {
                oprot.writeI32(_iter134.size());
                for (Map.Entry<String, String> _iter135 : _iter134.entrySet())
                {
                  oprot.writeString(_iter135.getKey());
                  oprot.writeString(_iter135.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOrderMap()) {
          {
            oprot.writeI32(struct.orderMap.size());
            for (Map.Entry<String, String> _iter136 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter136.getKey());
              oprot.writeString(_iter136.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.amountMapList = new ArrayList<Map<String,String>>(_list137.size);
            for (int _i138 = 0; _i138 < _list137.size; ++_i138)
            {
              Map<String,String> _elem139;
              {
                org.apache.thrift.protocol.TMap _map140 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem139 = new HashMap<String,String>(2*_map140.size);
                for (int _i141 = 0; _i141 < _map140.size; ++_i141)
                {
                  String _key142;
                  String _val143;
                  _key142 = iprot.readString();
                  _val143 = iprot.readString();
                  _elem139.put(_key142, _val143);
                }
              }
              struct.amountMapList.add(_elem139);
            }
          }
          struct.setAmountMapListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map144 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orderMap = new HashMap<String,String>(2*_map144.size);
            for (int _i145 = 0; _i145 < _map144.size; ++_i145)
            {
              String _key146;
              String _val147;
              _key146 = iprot.readString();
              _val147 = iprot.readString();
              struct.orderMap.put(_key146, _val147);
            }
          }
          struct.setOrderMapIsSet(true);
        }
      }
    }

  }

  public static class updateJointWithdrawalsRecord_result implements org.apache.thrift.TBase<updateJointWithdrawalsRecord_result, updateJointWithdrawalsRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateJointWithdrawalsRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJointWithdrawalsRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJointWithdrawalsRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJointWithdrawalsRecord_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJointWithdrawalsRecord_result.class, metaDataMap);
    }

    public updateJointWithdrawalsRecord_result() {
    }

    public updateJointWithdrawalsRecord_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJointWithdrawalsRecord_result(updateJointWithdrawalsRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateJointWithdrawalsRecord_result deepCopy() {
      return new updateJointWithdrawalsRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateJointWithdrawalsRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateJointWithdrawalsRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJointWithdrawalsRecord_result)
        return this.equals((updateJointWithdrawalsRecord_result)that);
      return false;
    }

    public boolean equals(updateJointWithdrawalsRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateJointWithdrawalsRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJointWithdrawalsRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJointWithdrawalsRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_resultStandardScheme getScheme() {
        return new updateJointWithdrawalsRecord_resultStandardScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_resultStandardScheme extends StandardScheme<updateJointWithdrawalsRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJointWithdrawalsRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_resultTupleScheme getScheme() {
        return new updateJointWithdrawalsRecord_resultTupleScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_resultTupleScheme extends TupleScheme<updateJointWithdrawalsRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getUpdatePwdNum_args implements org.apache.thrift.TBase<getUpdatePwdNum_args, getUpdatePwdNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUpdatePwdNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUpdatePwdNum_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUpdatePwdNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUpdatePwdNum_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUpdatePwdNum_args.class, metaDataMap);
    }

    public getUpdatePwdNum_args() {
    }

    public getUpdatePwdNum_args(
      String uId,
      String userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdatePwdNum_args(getUpdatePwdNum_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
    }

    public getUpdatePwdNum_args deepCopy() {
      return new getUpdatePwdNum_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
    }

    public String getUId() {
      return this.uId;
    }

    public getUpdatePwdNum_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public getUpdatePwdNum_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdatePwdNum_args)
        return this.equals((getUpdatePwdNum_args)that);
      return false;
    }

    public boolean equals(getUpdatePwdNum_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUpdatePwdNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUpdatePwdNum_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUpdatePwdNum_argsStandardSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_argsStandardScheme getScheme() {
        return new getUpdatePwdNum_argsStandardScheme();
      }
    }

    private static class getUpdatePwdNum_argsStandardScheme extends StandardScheme<getUpdatePwdNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUpdatePwdNum_argsTupleSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_argsTupleScheme getScheme() {
        return new getUpdatePwdNum_argsTupleScheme();
      }
    }

    private static class getUpdatePwdNum_argsTupleScheme extends TupleScheme<getUpdatePwdNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class getUpdatePwdNum_result implements org.apache.thrift.TBase<getUpdatePwdNum_result, getUpdatePwdNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUpdatePwdNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUpdatePwdNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUpdatePwdNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUpdatePwdNum_resultTupleSchemeFactory());
    }

    public int success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUpdatePwdNum_result.class, metaDataMap);
    }

    public getUpdatePwdNum_result() {
    }

    public getUpdatePwdNum_result(
      int success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdatePwdNum_result(getUpdatePwdNum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getUpdatePwdNum_result deepCopy() {
      return new getUpdatePwdNum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getUpdatePwdNum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getUpdatePwdNum_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdatePwdNum_result)
        return this.equals((getUpdatePwdNum_result)that);
      return false;
    }

    public boolean equals(getUpdatePwdNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUpdatePwdNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUpdatePwdNum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUpdatePwdNum_resultStandardSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_resultStandardScheme getScheme() {
        return new getUpdatePwdNum_resultStandardScheme();
      }
    }

    private static class getUpdatePwdNum_resultStandardScheme extends StandardScheme<getUpdatePwdNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUpdatePwdNum_resultTupleSchemeFactory implements SchemeFactory {
      public getUpdatePwdNum_resultTupleScheme getScheme() {
        return new getUpdatePwdNum_resultTupleScheme();
      }
    }

    private static class getUpdatePwdNum_resultTupleScheme extends TupleScheme<getUpdatePwdNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUpdatePwdNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletRecord_args implements org.apache.thrift.TBase<getWalletRecord_args, getWalletRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletRecord_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletRecord_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletRecord_args.class, metaDataMap);
    }

    public getWalletRecord_args() {
    }

    public getWalletRecord_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletRecord_args(getWalletRecord_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getWalletRecord_args deepCopy() {
      return new getWalletRecord_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getWalletRecord_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletRecord_args)
        return this.equals((getWalletRecord_args)that);
      return false;
    }

    public boolean equals(getWalletRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletRecord_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletRecord_argsStandardScheme getScheme() {
        return new getWalletRecord_argsStandardScheme();
      }
    }

    private static class getWalletRecord_argsStandardScheme extends StandardScheme<getWalletRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map148 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map148.size);
                  for (int _i149 = 0; _i149 < _map148.size; ++_i149)
                  {
                    String _key150;
                    String _val151;
                    _key150 = iprot.readString();
                    _val151 = iprot.readString();
                    struct.paramMap.put(_key150, _val151);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter152 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter152.getKey());
              oprot.writeString(_iter152.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletRecord_argsTupleScheme getScheme() {
        return new getWalletRecord_argsTupleScheme();
      }
    }

    private static class getWalletRecord_argsTupleScheme extends TupleScheme<getWalletRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter153 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter153.getKey());
              oprot.writeString(_iter153.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map154 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map154.size);
            for (int _i155 = 0; _i155 < _map154.size; ++_i155)
            {
              String _key156;
              String _val157;
              _key156 = iprot.readString();
              _val157 = iprot.readString();
              struct.paramMap.put(_key156, _val157);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getWalletRecord_result implements org.apache.thrift.TBase<getWalletRecord_result, getWalletRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletRecord_resultTupleSchemeFactory());
    }

    public WalletRecord success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WalletRecord.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletRecord_result.class, metaDataMap);
    }

    public getWalletRecord_result() {
    }

    public getWalletRecord_result(
      WalletRecord success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletRecord_result(getWalletRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new WalletRecord(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletRecord_result deepCopy() {
      return new getWalletRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public WalletRecord getSuccess() {
      return this.success;
    }

    public getWalletRecord_result setSuccess(WalletRecord success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WalletRecord)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletRecord_result)
        return this.equals((getWalletRecord_result)that);
      return false;
    }

    public boolean equals(getWalletRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletRecord_resultStandardScheme getScheme() {
        return new getWalletRecord_resultStandardScheme();
      }
    }

    private static class getWalletRecord_resultStandardScheme extends StandardScheme<getWalletRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WalletRecord();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletRecord_resultTupleScheme getScheme() {
        return new getWalletRecord_resultTupleScheme();
      }
    }

    private static class getWalletRecord_resultTupleScheme extends TupleScheme<getWalletRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new WalletRecord();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getMentionBalance_args implements org.apache.thrift.TBase<getMentionBalance_args, getMentionBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionBalance_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionBalance_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionBalance_args.class, metaDataMap);
    }

    public getMentionBalance_args() {
    }

    public getMentionBalance_args(
      String uId,
      String userType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionBalance_args(getMentionBalance_args other) {
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
    }

    public getMentionBalance_args deepCopy() {
      return new getMentionBalance_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
    }

    public String getUId() {
      return this.uId;
    }

    public getMentionBalance_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public getMentionBalance_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionBalance_args)
        return this.equals((getMentionBalance_args)that);
      return false;
    }

    public boolean equals(getMentionBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionBalance_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionBalance_argsStandardSchemeFactory implements SchemeFactory {
      public getMentionBalance_argsStandardScheme getScheme() {
        return new getMentionBalance_argsStandardScheme();
      }
    }

    private static class getMentionBalance_argsStandardScheme extends StandardScheme<getMentionBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionBalance_argsTupleSchemeFactory implements SchemeFactory {
      public getMentionBalance_argsTupleScheme getScheme() {
        return new getMentionBalance_argsTupleScheme();
      }
    }

    private static class getMentionBalance_argsTupleScheme extends TupleScheme<getMentionBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class getMentionBalance_result implements org.apache.thrift.TBase<getMentionBalance_result, getMentionBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMentionBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentionBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentionBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentionBalance_resultTupleSchemeFactory());
    }

    public double success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentionBalance_result.class, metaDataMap);
    }

    public getMentionBalance_result() {
    }

    public getMentionBalance_result(
      double success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentionBalance_result(getMentionBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getMentionBalance_result deepCopy() {
      return new getMentionBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.qe = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public getMentionBalance_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getMentionBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentionBalance_result)
        return this.equals((getMentionBalance_result)that);
      return false;
    }

    public boolean equals(getMentionBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMentionBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentionBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentionBalance_resultStandardSchemeFactory implements SchemeFactory {
      public getMentionBalance_resultStandardScheme getScheme() {
        return new getMentionBalance_resultStandardScheme();
      }
    }

    private static class getMentionBalance_resultStandardScheme extends StandardScheme<getMentionBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentionBalance_resultTupleSchemeFactory implements SchemeFactory {
      public getMentionBalance_resultTupleScheme getScheme() {
        return new getMentionBalance_resultTupleScheme();
      }
    }

    private static class getMentionBalance_resultTupleScheme extends TupleScheme<getMentionBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentionBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateBalance_args implements org.apache.thrift.TBase<updateBalance_args, updateBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBalance_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBalance_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBalance_args.class, metaDataMap);
    }

    public updateBalance_args() {
    }

    public updateBalance_args(
      List<Map<String,String>> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBalance_args(updateBalance_args other) {
      if (other.isSetParamMap()) {
        List<Map<String,String>> __this__paramMap = new ArrayList<Map<String,String>>(other.paramMap.size());
        for (Map<String,String> other_element : other.paramMap) {
          Map<String,String> __this__paramMap_copy = new HashMap<String,String>(other_element);
          __this__paramMap.add(__this__paramMap_copy);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateBalance_args deepCopy() {
      return new updateBalance_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public java.util.Iterator<Map<String,String>> getParamMapIterator() {
      return (this.paramMap == null) ? null : this.paramMap.iterator();
    }

    public void addToParamMap(Map<String,String> elem) {
      if (this.paramMap == null) {
        this.paramMap = new ArrayList<Map<String,String>>();
      }
      this.paramMap.add(elem);
    }

    public List<Map<String,String>> getParamMap() {
      return this.paramMap;
    }

    public updateBalance_args setParamMap(List<Map<String,String>> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBalance_args)
        return this.equals((updateBalance_args)that);
      return false;
    }

    public boolean equals(updateBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBalance_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBalance_argsStandardSchemeFactory implements SchemeFactory {
      public updateBalance_argsStandardScheme getScheme() {
        return new updateBalance_argsStandardScheme();
      }
    }

    private static class updateBalance_argsStandardScheme extends StandardScheme<updateBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                  struct.paramMap = new ArrayList<Map<String,String>>(_list158.size);
                  for (int _i159 = 0; _i159 < _list158.size; ++_i159)
                  {
                    Map<String,String> _elem160;
                    {
                      org.apache.thrift.protocol.TMap _map161 = iprot.readMapBegin();
                      _elem160 = new HashMap<String,String>(2*_map161.size);
                      for (int _i162 = 0; _i162 < _map161.size; ++_i162)
                      {
                        String _key163;
                        String _val164;
                        _key163 = iprot.readString();
                        _val164 = iprot.readString();
                        _elem160.put(_key163, _val164);
                      }
                      iprot.readMapEnd();
                    }
                    struct.paramMap.add(_elem160);
                  }
                  iprot.readListEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.paramMap.size()));
            for (Map<String,String> _iter165 : struct.paramMap)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter165.size()));
                for (Map.Entry<String, String> _iter166 : _iter165.entrySet())
                {
                  oprot.writeString(_iter166.getKey());
                  oprot.writeString(_iter166.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBalance_argsTupleSchemeFactory implements SchemeFactory {
      public updateBalance_argsTupleScheme getScheme() {
        return new updateBalance_argsTupleScheme();
      }
    }

    private static class updateBalance_argsTupleScheme extends TupleScheme<updateBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map<String,String> _iter167 : struct.paramMap)
            {
              {
                oprot.writeI32(_iter167.size());
                for (Map.Entry<String, String> _iter168 : _iter167.entrySet())
                {
                  oprot.writeString(_iter168.getKey());
                  oprot.writeString(_iter168.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.paramMap = new ArrayList<Map<String,String>>(_list169.size);
            for (int _i170 = 0; _i170 < _list169.size; ++_i170)
            {
              Map<String,String> _elem171;
              {
                org.apache.thrift.protocol.TMap _map172 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem171 = new HashMap<String,String>(2*_map172.size);
                for (int _i173 = 0; _i173 < _map172.size; ++_i173)
                {
                  String _key174;
                  String _val175;
                  _key174 = iprot.readString();
                  _val175 = iprot.readString();
                  _elem171.put(_key174, _val175);
                }
              }
              struct.paramMap.add(_elem171);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateBalance_result implements org.apache.thrift.TBase<updateBalance_result, updateBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBalance_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBalance_result.class, metaDataMap);
    }

    public updateBalance_result() {
    }

    public updateBalance_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBalance_result(updateBalance_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateBalance_result deepCopy() {
      return new updateBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public updateBalance_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBalance_result)
        return this.equals((updateBalance_result)that);
      return false;
    }

    public boolean equals(updateBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBalance_resultStandardSchemeFactory implements SchemeFactory {
      public updateBalance_resultStandardScheme getScheme() {
        return new updateBalance_resultStandardScheme();
      }
    }

    private static class updateBalance_resultStandardScheme extends StandardScheme<updateBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map176 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map176.size);
                  for (int _i177 = 0; _i177 < _map176.size; ++_i177)
                  {
                    String _key178;
                    String _val179;
                    _key178 = iprot.readString();
                    _val179 = iprot.readString();
                    struct.success.put(_key178, _val179);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter180 : struct.success.entrySet())
            {
              oprot.writeString(_iter180.getKey());
              oprot.writeString(_iter180.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBalance_resultTupleSchemeFactory implements SchemeFactory {
      public updateBalance_resultTupleScheme getScheme() {
        return new updateBalance_resultTupleScheme();
      }
    }

    private static class updateBalance_resultTupleScheme extends TupleScheme<updateBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter181 : struct.success.entrySet())
            {
              oprot.writeString(_iter181.getKey());
              oprot.writeString(_iter181.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map182 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map182.size);
            for (int _i183 = 0; _i183 < _map182.size; ++_i183)
            {
              String _key184;
              String _val185;
              _key184 = iprot.readString();
              _val185 = iprot.readString();
              struct.success.put(_key184, _val185);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletList_args implements org.apache.thrift.TBase<getWalletList_args, getWalletList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletList_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletList_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletList_args.class, metaDataMap);
    }

    public getWalletList_args() {
    }

    public getWalletList_args(
      Map<String,String> paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletList_args(getWalletList_args other) {
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public getWalletList_args deepCopy() {
      return new getWalletList_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getWalletList_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletList_args)
        return this.equals((getWalletList_args)that);
      return false;
    }

    public boolean equals(getWalletList_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletList_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletList_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletList_argsStandardScheme getScheme() {
        return new getWalletList_argsStandardScheme();
      }
    }

    private static class getWalletList_argsStandardScheme extends StandardScheme<getWalletList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map186 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map186.size);
                  for (int _i187 = 0; _i187 < _map186.size; ++_i187)
                  {
                    String _key188;
                    String _val189;
                    _key188 = iprot.readString();
                    _val189 = iprot.readString();
                    struct.paramMap.put(_key188, _val189);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter190 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter190.getKey());
              oprot.writeString(_iter190.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletList_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletList_argsTupleScheme getScheme() {
        return new getWalletList_argsTupleScheme();
      }
    }

    private static class getWalletList_argsTupleScheme extends TupleScheme<getWalletList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter191 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter191.getKey());
              oprot.writeString(_iter191.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map192 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map192.size);
            for (int _i193 = 0; _i193 < _map192.size; ++_i193)
            {
              String _key194;
              String _val195;
              _key194 = iprot.readString();
              _val195 = iprot.readString();
              struct.paramMap.put(_key194, _val195);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getWalletList_result implements org.apache.thrift.TBase<getWalletList_result, getWalletList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletList_resultTupleSchemeFactory());
    }

    public Wallet success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Wallet.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletList_result.class, metaDataMap);
    }

    public getWalletList_result() {
    }

    public getWalletList_result(
      Wallet success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletList_result(getWalletList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Wallet(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletList_result deepCopy() {
      return new getWalletList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public Wallet getSuccess() {
      return this.success;
    }

    public getWalletList_result setSuccess(Wallet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Wallet)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletList_result)
        return this.equals((getWalletList_result)that);
      return false;
    }

    public boolean equals(getWalletList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletList_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletList_resultStandardScheme getScheme() {
        return new getWalletList_resultStandardScheme();
      }
    }

    private static class getWalletList_resultStandardScheme extends StandardScheme<getWalletList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Wallet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletList_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletList_resultTupleScheme getScheme() {
        return new getWalletList_resultTupleScheme();
      }
    }

    private static class getWalletList_resultTupleScheme extends TupleScheme<getWalletList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Wallet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWRAmount_args implements org.apache.thrift.TBase<getWRAmount_args, getWRAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWRAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWRAmount_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField R_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWRAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWRAmount_argsTupleSchemeFactory());
    }

    public String uId; // required
    public String userType; // required
    public int rType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uId"),
      USER_TYPE((short)2, "userType"),
      R_TYPE((short)3, "rType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // USER_TYPE
            return USER_TYPE;
          case 3: // R_TYPE
            return R_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.R_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWRAmount_args.class, metaDataMap);
    }

    public getWRAmount_args() {
    }

    public getWRAmount_args(
      String uId,
      String userType,
      int rType)
    {
      this();
      this.uId = uId;
      this.userType = userType;
      this.rType = rType;
      setRTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWRAmount_args(getWRAmount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUId()) {
        this.uId = other.uId;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
      this.rType = other.rType;
    }

    public getWRAmount_args deepCopy() {
      return new getWRAmount_args(this);
    }

    @Override
    public void clear() {
      this.uId = null;
      this.userType = null;
      setRTypeIsSet(false);
      this.rType = 0;
    }

    public String getUId() {
      return this.uId;
    }

    public getWRAmount_args setUId(String uId) {
      this.uId = uId;
      return this;
    }

    public void unsetUId() {
      this.uId = null;
    }

    /** Returns true if field uId is set (has been assigned a value) and false otherwise */
    public boolean isSetUId() {
      return this.uId != null;
    }

    public void setUIdIsSet(boolean value) {
      if (!value) {
        this.uId = null;
      }
    }

    public String getUserType() {
      return this.userType;
    }

    public getWRAmount_args setUserType(String userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public int getRType() {
      return this.rType;
    }

    public getWRAmount_args setRType(int rType) {
      this.rType = rType;
      setRTypeIsSet(true);
      return this;
    }

    public void unsetRType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RTYPE_ISSET_ID);
    }

    /** Returns true if field rType is set (has been assigned a value) and false otherwise */
    public boolean isSetRType() {
      return EncodingUtils.testBit(__isset_bitfield, __RTYPE_ISSET_ID);
    }

    public void setRTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUId();
        } else {
          setUId((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      case R_TYPE:
        if (value == null) {
          unsetRType();
        } else {
          setRType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return getUId();

      case USER_TYPE:
        return getUserType();

      case R_TYPE:
        return Integer.valueOf(getRType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUId();
      case USER_TYPE:
        return isSetUserType();
      case R_TYPE:
        return isSetRType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWRAmount_args)
        return this.equals((getWRAmount_args)that);
      return false;
    }

    public boolean equals(getWRAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_uId = true && this.isSetUId();
      boolean that_present_uId = true && that.isSetUId();
      if (this_present_uId || that_present_uId) {
        if (!(this_present_uId && that_present_uId))
          return false;
        if (!this.uId.equals(that.uId))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      boolean this_present_rType = true;
      boolean that_present_rType = true;
      if (this_present_rType || that_present_rType) {
        if (!(this_present_rType && that_present_rType))
          return false;
        if (this.rType != that.rType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWRAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRType()).compareTo(other.isSetRType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rType, other.rType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWRAmount_args(");
      boolean first = true;

      sb.append("uId:");
      if (this.uId == null) {
        sb.append("null");
      } else {
        sb.append(this.uId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rType:");
      sb.append(this.rType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWRAmount_argsStandardSchemeFactory implements SchemeFactory {
      public getWRAmount_argsStandardScheme getScheme() {
        return new getWRAmount_argsStandardScheme();
      }
    }

    private static class getWRAmount_argsStandardScheme extends StandardScheme<getWRAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWRAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uId = iprot.readString();
                struct.setUIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userType = iprot.readString();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // R_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rType = iprot.readI32();
                struct.setRTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWRAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uId != null) {
          oprot.writeFieldBegin(U_ID_FIELD_DESC);
          oprot.writeString(struct.uId);
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(R_TYPE_FIELD_DESC);
        oprot.writeI32(struct.rType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWRAmount_argsTupleSchemeFactory implements SchemeFactory {
      public getWRAmount_argsTupleScheme getScheme() {
        return new getWRAmount_argsTupleScheme();
      }
    }

    private static class getWRAmount_argsTupleScheme extends TupleScheme<getWRAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWRAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUId()) {
          optionals.set(0);
        }
        if (struct.isSetUserType()) {
          optionals.set(1);
        }
        if (struct.isSetRType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUId()) {
          oprot.writeString(struct.uId);
        }
        if (struct.isSetUserType()) {
          oprot.writeString(struct.userType);
        }
        if (struct.isSetRType()) {
          oprot.writeI32(struct.rType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWRAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uId = iprot.readString();
          struct.setUIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userType = iprot.readString();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rType = iprot.readI32();
          struct.setRTypeIsSet(true);
        }
      }
    }

  }

  public static class getWRAmount_result implements org.apache.thrift.TBase<getWRAmount_result, getWRAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWRAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWRAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWRAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWRAmount_resultTupleSchemeFactory());
    }

    public double success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWRAmount_result.class, metaDataMap);
    }

    public getWRAmount_result() {
    }

    public getWRAmount_result(
      double success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWRAmount_result(getWRAmount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWRAmount_result deepCopy() {
      return new getWRAmount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.qe = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public getWRAmount_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWRAmount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWRAmount_result)
        return this.equals((getWRAmount_result)that);
      return false;
    }

    public boolean equals(getWRAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWRAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWRAmount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWRAmount_resultStandardSchemeFactory implements SchemeFactory {
      public getWRAmount_resultStandardScheme getScheme() {
        return new getWRAmount_resultStandardScheme();
      }
    }

    private static class getWRAmount_resultStandardScheme extends StandardScheme<getWRAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWRAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWRAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWRAmount_resultTupleSchemeFactory implements SchemeFactory {
      public getWRAmount_resultTupleScheme getScheme() {
        return new getWRAmount_resultTupleScheme();
      }
    }

    private static class getWRAmount_resultTupleScheme extends TupleScheme<getWRAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWRAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWRAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
