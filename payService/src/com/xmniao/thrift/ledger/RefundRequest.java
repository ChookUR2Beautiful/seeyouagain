package com.xmniao.thrift.ledger;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class RefundRequest implements
		org.apache.thrift.TBase<RefundRequest, RefundRequest._Fields>,
		java.io.Serializable, Cloneable, Comparable<RefundRequest> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"RefundRequest");

	private static final org.apache.thrift.protocol.TField ORDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderNumber", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"money", org.apache.thrift.protocol.TType.DOUBLE, (short) 2);
	private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"remark", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bid", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new RefundRequestStandardSchemeFactory());
		schemes.put(TupleScheme.class, new RefundRequestTupleSchemeFactory());
	}

	public String orderNumber; // required
	public double money; // required
	public String remark; // required
	public String bid; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ORDER_NUMBER((short) 1, "orderNumber"), MONEY((short) 2, "money"), REMARK(
				(short) 3, "remark"), BID((short) 4, "bid");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ORDER_NUMBER
				return ORDER_NUMBER;
			case 2: // MONEY
				return MONEY;
			case 3: // REMARK
				return REMARK;
			case 4: // BID
				return BID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __MONEY_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ORDER_NUMBER,
				new org.apache.thrift.meta_data.FieldMetaData("orderNumber",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MONEY,
				new org.apache.thrift.meta_data.FieldMetaData("money",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.REMARK,
				new org.apache.thrift.meta_data.FieldMetaData("remark",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData(
				"bid", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				RefundRequest.class, metaDataMap);
	}

	public RefundRequest() {
	}

	public RefundRequest(String orderNumber, double money, String remark,
			String bid) {
		this();
		this.orderNumber = orderNumber;
		this.money = money;
		setMoneyIsSet(true);
		this.remark = remark;
		this.bid = bid;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public RefundRequest(RefundRequest other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetOrderNumber()) {
			this.orderNumber = other.orderNumber;
		}
		this.money = other.money;
		if (other.isSetRemark()) {
			this.remark = other.remark;
		}
		if (other.isSetBid()) {
			this.bid = other.bid;
		}
	}

	public RefundRequest deepCopy() {
		return new RefundRequest(this);
	}

	@Override
	public void clear() {
		this.orderNumber = null;
		setMoneyIsSet(false);
		this.money = 0.0;
		this.remark = null;
		this.bid = null;
	}

	public String getOrderNumber() {
		return this.orderNumber;
	}

	public RefundRequest setOrderNumber(String orderNumber) {
		this.orderNumber = orderNumber;
		return this;
	}

	public void unsetOrderNumber() {
		this.orderNumber = null;
	}

	/**
	 * Returns true if field orderNumber is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderNumber() {
		return this.orderNumber != null;
	}

	public void setOrderNumberIsSet(boolean value) {
		if (!value) {
			this.orderNumber = null;
		}
	}

	public double getMoney() {
		return this.money;
	}

	public RefundRequest setMoney(double money) {
		this.money = money;
		setMoneyIsSet(true);
		return this;
	}

	public void unsetMoney() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__MONEY_ISSET_ID);
	}

	/**
	 * Returns true if field money is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMoney() {
		return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
	}

	public void setMoneyIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__MONEY_ISSET_ID, value);
	}

	public String getRemark() {
		return this.remark;
	}

	public RefundRequest setRemark(String remark) {
		this.remark = remark;
		return this;
	}

	public void unsetRemark() {
		this.remark = null;
	}

	/**
	 * Returns true if field remark is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetRemark() {
		return this.remark != null;
	}

	public void setRemarkIsSet(boolean value) {
		if (!value) {
			this.remark = null;
		}
	}

	public String getBid() {
		return this.bid;
	}

	public RefundRequest setBid(String bid) {
		this.bid = bid;
		return this;
	}

	public void unsetBid() {
		this.bid = null;
	}

	/**
	 * Returns true if field bid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBid() {
		return this.bid != null;
	}

	public void setBidIsSet(boolean value) {
		if (!value) {
			this.bid = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ORDER_NUMBER:
			if (value == null) {
				unsetOrderNumber();
			} else {
				setOrderNumber((String) value);
			}
			break;

		case MONEY:
			if (value == null) {
				unsetMoney();
			} else {
				setMoney((Double) value);
			}
			break;

		case REMARK:
			if (value == null) {
				unsetRemark();
			} else {
				setRemark((String) value);
			}
			break;

		case BID:
			if (value == null) {
				unsetBid();
			} else {
				setBid((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ORDER_NUMBER:
			return getOrderNumber();

		case MONEY:
			return Double.valueOf(getMoney());

		case REMARK:
			return getRemark();

		case BID:
			return getBid();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ORDER_NUMBER:
			return isSetOrderNumber();
		case MONEY:
			return isSetMoney();
		case REMARK:
			return isSetRemark();
		case BID:
			return isSetBid();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof RefundRequest)
			return this.equals((RefundRequest) that);
		return false;
	}

	public boolean equals(RefundRequest that) {
		if (that == null)
			return false;

		boolean this_present_orderNumber = true && this.isSetOrderNumber();
		boolean that_present_orderNumber = true && that.isSetOrderNumber();
		if (this_present_orderNumber || that_present_orderNumber) {
			if (!(this_present_orderNumber && that_present_orderNumber))
				return false;
			if (!this.orderNumber.equals(that.orderNumber))
				return false;
		}

		boolean this_present_money = true;
		boolean that_present_money = true;
		if (this_present_money || that_present_money) {
			if (!(this_present_money && that_present_money))
				return false;
			if (this.money != that.money)
				return false;
		}

		boolean this_present_remark = true && this.isSetRemark();
		boolean that_present_remark = true && that.isSetRemark();
		if (this_present_remark || that_present_remark) {
			if (!(this_present_remark && that_present_remark))
				return false;
			if (!this.remark.equals(that.remark))
				return false;
		}

		boolean this_present_bid = true && this.isSetBid();
		boolean that_present_bid = true && that.isSetBid();
		if (this_present_bid || that_present_bid) {
			if (!(this_present_bid && that_present_bid))
				return false;
			if (!this.bid.equals(that.bid))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	@Override
	public int compareTo(RefundRequest other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetOrderNumber()).compareTo(
				other.isSetOrderNumber());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderNumber()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.orderNumber, other.orderNumber);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMoney()).compareTo(
				other.isSetMoney());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMoney()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.money, other.money);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRemark()).compareTo(
				other.isSetRemark());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRemark()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.remark, other.remark);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBid())
				.compareTo(other.isSetBid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid,
					other.bid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("RefundRequest(");
		boolean first = true;

		sb.append("orderNumber:");
		if (this.orderNumber == null) {
			sb.append("null");
		} else {
			sb.append(this.orderNumber);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("money:");
		sb.append(this.money);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("remark:");
		if (this.remark == null) {
			sb.append("null");
		} else {
			sb.append(this.remark);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("bid:");
		if (this.bid == null) {
			sb.append("null");
		} else {
			sb.append(this.bid);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class RefundRequestStandardSchemeFactory implements
			SchemeFactory {
		public RefundRequestStandardScheme getScheme() {
			return new RefundRequestStandardScheme();
		}
	}

	private static class RefundRequestStandardScheme extends
			StandardScheme<RefundRequest> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				RefundRequest struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ORDER_NUMBER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderNumber = iprot.readString();
						struct.setOrderNumberIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // MONEY
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.money = iprot.readDouble();
						struct.setMoneyIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // REMARK
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.remark = iprot.readString();
						struct.setRemarkIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // BID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bid = iprot.readString();
						struct.setBidIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				RefundRequest struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.orderNumber != null) {
				oprot.writeFieldBegin(ORDER_NUMBER_FIELD_DESC);
				oprot.writeString(struct.orderNumber);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(MONEY_FIELD_DESC);
			oprot.writeDouble(struct.money);
			oprot.writeFieldEnd();
			if (struct.remark != null) {
				oprot.writeFieldBegin(REMARK_FIELD_DESC);
				oprot.writeString(struct.remark);
				oprot.writeFieldEnd();
			}
			if (struct.bid != null) {
				oprot.writeFieldBegin(BID_FIELD_DESC);
				oprot.writeString(struct.bid);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class RefundRequestTupleSchemeFactory implements
			SchemeFactory {
		public RefundRequestTupleScheme getScheme() {
			return new RefundRequestTupleScheme();
		}
	}

	private static class RefundRequestTupleScheme extends
			TupleScheme<RefundRequest> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				RefundRequest struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetOrderNumber()) {
				optionals.set(0);
			}
			if (struct.isSetMoney()) {
				optionals.set(1);
			}
			if (struct.isSetRemark()) {
				optionals.set(2);
			}
			if (struct.isSetBid()) {
				optionals.set(3);
			}
			oprot.writeBitSet(optionals, 4);
			if (struct.isSetOrderNumber()) {
				oprot.writeString(struct.orderNumber);
			}
			if (struct.isSetMoney()) {
				oprot.writeDouble(struct.money);
			}
			if (struct.isSetRemark()) {
				oprot.writeString(struct.remark);
			}
			if (struct.isSetBid()) {
				oprot.writeString(struct.bid);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				RefundRequest struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(4);
			if (incoming.get(0)) {
				struct.orderNumber = iprot.readString();
				struct.setOrderNumberIsSet(true);
			}
			if (incoming.get(1)) {
				struct.money = iprot.readDouble();
				struct.setMoneyIsSet(true);
			}
			if (incoming.get(2)) {
				struct.remark = iprot.readString();
				struct.setRemarkIsSet(true);
			}
			if (incoming.get(3)) {
				struct.bid = iprot.readString();
				struct.setBidIsSet(true);
			}
		}
	}

}
