package com.xmniao.service.pay.manor;

import com.xmniao.enums.BusinessStatusCodeEnum;
import com.xmniao.enums.ResultCodeEnum;
import com.xmniao.exception.CustomException;
import com.xmniao.service.PropsService;
import com.xmniao.service.msg.manor.ManorProducer;
import com.xmniao.thrift.manor.ManorPropsThriftService;
import com.xmniao.thrift.manor.Result;
import com.xmniao.thrift.manor.ResultList;

import org.apache.log4j.Logger;
import org.apache.thrift.TException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 黄金家园thrift实现类
 *
 * @author liyuanbo
 * @create 2017-06-05 10:22
 **/
@Service("ManorPropsThriftServiceImpl")
public class ManorPropsThriftServiceImpl implements ManorPropsThriftService.Iface {
    @Autowired
    private PropsService propsService;

    @Autowired
    private ManorProducer manorProducer;

    @Autowired
    private String manorPayTopic;

    @Autowired
    private String manorGiftNectarReturnbackTag;

    private static Logger logger = Logger.getLogger(ManorPropsThriftServiceImpl.class);


    @Override
    public Result activateManor(String transNo, long partenUid, long uid, int type, int number) throws TException {
        Result result = new Result();
        try {
            result = propsService.activateManor(transNo, partenUid, uid, type, number);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("激活/续租庄园失败,请重试.");
        } catch (Exception e) {
            logger.error("激活/续租庄园发生异常,异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("激活/续租庄园发生异常，请重试.");
        }
        return result;
    }

    @Override
    public ResultList growFlower(String transNo, long uid, int number) throws TException {
        ResultList result = new ResultList();
        try {
            result = propsService.growFlower(transNo, uid, number);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户" + uid + "种花操作庄园失败,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:" + uid + "种花操作失败，发生异常.异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户uid:" + uid + "种花操作失败，发生异常.异常信息如下:" + e);
        }
        return result;
    }
    /**
     * 用户领取赠送的鸟币
     */
    @Override
    public ResultList receiveUserGiveRedpackage(String transNo, long uid,List<String> transNoLists) throws TException {
        ResultList result = new ResultList();
        try {
            result = propsService.receiveUserGiveRedpackage(transNo, uid,transNoLists);
        } catch (CustomException e) {
            logger.error("用户领取赠送的鸟币操作发生异常,异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户领取赠送的鸟币操作发生异常,异常信息如下:" + e);
        } catch (Exception e) {
            logger.error("用户领取赠送的鸟币操作发生异常,异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户领取赠送的鸟币操作发生异常，请重试.");
        }
        return result;
    }

    /**
     * 用户领取每日统计的花蜜
     *
     * @param transNo 交易号
     * @param uid     操作的用户ID
     * @param number  数量
     */
    @Override
    public Result receiveEvaryDayNectary(String transNo, long uid, double number) throws TException {
        Result result = new Result();
        try {
            result = propsService.receiveEvaryDayNectary(transNo, uid, number);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户领取花蜜(每天收益)操作失败,请重试.");
        } catch (Exception e) {
            logger.error("用户领取花蜜(每天收益)操作发生异常,异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户领取花蜜(每天收益)操作发生异常，请重试.");
        }
        return result;
    }

    /**
     * 用户领取赠送的蜜罐
     */
    @Override
    public ResultList receiveUserGiveNectary(String transNo, long uid) throws TException {
        ResultList result = new ResultList();
        try {
            result = propsService.receiveUserGiveNectary(transNo, uid);
//            try {
//                if (result.getCode() == 1 && result.getStatusCode().equals("10000")) {
//                    List<Map<String, String>> receiveList = result.getValues();
//                    if (receiveList != null) {
//                        for (Map<String, String> map : receiveList) {
//                            Map<String, String> msg = new HashMap<>();
//                            msg.put("uid", uid + "");
//                            msg.put("transNo", map.get("transNo"));
//                            msg.put("number", Integer.parseInt(map.get("number"))*Integer.parseInt(map.get("coverValue"))+"");
//                            manorProducer.returnBackMsg(manorPayTopic, manorGiftNectarReturnbackTag, msg);
//                        }
//                    }
//                }
//            } catch (Exception e) {
//                logger.error("发送同步消息异常", e);
//            }
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户领取赠送的蜜罐操作失败,请重试.");
        } catch (Exception e) {
            logger.error("用户领取赠送的蜜罐操作发生异常,异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户领取赠送的蜜罐操作发生异常,异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 赠送用户花蜜
     */
    @Override
    public Result giveUserNectary(String transNo, long uid, long giveUid, int number, int coverValue) throws TException {
        Result result = new Result();
        try {
            result = propsService.giveUserNectary(transNo, uid, giveUid, number, coverValue);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("赠送用户蜜罐操作失败,请重试.");
        } catch (Exception e) {
            logger.error("赠送用户蜜罐操作发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("赠送用户蜜罐操作发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 统计用户道具
     *
     * @param uid 操作的用户ID
     */
    @Override
    public ResultList statisticsUserProps(long uid) throws TException {
        ResultList result = new ResultList();
        try {
            result = propsService.statisticsUserProps(uid);
        } catch (Exception e) {
            logger.error("统计用户道具操作发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("统计用户道具操作发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 发送红包
     *
     * @param transNo 消费交易号
     * @param uid     操作的用户ID
     * @param giveUid 赠送的人用户ID
     * @param number  发送的红包数量
     * @param amount  发送的红包金额
     */
    @Override
    public Result sendPropsRedpackage(String transNo, long uid, long giveUid, int number, double amount, int type) throws TException {
        Result result = new Result();
        try {
            result = propsService.sendPropsRedpackage(transNo, uid, giveUid, number, amount, type);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户发送鸟币红包操作发生异常,请重试.");
        } catch (Exception e) {
            logger.error("用户发送鸟币红包操作发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户发送鸟币红包操作发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 获取用户发送的红包历史记录
     *
     * @param uid 操作的用户ID
     */
    @Override
    public ResultList listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit) throws TException {
        ResultList result = new ResultList();
        try {
            result = propsService.listUserPropsRedpackageHistoryByUid(uid, offset, limit);
        } catch (Exception e) {
            logger.error("用户发送鸟币红包操作发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户发送鸟币红包操作发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 获取红包的领取记录
     *
     * @param redpackageId 红包ID
     */
    @Override
    public ResultList listPropsRedpackageRecordByRedpackageId(long redpackageId,long uid ) throws TException {
        ResultList result = new ResultList();
        try {
            result = propsService.listPropsRedpackageRecordByRedpackageId(redpackageId,uid);
        } catch (Exception e) {
            logger.error("获取红包的领取记录操作发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("获取红包的领取记录操作发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 用户领取红包
     *
     * @param redpackageId 红包ID
     * @param uid          领取的用户ID
     */
    @Override
    public Result getPropsRedpackage(long redpackageId, long uid) throws TException {
        Result result = new Result();
        try {
            result = propsService.getPropsRedpackage(redpackageId, uid);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户领取红包操作发生异常,请重试.");
        } catch (Exception e) {
            logger.error("用户领取红包操作发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户领取红包操作发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 获取道具统计数量
     *
     * @param uid 操作的用户ID
     */
    @Override
    public Result statisticsUserRepertory(long uid) throws TException {
        Result result = new Result();
        try {
            result = propsService.statisticsUserRepertory(uid);
        } catch (Exception e) {
            logger.error("统计用户仓库操作发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("统计用户仓库操作发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 兑换鸟币
     *
     * @param transNo            交易号
     * @param uid                用户ID
     * @param number             兑换的现金数量
     * @param configNectarNumber 配置的花蜜数量
     * @param moneyRedpackage    兑换的红包额度
     */
    @Override
    public Result exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage) throws TException {
        Result result = new Result();
        try {
            result = propsService.exchangeMoneyRedpackage(transNo, uid, number, configNectarNumber, moneyRedpackage);
        } catch (CustomException e) {
            logger.error("用户兑换现金红包异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户兑换现金红包异常，异常信息如下:" + e);
        } catch (Exception e) {
            logger.error("用户兑换现金红包异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户兑换现金红包异常，异常信息如下:" + e);
        }
        return result;
    }

    @Override
    public Result addUserEnergy(String transNo, long uid, double number, int type) throws TException {
        Result result = new Result();
        try {
            result = propsService.addUserEnergy(transNo, uid, number, type);
        } catch (CustomException e) {
            logger.error("增加用户的能量发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("增加用户的能量发生异常，异常信息如下:" + e);
        } catch (Exception e) {
            logger.error("增加用户的能量发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("增加用户的能量发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 购买花苗
     *
     * @param transNo 交易号
     * @param uid     交易的用户ID
     * @param number  购买的花苗数量
     * @param month   购买的月数
     * @param amount  总金额
     */
    @Override
    public Result buyFlower(String transNo, long uid, int number, int month, double amount) throws TException {
        Result result = new Result();
        try {
            result = propsService.buyFlower(transNo, uid, number, month, amount);
        } catch (CustomException e) {
            logger.error("用户购买花苗时异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("用户购买花苗时异常，异常信息如下:" + e);
        } catch (Exception e) {
            logger.error("用户购买花苗时异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("用户购买花苗时异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 用户花蜜的报表
     */
    @Override
    public ResultList nectaryReport(long uid, int offset, int limit){
        ResultList result = new ResultList();
        try {
            result = propsService.nectaryReport(uid, offset, limit);
        } catch (Exception e) {
            logger.error("获取用户花蜜报表失败，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("获取用户花蜜报表失败，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 用户花蜜的报表
     */
    @Override
    public ResultList timerGrowFlower(String transNo, long uid, int hours) {
        ResultList result = new ResultList();
        try {
            result = propsService.timerGrowFlower(transNo, uid, hours);
        }catch (CustomException e) {
            logger.error("当前用户"+uid+"定时任务自动种花发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("当前用户"+uid+"定时任务自动种花发生异常，异常信息如下:" + e);
        } catch (Exception e) {
            logger.error("当前用户"+uid+"定时任务自动种花发生异常，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("当前用户"+uid+"定时任务自动种花发生异常，异常信息如下:" + e);
        }
        return result;
    }

    /**
     * 获取所有花未种完的用户
     * @param hours
     * @return
     */
    @Override
    public ResultList getAllNotFinishGrowUserByHours(int hours){
        ResultList result = new ResultList();
        try {
            result = propsService.getAllNotFinishGrowUserByHours(hours);
        }catch (Exception e) {
            logger.error("获取所有花未种完的用户，异常信息如下:" + e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("获取所有花未种完的用户，异常信息如下:" + e);
        }
        return result;
    }
}
