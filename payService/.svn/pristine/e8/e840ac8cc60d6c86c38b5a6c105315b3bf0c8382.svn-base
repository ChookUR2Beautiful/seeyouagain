package com.xmniao.thrift.ledger;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SubList implements org.apache.thrift.TBase<SubList, SubList._Fields>, java.io.Serializable, Cloneable, Comparable<SubList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubList");

  private static final org.apache.thrift.protocol.TField DEAL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dealDate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sum", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dataList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubListTupleSchemeFactory());
  }

  public String dealDate; // required
  public String sum; // required
  public List<Map<String,String>> dataList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEAL_DATE((short)1, "dealDate"),
    SUM((short)2, "sum"),
    DATA_LIST((short)3, "dataList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEAL_DATE
          return DEAL_DATE;
        case 2: // SUM
          return SUM;
        case 3: // DATA_LIST
          return DATA_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEAL_DATE, new org.apache.thrift.meta_data.FieldMetaData("dealDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUM, new org.apache.thrift.meta_data.FieldMetaData("sum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_LIST, new org.apache.thrift.meta_data.FieldMetaData("dataList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubList.class, metaDataMap);
  }

  public SubList() {
  }

  public SubList(
    String dealDate,
    String sum,
    List<Map<String,String>> dataList)
  {
    this();
    this.dealDate = dealDate;
    this.sum = sum;
    this.dataList = dataList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubList(SubList other) {
    if (other.isSetDealDate()) {
      this.dealDate = other.dealDate;
    }
    if (other.isSetSum()) {
      this.sum = other.sum;
    }
    if (other.isSetDataList()) {
      List<Map<String,String>> __this__dataList = new ArrayList<Map<String,String>>(other.dataList.size());
      for (Map<String,String> other_element : other.dataList) {
        Map<String,String> __this__dataList_copy = new HashMap<String,String>(other_element);
        __this__dataList.add(__this__dataList_copy);
      }
      this.dataList = __this__dataList;
    }
  }

  public SubList deepCopy() {
    return new SubList(this);
  }

  @Override
  public void clear() {
    this.dealDate = null;
    this.sum = null;
    this.dataList = null;
  }

  public String getDealDate() {
    return this.dealDate;
  }

  public SubList setDealDate(String dealDate) {
    this.dealDate = dealDate;
    return this;
  }

  public void unsetDealDate() {
    this.dealDate = null;
  }

  /** Returns true if field dealDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDealDate() {
    return this.dealDate != null;
  }

  public void setDealDateIsSet(boolean value) {
    if (!value) {
      this.dealDate = null;
    }
  }

  public String getSum() {
    return this.sum;
  }

  public SubList setSum(String sum) {
    this.sum = sum;
    return this;
  }

  public void unsetSum() {
    this.sum = null;
  }

  /** Returns true if field sum is set (has been assigned a value) and false otherwise */
  public boolean isSetSum() {
    return this.sum != null;
  }

  public void setSumIsSet(boolean value) {
    if (!value) {
      this.sum = null;
    }
  }

  public int getDataListSize() {
    return (this.dataList == null) ? 0 : this.dataList.size();
  }

  public java.util.Iterator<Map<String,String>> getDataListIterator() {
    return (this.dataList == null) ? null : this.dataList.iterator();
  }

  public void addToDataList(Map<String,String> elem) {
    if (this.dataList == null) {
      this.dataList = new ArrayList<Map<String,String>>();
    }
    this.dataList.add(elem);
  }

  public List<Map<String,String>> getDataList() {
    return this.dataList;
  }

  public SubList setDataList(List<Map<String,String>> dataList) {
    this.dataList = dataList;
    return this;
  }

  public void unsetDataList() {
    this.dataList = null;
  }

  /** Returns true if field dataList is set (has been assigned a value) and false otherwise */
  public boolean isSetDataList() {
    return this.dataList != null;
  }

  public void setDataListIsSet(boolean value) {
    if (!value) {
      this.dataList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEAL_DATE:
      if (value == null) {
        unsetDealDate();
      } else {
        setDealDate((String)value);
      }
      break;

    case SUM:
      if (value == null) {
        unsetSum();
      } else {
        setSum((String)value);
      }
      break;

    case DATA_LIST:
      if (value == null) {
        unsetDataList();
      } else {
        setDataList((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEAL_DATE:
      return getDealDate();

    case SUM:
      return getSum();

    case DATA_LIST:
      return getDataList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEAL_DATE:
      return isSetDealDate();
    case SUM:
      return isSetSum();
    case DATA_LIST:
      return isSetDataList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubList)
      return this.equals((SubList)that);
    return false;
  }

  public boolean equals(SubList that) {
    if (that == null)
      return false;

    boolean this_present_dealDate = true && this.isSetDealDate();
    boolean that_present_dealDate = true && that.isSetDealDate();
    if (this_present_dealDate || that_present_dealDate) {
      if (!(this_present_dealDate && that_present_dealDate))
        return false;
      if (!this.dealDate.equals(that.dealDate))
        return false;
    }

    boolean this_present_sum = true && this.isSetSum();
    boolean that_present_sum = true && that.isSetSum();
    if (this_present_sum || that_present_sum) {
      if (!(this_present_sum && that_present_sum))
        return false;
      if (!this.sum.equals(that.sum))
        return false;
    }

    boolean this_present_dataList = true && this.isSetDataList();
    boolean that_present_dataList = true && that.isSetDataList();
    if (this_present_dataList || that_present_dataList) {
      if (!(this_present_dataList && that_present_dataList))
        return false;
      if (!this.dataList.equals(that.dataList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDealDate()).compareTo(other.isSetDealDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealDate, other.dealDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSum()).compareTo(other.isSetSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sum, other.sum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataList()).compareTo(other.isSetDataList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataList, other.dataList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubList(");
    boolean first = true;

    sb.append("dealDate:");
    if (this.dealDate == null) {
      sb.append("null");
    } else {
      sb.append(this.dealDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sum:");
    if (this.sum == null) {
      sb.append("null");
    } else {
      sb.append(this.sum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataList:");
    if (this.dataList == null) {
      sb.append("null");
    } else {
      sb.append(this.dataList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubListStandardSchemeFactory implements SchemeFactory {
    public SubListStandardScheme getScheme() {
      return new SubListStandardScheme();
    }
  }

  private static class SubListStandardScheme extends StandardScheme<SubList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEAL_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dealDate = iprot.readString();
              struct.setDealDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sum = iprot.readString();
              struct.setSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.dataList = new ArrayList<Map<String,String>>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  Map<String,String> _elem12;
                  {
                    org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                    _elem12 = new HashMap<String,String>(2*_map13.size);
                    for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                    {
                      String _key15;
                      String _val16;
                      _key15 = iprot.readString();
                      _val16 = iprot.readString();
                      _elem12.put(_key15, _val16);
                    }
                    iprot.readMapEnd();
                  }
                  struct.dataList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setDataListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dealDate != null) {
        oprot.writeFieldBegin(DEAL_DATE_FIELD_DESC);
        oprot.writeString(struct.dealDate);
        oprot.writeFieldEnd();
      }
      if (struct.sum != null) {
        oprot.writeFieldBegin(SUM_FIELD_DESC);
        oprot.writeString(struct.sum);
        oprot.writeFieldEnd();
      }
      if (struct.dataList != null) {
        oprot.writeFieldBegin(DATA_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.dataList.size()));
          for (Map<String,String> _iter17 : struct.dataList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter17.size()));
              for (Map.Entry<String, String> _iter18 : _iter17.entrySet())
              {
                oprot.writeString(_iter18.getKey());
                oprot.writeString(_iter18.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubListTupleSchemeFactory implements SchemeFactory {
    public SubListTupleScheme getScheme() {
      return new SubListTupleScheme();
    }
  }

  private static class SubListTupleScheme extends TupleScheme<SubList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDealDate()) {
        optionals.set(0);
      }
      if (struct.isSetSum()) {
        optionals.set(1);
      }
      if (struct.isSetDataList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDealDate()) {
        oprot.writeString(struct.dealDate);
      }
      if (struct.isSetSum()) {
        oprot.writeString(struct.sum);
      }
      if (struct.isSetDataList()) {
        {
          oprot.writeI32(struct.dataList.size());
          for (Map<String,String> _iter19 : struct.dataList)
          {
            {
              oprot.writeI32(_iter19.size());
              for (Map.Entry<String, String> _iter20 : _iter19.entrySet())
              {
                oprot.writeString(_iter20.getKey());
                oprot.writeString(_iter20.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.dealDate = iprot.readString();
        struct.setDealDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sum = iprot.readString();
        struct.setSumIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.dataList = new ArrayList<Map<String,String>>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            Map<String,String> _elem23;
            {
              org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem23 = new HashMap<String,String>(2*_map24.size);
              for (int _i25 = 0; _i25 < _map24.size; ++_i25)
              {
                String _key26;
                String _val27;
                _key26 = iprot.readString();
                _val27 = iprot.readString();
                _elem23.put(_key26, _val27);
              }
            }
            struct.dataList.add(_elem23);
          }
        }
        struct.setDataListIsSet(true);
      }
    }
  }

}

