/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.thrift.ledger;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JointWithdraw implements org.apache.thrift.TBase<JointWithdraw, JointWithdraw._Fields>, java.io.Serializable, Cloneable, Comparable<JointWithdraw> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JointWithdraw");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WITHDRAWED_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawedMoney", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WITHDRAWING_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawingMoney", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SPLIT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("splitMoney", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOW_SPLIT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("nowSplitMoney", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField JOINT_WITHDRAW_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jointWithdrawList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JointWithdrawStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JointWithdrawTupleSchemeFactory());
  }

  public int state; // required
  public String msg; // required
  public String withdrawedMoney; // required
  public String withdrawingMoney; // required
  public String splitMoney; // required
  public String nowSplitMoney; // required
  public List<Map<String,String>> jointWithdrawList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE((short)1, "state"),
    MSG((short)2, "msg"),
    WITHDRAWED_MONEY((short)3, "withdrawedMoney"),
    WITHDRAWING_MONEY((short)4, "withdrawingMoney"),
    SPLIT_MONEY((short)5, "splitMoney"),
    NOW_SPLIT_MONEY((short)6, "nowSplitMoney"),
    JOINT_WITHDRAW_LIST((short)7, "jointWithdrawList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // MSG
          return MSG;
        case 3: // WITHDRAWED_MONEY
          return WITHDRAWED_MONEY;
        case 4: // WITHDRAWING_MONEY
          return WITHDRAWING_MONEY;
        case 5: // SPLIT_MONEY
          return SPLIT_MONEY;
        case 6: // NOW_SPLIT_MONEY
          return NOW_SPLIT_MONEY;
        case 7: // JOINT_WITHDRAW_LIST
          return JOINT_WITHDRAW_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WITHDRAWED_MONEY, new org.apache.thrift.meta_data.FieldMetaData("withdrawedMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WITHDRAWING_MONEY, new org.apache.thrift.meta_data.FieldMetaData("withdrawingMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPLIT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("splitMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOW_SPLIT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("nowSplitMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOINT_WITHDRAW_LIST, new org.apache.thrift.meta_data.FieldMetaData("jointWithdrawList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JointWithdraw.class, metaDataMap);
  }

  public JointWithdraw() {
  }

  public JointWithdraw(
    int state,
    String msg,
    String withdrawedMoney,
    String withdrawingMoney,
    String splitMoney,
    String nowSplitMoney,
    List<Map<String,String>> jointWithdrawList)
  {
    this();
    this.state = state;
    setStateIsSet(true);
    this.msg = msg;
    this.withdrawedMoney = withdrawedMoney;
    this.withdrawingMoney = withdrawingMoney;
    this.splitMoney = splitMoney;
    this.nowSplitMoney = nowSplitMoney;
    this.jointWithdrawList = jointWithdrawList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JointWithdraw(JointWithdraw other) {
    __isset_bitfield = other.__isset_bitfield;
    this.state = other.state;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetWithdrawedMoney()) {
      this.withdrawedMoney = other.withdrawedMoney;
    }
    if (other.isSetWithdrawingMoney()) {
      this.withdrawingMoney = other.withdrawingMoney;
    }
    if (other.isSetSplitMoney()) {
      this.splitMoney = other.splitMoney;
    }
    if (other.isSetNowSplitMoney()) {
      this.nowSplitMoney = other.nowSplitMoney;
    }
    if (other.isSetJointWithdrawList()) {
      List<Map<String,String>> __this__jointWithdrawList = new ArrayList<Map<String,String>>(other.jointWithdrawList.size());
      for (Map<String,String> other_element : other.jointWithdrawList) {
        Map<String,String> __this__jointWithdrawList_copy = new HashMap<String,String>(other_element);
        __this__jointWithdrawList.add(__this__jointWithdrawList_copy);
      }
      this.jointWithdrawList = __this__jointWithdrawList;
    }
  }

  public JointWithdraw deepCopy() {
    return new JointWithdraw(this);
  }

  @Override
  public void clear() {
    setStateIsSet(false);
    this.state = 0;
    this.msg = null;
    this.withdrawedMoney = null;
    this.withdrawingMoney = null;
    this.splitMoney = null;
    this.nowSplitMoney = null;
    this.jointWithdrawList = null;
  }

  public int getState() {
    return this.state;
  }

  public JointWithdraw setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public JointWithdraw setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public String getWithdrawedMoney() {
    return this.withdrawedMoney;
  }

  public JointWithdraw setWithdrawedMoney(String withdrawedMoney) {
    this.withdrawedMoney = withdrawedMoney;
    return this;
  }

  public void unsetWithdrawedMoney() {
    this.withdrawedMoney = null;
  }

  /** Returns true if field withdrawedMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawedMoney() {
    return this.withdrawedMoney != null;
  }

  public void setWithdrawedMoneyIsSet(boolean value) {
    if (!value) {
      this.withdrawedMoney = null;
    }
  }

  public String getWithdrawingMoney() {
    return this.withdrawingMoney;
  }

  public JointWithdraw setWithdrawingMoney(String withdrawingMoney) {
    this.withdrawingMoney = withdrawingMoney;
    return this;
  }

  public void unsetWithdrawingMoney() {
    this.withdrawingMoney = null;
  }

  /** Returns true if field withdrawingMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawingMoney() {
    return this.withdrawingMoney != null;
  }

  public void setWithdrawingMoneyIsSet(boolean value) {
    if (!value) {
      this.withdrawingMoney = null;
    }
  }

  public String getSplitMoney() {
    return this.splitMoney;
  }

  public JointWithdraw setSplitMoney(String splitMoney) {
    this.splitMoney = splitMoney;
    return this;
  }

  public void unsetSplitMoney() {
    this.splitMoney = null;
  }

  /** Returns true if field splitMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitMoney() {
    return this.splitMoney != null;
  }

  public void setSplitMoneyIsSet(boolean value) {
    if (!value) {
      this.splitMoney = null;
    }
  }

  public String getNowSplitMoney() {
    return this.nowSplitMoney;
  }

  public JointWithdraw setNowSplitMoney(String nowSplitMoney) {
    this.nowSplitMoney = nowSplitMoney;
    return this;
  }

  public void unsetNowSplitMoney() {
    this.nowSplitMoney = null;
  }

  /** Returns true if field nowSplitMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNowSplitMoney() {
    return this.nowSplitMoney != null;
  }

  public void setNowSplitMoneyIsSet(boolean value) {
    if (!value) {
      this.nowSplitMoney = null;
    }
  }

  public int getJointWithdrawListSize() {
    return (this.jointWithdrawList == null) ? 0 : this.jointWithdrawList.size();
  }

  public java.util.Iterator<Map<String,String>> getJointWithdrawListIterator() {
    return (this.jointWithdrawList == null) ? null : this.jointWithdrawList.iterator();
  }

  public void addToJointWithdrawList(Map<String,String> elem) {
    if (this.jointWithdrawList == null) {
      this.jointWithdrawList = new ArrayList<Map<String,String>>();
    }
    this.jointWithdrawList.add(elem);
  }

  public List<Map<String,String>> getJointWithdrawList() {
    return this.jointWithdrawList;
  }

  public JointWithdraw setJointWithdrawList(List<Map<String,String>> jointWithdrawList) {
    this.jointWithdrawList = jointWithdrawList;
    return this;
  }

  public void unsetJointWithdrawList() {
    this.jointWithdrawList = null;
  }

  /** Returns true if field jointWithdrawList is set (has been assigned a value) and false otherwise */
  public boolean isSetJointWithdrawList() {
    return this.jointWithdrawList != null;
  }

  public void setJointWithdrawListIsSet(boolean value) {
    if (!value) {
      this.jointWithdrawList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case WITHDRAWED_MONEY:
      if (value == null) {
        unsetWithdrawedMoney();
      } else {
        setWithdrawedMoney((String)value);
      }
      break;

    case WITHDRAWING_MONEY:
      if (value == null) {
        unsetWithdrawingMoney();
      } else {
        setWithdrawingMoney((String)value);
      }
      break;

    case SPLIT_MONEY:
      if (value == null) {
        unsetSplitMoney();
      } else {
        setSplitMoney((String)value);
      }
      break;

    case NOW_SPLIT_MONEY:
      if (value == null) {
        unsetNowSplitMoney();
      } else {
        setNowSplitMoney((String)value);
      }
      break;

    case JOINT_WITHDRAW_LIST:
      if (value == null) {
        unsetJointWithdrawList();
      } else {
        setJointWithdrawList((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return Integer.valueOf(getState());

    case MSG:
      return getMsg();

    case WITHDRAWED_MONEY:
      return getWithdrawedMoney();

    case WITHDRAWING_MONEY:
      return getWithdrawingMoney();

    case SPLIT_MONEY:
      return getSplitMoney();

    case NOW_SPLIT_MONEY:
      return getNowSplitMoney();

    case JOINT_WITHDRAW_LIST:
      return getJointWithdrawList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case MSG:
      return isSetMsg();
    case WITHDRAWED_MONEY:
      return isSetWithdrawedMoney();
    case WITHDRAWING_MONEY:
      return isSetWithdrawingMoney();
    case SPLIT_MONEY:
      return isSetSplitMoney();
    case NOW_SPLIT_MONEY:
      return isSetNowSplitMoney();
    case JOINT_WITHDRAW_LIST:
      return isSetJointWithdrawList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JointWithdraw)
      return this.equals((JointWithdraw)that);
    return false;
  }

  public boolean equals(JointWithdraw that) {
    if (that == null)
      return false;

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_withdrawedMoney = true && this.isSetWithdrawedMoney();
    boolean that_present_withdrawedMoney = true && that.isSetWithdrawedMoney();
    if (this_present_withdrawedMoney || that_present_withdrawedMoney) {
      if (!(this_present_withdrawedMoney && that_present_withdrawedMoney))
        return false;
      if (!this.withdrawedMoney.equals(that.withdrawedMoney))
        return false;
    }

    boolean this_present_withdrawingMoney = true && this.isSetWithdrawingMoney();
    boolean that_present_withdrawingMoney = true && that.isSetWithdrawingMoney();
    if (this_present_withdrawingMoney || that_present_withdrawingMoney) {
      if (!(this_present_withdrawingMoney && that_present_withdrawingMoney))
        return false;
      if (!this.withdrawingMoney.equals(that.withdrawingMoney))
        return false;
    }

    boolean this_present_splitMoney = true && this.isSetSplitMoney();
    boolean that_present_splitMoney = true && that.isSetSplitMoney();
    if (this_present_splitMoney || that_present_splitMoney) {
      if (!(this_present_splitMoney && that_present_splitMoney))
        return false;
      if (!this.splitMoney.equals(that.splitMoney))
        return false;
    }

    boolean this_present_nowSplitMoney = true && this.isSetNowSplitMoney();
    boolean that_present_nowSplitMoney = true && that.isSetNowSplitMoney();
    if (this_present_nowSplitMoney || that_present_nowSplitMoney) {
      if (!(this_present_nowSplitMoney && that_present_nowSplitMoney))
        return false;
      if (!this.nowSplitMoney.equals(that.nowSplitMoney))
        return false;
    }

    boolean this_present_jointWithdrawList = true && this.isSetJointWithdrawList();
    boolean that_present_jointWithdrawList = true && that.isSetJointWithdrawList();
    if (this_present_jointWithdrawList || that_present_jointWithdrawList) {
      if (!(this_present_jointWithdrawList && that_present_jointWithdrawList))
        return false;
      if (!this.jointWithdrawList.equals(that.jointWithdrawList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JointWithdraw other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawedMoney()).compareTo(other.isSetWithdrawedMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawedMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawedMoney, other.withdrawedMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawingMoney()).compareTo(other.isSetWithdrawingMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawingMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawingMoney, other.withdrawingMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplitMoney()).compareTo(other.isSetSplitMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitMoney, other.splitMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNowSplitMoney()).compareTo(other.isSetNowSplitMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowSplitMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowSplitMoney, other.nowSplitMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJointWithdrawList()).compareTo(other.isSetJointWithdrawList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointWithdrawList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointWithdrawList, other.jointWithdrawList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JointWithdraw(");
    boolean first = true;

    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawedMoney:");
    if (this.withdrawedMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.withdrawedMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawingMoney:");
    if (this.withdrawingMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.withdrawingMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("splitMoney:");
    if (this.splitMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.splitMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nowSplitMoney:");
    if (this.nowSplitMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.nowSplitMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointWithdrawList:");
    if (this.jointWithdrawList == null) {
      sb.append("null");
    } else {
      sb.append(this.jointWithdrawList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JointWithdrawStandardSchemeFactory implements SchemeFactory {
    public JointWithdrawStandardScheme getScheme() {
      return new JointWithdrawStandardScheme();
    }
  }

  private static class JointWithdrawStandardScheme extends StandardScheme<JointWithdraw> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JointWithdraw struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WITHDRAWED_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.withdrawedMoney = iprot.readString();
              struct.setWithdrawedMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WITHDRAWING_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.withdrawingMoney = iprot.readString();
              struct.setWithdrawingMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPLIT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.splitMoney = iprot.readString();
              struct.setSplitMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOW_SPLIT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nowSplitMoney = iprot.readString();
              struct.setNowSplitMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JOINT_WITHDRAW_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.jointWithdrawList = new ArrayList<Map<String,String>>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  Map<String,String> _elem74;
                  {
                    org.apache.thrift.protocol.TMap _map75 = iprot.readMapBegin();
                    _elem74 = new HashMap<String,String>(2*_map75.size);
                    for (int _i76 = 0; _i76 < _map75.size; ++_i76)
                    {
                      String _key77;
                      String _val78;
                      _key77 = iprot.readString();
                      _val78 = iprot.readString();
                      _elem74.put(_key77, _val78);
                    }
                    iprot.readMapEnd();
                  }
                  struct.jointWithdrawList.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setJointWithdrawListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JointWithdraw struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      if (struct.withdrawedMoney != null) {
        oprot.writeFieldBegin(WITHDRAWED_MONEY_FIELD_DESC);
        oprot.writeString(struct.withdrawedMoney);
        oprot.writeFieldEnd();
      }
      if (struct.withdrawingMoney != null) {
        oprot.writeFieldBegin(WITHDRAWING_MONEY_FIELD_DESC);
        oprot.writeString(struct.withdrawingMoney);
        oprot.writeFieldEnd();
      }
      if (struct.splitMoney != null) {
        oprot.writeFieldBegin(SPLIT_MONEY_FIELD_DESC);
        oprot.writeString(struct.splitMoney);
        oprot.writeFieldEnd();
      }
      if (struct.nowSplitMoney != null) {
        oprot.writeFieldBegin(NOW_SPLIT_MONEY_FIELD_DESC);
        oprot.writeString(struct.nowSplitMoney);
        oprot.writeFieldEnd();
      }
      if (struct.jointWithdrawList != null) {
        oprot.writeFieldBegin(JOINT_WITHDRAW_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.jointWithdrawList.size()));
          for (Map<String,String> _iter79 : struct.jointWithdrawList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter79.size()));
              for (Map.Entry<String, String> _iter80 : _iter79.entrySet())
              {
                oprot.writeString(_iter80.getKey());
                oprot.writeString(_iter80.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JointWithdrawTupleSchemeFactory implements SchemeFactory {
    public JointWithdrawTupleScheme getScheme() {
      return new JointWithdrawTupleScheme();
    }
  }

  private static class JointWithdrawTupleScheme extends TupleScheme<JointWithdraw> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JointWithdraw struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetMsg()) {
        optionals.set(1);
      }
      if (struct.isSetWithdrawedMoney()) {
        optionals.set(2);
      }
      if (struct.isSetWithdrawingMoney()) {
        optionals.set(3);
      }
      if (struct.isSetSplitMoney()) {
        optionals.set(4);
      }
      if (struct.isSetNowSplitMoney()) {
        optionals.set(5);
      }
      if (struct.isSetJointWithdrawList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetWithdrawedMoney()) {
        oprot.writeString(struct.withdrawedMoney);
      }
      if (struct.isSetWithdrawingMoney()) {
        oprot.writeString(struct.withdrawingMoney);
      }
      if (struct.isSetSplitMoney()) {
        oprot.writeString(struct.splitMoney);
      }
      if (struct.isSetNowSplitMoney()) {
        oprot.writeString(struct.nowSplitMoney);
      }
      if (struct.isSetJointWithdrawList()) {
        {
          oprot.writeI32(struct.jointWithdrawList.size());
          for (Map<String,String> _iter81 : struct.jointWithdrawList)
          {
            {
              oprot.writeI32(_iter81.size());
              for (Map.Entry<String, String> _iter82 : _iter81.entrySet())
              {
                oprot.writeString(_iter82.getKey());
                oprot.writeString(_iter82.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JointWithdraw struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.withdrawedMoney = iprot.readString();
        struct.setWithdrawedMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.withdrawingMoney = iprot.readString();
        struct.setWithdrawingMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.splitMoney = iprot.readString();
        struct.setSplitMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nowSplitMoney = iprot.readString();
        struct.setNowSplitMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.jointWithdrawList = new ArrayList<Map<String,String>>(_list83.size);
          for (int _i84 = 0; _i84 < _list83.size; ++_i84)
          {
            Map<String,String> _elem85;
            {
              org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem85 = new HashMap<String,String>(2*_map86.size);
              for (int _i87 = 0; _i87 < _map86.size; ++_i87)
              {
                String _key88;
                String _val89;
                _key88 = iprot.readString();
                _val89 = iprot.readString();
                _elem85.put(_key88, _val89);
              }
            }
            struct.jointWithdrawList.add(_elem85);
          }
        }
        struct.setJointWithdrawListIsSet(true);
      }
    }
  }

}

