package com.xmniao.thrift.ledger;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class XmniaoWalletService {

  /**
   * 寻蜜鸟钱包服务类
   */
  public interface Iface {

    public ResponseData getXmnWithdrawAmount(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData getBusinessInfo(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponsePageList getBusinessList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseList getXmnWithdrawList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseList getXmnWalletLedgerList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData getSellerLedgerInfo(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseList getSellerExpenseList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponsePageList getUserWalletRecordList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public List<Map<String,String>> getUserRecords(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException;

    public ResponseList getSellerRechargeLedgerRecord(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponsePageList getUserWalletRecordList2(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponsePageList getUserWalletRecordList3(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData updateWalletLock(Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    public ResponsePageList getWalletBalanceList(List<Map<String,String>> param) throws FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getXmnWithdrawAmount(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBusinessInfo(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBusinessList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getXmnWithdrawList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getXmnWalletLedgerList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSellerLedgerInfo(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSellerExpenseList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserWalletRecordList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserRecords(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSellerRechargeLedgerRecord(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserWalletRecordList2(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserWalletRecordList3(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWalletLock(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWalletBalanceList(List<Map<String,String>> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResponseData getXmnWithdrawAmount(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getXmnWithdrawAmount(walletMap);
      return recv_getXmnWithdrawAmount();
    }

    public void send_getXmnWithdrawAmount(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getXmnWithdrawAmount_args args = new getXmnWithdrawAmount_args();
      args.setWalletMap(walletMap);
      sendBase("getXmnWithdrawAmount", args);
    }

    public ResponseData recv_getXmnWithdrawAmount() throws FailureException, org.apache.thrift.TException
    {
      getXmnWithdrawAmount_result result = new getXmnWithdrawAmount_result();
      receiveBase(result, "getXmnWithdrawAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getXmnWithdrawAmount failed: unknown result");
    }

    public ResponseData getBusinessInfo(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getBusinessInfo(walletMap);
      return recv_getBusinessInfo();
    }

    public void send_getBusinessInfo(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getBusinessInfo_args args = new getBusinessInfo_args();
      args.setWalletMap(walletMap);
      sendBase("getBusinessInfo", args);
    }

    public ResponseData recv_getBusinessInfo() throws FailureException, org.apache.thrift.TException
    {
      getBusinessInfo_result result = new getBusinessInfo_result();
      receiveBase(result, "getBusinessInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusinessInfo failed: unknown result");
    }

    public ResponsePageList getBusinessList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getBusinessList(walletMap);
      return recv_getBusinessList();
    }

    public void send_getBusinessList(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getBusinessList_args args = new getBusinessList_args();
      args.setWalletMap(walletMap);
      sendBase("getBusinessList", args);
    }

    public ResponsePageList recv_getBusinessList() throws FailureException, org.apache.thrift.TException
    {
      getBusinessList_result result = new getBusinessList_result();
      receiveBase(result, "getBusinessList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusinessList failed: unknown result");
    }

    public ResponseList getXmnWithdrawList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getXmnWithdrawList(walletMap);
      return recv_getXmnWithdrawList();
    }

    public void send_getXmnWithdrawList(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getXmnWithdrawList_args args = new getXmnWithdrawList_args();
      args.setWalletMap(walletMap);
      sendBase("getXmnWithdrawList", args);
    }

    public ResponseList recv_getXmnWithdrawList() throws FailureException, org.apache.thrift.TException
    {
      getXmnWithdrawList_result result = new getXmnWithdrawList_result();
      receiveBase(result, "getXmnWithdrawList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getXmnWithdrawList failed: unknown result");
    }

    public ResponseList getXmnWalletLedgerList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getXmnWalletLedgerList(walletMap);
      return recv_getXmnWalletLedgerList();
    }

    public void send_getXmnWalletLedgerList(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getXmnWalletLedgerList_args args = new getXmnWalletLedgerList_args();
      args.setWalletMap(walletMap);
      sendBase("getXmnWalletLedgerList", args);
    }

    public ResponseList recv_getXmnWalletLedgerList() throws FailureException, org.apache.thrift.TException
    {
      getXmnWalletLedgerList_result result = new getXmnWalletLedgerList_result();
      receiveBase(result, "getXmnWalletLedgerList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getXmnWalletLedgerList failed: unknown result");
    }

    public ResponseData getSellerLedgerInfo(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getSellerLedgerInfo(walletMap);
      return recv_getSellerLedgerInfo();
    }

    public void send_getSellerLedgerInfo(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getSellerLedgerInfo_args args = new getSellerLedgerInfo_args();
      args.setWalletMap(walletMap);
      sendBase("getSellerLedgerInfo", args);
    }

    public ResponseData recv_getSellerLedgerInfo() throws FailureException, org.apache.thrift.TException
    {
      getSellerLedgerInfo_result result = new getSellerLedgerInfo_result();
      receiveBase(result, "getSellerLedgerInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSellerLedgerInfo failed: unknown result");
    }

    public ResponseList getSellerExpenseList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getSellerExpenseList(walletMap);
      return recv_getSellerExpenseList();
    }

    public void send_getSellerExpenseList(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getSellerExpenseList_args args = new getSellerExpenseList_args();
      args.setWalletMap(walletMap);
      sendBase("getSellerExpenseList", args);
    }

    public ResponseList recv_getSellerExpenseList() throws FailureException, org.apache.thrift.TException
    {
      getSellerExpenseList_result result = new getSellerExpenseList_result();
      receiveBase(result, "getSellerExpenseList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSellerExpenseList failed: unknown result");
    }

    public ResponsePageList getUserWalletRecordList(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getUserWalletRecordList(walletMap);
      return recv_getUserWalletRecordList();
    }

    public void send_getUserWalletRecordList(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getUserWalletRecordList_args args = new getUserWalletRecordList_args();
      args.setWalletMap(walletMap);
      sendBase("getUserWalletRecordList", args);
    }

    public ResponsePageList recv_getUserWalletRecordList() throws FailureException, org.apache.thrift.TException
    {
      getUserWalletRecordList_result result = new getUserWalletRecordList_result();
      receiveBase(result, "getUserWalletRecordList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserWalletRecordList failed: unknown result");
    }

    public List<Map<String,String>> getUserRecords(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException
    {
      send_getUserRecords(paraMap);
      return recv_getUserRecords();
    }

    public void send_getUserRecords(Map<String,String> paraMap) throws org.apache.thrift.TException
    {
      getUserRecords_args args = new getUserRecords_args();
      args.setParaMap(paraMap);
      sendBase("getUserRecords", args);
    }

    public List<Map<String,String>> recv_getUserRecords() throws FailureException, org.apache.thrift.TException
    {
      getUserRecords_result result = new getUserRecords_result();
      receiveBase(result, "getUserRecords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserRecords failed: unknown result");
    }

    public ResponseList getSellerRechargeLedgerRecord(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getSellerRechargeLedgerRecord(walletMap);
      return recv_getSellerRechargeLedgerRecord();
    }

    public void send_getSellerRechargeLedgerRecord(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getSellerRechargeLedgerRecord_args args = new getSellerRechargeLedgerRecord_args();
      args.setWalletMap(walletMap);
      sendBase("getSellerRechargeLedgerRecord", args);
    }

    public ResponseList recv_getSellerRechargeLedgerRecord() throws FailureException, org.apache.thrift.TException
    {
      getSellerRechargeLedgerRecord_result result = new getSellerRechargeLedgerRecord_result();
      receiveBase(result, "getSellerRechargeLedgerRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSellerRechargeLedgerRecord failed: unknown result");
    }

    public ResponsePageList getUserWalletRecordList2(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getUserWalletRecordList2(walletMap);
      return recv_getUserWalletRecordList2();
    }

    public void send_getUserWalletRecordList2(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getUserWalletRecordList2_args args = new getUserWalletRecordList2_args();
      args.setWalletMap(walletMap);
      sendBase("getUserWalletRecordList2", args);
    }

    public ResponsePageList recv_getUserWalletRecordList2() throws FailureException, org.apache.thrift.TException
    {
      getUserWalletRecordList2_result result = new getUserWalletRecordList2_result();
      receiveBase(result, "getUserWalletRecordList2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserWalletRecordList2 failed: unknown result");
    }

    public ResponsePageList getUserWalletRecordList3(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getUserWalletRecordList3(walletMap);
      return recv_getUserWalletRecordList3();
    }

    public void send_getUserWalletRecordList3(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getUserWalletRecordList3_args args = new getUserWalletRecordList3_args();
      args.setWalletMap(walletMap);
      sendBase("getUserWalletRecordList3", args);
    }

    public ResponsePageList recv_getUserWalletRecordList3() throws FailureException, org.apache.thrift.TException
    {
      getUserWalletRecordList3_result result = new getUserWalletRecordList3_result();
      receiveBase(result, "getUserWalletRecordList3");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserWalletRecordList3 failed: unknown result");
    }

    public ResponseData updateWalletLock(Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_updateWalletLock(param);
      return recv_updateWalletLock();
    }

    public void send_updateWalletLock(Map<String,String> param) throws org.apache.thrift.TException
    {
      updateWalletLock_args args = new updateWalletLock_args();
      args.setParam(param);
      sendBase("updateWalletLock", args);
    }

    public ResponseData recv_updateWalletLock() throws FailureException, org.apache.thrift.TException
    {
      updateWalletLock_result result = new updateWalletLock_result();
      receiveBase(result, "updateWalletLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWalletLock failed: unknown result");
    }

    public ResponsePageList getWalletBalanceList(List<Map<String,String>> param) throws FailureException, org.apache.thrift.TException
    {
      send_getWalletBalanceList(param);
      return recv_getWalletBalanceList();
    }

    public void send_getWalletBalanceList(List<Map<String,String>> param) throws org.apache.thrift.TException
    {
      getWalletBalanceList_args args = new getWalletBalanceList_args();
      args.setParam(param);
      sendBase("getWalletBalanceList", args);
    }

    public ResponsePageList recv_getWalletBalanceList() throws FailureException, org.apache.thrift.TException
    {
      getWalletBalanceList_result result = new getWalletBalanceList_result();
      receiveBase(result, "getWalletBalanceList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletBalanceList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getXmnWithdrawAmount(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getXmnWithdrawAmount_call method_call = new getXmnWithdrawAmount_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getXmnWithdrawAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getXmnWithdrawAmount_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getXmnWithdrawAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getXmnWithdrawAmount_args args = new getXmnWithdrawAmount_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getXmnWithdrawAmount();
      }
    }

    public void getBusinessInfo(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusinessInfo_call method_call = new getBusinessInfo_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusinessInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getBusinessInfo_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusinessInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusinessInfo_args args = new getBusinessInfo_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusinessInfo();
      }
    }

    public void getBusinessList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusinessList_call method_call = new getBusinessList_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusinessList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getBusinessList_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusinessList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusinessList_args args = new getBusinessList_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponsePageList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusinessList();
      }
    }

    public void getXmnWithdrawList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getXmnWithdrawList_call method_call = new getXmnWithdrawList_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getXmnWithdrawList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getXmnWithdrawList_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getXmnWithdrawList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getXmnWithdrawList_args args = new getXmnWithdrawList_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getXmnWithdrawList();
      }
    }

    public void getXmnWalletLedgerList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getXmnWalletLedgerList_call method_call = new getXmnWalletLedgerList_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getXmnWalletLedgerList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getXmnWalletLedgerList_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getXmnWalletLedgerList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getXmnWalletLedgerList_args args = new getXmnWalletLedgerList_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getXmnWalletLedgerList();
      }
    }

    public void getSellerLedgerInfo(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSellerLedgerInfo_call method_call = new getSellerLedgerInfo_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSellerLedgerInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getSellerLedgerInfo_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSellerLedgerInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSellerLedgerInfo_args args = new getSellerLedgerInfo_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSellerLedgerInfo();
      }
    }

    public void getSellerExpenseList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSellerExpenseList_call method_call = new getSellerExpenseList_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSellerExpenseList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getSellerExpenseList_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSellerExpenseList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSellerExpenseList_args args = new getSellerExpenseList_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSellerExpenseList();
      }
    }

    public void getUserWalletRecordList(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserWalletRecordList_call method_call = new getUserWalletRecordList_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserWalletRecordList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getUserWalletRecordList_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserWalletRecordList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserWalletRecordList_args args = new getUserWalletRecordList_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponsePageList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserWalletRecordList();
      }
    }

    public void getUserRecords(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserRecords_call method_call = new getUserRecords_call(paraMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserRecords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paraMap;
      public getUserRecords_call(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paraMap = paraMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserRecords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserRecords_args args = new getUserRecords_args();
        args.setParaMap(paraMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserRecords();
      }
    }

    public void getSellerRechargeLedgerRecord(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSellerRechargeLedgerRecord_call method_call = new getSellerRechargeLedgerRecord_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSellerRechargeLedgerRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getSellerRechargeLedgerRecord_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSellerRechargeLedgerRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSellerRechargeLedgerRecord_args args = new getSellerRechargeLedgerRecord_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSellerRechargeLedgerRecord();
      }
    }

    public void getUserWalletRecordList2(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserWalletRecordList2_call method_call = new getUserWalletRecordList2_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserWalletRecordList2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getUserWalletRecordList2_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserWalletRecordList2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserWalletRecordList2_args args = new getUserWalletRecordList2_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponsePageList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserWalletRecordList2();
      }
    }

    public void getUserWalletRecordList3(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserWalletRecordList3_call method_call = new getUserWalletRecordList3_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserWalletRecordList3_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getUserWalletRecordList3_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserWalletRecordList3", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserWalletRecordList3_args args = new getUserWalletRecordList3_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponsePageList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserWalletRecordList3();
      }
    }

    public void updateWalletLock(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWalletLock_call method_call = new updateWalletLock_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWalletLock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> param;
      public updateWalletLock_call(Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWalletLock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWalletLock_args args = new updateWalletLock_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWalletLock();
      }
    }

    public void getWalletBalanceList(List<Map<String,String>> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletBalanceList_call method_call = new getWalletBalanceList_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletBalanceList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> param;
      public getWalletBalanceList_call(List<Map<String,String>> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletBalanceList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletBalanceList_args args = new getWalletBalanceList_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponsePageList getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletBalanceList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getXmnWithdrawAmount", new getXmnWithdrawAmount());
      processMap.put("getBusinessInfo", new getBusinessInfo());
      processMap.put("getBusinessList", new getBusinessList());
      processMap.put("getXmnWithdrawList", new getXmnWithdrawList());
      processMap.put("getXmnWalletLedgerList", new getXmnWalletLedgerList());
      processMap.put("getSellerLedgerInfo", new getSellerLedgerInfo());
      processMap.put("getSellerExpenseList", new getSellerExpenseList());
      processMap.put("getUserWalletRecordList", new getUserWalletRecordList());
      processMap.put("getUserRecords", new getUserRecords());
      processMap.put("getSellerRechargeLedgerRecord", new getSellerRechargeLedgerRecord());
      processMap.put("getUserWalletRecordList2", new getUserWalletRecordList2());
      processMap.put("getUserWalletRecordList3", new getUserWalletRecordList3());
      processMap.put("updateWalletLock", new updateWalletLock());
      processMap.put("getWalletBalanceList", new getWalletBalanceList());
      return processMap;
    }

    public static class getXmnWithdrawAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getXmnWithdrawAmount_args> {
      public getXmnWithdrawAmount() {
        super("getXmnWithdrawAmount");
      }

      public getXmnWithdrawAmount_args getEmptyArgsInstance() {
        return new getXmnWithdrawAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getXmnWithdrawAmount_result getResult(I iface, getXmnWithdrawAmount_args args) throws org.apache.thrift.TException {
        getXmnWithdrawAmount_result result = new getXmnWithdrawAmount_result();
        try {
          result.success = iface.getXmnWithdrawAmount(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getBusinessInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusinessInfo_args> {
      public getBusinessInfo() {
        super("getBusinessInfo");
      }

      public getBusinessInfo_args getEmptyArgsInstance() {
        return new getBusinessInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusinessInfo_result getResult(I iface, getBusinessInfo_args args) throws org.apache.thrift.TException {
        getBusinessInfo_result result = new getBusinessInfo_result();
        try {
          result.success = iface.getBusinessInfo(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getBusinessList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusinessList_args> {
      public getBusinessList() {
        super("getBusinessList");
      }

      public getBusinessList_args getEmptyArgsInstance() {
        return new getBusinessList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusinessList_result getResult(I iface, getBusinessList_args args) throws org.apache.thrift.TException {
        getBusinessList_result result = new getBusinessList_result();
        try {
          result.success = iface.getBusinessList(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getXmnWithdrawList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getXmnWithdrawList_args> {
      public getXmnWithdrawList() {
        super("getXmnWithdrawList");
      }

      public getXmnWithdrawList_args getEmptyArgsInstance() {
        return new getXmnWithdrawList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getXmnWithdrawList_result getResult(I iface, getXmnWithdrawList_args args) throws org.apache.thrift.TException {
        getXmnWithdrawList_result result = new getXmnWithdrawList_result();
        try {
          result.success = iface.getXmnWithdrawList(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getXmnWalletLedgerList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getXmnWalletLedgerList_args> {
      public getXmnWalletLedgerList() {
        super("getXmnWalletLedgerList");
      }

      public getXmnWalletLedgerList_args getEmptyArgsInstance() {
        return new getXmnWalletLedgerList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getXmnWalletLedgerList_result getResult(I iface, getXmnWalletLedgerList_args args) throws org.apache.thrift.TException {
        getXmnWalletLedgerList_result result = new getXmnWalletLedgerList_result();
        try {
          result.success = iface.getXmnWalletLedgerList(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSellerLedgerInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSellerLedgerInfo_args> {
      public getSellerLedgerInfo() {
        super("getSellerLedgerInfo");
      }

      public getSellerLedgerInfo_args getEmptyArgsInstance() {
        return new getSellerLedgerInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSellerLedgerInfo_result getResult(I iface, getSellerLedgerInfo_args args) throws org.apache.thrift.TException {
        getSellerLedgerInfo_result result = new getSellerLedgerInfo_result();
        try {
          result.success = iface.getSellerLedgerInfo(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSellerExpenseList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSellerExpenseList_args> {
      public getSellerExpenseList() {
        super("getSellerExpenseList");
      }

      public getSellerExpenseList_args getEmptyArgsInstance() {
        return new getSellerExpenseList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSellerExpenseList_result getResult(I iface, getSellerExpenseList_args args) throws org.apache.thrift.TException {
        getSellerExpenseList_result result = new getSellerExpenseList_result();
        try {
          result.success = iface.getSellerExpenseList(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getUserWalletRecordList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserWalletRecordList_args> {
      public getUserWalletRecordList() {
        super("getUserWalletRecordList");
      }

      public getUserWalletRecordList_args getEmptyArgsInstance() {
        return new getUserWalletRecordList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserWalletRecordList_result getResult(I iface, getUserWalletRecordList_args args) throws org.apache.thrift.TException {
        getUserWalletRecordList_result result = new getUserWalletRecordList_result();
        try {
          result.success = iface.getUserWalletRecordList(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getUserRecords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserRecords_args> {
      public getUserRecords() {
        super("getUserRecords");
      }

      public getUserRecords_args getEmptyArgsInstance() {
        return new getUserRecords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserRecords_result getResult(I iface, getUserRecords_args args) throws org.apache.thrift.TException {
        getUserRecords_result result = new getUserRecords_result();
        try {
          result.success = iface.getUserRecords(args.paraMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getSellerRechargeLedgerRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSellerRechargeLedgerRecord_args> {
      public getSellerRechargeLedgerRecord() {
        super("getSellerRechargeLedgerRecord");
      }

      public getSellerRechargeLedgerRecord_args getEmptyArgsInstance() {
        return new getSellerRechargeLedgerRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSellerRechargeLedgerRecord_result getResult(I iface, getSellerRechargeLedgerRecord_args args) throws org.apache.thrift.TException {
        getSellerRechargeLedgerRecord_result result = new getSellerRechargeLedgerRecord_result();
        try {
          result.success = iface.getSellerRechargeLedgerRecord(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getUserWalletRecordList2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserWalletRecordList2_args> {
      public getUserWalletRecordList2() {
        super("getUserWalletRecordList2");
      }

      public getUserWalletRecordList2_args getEmptyArgsInstance() {
        return new getUserWalletRecordList2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserWalletRecordList2_result getResult(I iface, getUserWalletRecordList2_args args) throws org.apache.thrift.TException {
        getUserWalletRecordList2_result result = new getUserWalletRecordList2_result();
        try {
          result.success = iface.getUserWalletRecordList2(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getUserWalletRecordList3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserWalletRecordList3_args> {
      public getUserWalletRecordList3() {
        super("getUserWalletRecordList3");
      }

      public getUserWalletRecordList3_args getEmptyArgsInstance() {
        return new getUserWalletRecordList3_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserWalletRecordList3_result getResult(I iface, getUserWalletRecordList3_args args) throws org.apache.thrift.TException {
        getUserWalletRecordList3_result result = new getUserWalletRecordList3_result();
        try {
          result.success = iface.getUserWalletRecordList3(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWalletLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWalletLock_args> {
      public updateWalletLock() {
        super("updateWalletLock");
      }

      public updateWalletLock_args getEmptyArgsInstance() {
        return new updateWalletLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWalletLock_result getResult(I iface, updateWalletLock_args args) throws org.apache.thrift.TException {
        updateWalletLock_result result = new updateWalletLock_result();
        try {
          result.success = iface.updateWalletLock(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getWalletBalanceList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletBalanceList_args> {
      public getWalletBalanceList() {
        super("getWalletBalanceList");
      }

      public getWalletBalanceList_args getEmptyArgsInstance() {
        return new getWalletBalanceList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWalletBalanceList_result getResult(I iface, getWalletBalanceList_args args) throws org.apache.thrift.TException {
        getWalletBalanceList_result result = new getWalletBalanceList_result();
        try {
          result.success = iface.getWalletBalanceList(args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getXmnWithdrawAmount", new getXmnWithdrawAmount());
      processMap.put("getBusinessInfo", new getBusinessInfo());
      processMap.put("getBusinessList", new getBusinessList());
      processMap.put("getXmnWithdrawList", new getXmnWithdrawList());
      processMap.put("getXmnWalletLedgerList", new getXmnWalletLedgerList());
      processMap.put("getSellerLedgerInfo", new getSellerLedgerInfo());
      processMap.put("getSellerExpenseList", new getSellerExpenseList());
      processMap.put("getUserWalletRecordList", new getUserWalletRecordList());
      processMap.put("getUserRecords", new getUserRecords());
      processMap.put("getSellerRechargeLedgerRecord", new getSellerRechargeLedgerRecord());
      processMap.put("getUserWalletRecordList2", new getUserWalletRecordList2());
      processMap.put("getUserWalletRecordList3", new getUserWalletRecordList3());
      processMap.put("updateWalletLock", new updateWalletLock());
      processMap.put("getWalletBalanceList", new getWalletBalanceList());
      return processMap;
    }

    public static class getXmnWithdrawAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getXmnWithdrawAmount_args, ResponseData> {
      public getXmnWithdrawAmount() {
        super("getXmnWithdrawAmount");
      }

      public getXmnWithdrawAmount_args getEmptyArgsInstance() {
        return new getXmnWithdrawAmount_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            getXmnWithdrawAmount_result result = new getXmnWithdrawAmount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getXmnWithdrawAmount_result result = new getXmnWithdrawAmount_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getXmnWithdrawAmount_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.getXmnWithdrawAmount(args.walletMap,resultHandler);
      }
    }

    public static class getBusinessInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusinessInfo_args, ResponseData> {
      public getBusinessInfo() {
        super("getBusinessInfo");
      }

      public getBusinessInfo_args getEmptyArgsInstance() {
        return new getBusinessInfo_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            getBusinessInfo_result result = new getBusinessInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBusinessInfo_result result = new getBusinessInfo_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusinessInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.getBusinessInfo(args.walletMap,resultHandler);
      }
    }

    public static class getBusinessList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusinessList_args, ResponsePageList> {
      public getBusinessList() {
        super("getBusinessList");
      }

      public getBusinessList_args getEmptyArgsInstance() {
        return new getBusinessList_args();
      }

      public AsyncMethodCallback<ResponsePageList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponsePageList>() { 
          public void onComplete(ResponsePageList o) {
            getBusinessList_result result = new getBusinessList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBusinessList_result result = new getBusinessList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusinessList_args args, org.apache.thrift.async.AsyncMethodCallback<ResponsePageList> resultHandler) throws TException {
        iface.getBusinessList(args.walletMap,resultHandler);
      }
    }

    public static class getXmnWithdrawList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getXmnWithdrawList_args, ResponseList> {
      public getXmnWithdrawList() {
        super("getXmnWithdrawList");
      }

      public getXmnWithdrawList_args getEmptyArgsInstance() {
        return new getXmnWithdrawList_args();
      }

      public AsyncMethodCallback<ResponseList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseList>() { 
          public void onComplete(ResponseList o) {
            getXmnWithdrawList_result result = new getXmnWithdrawList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getXmnWithdrawList_result result = new getXmnWithdrawList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getXmnWithdrawList_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseList> resultHandler) throws TException {
        iface.getXmnWithdrawList(args.walletMap,resultHandler);
      }
    }

    public static class getXmnWalletLedgerList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getXmnWalletLedgerList_args, ResponseList> {
      public getXmnWalletLedgerList() {
        super("getXmnWalletLedgerList");
      }

      public getXmnWalletLedgerList_args getEmptyArgsInstance() {
        return new getXmnWalletLedgerList_args();
      }

      public AsyncMethodCallback<ResponseList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseList>() { 
          public void onComplete(ResponseList o) {
            getXmnWalletLedgerList_result result = new getXmnWalletLedgerList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getXmnWalletLedgerList_result result = new getXmnWalletLedgerList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getXmnWalletLedgerList_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseList> resultHandler) throws TException {
        iface.getXmnWalletLedgerList(args.walletMap,resultHandler);
      }
    }

    public static class getSellerLedgerInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSellerLedgerInfo_args, ResponseData> {
      public getSellerLedgerInfo() {
        super("getSellerLedgerInfo");
      }

      public getSellerLedgerInfo_args getEmptyArgsInstance() {
        return new getSellerLedgerInfo_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            getSellerLedgerInfo_result result = new getSellerLedgerInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSellerLedgerInfo_result result = new getSellerLedgerInfo_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSellerLedgerInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.getSellerLedgerInfo(args.walletMap,resultHandler);
      }
    }

    public static class getSellerExpenseList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSellerExpenseList_args, ResponseList> {
      public getSellerExpenseList() {
        super("getSellerExpenseList");
      }

      public getSellerExpenseList_args getEmptyArgsInstance() {
        return new getSellerExpenseList_args();
      }

      public AsyncMethodCallback<ResponseList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseList>() { 
          public void onComplete(ResponseList o) {
            getSellerExpenseList_result result = new getSellerExpenseList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSellerExpenseList_result result = new getSellerExpenseList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSellerExpenseList_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseList> resultHandler) throws TException {
        iface.getSellerExpenseList(args.walletMap,resultHandler);
      }
    }

    public static class getUserWalletRecordList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserWalletRecordList_args, ResponsePageList> {
      public getUserWalletRecordList() {
        super("getUserWalletRecordList");
      }

      public getUserWalletRecordList_args getEmptyArgsInstance() {
        return new getUserWalletRecordList_args();
      }

      public AsyncMethodCallback<ResponsePageList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponsePageList>() { 
          public void onComplete(ResponsePageList o) {
            getUserWalletRecordList_result result = new getUserWalletRecordList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserWalletRecordList_result result = new getUserWalletRecordList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserWalletRecordList_args args, org.apache.thrift.async.AsyncMethodCallback<ResponsePageList> resultHandler) throws TException {
        iface.getUserWalletRecordList(args.walletMap,resultHandler);
      }
    }

    public static class getUserRecords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserRecords_args, List<Map<String,String>>> {
      public getUserRecords() {
        super("getUserRecords");
      }

      public getUserRecords_args getEmptyArgsInstance() {
        return new getUserRecords_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getUserRecords_result result = new getUserRecords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserRecords_result result = new getUserRecords_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserRecords_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getUserRecords(args.paraMap,resultHandler);
      }
    }

    public static class getSellerRechargeLedgerRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSellerRechargeLedgerRecord_args, ResponseList> {
      public getSellerRechargeLedgerRecord() {
        super("getSellerRechargeLedgerRecord");
      }

      public getSellerRechargeLedgerRecord_args getEmptyArgsInstance() {
        return new getSellerRechargeLedgerRecord_args();
      }

      public AsyncMethodCallback<ResponseList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseList>() { 
          public void onComplete(ResponseList o) {
            getSellerRechargeLedgerRecord_result result = new getSellerRechargeLedgerRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSellerRechargeLedgerRecord_result result = new getSellerRechargeLedgerRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSellerRechargeLedgerRecord_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseList> resultHandler) throws TException {
        iface.getSellerRechargeLedgerRecord(args.walletMap,resultHandler);
      }
    }

    public static class getUserWalletRecordList2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserWalletRecordList2_args, ResponsePageList> {
      public getUserWalletRecordList2() {
        super("getUserWalletRecordList2");
      }

      public getUserWalletRecordList2_args getEmptyArgsInstance() {
        return new getUserWalletRecordList2_args();
      }

      public AsyncMethodCallback<ResponsePageList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponsePageList>() { 
          public void onComplete(ResponsePageList o) {
            getUserWalletRecordList2_result result = new getUserWalletRecordList2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserWalletRecordList2_result result = new getUserWalletRecordList2_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserWalletRecordList2_args args, org.apache.thrift.async.AsyncMethodCallback<ResponsePageList> resultHandler) throws TException {
        iface.getUserWalletRecordList2(args.walletMap,resultHandler);
      }
    }

    public static class getUserWalletRecordList3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserWalletRecordList3_args, ResponsePageList> {
      public getUserWalletRecordList3() {
        super("getUserWalletRecordList3");
      }

      public getUserWalletRecordList3_args getEmptyArgsInstance() {
        return new getUserWalletRecordList3_args();
      }

      public AsyncMethodCallback<ResponsePageList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponsePageList>() { 
          public void onComplete(ResponsePageList o) {
            getUserWalletRecordList3_result result = new getUserWalletRecordList3_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserWalletRecordList3_result result = new getUserWalletRecordList3_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserWalletRecordList3_args args, org.apache.thrift.async.AsyncMethodCallback<ResponsePageList> resultHandler) throws TException {
        iface.getUserWalletRecordList3(args.walletMap,resultHandler);
      }
    }

    public static class updateWalletLock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWalletLock_args, ResponseData> {
      public updateWalletLock() {
        super("updateWalletLock");
      }

      public updateWalletLock_args getEmptyArgsInstance() {
        return new updateWalletLock_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            updateWalletLock_result result = new updateWalletLock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWalletLock_result result = new updateWalletLock_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWalletLock_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.updateWalletLock(args.param,resultHandler);
      }
    }

    public static class getWalletBalanceList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletBalanceList_args, ResponsePageList> {
      public getWalletBalanceList() {
        super("getWalletBalanceList");
      }

      public getWalletBalanceList_args getEmptyArgsInstance() {
        return new getWalletBalanceList_args();
      }

      public AsyncMethodCallback<ResponsePageList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponsePageList>() { 
          public void onComplete(ResponsePageList o) {
            getWalletBalanceList_result result = new getWalletBalanceList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWalletBalanceList_result result = new getWalletBalanceList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletBalanceList_args args, org.apache.thrift.async.AsyncMethodCallback<ResponsePageList> resultHandler) throws TException {
        iface.getWalletBalanceList(args.param,resultHandler);
      }
    }

  }

  public static class getXmnWithdrawAmount_args implements org.apache.thrift.TBase<getXmnWithdrawAmount_args, getXmnWithdrawAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getXmnWithdrawAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmnWithdrawAmount_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmnWithdrawAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmnWithdrawAmount_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmnWithdrawAmount_args.class, metaDataMap);
    }

    public getXmnWithdrawAmount_args() {
    }

    public getXmnWithdrawAmount_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmnWithdrawAmount_args(getXmnWithdrawAmount_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getXmnWithdrawAmount_args deepCopy() {
      return new getXmnWithdrawAmount_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getXmnWithdrawAmount_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmnWithdrawAmount_args)
        return this.equals((getXmnWithdrawAmount_args)that);
      return false;
    }

    public boolean equals(getXmnWithdrawAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmnWithdrawAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmnWithdrawAmount_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmnWithdrawAmount_argsStandardSchemeFactory implements SchemeFactory {
      public getXmnWithdrawAmount_argsStandardScheme getScheme() {
        return new getXmnWithdrawAmount_argsStandardScheme();
      }
    }

    private static class getXmnWithdrawAmount_argsStandardScheme extends StandardScheme<getXmnWithdrawAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmnWithdrawAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map54.size);
                  for (int _i55 = 0; _i55 < _map54.size; ++_i55)
                  {
                    String _key56;
                    String _val57;
                    _key56 = iprot.readString();
                    _val57 = iprot.readString();
                    struct.walletMap.put(_key56, _val57);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmnWithdrawAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter58 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmnWithdrawAmount_argsTupleSchemeFactory implements SchemeFactory {
      public getXmnWithdrawAmount_argsTupleScheme getScheme() {
        return new getXmnWithdrawAmount_argsTupleScheme();
      }
    }

    private static class getXmnWithdrawAmount_argsTupleScheme extends TupleScheme<getXmnWithdrawAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter59 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter59.getKey());
              oprot.writeString(_iter59.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map60.size);
            for (int _i61 = 0; _i61 < _map60.size; ++_i61)
            {
              String _key62;
              String _val63;
              _key62 = iprot.readString();
              _val63 = iprot.readString();
              struct.walletMap.put(_key62, _val63);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getXmnWithdrawAmount_result implements org.apache.thrift.TBase<getXmnWithdrawAmount_result, getXmnWithdrawAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getXmnWithdrawAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmnWithdrawAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmnWithdrawAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmnWithdrawAmount_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmnWithdrawAmount_result.class, metaDataMap);
    }

    public getXmnWithdrawAmount_result() {
    }

    public getXmnWithdrawAmount_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmnWithdrawAmount_result(getXmnWithdrawAmount_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getXmnWithdrawAmount_result deepCopy() {
      return new getXmnWithdrawAmount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public getXmnWithdrawAmount_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getXmnWithdrawAmount_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmnWithdrawAmount_result)
        return this.equals((getXmnWithdrawAmount_result)that);
      return false;
    }

    public boolean equals(getXmnWithdrawAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmnWithdrawAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmnWithdrawAmount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmnWithdrawAmount_resultStandardSchemeFactory implements SchemeFactory {
      public getXmnWithdrawAmount_resultStandardScheme getScheme() {
        return new getXmnWithdrawAmount_resultStandardScheme();
      }
    }

    private static class getXmnWithdrawAmount_resultStandardScheme extends StandardScheme<getXmnWithdrawAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmnWithdrawAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmnWithdrawAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmnWithdrawAmount_resultTupleSchemeFactory implements SchemeFactory {
      public getXmnWithdrawAmount_resultTupleScheme getScheme() {
        return new getXmnWithdrawAmount_resultTupleScheme();
      }
    }

    private static class getXmnWithdrawAmount_resultTupleScheme extends TupleScheme<getXmnWithdrawAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getBusinessInfo_args implements org.apache.thrift.TBase<getBusinessInfo_args, getBusinessInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessInfo_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessInfo_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessInfo_args.class, metaDataMap);
    }

    public getBusinessInfo_args() {
    }

    public getBusinessInfo_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessInfo_args(getBusinessInfo_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getBusinessInfo_args deepCopy() {
      return new getBusinessInfo_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getBusinessInfo_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessInfo_args)
        return this.equals((getBusinessInfo_args)that);
      return false;
    }

    public boolean equals(getBusinessInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBusinessInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessInfo_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getBusinessInfo_argsStandardScheme getScheme() {
        return new getBusinessInfo_argsStandardScheme();
      }
    }

    private static class getBusinessInfo_argsStandardScheme extends StandardScheme<getBusinessInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map64.size);
                  for (int _i65 = 0; _i65 < _map64.size; ++_i65)
                  {
                    String _key66;
                    String _val67;
                    _key66 = iprot.readString();
                    _val67 = iprot.readString();
                    struct.walletMap.put(_key66, _val67);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter68 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter68.getKey());
              oprot.writeString(_iter68.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getBusinessInfo_argsTupleScheme getScheme() {
        return new getBusinessInfo_argsTupleScheme();
      }
    }

    private static class getBusinessInfo_argsTupleScheme extends TupleScheme<getBusinessInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter69 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter69.getKey());
              oprot.writeString(_iter69.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map70.size);
            for (int _i71 = 0; _i71 < _map70.size; ++_i71)
            {
              String _key72;
              String _val73;
              _key72 = iprot.readString();
              _val73 = iprot.readString();
              struct.walletMap.put(_key72, _val73);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getBusinessInfo_result implements org.apache.thrift.TBase<getBusinessInfo_result, getBusinessInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessInfo_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessInfo_result.class, metaDataMap);
    }

    public getBusinessInfo_result() {
    }

    public getBusinessInfo_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessInfo_result(getBusinessInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getBusinessInfo_result deepCopy() {
      return new getBusinessInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public getBusinessInfo_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getBusinessInfo_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessInfo_result)
        return this.equals((getBusinessInfo_result)that);
      return false;
    }

    public boolean equals(getBusinessInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBusinessInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getBusinessInfo_resultStandardScheme getScheme() {
        return new getBusinessInfo_resultStandardScheme();
      }
    }

    private static class getBusinessInfo_resultStandardScheme extends StandardScheme<getBusinessInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getBusinessInfo_resultTupleScheme getScheme() {
        return new getBusinessInfo_resultTupleScheme();
      }
    }

    private static class getBusinessInfo_resultTupleScheme extends TupleScheme<getBusinessInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getBusinessList_args implements org.apache.thrift.TBase<getBusinessList_args, getBusinessList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessList_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessList_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessList_args.class, metaDataMap);
    }

    public getBusinessList_args() {
    }

    public getBusinessList_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessList_args(getBusinessList_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getBusinessList_args deepCopy() {
      return new getBusinessList_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getBusinessList_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessList_args)
        return this.equals((getBusinessList_args)that);
      return false;
    }

    public boolean equals(getBusinessList_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBusinessList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessList_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessList_argsStandardSchemeFactory implements SchemeFactory {
      public getBusinessList_argsStandardScheme getScheme() {
        return new getBusinessList_argsStandardScheme();
      }
    }

    private static class getBusinessList_argsStandardScheme extends StandardScheme<getBusinessList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map74.size);
                  for (int _i75 = 0; _i75 < _map74.size; ++_i75)
                  {
                    String _key76;
                    String _val77;
                    _key76 = iprot.readString();
                    _val77 = iprot.readString();
                    struct.walletMap.put(_key76, _val77);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter78 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter78.getKey());
              oprot.writeString(_iter78.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessList_argsTupleSchemeFactory implements SchemeFactory {
      public getBusinessList_argsTupleScheme getScheme() {
        return new getBusinessList_argsTupleScheme();
      }
    }

    private static class getBusinessList_argsTupleScheme extends TupleScheme<getBusinessList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter79 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter79.getKey());
              oprot.writeString(_iter79.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map80.size);
            for (int _i81 = 0; _i81 < _map80.size; ++_i81)
            {
              String _key82;
              String _val83;
              _key82 = iprot.readString();
              _val83 = iprot.readString();
              struct.walletMap.put(_key82, _val83);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getBusinessList_result implements org.apache.thrift.TBase<getBusinessList_result, getBusinessList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessList_resultTupleSchemeFactory());
    }

    public ResponsePageList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponsePageList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessList_result.class, metaDataMap);
    }

    public getBusinessList_result() {
    }

    public getBusinessList_result(
      ResponsePageList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessList_result(getBusinessList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponsePageList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getBusinessList_result deepCopy() {
      return new getBusinessList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponsePageList getSuccess() {
      return this.success;
    }

    public getBusinessList_result setSuccess(ResponsePageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getBusinessList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponsePageList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessList_result)
        return this.equals((getBusinessList_result)that);
      return false;
    }

    public boolean equals(getBusinessList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBusinessList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessList_resultStandardSchemeFactory implements SchemeFactory {
      public getBusinessList_resultStandardScheme getScheme() {
        return new getBusinessList_resultStandardScheme();
      }
    }

    private static class getBusinessList_resultStandardScheme extends StandardScheme<getBusinessList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponsePageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessList_resultTupleSchemeFactory implements SchemeFactory {
      public getBusinessList_resultTupleScheme getScheme() {
        return new getBusinessList_resultTupleScheme();
      }
    }

    private static class getBusinessList_resultTupleScheme extends TupleScheme<getBusinessList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponsePageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getXmnWithdrawList_args implements org.apache.thrift.TBase<getXmnWithdrawList_args, getXmnWithdrawList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getXmnWithdrawList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmnWithdrawList_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmnWithdrawList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmnWithdrawList_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmnWithdrawList_args.class, metaDataMap);
    }

    public getXmnWithdrawList_args() {
    }

    public getXmnWithdrawList_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmnWithdrawList_args(getXmnWithdrawList_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getXmnWithdrawList_args deepCopy() {
      return new getXmnWithdrawList_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getXmnWithdrawList_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmnWithdrawList_args)
        return this.equals((getXmnWithdrawList_args)that);
      return false;
    }

    public boolean equals(getXmnWithdrawList_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmnWithdrawList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmnWithdrawList_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmnWithdrawList_argsStandardSchemeFactory implements SchemeFactory {
      public getXmnWithdrawList_argsStandardScheme getScheme() {
        return new getXmnWithdrawList_argsStandardScheme();
      }
    }

    private static class getXmnWithdrawList_argsStandardScheme extends StandardScheme<getXmnWithdrawList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmnWithdrawList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map84.size);
                  for (int _i85 = 0; _i85 < _map84.size; ++_i85)
                  {
                    String _key86;
                    String _val87;
                    _key86 = iprot.readString();
                    _val87 = iprot.readString();
                    struct.walletMap.put(_key86, _val87);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmnWithdrawList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter88 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter88.getKey());
              oprot.writeString(_iter88.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmnWithdrawList_argsTupleSchemeFactory implements SchemeFactory {
      public getXmnWithdrawList_argsTupleScheme getScheme() {
        return new getXmnWithdrawList_argsTupleScheme();
      }
    }

    private static class getXmnWithdrawList_argsTupleScheme extends TupleScheme<getXmnWithdrawList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter89 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter89.getKey());
              oprot.writeString(_iter89.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map90.size);
            for (int _i91 = 0; _i91 < _map90.size; ++_i91)
            {
              String _key92;
              String _val93;
              _key92 = iprot.readString();
              _val93 = iprot.readString();
              struct.walletMap.put(_key92, _val93);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getXmnWithdrawList_result implements org.apache.thrift.TBase<getXmnWithdrawList_result, getXmnWithdrawList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getXmnWithdrawList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmnWithdrawList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmnWithdrawList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmnWithdrawList_resultTupleSchemeFactory());
    }

    public ResponseList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmnWithdrawList_result.class, metaDataMap);
    }

    public getXmnWithdrawList_result() {
    }

    public getXmnWithdrawList_result(
      ResponseList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmnWithdrawList_result(getXmnWithdrawList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getXmnWithdrawList_result deepCopy() {
      return new getXmnWithdrawList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseList getSuccess() {
      return this.success;
    }

    public getXmnWithdrawList_result setSuccess(ResponseList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getXmnWithdrawList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmnWithdrawList_result)
        return this.equals((getXmnWithdrawList_result)that);
      return false;
    }

    public boolean equals(getXmnWithdrawList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmnWithdrawList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmnWithdrawList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmnWithdrawList_resultStandardSchemeFactory implements SchemeFactory {
      public getXmnWithdrawList_resultStandardScheme getScheme() {
        return new getXmnWithdrawList_resultStandardScheme();
      }
    }

    private static class getXmnWithdrawList_resultStandardScheme extends StandardScheme<getXmnWithdrawList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmnWithdrawList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmnWithdrawList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmnWithdrawList_resultTupleSchemeFactory implements SchemeFactory {
      public getXmnWithdrawList_resultTupleScheme getScheme() {
        return new getXmnWithdrawList_resultTupleScheme();
      }
    }

    private static class getXmnWithdrawList_resultTupleScheme extends TupleScheme<getXmnWithdrawList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmnWithdrawList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getXmnWalletLedgerList_args implements org.apache.thrift.TBase<getXmnWalletLedgerList_args, getXmnWalletLedgerList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getXmnWalletLedgerList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmnWalletLedgerList_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmnWalletLedgerList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmnWalletLedgerList_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmnWalletLedgerList_args.class, metaDataMap);
    }

    public getXmnWalletLedgerList_args() {
    }

    public getXmnWalletLedgerList_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmnWalletLedgerList_args(getXmnWalletLedgerList_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getXmnWalletLedgerList_args deepCopy() {
      return new getXmnWalletLedgerList_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getXmnWalletLedgerList_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmnWalletLedgerList_args)
        return this.equals((getXmnWalletLedgerList_args)that);
      return false;
    }

    public boolean equals(getXmnWalletLedgerList_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmnWalletLedgerList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmnWalletLedgerList_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmnWalletLedgerList_argsStandardSchemeFactory implements SchemeFactory {
      public getXmnWalletLedgerList_argsStandardScheme getScheme() {
        return new getXmnWalletLedgerList_argsStandardScheme();
      }
    }

    private static class getXmnWalletLedgerList_argsStandardScheme extends StandardScheme<getXmnWalletLedgerList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmnWalletLedgerList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map94 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map94.size);
                  for (int _i95 = 0; _i95 < _map94.size; ++_i95)
                  {
                    String _key96;
                    String _val97;
                    _key96 = iprot.readString();
                    _val97 = iprot.readString();
                    struct.walletMap.put(_key96, _val97);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmnWalletLedgerList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter98 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter98.getKey());
              oprot.writeString(_iter98.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmnWalletLedgerList_argsTupleSchemeFactory implements SchemeFactory {
      public getXmnWalletLedgerList_argsTupleScheme getScheme() {
        return new getXmnWalletLedgerList_argsTupleScheme();
      }
    }

    private static class getXmnWalletLedgerList_argsTupleScheme extends TupleScheme<getXmnWalletLedgerList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmnWalletLedgerList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter99 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter99.getKey());
              oprot.writeString(_iter99.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmnWalletLedgerList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map100.size);
            for (int _i101 = 0; _i101 < _map100.size; ++_i101)
            {
              String _key102;
              String _val103;
              _key102 = iprot.readString();
              _val103 = iprot.readString();
              struct.walletMap.put(_key102, _val103);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getXmnWalletLedgerList_result implements org.apache.thrift.TBase<getXmnWalletLedgerList_result, getXmnWalletLedgerList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getXmnWalletLedgerList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmnWalletLedgerList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmnWalletLedgerList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmnWalletLedgerList_resultTupleSchemeFactory());
    }

    public ResponseList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmnWalletLedgerList_result.class, metaDataMap);
    }

    public getXmnWalletLedgerList_result() {
    }

    public getXmnWalletLedgerList_result(
      ResponseList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmnWalletLedgerList_result(getXmnWalletLedgerList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getXmnWalletLedgerList_result deepCopy() {
      return new getXmnWalletLedgerList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseList getSuccess() {
      return this.success;
    }

    public getXmnWalletLedgerList_result setSuccess(ResponseList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getXmnWalletLedgerList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmnWalletLedgerList_result)
        return this.equals((getXmnWalletLedgerList_result)that);
      return false;
    }

    public boolean equals(getXmnWalletLedgerList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmnWalletLedgerList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmnWalletLedgerList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmnWalletLedgerList_resultStandardSchemeFactory implements SchemeFactory {
      public getXmnWalletLedgerList_resultStandardScheme getScheme() {
        return new getXmnWalletLedgerList_resultStandardScheme();
      }
    }

    private static class getXmnWalletLedgerList_resultStandardScheme extends StandardScheme<getXmnWalletLedgerList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmnWalletLedgerList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmnWalletLedgerList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmnWalletLedgerList_resultTupleSchemeFactory implements SchemeFactory {
      public getXmnWalletLedgerList_resultTupleScheme getScheme() {
        return new getXmnWalletLedgerList_resultTupleScheme();
      }
    }

    private static class getXmnWalletLedgerList_resultTupleScheme extends TupleScheme<getXmnWalletLedgerList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmnWalletLedgerList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmnWalletLedgerList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSellerLedgerInfo_args implements org.apache.thrift.TBase<getSellerLedgerInfo_args, getSellerLedgerInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerLedgerInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerLedgerInfo_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerLedgerInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerLedgerInfo_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerLedgerInfo_args.class, metaDataMap);
    }

    public getSellerLedgerInfo_args() {
    }

    public getSellerLedgerInfo_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerLedgerInfo_args(getSellerLedgerInfo_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getSellerLedgerInfo_args deepCopy() {
      return new getSellerLedgerInfo_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getSellerLedgerInfo_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerLedgerInfo_args)
        return this.equals((getSellerLedgerInfo_args)that);
      return false;
    }

    public boolean equals(getSellerLedgerInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerLedgerInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerLedgerInfo_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerLedgerInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getSellerLedgerInfo_argsStandardScheme getScheme() {
        return new getSellerLedgerInfo_argsStandardScheme();
      }
    }

    private static class getSellerLedgerInfo_argsStandardScheme extends StandardScheme<getSellerLedgerInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerLedgerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map104.size);
                  for (int _i105 = 0; _i105 < _map104.size; ++_i105)
                  {
                    String _key106;
                    String _val107;
                    _key106 = iprot.readString();
                    _val107 = iprot.readString();
                    struct.walletMap.put(_key106, _val107);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerLedgerInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter108 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter108.getKey());
              oprot.writeString(_iter108.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerLedgerInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getSellerLedgerInfo_argsTupleScheme getScheme() {
        return new getSellerLedgerInfo_argsTupleScheme();
      }
    }

    private static class getSellerLedgerInfo_argsTupleScheme extends TupleScheme<getSellerLedgerInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerLedgerInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter109 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter109.getKey());
              oprot.writeString(_iter109.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerLedgerInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map110 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map110.size);
            for (int _i111 = 0; _i111 < _map110.size; ++_i111)
            {
              String _key112;
              String _val113;
              _key112 = iprot.readString();
              _val113 = iprot.readString();
              struct.walletMap.put(_key112, _val113);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getSellerLedgerInfo_result implements org.apache.thrift.TBase<getSellerLedgerInfo_result, getSellerLedgerInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerLedgerInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerLedgerInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerLedgerInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerLedgerInfo_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerLedgerInfo_result.class, metaDataMap);
    }

    public getSellerLedgerInfo_result() {
    }

    public getSellerLedgerInfo_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerLedgerInfo_result(getSellerLedgerInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSellerLedgerInfo_result deepCopy() {
      return new getSellerLedgerInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public getSellerLedgerInfo_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSellerLedgerInfo_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerLedgerInfo_result)
        return this.equals((getSellerLedgerInfo_result)that);
      return false;
    }

    public boolean equals(getSellerLedgerInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerLedgerInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerLedgerInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerLedgerInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getSellerLedgerInfo_resultStandardScheme getScheme() {
        return new getSellerLedgerInfo_resultStandardScheme();
      }
    }

    private static class getSellerLedgerInfo_resultStandardScheme extends StandardScheme<getSellerLedgerInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerLedgerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerLedgerInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerLedgerInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getSellerLedgerInfo_resultTupleScheme getScheme() {
        return new getSellerLedgerInfo_resultTupleScheme();
      }
    }

    private static class getSellerLedgerInfo_resultTupleScheme extends TupleScheme<getSellerLedgerInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerLedgerInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerLedgerInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSellerExpenseList_args implements org.apache.thrift.TBase<getSellerExpenseList_args, getSellerExpenseList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerExpenseList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerExpenseList_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerExpenseList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerExpenseList_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerExpenseList_args.class, metaDataMap);
    }

    public getSellerExpenseList_args() {
    }

    public getSellerExpenseList_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerExpenseList_args(getSellerExpenseList_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getSellerExpenseList_args deepCopy() {
      return new getSellerExpenseList_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getSellerExpenseList_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerExpenseList_args)
        return this.equals((getSellerExpenseList_args)that);
      return false;
    }

    public boolean equals(getSellerExpenseList_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerExpenseList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerExpenseList_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerExpenseList_argsStandardSchemeFactory implements SchemeFactory {
      public getSellerExpenseList_argsStandardScheme getScheme() {
        return new getSellerExpenseList_argsStandardScheme();
      }
    }

    private static class getSellerExpenseList_argsStandardScheme extends StandardScheme<getSellerExpenseList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerExpenseList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map114.size);
                  for (int _i115 = 0; _i115 < _map114.size; ++_i115)
                  {
                    String _key116;
                    String _val117;
                    _key116 = iprot.readString();
                    _val117 = iprot.readString();
                    struct.walletMap.put(_key116, _val117);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerExpenseList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter118 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter118.getKey());
              oprot.writeString(_iter118.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerExpenseList_argsTupleSchemeFactory implements SchemeFactory {
      public getSellerExpenseList_argsTupleScheme getScheme() {
        return new getSellerExpenseList_argsTupleScheme();
      }
    }

    private static class getSellerExpenseList_argsTupleScheme extends TupleScheme<getSellerExpenseList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerExpenseList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter119 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter119.getKey());
              oprot.writeString(_iter119.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerExpenseList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map120.size);
            for (int _i121 = 0; _i121 < _map120.size; ++_i121)
            {
              String _key122;
              String _val123;
              _key122 = iprot.readString();
              _val123 = iprot.readString();
              struct.walletMap.put(_key122, _val123);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getSellerExpenseList_result implements org.apache.thrift.TBase<getSellerExpenseList_result, getSellerExpenseList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerExpenseList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerExpenseList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerExpenseList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerExpenseList_resultTupleSchemeFactory());
    }

    public ResponseList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerExpenseList_result.class, metaDataMap);
    }

    public getSellerExpenseList_result() {
    }

    public getSellerExpenseList_result(
      ResponseList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerExpenseList_result(getSellerExpenseList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSellerExpenseList_result deepCopy() {
      return new getSellerExpenseList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseList getSuccess() {
      return this.success;
    }

    public getSellerExpenseList_result setSuccess(ResponseList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSellerExpenseList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerExpenseList_result)
        return this.equals((getSellerExpenseList_result)that);
      return false;
    }

    public boolean equals(getSellerExpenseList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerExpenseList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerExpenseList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerExpenseList_resultStandardSchemeFactory implements SchemeFactory {
      public getSellerExpenseList_resultStandardScheme getScheme() {
        return new getSellerExpenseList_resultStandardScheme();
      }
    }

    private static class getSellerExpenseList_resultStandardScheme extends StandardScheme<getSellerExpenseList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerExpenseList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerExpenseList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerExpenseList_resultTupleSchemeFactory implements SchemeFactory {
      public getSellerExpenseList_resultTupleScheme getScheme() {
        return new getSellerExpenseList_resultTupleScheme();
      }
    }

    private static class getSellerExpenseList_resultTupleScheme extends TupleScheme<getSellerExpenseList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerExpenseList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerExpenseList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getUserWalletRecordList_args implements org.apache.thrift.TBase<getUserWalletRecordList_args, getUserWalletRecordList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserWalletRecordList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserWalletRecordList_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserWalletRecordList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserWalletRecordList_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWalletRecordList_args.class, metaDataMap);
    }

    public getUserWalletRecordList_args() {
    }

    public getUserWalletRecordList_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserWalletRecordList_args(getUserWalletRecordList_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getUserWalletRecordList_args deepCopy() {
      return new getUserWalletRecordList_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getUserWalletRecordList_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserWalletRecordList_args)
        return this.equals((getUserWalletRecordList_args)that);
      return false;
    }

    public boolean equals(getUserWalletRecordList_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserWalletRecordList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserWalletRecordList_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserWalletRecordList_argsStandardSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList_argsStandardScheme getScheme() {
        return new getUserWalletRecordList_argsStandardScheme();
      }
    }

    private static class getUserWalletRecordList_argsStandardScheme extends StandardScheme<getUserWalletRecordList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWalletRecordList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map124.size);
                  for (int _i125 = 0; _i125 < _map124.size; ++_i125)
                  {
                    String _key126;
                    String _val127;
                    _key126 = iprot.readString();
                    _val127 = iprot.readString();
                    struct.walletMap.put(_key126, _val127);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWalletRecordList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter128 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter128.getKey());
              oprot.writeString(_iter128.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserWalletRecordList_argsTupleSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList_argsTupleScheme getScheme() {
        return new getUserWalletRecordList_argsTupleScheme();
      }
    }

    private static class getUserWalletRecordList_argsTupleScheme extends TupleScheme<getUserWalletRecordList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter129 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter129.getKey());
              oprot.writeString(_iter129.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map130 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map130.size);
            for (int _i131 = 0; _i131 < _map130.size; ++_i131)
            {
              String _key132;
              String _val133;
              _key132 = iprot.readString();
              _val133 = iprot.readString();
              struct.walletMap.put(_key132, _val133);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getUserWalletRecordList_result implements org.apache.thrift.TBase<getUserWalletRecordList_result, getUserWalletRecordList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserWalletRecordList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserWalletRecordList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserWalletRecordList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserWalletRecordList_resultTupleSchemeFactory());
    }

    public ResponsePageList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponsePageList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWalletRecordList_result.class, metaDataMap);
    }

    public getUserWalletRecordList_result() {
    }

    public getUserWalletRecordList_result(
      ResponsePageList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserWalletRecordList_result(getUserWalletRecordList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponsePageList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getUserWalletRecordList_result deepCopy() {
      return new getUserWalletRecordList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponsePageList getSuccess() {
      return this.success;
    }

    public getUserWalletRecordList_result setSuccess(ResponsePageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getUserWalletRecordList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponsePageList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserWalletRecordList_result)
        return this.equals((getUserWalletRecordList_result)that);
      return false;
    }

    public boolean equals(getUserWalletRecordList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserWalletRecordList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserWalletRecordList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserWalletRecordList_resultStandardSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList_resultStandardScheme getScheme() {
        return new getUserWalletRecordList_resultStandardScheme();
      }
    }

    private static class getUserWalletRecordList_resultStandardScheme extends StandardScheme<getUserWalletRecordList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWalletRecordList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponsePageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWalletRecordList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserWalletRecordList_resultTupleSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList_resultTupleScheme getScheme() {
        return new getUserWalletRecordList_resultTupleScheme();
      }
    }

    private static class getUserWalletRecordList_resultTupleScheme extends TupleScheme<getUserWalletRecordList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponsePageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getUserRecords_args implements org.apache.thrift.TBase<getUserRecords_args, getUserRecords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserRecords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserRecords_args");

    private static final org.apache.thrift.protocol.TField PARA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paraMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserRecords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserRecords_argsTupleSchemeFactory());
    }

    public Map<String,String> paraMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_MAP((short)1, "paraMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_MAP
            return PARA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_MAP, new org.apache.thrift.meta_data.FieldMetaData("paraMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserRecords_args.class, metaDataMap);
    }

    public getUserRecords_args() {
    }

    public getUserRecords_args(
      Map<String,String> paraMap)
    {
      this();
      this.paraMap = paraMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRecords_args(getUserRecords_args other) {
      if (other.isSetParaMap()) {
        Map<String,String> __this__paraMap = new HashMap<String,String>(other.paraMap);
        this.paraMap = __this__paraMap;
      }
    }

    public getUserRecords_args deepCopy() {
      return new getUserRecords_args(this);
    }

    @Override
    public void clear() {
      this.paraMap = null;
    }

    public int getParaMapSize() {
      return (this.paraMap == null) ? 0 : this.paraMap.size();
    }

    public void putToParaMap(String key, String val) {
      if (this.paraMap == null) {
        this.paraMap = new HashMap<String,String>();
      }
      this.paraMap.put(key, val);
    }

    public Map<String,String> getParaMap() {
      return this.paraMap;
    }

    public getUserRecords_args setParaMap(Map<String,String> paraMap) {
      this.paraMap = paraMap;
      return this;
    }

    public void unsetParaMap() {
      this.paraMap = null;
    }

    /** Returns true if field paraMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParaMap() {
      return this.paraMap != null;
    }

    public void setParaMapIsSet(boolean value) {
      if (!value) {
        this.paraMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_MAP:
        if (value == null) {
          unsetParaMap();
        } else {
          setParaMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_MAP:
        return getParaMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_MAP:
        return isSetParaMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRecords_args)
        return this.equals((getUserRecords_args)that);
      return false;
    }

    public boolean equals(getUserRecords_args that) {
      if (that == null)
        return false;

      boolean this_present_paraMap = true && this.isSetParaMap();
      boolean that_present_paraMap = true && that.isSetParaMap();
      if (this_present_paraMap || that_present_paraMap) {
        if (!(this_present_paraMap && that_present_paraMap))
          return false;
        if (!this.paraMap.equals(that.paraMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserRecords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaMap()).compareTo(other.isSetParaMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraMap, other.paraMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserRecords_args(");
      boolean first = true;

      sb.append("paraMap:");
      if (this.paraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paraMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserRecords_argsStandardSchemeFactory implements SchemeFactory {
      public getUserRecords_argsStandardScheme getScheme() {
        return new getUserRecords_argsStandardScheme();
      }
    }

    private static class getUserRecords_argsStandardScheme extends StandardScheme<getUserRecords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map134 = iprot.readMapBegin();
                  struct.paraMap = new HashMap<String,String>(2*_map134.size);
                  for (int _i135 = 0; _i135 < _map134.size; ++_i135)
                  {
                    String _key136;
                    String _val137;
                    _key136 = iprot.readString();
                    _val137 = iprot.readString();
                    struct.paraMap.put(_key136, _val137);
                  }
                  iprot.readMapEnd();
                }
                struct.setParaMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserRecords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paraMap != null) {
          oprot.writeFieldBegin(PARA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paraMap.size()));
            for (Map.Entry<String, String> _iter138 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter138.getKey());
              oprot.writeString(_iter138.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserRecords_argsTupleSchemeFactory implements SchemeFactory {
      public getUserRecords_argsTupleScheme getScheme() {
        return new getUserRecords_argsTupleScheme();
      }
    }

    private static class getUserRecords_argsTupleScheme extends TupleScheme<getUserRecords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserRecords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParaMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParaMap()) {
          {
            oprot.writeI32(struct.paraMap.size());
            for (Map.Entry<String, String> _iter139 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter139.getKey());
              oprot.writeString(_iter139.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserRecords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map140 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paraMap = new HashMap<String,String>(2*_map140.size);
            for (int _i141 = 0; _i141 < _map140.size; ++_i141)
            {
              String _key142;
              String _val143;
              _key142 = iprot.readString();
              _val143 = iprot.readString();
              struct.paraMap.put(_key142, _val143);
            }
          }
          struct.setParaMapIsSet(true);
        }
      }
    }

  }

  public static class getUserRecords_result implements org.apache.thrift.TBase<getUserRecords_result, getUserRecords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserRecords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserRecords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserRecords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserRecords_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserRecords_result.class, metaDataMap);
    }

    public getUserRecords_result() {
    }

    public getUserRecords_result(
      List<Map<String,String>> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRecords_result(getUserRecords_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getUserRecords_result deepCopy() {
      return new getUserRecords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getUserRecords_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getUserRecords_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRecords_result)
        return this.equals((getUserRecords_result)that);
      return false;
    }

    public boolean equals(getUserRecords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserRecords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserRecords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserRecords_resultStandardSchemeFactory implements SchemeFactory {
      public getUserRecords_resultStandardScheme getScheme() {
        return new getUserRecords_resultStandardScheme();
      }
    }

    private static class getUserRecords_resultStandardScheme extends StandardScheme<getUserRecords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list144.size);
                  for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                  {
                    Map<String,String> _elem146;
                    {
                      org.apache.thrift.protocol.TMap _map147 = iprot.readMapBegin();
                      _elem146 = new HashMap<String,String>(2*_map147.size);
                      for (int _i148 = 0; _i148 < _map147.size; ++_i148)
                      {
                        String _key149;
                        String _val150;
                        _key149 = iprot.readString();
                        _val150 = iprot.readString();
                        _elem146.put(_key149, _val150);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserRecords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter151 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter151.size()));
                for (Map.Entry<String, String> _iter152 : _iter151.entrySet())
                {
                  oprot.writeString(_iter152.getKey());
                  oprot.writeString(_iter152.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserRecords_resultTupleSchemeFactory implements SchemeFactory {
      public getUserRecords_resultTupleScheme getScheme() {
        return new getUserRecords_resultTupleScheme();
      }
    }

    private static class getUserRecords_resultTupleScheme extends TupleScheme<getUserRecords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserRecords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter153 : struct.success)
            {
              {
                oprot.writeI32(_iter153.size());
                for (Map.Entry<String, String> _iter154 : _iter153.entrySet())
                {
                  oprot.writeString(_iter154.getKey());
                  oprot.writeString(_iter154.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserRecords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list155.size);
            for (int _i156 = 0; _i156 < _list155.size; ++_i156)
            {
              Map<String,String> _elem157;
              {
                org.apache.thrift.protocol.TMap _map158 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem157 = new HashMap<String,String>(2*_map158.size);
                for (int _i159 = 0; _i159 < _map158.size; ++_i159)
                {
                  String _key160;
                  String _val161;
                  _key160 = iprot.readString();
                  _val161 = iprot.readString();
                  _elem157.put(_key160, _val161);
                }
              }
              struct.success.add(_elem157);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getSellerRechargeLedgerRecord_args implements org.apache.thrift.TBase<getSellerRechargeLedgerRecord_args, getSellerRechargeLedgerRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerRechargeLedgerRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerRechargeLedgerRecord_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerRechargeLedgerRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerRechargeLedgerRecord_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerRechargeLedgerRecord_args.class, metaDataMap);
    }

    public getSellerRechargeLedgerRecord_args() {
    }

    public getSellerRechargeLedgerRecord_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerRechargeLedgerRecord_args(getSellerRechargeLedgerRecord_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getSellerRechargeLedgerRecord_args deepCopy() {
      return new getSellerRechargeLedgerRecord_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getSellerRechargeLedgerRecord_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerRechargeLedgerRecord_args)
        return this.equals((getSellerRechargeLedgerRecord_args)that);
      return false;
    }

    public boolean equals(getSellerRechargeLedgerRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerRechargeLedgerRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerRechargeLedgerRecord_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerRechargeLedgerRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getSellerRechargeLedgerRecord_argsStandardScheme getScheme() {
        return new getSellerRechargeLedgerRecord_argsStandardScheme();
      }
    }

    private static class getSellerRechargeLedgerRecord_argsStandardScheme extends StandardScheme<getSellerRechargeLedgerRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerRechargeLedgerRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map162 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map162.size);
                  for (int _i163 = 0; _i163 < _map162.size; ++_i163)
                  {
                    String _key164;
                    String _val165;
                    _key164 = iprot.readString();
                    _val165 = iprot.readString();
                    struct.walletMap.put(_key164, _val165);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerRechargeLedgerRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter166 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter166.getKey());
              oprot.writeString(_iter166.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerRechargeLedgerRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getSellerRechargeLedgerRecord_argsTupleScheme getScheme() {
        return new getSellerRechargeLedgerRecord_argsTupleScheme();
      }
    }

    private static class getSellerRechargeLedgerRecord_argsTupleScheme extends TupleScheme<getSellerRechargeLedgerRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerRechargeLedgerRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter167 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter167.getKey());
              oprot.writeString(_iter167.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerRechargeLedgerRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map168 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map168.size);
            for (int _i169 = 0; _i169 < _map168.size; ++_i169)
            {
              String _key170;
              String _val171;
              _key170 = iprot.readString();
              _val171 = iprot.readString();
              struct.walletMap.put(_key170, _val171);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getSellerRechargeLedgerRecord_result implements org.apache.thrift.TBase<getSellerRechargeLedgerRecord_result, getSellerRechargeLedgerRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSellerRechargeLedgerRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSellerRechargeLedgerRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSellerRechargeLedgerRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSellerRechargeLedgerRecord_resultTupleSchemeFactory());
    }

    public ResponseList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSellerRechargeLedgerRecord_result.class, metaDataMap);
    }

    public getSellerRechargeLedgerRecord_result() {
    }

    public getSellerRechargeLedgerRecord_result(
      ResponseList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSellerRechargeLedgerRecord_result(getSellerRechargeLedgerRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getSellerRechargeLedgerRecord_result deepCopy() {
      return new getSellerRechargeLedgerRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseList getSuccess() {
      return this.success;
    }

    public getSellerRechargeLedgerRecord_result setSuccess(ResponseList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getSellerRechargeLedgerRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSellerRechargeLedgerRecord_result)
        return this.equals((getSellerRechargeLedgerRecord_result)that);
      return false;
    }

    public boolean equals(getSellerRechargeLedgerRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSellerRechargeLedgerRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSellerRechargeLedgerRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSellerRechargeLedgerRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getSellerRechargeLedgerRecord_resultStandardScheme getScheme() {
        return new getSellerRechargeLedgerRecord_resultStandardScheme();
      }
    }

    private static class getSellerRechargeLedgerRecord_resultStandardScheme extends StandardScheme<getSellerRechargeLedgerRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSellerRechargeLedgerRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSellerRechargeLedgerRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSellerRechargeLedgerRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getSellerRechargeLedgerRecord_resultTupleScheme getScheme() {
        return new getSellerRechargeLedgerRecord_resultTupleScheme();
      }
    }

    private static class getSellerRechargeLedgerRecord_resultTupleScheme extends TupleScheme<getSellerRechargeLedgerRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSellerRechargeLedgerRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSellerRechargeLedgerRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getUserWalletRecordList2_args implements org.apache.thrift.TBase<getUserWalletRecordList2_args, getUserWalletRecordList2_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserWalletRecordList2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserWalletRecordList2_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserWalletRecordList2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserWalletRecordList2_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWalletRecordList2_args.class, metaDataMap);
    }

    public getUserWalletRecordList2_args() {
    }

    public getUserWalletRecordList2_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserWalletRecordList2_args(getUserWalletRecordList2_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getUserWalletRecordList2_args deepCopy() {
      return new getUserWalletRecordList2_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getUserWalletRecordList2_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserWalletRecordList2_args)
        return this.equals((getUserWalletRecordList2_args)that);
      return false;
    }

    public boolean equals(getUserWalletRecordList2_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserWalletRecordList2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserWalletRecordList2_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserWalletRecordList2_argsStandardSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList2_argsStandardScheme getScheme() {
        return new getUserWalletRecordList2_argsStandardScheme();
      }
    }

    private static class getUserWalletRecordList2_argsStandardScheme extends StandardScheme<getUserWalletRecordList2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWalletRecordList2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map172 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map172.size);
                  for (int _i173 = 0; _i173 < _map172.size; ++_i173)
                  {
                    String _key174;
                    String _val175;
                    _key174 = iprot.readString();
                    _val175 = iprot.readString();
                    struct.walletMap.put(_key174, _val175);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWalletRecordList2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter176 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter176.getKey());
              oprot.writeString(_iter176.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserWalletRecordList2_argsTupleSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList2_argsTupleScheme getScheme() {
        return new getUserWalletRecordList2_argsTupleScheme();
      }
    }

    private static class getUserWalletRecordList2_argsTupleScheme extends TupleScheme<getUserWalletRecordList2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter177 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter177.getKey());
              oprot.writeString(_iter177.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map178.size);
            for (int _i179 = 0; _i179 < _map178.size; ++_i179)
            {
              String _key180;
              String _val181;
              _key180 = iprot.readString();
              _val181 = iprot.readString();
              struct.walletMap.put(_key180, _val181);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getUserWalletRecordList2_result implements org.apache.thrift.TBase<getUserWalletRecordList2_result, getUserWalletRecordList2_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserWalletRecordList2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserWalletRecordList2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserWalletRecordList2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserWalletRecordList2_resultTupleSchemeFactory());
    }

    public ResponsePageList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponsePageList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWalletRecordList2_result.class, metaDataMap);
    }

    public getUserWalletRecordList2_result() {
    }

    public getUserWalletRecordList2_result(
      ResponsePageList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserWalletRecordList2_result(getUserWalletRecordList2_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponsePageList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getUserWalletRecordList2_result deepCopy() {
      return new getUserWalletRecordList2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponsePageList getSuccess() {
      return this.success;
    }

    public getUserWalletRecordList2_result setSuccess(ResponsePageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getUserWalletRecordList2_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponsePageList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserWalletRecordList2_result)
        return this.equals((getUserWalletRecordList2_result)that);
      return false;
    }

    public boolean equals(getUserWalletRecordList2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserWalletRecordList2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserWalletRecordList2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserWalletRecordList2_resultStandardSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList2_resultStandardScheme getScheme() {
        return new getUserWalletRecordList2_resultStandardScheme();
      }
    }

    private static class getUserWalletRecordList2_resultStandardScheme extends StandardScheme<getUserWalletRecordList2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWalletRecordList2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponsePageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWalletRecordList2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserWalletRecordList2_resultTupleSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList2_resultTupleScheme getScheme() {
        return new getUserWalletRecordList2_resultTupleScheme();
      }
    }

    private static class getUserWalletRecordList2_resultTupleScheme extends TupleScheme<getUserWalletRecordList2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponsePageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getUserWalletRecordList3_args implements org.apache.thrift.TBase<getUserWalletRecordList3_args, getUserWalletRecordList3_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserWalletRecordList3_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserWalletRecordList3_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserWalletRecordList3_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserWalletRecordList3_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWalletRecordList3_args.class, metaDataMap);
    }

    public getUserWalletRecordList3_args() {
    }

    public getUserWalletRecordList3_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserWalletRecordList3_args(getUserWalletRecordList3_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getUserWalletRecordList3_args deepCopy() {
      return new getUserWalletRecordList3_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getUserWalletRecordList3_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserWalletRecordList3_args)
        return this.equals((getUserWalletRecordList3_args)that);
      return false;
    }

    public boolean equals(getUserWalletRecordList3_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserWalletRecordList3_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserWalletRecordList3_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserWalletRecordList3_argsStandardSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList3_argsStandardScheme getScheme() {
        return new getUserWalletRecordList3_argsStandardScheme();
      }
    }

    private static class getUserWalletRecordList3_argsStandardScheme extends StandardScheme<getUserWalletRecordList3_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWalletRecordList3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map182 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map182.size);
                  for (int _i183 = 0; _i183 < _map182.size; ++_i183)
                  {
                    String _key184;
                    String _val185;
                    _key184 = iprot.readString();
                    _val185 = iprot.readString();
                    struct.walletMap.put(_key184, _val185);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWalletRecordList3_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter186 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter186.getKey());
              oprot.writeString(_iter186.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserWalletRecordList3_argsTupleSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList3_argsTupleScheme getScheme() {
        return new getUserWalletRecordList3_argsTupleScheme();
      }
    }

    private static class getUserWalletRecordList3_argsTupleScheme extends TupleScheme<getUserWalletRecordList3_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter187 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter187.getKey());
              oprot.writeString(_iter187.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map188 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map188.size);
            for (int _i189 = 0; _i189 < _map188.size; ++_i189)
            {
              String _key190;
              String _val191;
              _key190 = iprot.readString();
              _val191 = iprot.readString();
              struct.walletMap.put(_key190, _val191);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getUserWalletRecordList3_result implements org.apache.thrift.TBase<getUserWalletRecordList3_result, getUserWalletRecordList3_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserWalletRecordList3_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserWalletRecordList3_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserWalletRecordList3_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserWalletRecordList3_resultTupleSchemeFactory());
    }

    public ResponsePageList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponsePageList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWalletRecordList3_result.class, metaDataMap);
    }

    public getUserWalletRecordList3_result() {
    }

    public getUserWalletRecordList3_result(
      ResponsePageList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserWalletRecordList3_result(getUserWalletRecordList3_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponsePageList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getUserWalletRecordList3_result deepCopy() {
      return new getUserWalletRecordList3_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponsePageList getSuccess() {
      return this.success;
    }

    public getUserWalletRecordList3_result setSuccess(ResponsePageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getUserWalletRecordList3_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponsePageList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserWalletRecordList3_result)
        return this.equals((getUserWalletRecordList3_result)that);
      return false;
    }

    public boolean equals(getUserWalletRecordList3_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserWalletRecordList3_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserWalletRecordList3_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserWalletRecordList3_resultStandardSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList3_resultStandardScheme getScheme() {
        return new getUserWalletRecordList3_resultStandardScheme();
      }
    }

    private static class getUserWalletRecordList3_resultStandardScheme extends StandardScheme<getUserWalletRecordList3_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWalletRecordList3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponsePageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWalletRecordList3_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserWalletRecordList3_resultTupleSchemeFactory implements SchemeFactory {
      public getUserWalletRecordList3_resultTupleScheme getScheme() {
        return new getUserWalletRecordList3_resultTupleScheme();
      }
    }

    private static class getUserWalletRecordList3_resultTupleScheme extends TupleScheme<getUserWalletRecordList3_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserWalletRecordList3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponsePageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWalletLock_args implements org.apache.thrift.TBase<updateWalletLock_args, updateWalletLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletLock_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletLock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletLock_argsTupleSchemeFactory());
    }

    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletLock_args.class, metaDataMap);
    }

    public updateWalletLock_args() {
    }

    public updateWalletLock_args(
      Map<String,String> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletLock_args(updateWalletLock_args other) {
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public updateWalletLock_args deepCopy() {
      return new updateWalletLock_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public updateWalletLock_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletLock_args)
        return this.equals((updateWalletLock_args)that);
      return false;
    }

    public boolean equals(updateWalletLock_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletLock_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletLock_argsStandardSchemeFactory implements SchemeFactory {
      public updateWalletLock_argsStandardScheme getScheme() {
        return new updateWalletLock_argsStandardScheme();
      }
    }

    private static class updateWalletLock_argsStandardScheme extends StandardScheme<updateWalletLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map192 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map192.size);
                  for (int _i193 = 0; _i193 < _map192.size; ++_i193)
                  {
                    String _key194;
                    String _val195;
                    _key194 = iprot.readString();
                    _val195 = iprot.readString();
                    struct.param.put(_key194, _val195);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter196 : struct.param.entrySet())
            {
              oprot.writeString(_iter196.getKey());
              oprot.writeString(_iter196.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletLock_argsTupleSchemeFactory implements SchemeFactory {
      public updateWalletLock_argsTupleScheme getScheme() {
        return new updateWalletLock_argsTupleScheme();
      }
    }

    private static class updateWalletLock_argsTupleScheme extends TupleScheme<updateWalletLock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter197 : struct.param.entrySet())
            {
              oprot.writeString(_iter197.getKey());
              oprot.writeString(_iter197.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map198 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map198.size);
            for (int _i199 = 0; _i199 < _map198.size; ++_i199)
            {
              String _key200;
              String _val201;
              _key200 = iprot.readString();
              _val201 = iprot.readString();
              struct.param.put(_key200, _val201);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class updateWalletLock_result implements org.apache.thrift.TBase<updateWalletLock_result, updateWalletLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWalletLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWalletLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWalletLock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWalletLock_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWalletLock_result.class, metaDataMap);
    }

    public updateWalletLock_result() {
    }

    public updateWalletLock_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWalletLock_result(updateWalletLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWalletLock_result deepCopy() {
      return new updateWalletLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public updateWalletLock_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWalletLock_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWalletLock_result)
        return this.equals((updateWalletLock_result)that);
      return false;
    }

    public boolean equals(updateWalletLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWalletLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWalletLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWalletLock_resultStandardSchemeFactory implements SchemeFactory {
      public updateWalletLock_resultStandardScheme getScheme() {
        return new updateWalletLock_resultStandardScheme();
      }
    }

    private static class updateWalletLock_resultStandardScheme extends StandardScheme<updateWalletLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWalletLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWalletLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWalletLock_resultTupleSchemeFactory implements SchemeFactory {
      public updateWalletLock_resultTupleScheme getScheme() {
        return new updateWalletLock_resultTupleScheme();
      }
    }

    private static class updateWalletLock_resultTupleScheme extends TupleScheme<updateWalletLock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWalletLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWalletLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getWalletBalanceList_args implements org.apache.thrift.TBase<getWalletBalanceList_args, getWalletBalanceList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletBalanceList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletBalanceList_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletBalanceList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletBalanceList_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletBalanceList_args.class, metaDataMap);
    }

    public getWalletBalanceList_args() {
    }

    public getWalletBalanceList_args(
      List<Map<String,String>> param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletBalanceList_args(getWalletBalanceList_args other) {
      if (other.isSetParam()) {
        List<Map<String,String>> __this__param = new ArrayList<Map<String,String>>(other.param.size());
        for (Map<String,String> other_element : other.param) {
          Map<String,String> __this__param_copy = new HashMap<String,String>(other_element);
          __this__param.add(__this__param_copy);
        }
        this.param = __this__param;
      }
    }

    public getWalletBalanceList_args deepCopy() {
      return new getWalletBalanceList_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public java.util.Iterator<Map<String,String>> getParamIterator() {
      return (this.param == null) ? null : this.param.iterator();
    }

    public void addToParam(Map<String,String> elem) {
      if (this.param == null) {
        this.param = new ArrayList<Map<String,String>>();
      }
      this.param.add(elem);
    }

    public List<Map<String,String>> getParam() {
      return this.param;
    }

    public getWalletBalanceList_args setParam(List<Map<String,String>> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletBalanceList_args)
        return this.equals((getWalletBalanceList_args)that);
      return false;
    }

    public boolean equals(getWalletBalanceList_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletBalanceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletBalanceList_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletBalanceList_argsStandardSchemeFactory implements SchemeFactory {
      public getWalletBalanceList_argsStandardScheme getScheme() {
        return new getWalletBalanceList_argsStandardScheme();
      }
    }

    private static class getWalletBalanceList_argsStandardScheme extends StandardScheme<getWalletBalanceList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletBalanceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                  struct.param = new ArrayList<Map<String,String>>(_list202.size);
                  for (int _i203 = 0; _i203 < _list202.size; ++_i203)
                  {
                    Map<String,String> _elem204;
                    {
                      org.apache.thrift.protocol.TMap _map205 = iprot.readMapBegin();
                      _elem204 = new HashMap<String,String>(2*_map205.size);
                      for (int _i206 = 0; _i206 < _map205.size; ++_i206)
                      {
                        String _key207;
                        String _val208;
                        _key207 = iprot.readString();
                        _val208 = iprot.readString();
                        _elem204.put(_key207, _val208);
                      }
                      iprot.readMapEnd();
                    }
                    struct.param.add(_elem204);
                  }
                  iprot.readListEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletBalanceList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.param.size()));
            for (Map<String,String> _iter209 : struct.param)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter209.size()));
                for (Map.Entry<String, String> _iter210 : _iter209.entrySet())
                {
                  oprot.writeString(_iter210.getKey());
                  oprot.writeString(_iter210.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletBalanceList_argsTupleSchemeFactory implements SchemeFactory {
      public getWalletBalanceList_argsTupleScheme getScheme() {
        return new getWalletBalanceList_argsTupleScheme();
      }
    }

    private static class getWalletBalanceList_argsTupleScheme extends TupleScheme<getWalletBalanceList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletBalanceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map<String,String> _iter211 : struct.param)
            {
              {
                oprot.writeI32(_iter211.size());
                for (Map.Entry<String, String> _iter212 : _iter211.entrySet())
                {
                  oprot.writeString(_iter212.getKey());
                  oprot.writeString(_iter212.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletBalanceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.param = new ArrayList<Map<String,String>>(_list213.size);
            for (int _i214 = 0; _i214 < _list213.size; ++_i214)
            {
              Map<String,String> _elem215;
              {
                org.apache.thrift.protocol.TMap _map216 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem215 = new HashMap<String,String>(2*_map216.size);
                for (int _i217 = 0; _i217 < _map216.size; ++_i217)
                {
                  String _key218;
                  String _val219;
                  _key218 = iprot.readString();
                  _val219 = iprot.readString();
                  _elem215.put(_key218, _val219);
                }
              }
              struct.param.add(_elem215);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class getWalletBalanceList_result implements org.apache.thrift.TBase<getWalletBalanceList_result, getWalletBalanceList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletBalanceList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletBalanceList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWalletBalanceList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWalletBalanceList_resultTupleSchemeFactory());
    }

    public ResponsePageList success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponsePageList.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletBalanceList_result.class, metaDataMap);
    }

    public getWalletBalanceList_result() {
    }

    public getWalletBalanceList_result(
      ResponsePageList success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletBalanceList_result(getWalletBalanceList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponsePageList(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getWalletBalanceList_result deepCopy() {
      return new getWalletBalanceList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponsePageList getSuccess() {
      return this.success;
    }

    public getWalletBalanceList_result setSuccess(ResponsePageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getWalletBalanceList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponsePageList)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletBalanceList_result)
        return this.equals((getWalletBalanceList_result)that);
      return false;
    }

    public boolean equals(getWalletBalanceList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWalletBalanceList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletBalanceList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletBalanceList_resultStandardSchemeFactory implements SchemeFactory {
      public getWalletBalanceList_resultStandardScheme getScheme() {
        return new getWalletBalanceList_resultStandardScheme();
      }
    }

    private static class getWalletBalanceList_resultStandardScheme extends StandardScheme<getWalletBalanceList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletBalanceList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponsePageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletBalanceList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletBalanceList_resultTupleSchemeFactory implements SchemeFactory {
      public getWalletBalanceList_resultTupleScheme getScheme() {
        return new getWalletBalanceList_resultTupleScheme();
      }
    }

    private static class getWalletBalanceList_resultTupleScheme extends TupleScheme<getWalletBalanceList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletBalanceList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletBalanceList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponsePageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
