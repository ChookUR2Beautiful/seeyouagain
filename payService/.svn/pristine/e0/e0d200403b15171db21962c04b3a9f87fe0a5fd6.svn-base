/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.thrift.manor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ManorPropsThriftService {

  public interface Iface {

    public Result activateManor(String transNo, long partenUid, long uid, int type, int number) throws TException;

    public ResultList growFlower(String transNo, long uid, int number) throws TException;

    public ResultList receiveUserGiveRedpackage(String transNo, long uid, List<String> transNoList) throws TException;

    public Result receiveEvaryDayNectary(String transNo, long uid, double number) throws TException;

    public ResultList receiveUserGiveNectary(String transNo, long uid) throws TException;

    public Result giveUserNectary(String transNo, long uid, long giveUid, int number, int coverValue) throws TException;

    public ResultList statisticsUserProps(long uid) throws TException;

    public Result sendPropsRedpackage(String transNo, long uid, List<Long> giveUids, int number, double amount, int type, String phone) throws TException;

    public ResultList listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit) throws TException;

    public ResultList listPropsRedpackageRecordByRedpackageId(long redpackageId, long uid) throws TException;

    public Result getPropsRedpackage(long redpackageId, long uid) throws TException;

    public Result statisticsUserRepertory(long uid) throws TException;

    public Result exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage) throws TException;

    public Result addUserEnergy(String transNo, long uid, double number, int type) throws TException;

    public Result buyFlower(String transNo, long uid, int number, int month, double amount) throws TException;

    public ResultList nectaryReport(long uid, int offset, int limit) throws TException;

    public ResultList timerGrowFlower(String transNo, long uid, int hours) throws TException;

    public ResultList getAllNotFinishGrowUserByHours(int hours) throws TException;

    public ResultList listAllNotUseGiveFlower(long uid) throws TException;

    public Result growGiveFlower(String transNo, long uid, List<Long> giveUids) throws TException;

  }

  public interface AsyncIface {

    public void activateManor(String transNo, long partenUid, long uid, int type, int number, AsyncMethodCallback resultHandler) throws TException;

    public void growFlower(String transNo, long uid, int number, AsyncMethodCallback resultHandler) throws TException;

    public void receiveUserGiveRedpackage(String transNo, long uid, List<String> transNoList, AsyncMethodCallback resultHandler) throws TException;

    public void receiveEvaryDayNectary(String transNo, long uid, double number, AsyncMethodCallback resultHandler) throws TException;

    public void receiveUserGiveNectary(String transNo, long uid, AsyncMethodCallback resultHandler) throws TException;

    public void giveUserNectary(String transNo, long uid, long giveUid, int number, int coverValue, AsyncMethodCallback resultHandler) throws TException;

    public void statisticsUserProps(long uid, AsyncMethodCallback resultHandler) throws TException;

    public void sendPropsRedpackage(String transNo, long uid, List<Long> giveUids, int number, double amount, int type, String phone, AsyncMethodCallback resultHandler) throws TException;

    public void listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit, AsyncMethodCallback resultHandler) throws TException;

    public void listPropsRedpackageRecordByRedpackageId(long redpackageId, long uid, AsyncMethodCallback resultHandler) throws TException;

    public void getPropsRedpackage(long redpackageId, long uid, AsyncMethodCallback resultHandler) throws TException;

    public void statisticsUserRepertory(long uid, AsyncMethodCallback resultHandler) throws TException;

    public void exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage, AsyncMethodCallback resultHandler) throws TException;

    public void addUserEnergy(String transNo, long uid, double number, int type, AsyncMethodCallback resultHandler) throws TException;

    public void buyFlower(String transNo, long uid, int number, int month, double amount, AsyncMethodCallback resultHandler) throws TException;

    public void nectaryReport(long uid, int offset, int limit, AsyncMethodCallback resultHandler) throws TException;

    public void timerGrowFlower(String transNo, long uid, int hours, AsyncMethodCallback resultHandler) throws TException;

    public void getAllNotFinishGrowUserByHours(int hours, AsyncMethodCallback resultHandler) throws TException;

    public void listAllNotUseGiveFlower(long uid, AsyncMethodCallback resultHandler) throws TException;

    public void growGiveFlower(String transNo, long uid, List<Long> giveUids, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Result activateManor(String transNo, long partenUid, long uid, int type, int number) throws TException
    {
      send_activateManor(transNo, partenUid, uid, type, number);
      return recv_activateManor();
    }

    public void send_activateManor(String transNo, long partenUid, long uid, int type, int number) throws TException
    {
      activateManor_args args = new activateManor_args();
      args.setTransNo(transNo);
      args.setPartenUid(partenUid);
      args.setUid(uid);
      args.setType(type);
      args.setNumber(number);
      sendBase("activateManor", args);
    }

    public Result recv_activateManor() throws TException
    {
      activateManor_result result = new activateManor_result();
      receiveBase(result, "activateManor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateManor failed: unknown result");
    }

    public ResultList growFlower(String transNo, long uid, int number) throws TException
    {
      send_growFlower(transNo, uid, number);
      return recv_growFlower();
    }

    public void send_growFlower(String transNo, long uid, int number) throws TException
    {
      growFlower_args args = new growFlower_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setNumber(number);
      sendBase("growFlower", args);
    }

    public ResultList recv_growFlower() throws TException
    {
      growFlower_result result = new growFlower_result();
      receiveBase(result, "growFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "growFlower failed: unknown result");
    }

    public ResultList receiveUserGiveRedpackage(String transNo, long uid, List<String> transNoList) throws TException
    {
      send_receiveUserGiveRedpackage(transNo, uid, transNoList);
      return recv_receiveUserGiveRedpackage();
    }

    public void send_receiveUserGiveRedpackage(String transNo, long uid, List<String> transNoList) throws TException
    {
      receiveUserGiveRedpackage_args args = new receiveUserGiveRedpackage_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setTransNoList(transNoList);
      sendBase("receiveUserGiveRedpackage", args);
    }

    public ResultList recv_receiveUserGiveRedpackage() throws TException
    {
      receiveUserGiveRedpackage_result result = new receiveUserGiveRedpackage_result();
      receiveBase(result, "receiveUserGiveRedpackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveUserGiveRedpackage failed: unknown result");
    }

    public Result receiveEvaryDayNectary(String transNo, long uid, double number) throws TException
    {
      send_receiveEvaryDayNectary(transNo, uid, number);
      return recv_receiveEvaryDayNectary();
    }

    public void send_receiveEvaryDayNectary(String transNo, long uid, double number) throws TException
    {
      receiveEvaryDayNectary_args args = new receiveEvaryDayNectary_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setNumber(number);
      sendBase("receiveEvaryDayNectary", args);
    }

    public Result recv_receiveEvaryDayNectary() throws TException
    {
      receiveEvaryDayNectary_result result = new receiveEvaryDayNectary_result();
      receiveBase(result, "receiveEvaryDayNectary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveEvaryDayNectary failed: unknown result");
    }

    public ResultList receiveUserGiveNectary(String transNo, long uid) throws TException
    {
      send_receiveUserGiveNectary(transNo, uid);
      return recv_receiveUserGiveNectary();
    }

    public void send_receiveUserGiveNectary(String transNo, long uid) throws TException
    {
      receiveUserGiveNectary_args args = new receiveUserGiveNectary_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      sendBase("receiveUserGiveNectary", args);
    }

    public ResultList recv_receiveUserGiveNectary() throws TException
    {
      receiveUserGiveNectary_result result = new receiveUserGiveNectary_result();
      receiveBase(result, "receiveUserGiveNectary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveUserGiveNectary failed: unknown result");
    }

    public Result giveUserNectary(String transNo, long uid, long giveUid, int number, int coverValue) throws TException
    {
      send_giveUserNectary(transNo, uid, giveUid, number, coverValue);
      return recv_giveUserNectary();
    }

    public void send_giveUserNectary(String transNo, long uid, long giveUid, int number, int coverValue) throws TException
    {
      giveUserNectary_args args = new giveUserNectary_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setGiveUid(giveUid);
      args.setNumber(number);
      args.setCoverValue(coverValue);
      sendBase("giveUserNectary", args);
    }

    public Result recv_giveUserNectary() throws TException
    {
      giveUserNectary_result result = new giveUserNectary_result();
      receiveBase(result, "giveUserNectary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "giveUserNectary failed: unknown result");
    }

    public ResultList statisticsUserProps(long uid) throws TException
    {
      send_statisticsUserProps(uid);
      return recv_statisticsUserProps();
    }

    public void send_statisticsUserProps(long uid) throws TException
    {
      statisticsUserProps_args args = new statisticsUserProps_args();
      args.setUid(uid);
      sendBase("statisticsUserProps", args);
    }

    public ResultList recv_statisticsUserProps() throws TException
    {
      statisticsUserProps_result result = new statisticsUserProps_result();
      receiveBase(result, "statisticsUserProps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statisticsUserProps failed: unknown result");
    }

    public Result sendPropsRedpackage(String transNo, long uid, List<Long> giveUids, int number, double amount, int type, String phone) throws TException
    {
      send_sendPropsRedpackage(transNo, uid, giveUids, number, amount, type, phone);
      return recv_sendPropsRedpackage();
    }

    public void send_sendPropsRedpackage(String transNo, long uid, List<Long> giveUids, int number, double amount, int type, String phone) throws TException
    {
      sendPropsRedpackage_args args = new sendPropsRedpackage_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setGiveUids(giveUids);
      args.setNumber(number);
      args.setAmount(amount);
      args.setType(type);
      args.setPhone(phone);
      sendBase("sendPropsRedpackage", args);
    }

    public Result recv_sendPropsRedpackage() throws TException
    {
      sendPropsRedpackage_result result = new sendPropsRedpackage_result();
      receiveBase(result, "sendPropsRedpackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendPropsRedpackage failed: unknown result");
    }

    public ResultList listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit) throws TException
    {
      send_listUserPropsRedpackageHistoryByUid(uid, offset, limit);
      return recv_listUserPropsRedpackageHistoryByUid();
    }

    public void send_listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit) throws TException
    {
      listUserPropsRedpackageHistoryByUid_args args = new listUserPropsRedpackageHistoryByUid_args();
      args.setUid(uid);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("listUserPropsRedpackageHistoryByUid", args);
    }

    public ResultList recv_listUserPropsRedpackageHistoryByUid() throws TException
    {
      listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
      receiveBase(result, "listUserPropsRedpackageHistoryByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserPropsRedpackageHistoryByUid failed: unknown result");
    }

    public ResultList listPropsRedpackageRecordByRedpackageId(long redpackageId, long uid) throws TException
    {
      send_listPropsRedpackageRecordByRedpackageId(redpackageId, uid);
      return recv_listPropsRedpackageRecordByRedpackageId();
    }

    public void send_listPropsRedpackageRecordByRedpackageId(long redpackageId, long uid) throws TException
    {
      listPropsRedpackageRecordByRedpackageId_args args = new listPropsRedpackageRecordByRedpackageId_args();
      args.setRedpackageId(redpackageId);
      args.setUid(uid);
      sendBase("listPropsRedpackageRecordByRedpackageId", args);
    }

    public ResultList recv_listPropsRedpackageRecordByRedpackageId() throws TException
    {
      listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
      receiveBase(result, "listPropsRedpackageRecordByRedpackageId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPropsRedpackageRecordByRedpackageId failed: unknown result");
    }

    public Result getPropsRedpackage(long redpackageId, long uid) throws TException
    {
      send_getPropsRedpackage(redpackageId, uid);
      return recv_getPropsRedpackage();
    }

    public void send_getPropsRedpackage(long redpackageId, long uid) throws TException
    {
      getPropsRedpackage_args args = new getPropsRedpackage_args();
      args.setRedpackageId(redpackageId);
      args.setUid(uid);
      sendBase("getPropsRedpackage", args);
    }

    public Result recv_getPropsRedpackage() throws TException
    {
      getPropsRedpackage_result result = new getPropsRedpackage_result();
      receiveBase(result, "getPropsRedpackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPropsRedpackage failed: unknown result");
    }

    public Result statisticsUserRepertory(long uid) throws TException
    {
      send_statisticsUserRepertory(uid);
      return recv_statisticsUserRepertory();
    }

    public void send_statisticsUserRepertory(long uid) throws TException
    {
      statisticsUserRepertory_args args = new statisticsUserRepertory_args();
      args.setUid(uid);
      sendBase("statisticsUserRepertory", args);
    }

    public Result recv_statisticsUserRepertory() throws TException
    {
      statisticsUserRepertory_result result = new statisticsUserRepertory_result();
      receiveBase(result, "statisticsUserRepertory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statisticsUserRepertory failed: unknown result");
    }

    public Result exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage) throws TException
    {
      send_exchangeMoneyRedpackage(transNo, uid, number, configNectarNumber, moneyRedpackage);
      return recv_exchangeMoneyRedpackage();
    }

    public void send_exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage) throws TException
    {
      exchangeMoneyRedpackage_args args = new exchangeMoneyRedpackage_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setNumber(number);
      args.setConfigNectarNumber(configNectarNumber);
      args.setMoneyRedpackage(moneyRedpackage);
      sendBase("exchangeMoneyRedpackage", args);
    }

    public Result recv_exchangeMoneyRedpackage() throws TException
    {
      exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
      receiveBase(result, "exchangeMoneyRedpackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exchangeMoneyRedpackage failed: unknown result");
    }

    public Result addUserEnergy(String transNo, long uid, double number, int type) throws TException
    {
      send_addUserEnergy(transNo, uid, number, type);
      return recv_addUserEnergy();
    }

    public void send_addUserEnergy(String transNo, long uid, double number, int type) throws TException
    {
      addUserEnergy_args args = new addUserEnergy_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setNumber(number);
      args.setType(type);
      sendBase("addUserEnergy", args);
    }

    public Result recv_addUserEnergy() throws TException
    {
      addUserEnergy_result result = new addUserEnergy_result();
      receiveBase(result, "addUserEnergy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addUserEnergy failed: unknown result");
    }

    public Result buyFlower(String transNo, long uid, int number, int month, double amount) throws TException
    {
      send_buyFlower(transNo, uid, number, month, amount);
      return recv_buyFlower();
    }

    public void send_buyFlower(String transNo, long uid, int number, int month, double amount) throws TException
    {
      buyFlower_args args = new buyFlower_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setNumber(number);
      args.setMonth(month);
      args.setAmount(amount);
      sendBase("buyFlower", args);
    }

    public Result recv_buyFlower() throws TException
    {
      buyFlower_result result = new buyFlower_result();
      receiveBase(result, "buyFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "buyFlower failed: unknown result");
    }

    public ResultList nectaryReport(long uid, int offset, int limit) throws TException
    {
      send_nectaryReport(uid, offset, limit);
      return recv_nectaryReport();
    }

    public void send_nectaryReport(long uid, int offset, int limit) throws TException
    {
      nectaryReport_args args = new nectaryReport_args();
      args.setUid(uid);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("nectaryReport", args);
    }

    public ResultList recv_nectaryReport() throws TException
    {
      nectaryReport_result result = new nectaryReport_result();
      receiveBase(result, "nectaryReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "nectaryReport failed: unknown result");
    }

    public ResultList timerGrowFlower(String transNo, long uid, int hours) throws TException
    {
      send_timerGrowFlower(transNo, uid, hours);
      return recv_timerGrowFlower();
    }

    public void send_timerGrowFlower(String transNo, long uid, int hours) throws TException
    {
      timerGrowFlower_args args = new timerGrowFlower_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setHours(hours);
      sendBase("timerGrowFlower", args);
    }

    public ResultList recv_timerGrowFlower() throws TException
    {
      timerGrowFlower_result result = new timerGrowFlower_result();
      receiveBase(result, "timerGrowFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "timerGrowFlower failed: unknown result");
    }

    public ResultList getAllNotFinishGrowUserByHours(int hours) throws TException
    {
      send_getAllNotFinishGrowUserByHours(hours);
      return recv_getAllNotFinishGrowUserByHours();
    }

    public void send_getAllNotFinishGrowUserByHours(int hours) throws TException
    {
      getAllNotFinishGrowUserByHours_args args = new getAllNotFinishGrowUserByHours_args();
      args.setHours(hours);
      sendBase("getAllNotFinishGrowUserByHours", args);
    }

    public ResultList recv_getAllNotFinishGrowUserByHours() throws TException
    {
      getAllNotFinishGrowUserByHours_result result = new getAllNotFinishGrowUserByHours_result();
      receiveBase(result, "getAllNotFinishGrowUserByHours");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllNotFinishGrowUserByHours failed: unknown result");
    }

    public ResultList listAllNotUseGiveFlower(long uid) throws TException
    {
      send_listAllNotUseGiveFlower(uid);
      return recv_listAllNotUseGiveFlower();
    }

    public void send_listAllNotUseGiveFlower(long uid) throws TException
    {
      listAllNotUseGiveFlower_args args = new listAllNotUseGiveFlower_args();
      args.setUid(uid);
      sendBase("listAllNotUseGiveFlower", args);
    }

    public ResultList recv_listAllNotUseGiveFlower() throws TException
    {
      listAllNotUseGiveFlower_result result = new listAllNotUseGiveFlower_result();
      receiveBase(result, "listAllNotUseGiveFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listAllNotUseGiveFlower failed: unknown result");
    }

    public Result growGiveFlower(String transNo, long uid, List<Long> giveUids) throws TException
    {
      send_growGiveFlower(transNo, uid, giveUids);
      return recv_growGiveFlower();
    }

    public void send_growGiveFlower(String transNo, long uid, List<Long> giveUids) throws TException
    {
      growGiveFlower_args args = new growGiveFlower_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setGiveUids(giveUids);
      sendBase("growGiveFlower", args);
    }

    public Result recv_growGiveFlower() throws TException
    {
      growGiveFlower_result result = new growGiveFlower_result();
      receiveBase(result, "growGiveFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "growGiveFlower failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void activateManor(String transNo, long partenUid, long uid, int type, int number, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      activateManor_call method_call = new activateManor_call(transNo, partenUid, uid, type, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateManor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long partenUid;
      private long uid;
      private int type;
      private int number;
      public activateManor_call(String transNo, long partenUid, long uid, int type, int number, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.partenUid = partenUid;
        this.uid = uid;
        this.type = type;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateManor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateManor_args args = new activateManor_args();
        args.setTransNo(transNo);
        args.setPartenUid(partenUid);
        args.setUid(uid);
        args.setType(type);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateManor();
      }
    }

    public void growFlower(String transNo, long uid, int number, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      growFlower_call method_call = new growFlower_call(transNo, uid, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class growFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int number;
      public growFlower_call(String transNo, long uid, int number, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("growFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        growFlower_args args = new growFlower_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_growFlower();
      }
    }

    public void receiveUserGiveRedpackage(String transNo, long uid, List<String> transNoList, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      receiveUserGiveRedpackage_call method_call = new receiveUserGiveRedpackage_call(transNo, uid, transNoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveUserGiveRedpackage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private List<String> transNoList;
      public receiveUserGiveRedpackage_call(String transNo, long uid, List<String> transNoList, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.transNoList = transNoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveUserGiveRedpackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveUserGiveRedpackage_args args = new receiveUserGiveRedpackage_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setTransNoList(transNoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveUserGiveRedpackage();
      }
    }

    public void receiveEvaryDayNectary(String transNo, long uid, double number, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      receiveEvaryDayNectary_call method_call = new receiveEvaryDayNectary_call(transNo, uid, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveEvaryDayNectary_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private double number;
      public receiveEvaryDayNectary_call(String transNo, long uid, double number, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveEvaryDayNectary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveEvaryDayNectary_args args = new receiveEvaryDayNectary_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveEvaryDayNectary();
      }
    }

    public void receiveUserGiveNectary(String transNo, long uid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      receiveUserGiveNectary_call method_call = new receiveUserGiveNectary_call(transNo, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveUserGiveNectary_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      public receiveUserGiveNectary_call(String transNo, long uid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveUserGiveNectary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveUserGiveNectary_args args = new receiveUserGiveNectary_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveUserGiveNectary();
      }
    }

    public void giveUserNectary(String transNo, long uid, long giveUid, int number, int coverValue, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      giveUserNectary_call method_call = new giveUserNectary_call(transNo, uid, giveUid, number, coverValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class giveUserNectary_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private long giveUid;
      private int number;
      private int coverValue;
      public giveUserNectary_call(String transNo, long uid, long giveUid, int number, int coverValue, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.giveUid = giveUid;
        this.number = number;
        this.coverValue = coverValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("giveUserNectary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        giveUserNectary_args args = new giveUserNectary_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setGiveUid(giveUid);
        args.setNumber(number);
        args.setCoverValue(coverValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_giveUserNectary();
      }
    }

    public void statisticsUserProps(long uid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      statisticsUserProps_call method_call = new statisticsUserProps_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statisticsUserProps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public statisticsUserProps_call(long uid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statisticsUserProps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statisticsUserProps_args args = new statisticsUserProps_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statisticsUserProps();
      }
    }

    public void sendPropsRedpackage(String transNo, long uid, List<Long> giveUids, int number, double amount, int type, String phone, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendPropsRedpackage_call method_call = new sendPropsRedpackage_call(transNo, uid, giveUids, number, amount, type, phone, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendPropsRedpackage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private List<Long> giveUids;
      private int number;
      private double amount;
      private int type;
      private String phone;
      public sendPropsRedpackage_call(String transNo, long uid, List<Long> giveUids, int number, double amount, int type, String phone, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.giveUids = giveUids;
        this.number = number;
        this.amount = amount;
        this.type = type;
        this.phone = phone;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendPropsRedpackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendPropsRedpackage_args args = new sendPropsRedpackage_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setGiveUids(giveUids);
        args.setNumber(number);
        args.setAmount(amount);
        args.setType(type);
        args.setPhone(phone);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendPropsRedpackage();
      }
    }

    public void listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      listUserPropsRedpackageHistoryByUid_call method_call = new listUserPropsRedpackageHistoryByUid_call(uid, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserPropsRedpackageHistoryByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int offset;
      private int limit;
      public listUserPropsRedpackageHistoryByUid_call(long uid, int offset, int limit, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserPropsRedpackageHistoryByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserPropsRedpackageHistoryByUid_args args = new listUserPropsRedpackageHistoryByUid_args();
        args.setUid(uid);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserPropsRedpackageHistoryByUid();
      }
    }

    public void listPropsRedpackageRecordByRedpackageId(long redpackageId, long uid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      listPropsRedpackageRecordByRedpackageId_call method_call = new listPropsRedpackageRecordByRedpackageId_call(redpackageId, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPropsRedpackageRecordByRedpackageId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long redpackageId;
      private long uid;
      public listPropsRedpackageRecordByRedpackageId_call(long redpackageId, long uid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.redpackageId = redpackageId;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPropsRedpackageRecordByRedpackageId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPropsRedpackageRecordByRedpackageId_args args = new listPropsRedpackageRecordByRedpackageId_args();
        args.setRedpackageId(redpackageId);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPropsRedpackageRecordByRedpackageId();
      }
    }

    public void getPropsRedpackage(long redpackageId, long uid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPropsRedpackage_call method_call = new getPropsRedpackage_call(redpackageId, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPropsRedpackage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long redpackageId;
      private long uid;
      public getPropsRedpackage_call(long redpackageId, long uid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.redpackageId = redpackageId;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPropsRedpackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPropsRedpackage_args args = new getPropsRedpackage_args();
        args.setRedpackageId(redpackageId);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPropsRedpackage();
      }
    }

    public void statisticsUserRepertory(long uid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      statisticsUserRepertory_call method_call = new statisticsUserRepertory_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statisticsUserRepertory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public statisticsUserRepertory_call(long uid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statisticsUserRepertory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statisticsUserRepertory_args args = new statisticsUserRepertory_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statisticsUserRepertory();
      }
    }

    public void exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      exchangeMoneyRedpackage_call method_call = new exchangeMoneyRedpackage_call(transNo, uid, number, configNectarNumber, moneyRedpackage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exchangeMoneyRedpackage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int number;
      private int configNectarNumber;
      private double moneyRedpackage;
      public exchangeMoneyRedpackage_call(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.number = number;
        this.configNectarNumber = configNectarNumber;
        this.moneyRedpackage = moneyRedpackage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeMoneyRedpackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exchangeMoneyRedpackage_args args = new exchangeMoneyRedpackage_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setNumber(number);
        args.setConfigNectarNumber(configNectarNumber);
        args.setMoneyRedpackage(moneyRedpackage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exchangeMoneyRedpackage();
      }
    }

    public void addUserEnergy(String transNo, long uid, double number, int type, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      addUserEnergy_call method_call = new addUserEnergy_call(transNo, uid, number, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addUserEnergy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private double number;
      private int type;
      public addUserEnergy_call(String transNo, long uid, double number, int type, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.number = number;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUserEnergy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addUserEnergy_args args = new addUserEnergy_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setNumber(number);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addUserEnergy();
      }
    }

    public void buyFlower(String transNo, long uid, int number, int month, double amount, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      buyFlower_call method_call = new buyFlower_call(transNo, uid, number, month, amount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buyFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int number;
      private int month;
      private double amount;
      public buyFlower_call(String transNo, long uid, int number, int month, double amount, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.number = number;
        this.month = month;
        this.amount = amount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buyFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        buyFlower_args args = new buyFlower_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setNumber(number);
        args.setMonth(month);
        args.setAmount(amount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buyFlower();
      }
    }

    public void nectaryReport(long uid, int offset, int limit, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      nectaryReport_call method_call = new nectaryReport_call(uid, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class nectaryReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int offset;
      private int limit;
      public nectaryReport_call(long uid, int offset, int limit, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("nectaryReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        nectaryReport_args args = new nectaryReport_args();
        args.setUid(uid);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_nectaryReport();
      }
    }

    public void timerGrowFlower(String transNo, long uid, int hours, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      timerGrowFlower_call method_call = new timerGrowFlower_call(transNo, uid, hours, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class timerGrowFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int hours;
      public timerGrowFlower_call(String transNo, long uid, int hours, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.hours = hours;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("timerGrowFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        timerGrowFlower_args args = new timerGrowFlower_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setHours(hours);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_timerGrowFlower();
      }
    }

    public void getAllNotFinishGrowUserByHours(int hours, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllNotFinishGrowUserByHours_call method_call = new getAllNotFinishGrowUserByHours_call(hours, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllNotFinishGrowUserByHours_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hours;
      public getAllNotFinishGrowUserByHours_call(int hours, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hours = hours;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllNotFinishGrowUserByHours", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllNotFinishGrowUserByHours_args args = new getAllNotFinishGrowUserByHours_args();
        args.setHours(hours);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllNotFinishGrowUserByHours();
      }
    }

    public void listAllNotUseGiveFlower(long uid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      listAllNotUseGiveFlower_call method_call = new listAllNotUseGiveFlower_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listAllNotUseGiveFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public listAllNotUseGiveFlower_call(long uid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAllNotUseGiveFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listAllNotUseGiveFlower_args args = new listAllNotUseGiveFlower_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listAllNotUseGiveFlower();
      }
    }

    public void growGiveFlower(String transNo, long uid, List<Long> giveUids, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      growGiveFlower_call method_call = new growGiveFlower_call(transNo, uid, giveUids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class growGiveFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private List<Long> giveUids;
      public growGiveFlower_call(String transNo, long uid, List<Long> giveUids, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.giveUids = giveUids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("growGiveFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        growGiveFlower_args args = new growGiveFlower_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setGiveUids(giveUids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_growGiveFlower();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("activateManor", new activateManor());
      processMap.put("growFlower", new growFlower());
      processMap.put("receiveUserGiveRedpackage", new receiveUserGiveRedpackage());
      processMap.put("receiveEvaryDayNectary", new receiveEvaryDayNectary());
      processMap.put("receiveUserGiveNectary", new receiveUserGiveNectary());
      processMap.put("giveUserNectary", new giveUserNectary());
      processMap.put("statisticsUserProps", new statisticsUserProps());
      processMap.put("sendPropsRedpackage", new sendPropsRedpackage());
      processMap.put("listUserPropsRedpackageHistoryByUid", new listUserPropsRedpackageHistoryByUid());
      processMap.put("listPropsRedpackageRecordByRedpackageId", new listPropsRedpackageRecordByRedpackageId());
      processMap.put("getPropsRedpackage", new getPropsRedpackage());
      processMap.put("statisticsUserRepertory", new statisticsUserRepertory());
      processMap.put("exchangeMoneyRedpackage", new exchangeMoneyRedpackage());
      processMap.put("addUserEnergy", new addUserEnergy());
      processMap.put("buyFlower", new buyFlower());
      processMap.put("nectaryReport", new nectaryReport());
      processMap.put("timerGrowFlower", new timerGrowFlower());
      processMap.put("getAllNotFinishGrowUserByHours", new getAllNotFinishGrowUserByHours());
      processMap.put("listAllNotUseGiveFlower", new listAllNotUseGiveFlower());
      processMap.put("growGiveFlower", new growGiveFlower());
      return processMap;
    }

    public static class activateManor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateManor_args> {
      public activateManor() {
        super("activateManor");
      }

      public activateManor_args getEmptyArgsInstance() {
        return new activateManor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateManor_result getResult(I iface, activateManor_args args) throws TException {
        activateManor_result result = new activateManor_result();
        result.success = iface.activateManor(args.transNo, args.partenUid, args.uid, args.type, args.number);
        return result;
      }
    }

    public static class growFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, growFlower_args> {
      public growFlower() {
        super("growFlower");
      }

      public growFlower_args getEmptyArgsInstance() {
        return new growFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public growFlower_result getResult(I iface, growFlower_args args) throws TException {
        growFlower_result result = new growFlower_result();
        result.success = iface.growFlower(args.transNo, args.uid, args.number);
        return result;
      }
    }

    public static class receiveUserGiveRedpackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveUserGiveRedpackage_args> {
      public receiveUserGiveRedpackage() {
        super("receiveUserGiveRedpackage");
      }

      public receiveUserGiveRedpackage_args getEmptyArgsInstance() {
        return new receiveUserGiveRedpackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveUserGiveRedpackage_result getResult(I iface, receiveUserGiveRedpackage_args args) throws TException {
        receiveUserGiveRedpackage_result result = new receiveUserGiveRedpackage_result();
        result.success = iface.receiveUserGiveRedpackage(args.transNo, args.uid, args.transNoList);
        return result;
      }
    }

    public static class receiveEvaryDayNectary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveEvaryDayNectary_args> {
      public receiveEvaryDayNectary() {
        super("receiveEvaryDayNectary");
      }

      public receiveEvaryDayNectary_args getEmptyArgsInstance() {
        return new receiveEvaryDayNectary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveEvaryDayNectary_result getResult(I iface, receiveEvaryDayNectary_args args) throws TException {
        receiveEvaryDayNectary_result result = new receiveEvaryDayNectary_result();
        result.success = iface.receiveEvaryDayNectary(args.transNo, args.uid, args.number);
        return result;
      }
    }

    public static class receiveUserGiveNectary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveUserGiveNectary_args> {
      public receiveUserGiveNectary() {
        super("receiveUserGiveNectary");
      }

      public receiveUserGiveNectary_args getEmptyArgsInstance() {
        return new receiveUserGiveNectary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveUserGiveNectary_result getResult(I iface, receiveUserGiveNectary_args args) throws TException {
        receiveUserGiveNectary_result result = new receiveUserGiveNectary_result();
        result.success = iface.receiveUserGiveNectary(args.transNo, args.uid);
        return result;
      }
    }

    public static class giveUserNectary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, giveUserNectary_args> {
      public giveUserNectary() {
        super("giveUserNectary");
      }

      public giveUserNectary_args getEmptyArgsInstance() {
        return new giveUserNectary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public giveUserNectary_result getResult(I iface, giveUserNectary_args args) throws TException {
        giveUserNectary_result result = new giveUserNectary_result();
        result.success = iface.giveUserNectary(args.transNo, args.uid, args.giveUid, args.number, args.coverValue);
        return result;
      }
    }

    public static class statisticsUserProps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statisticsUserProps_args> {
      public statisticsUserProps() {
        super("statisticsUserProps");
      }

      public statisticsUserProps_args getEmptyArgsInstance() {
        return new statisticsUserProps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statisticsUserProps_result getResult(I iface, statisticsUserProps_args args) throws TException {
        statisticsUserProps_result result = new statisticsUserProps_result();
        result.success = iface.statisticsUserProps(args.uid);
        return result;
      }
    }

    public static class sendPropsRedpackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendPropsRedpackage_args> {
      public sendPropsRedpackage() {
        super("sendPropsRedpackage");
      }

      public sendPropsRedpackage_args getEmptyArgsInstance() {
        return new sendPropsRedpackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendPropsRedpackage_result getResult(I iface, sendPropsRedpackage_args args) throws TException {
        sendPropsRedpackage_result result = new sendPropsRedpackage_result();
        result.success = iface.sendPropsRedpackage(args.transNo, args.uid, args.giveUids, args.number, args.amount, args.type, args.phone);
        return result;
      }
    }

    public static class listUserPropsRedpackageHistoryByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserPropsRedpackageHistoryByUid_args> {
      public listUserPropsRedpackageHistoryByUid() {
        super("listUserPropsRedpackageHistoryByUid");
      }

      public listUserPropsRedpackageHistoryByUid_args getEmptyArgsInstance() {
        return new listUserPropsRedpackageHistoryByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserPropsRedpackageHistoryByUid_result getResult(I iface, listUserPropsRedpackageHistoryByUid_args args) throws TException {
        listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
        result.success = iface.listUserPropsRedpackageHistoryByUid(args.uid, args.offset, args.limit);
        return result;
      }
    }

    public static class listPropsRedpackageRecordByRedpackageId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPropsRedpackageRecordByRedpackageId_args> {
      public listPropsRedpackageRecordByRedpackageId() {
        super("listPropsRedpackageRecordByRedpackageId");
      }

      public listPropsRedpackageRecordByRedpackageId_args getEmptyArgsInstance() {
        return new listPropsRedpackageRecordByRedpackageId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPropsRedpackageRecordByRedpackageId_result getResult(I iface, listPropsRedpackageRecordByRedpackageId_args args) throws TException {
        listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
        result.success = iface.listPropsRedpackageRecordByRedpackageId(args.redpackageId, args.uid);
        return result;
      }
    }

    public static class getPropsRedpackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPropsRedpackage_args> {
      public getPropsRedpackage() {
        super("getPropsRedpackage");
      }

      public getPropsRedpackage_args getEmptyArgsInstance() {
        return new getPropsRedpackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPropsRedpackage_result getResult(I iface, getPropsRedpackage_args args) throws TException {
        getPropsRedpackage_result result = new getPropsRedpackage_result();
        result.success = iface.getPropsRedpackage(args.redpackageId, args.uid);
        return result;
      }
    }

    public static class statisticsUserRepertory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statisticsUserRepertory_args> {
      public statisticsUserRepertory() {
        super("statisticsUserRepertory");
      }

      public statisticsUserRepertory_args getEmptyArgsInstance() {
        return new statisticsUserRepertory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statisticsUserRepertory_result getResult(I iface, statisticsUserRepertory_args args) throws TException {
        statisticsUserRepertory_result result = new statisticsUserRepertory_result();
        result.success = iface.statisticsUserRepertory(args.uid);
        return result;
      }
    }

    public static class exchangeMoneyRedpackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exchangeMoneyRedpackage_args> {
      public exchangeMoneyRedpackage() {
        super("exchangeMoneyRedpackage");
      }

      public exchangeMoneyRedpackage_args getEmptyArgsInstance() {
        return new exchangeMoneyRedpackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exchangeMoneyRedpackage_result getResult(I iface, exchangeMoneyRedpackage_args args) throws TException {
        exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
        result.success = iface.exchangeMoneyRedpackage(args.transNo, args.uid, args.number, args.configNectarNumber, args.moneyRedpackage);
        return result;
      }
    }

    public static class addUserEnergy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUserEnergy_args> {
      public addUserEnergy() {
        super("addUserEnergy");
      }

      public addUserEnergy_args getEmptyArgsInstance() {
        return new addUserEnergy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addUserEnergy_result getResult(I iface, addUserEnergy_args args) throws TException {
        addUserEnergy_result result = new addUserEnergy_result();
        result.success = iface.addUserEnergy(args.transNo, args.uid, args.number, args.type);
        return result;
      }
    }

    public static class buyFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buyFlower_args> {
      public buyFlower() {
        super("buyFlower");
      }

      public buyFlower_args getEmptyArgsInstance() {
        return new buyFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public buyFlower_result getResult(I iface, buyFlower_args args) throws TException {
        buyFlower_result result = new buyFlower_result();
        result.success = iface.buyFlower(args.transNo, args.uid, args.number, args.month, args.amount);
        return result;
      }
    }

    public static class nectaryReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, nectaryReport_args> {
      public nectaryReport() {
        super("nectaryReport");
      }

      public nectaryReport_args getEmptyArgsInstance() {
        return new nectaryReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public nectaryReport_result getResult(I iface, nectaryReport_args args) throws TException {
        nectaryReport_result result = new nectaryReport_result();
        result.success = iface.nectaryReport(args.uid, args.offset, args.limit);
        return result;
      }
    }

    public static class timerGrowFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, timerGrowFlower_args> {
      public timerGrowFlower() {
        super("timerGrowFlower");
      }

      public timerGrowFlower_args getEmptyArgsInstance() {
        return new timerGrowFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public timerGrowFlower_result getResult(I iface, timerGrowFlower_args args) throws TException {
        timerGrowFlower_result result = new timerGrowFlower_result();
        result.success = iface.timerGrowFlower(args.transNo, args.uid, args.hours);
        return result;
      }
    }

    public static class getAllNotFinishGrowUserByHours<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllNotFinishGrowUserByHours_args> {
      public getAllNotFinishGrowUserByHours() {
        super("getAllNotFinishGrowUserByHours");
      }

      public getAllNotFinishGrowUserByHours_args getEmptyArgsInstance() {
        return new getAllNotFinishGrowUserByHours_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllNotFinishGrowUserByHours_result getResult(I iface, getAllNotFinishGrowUserByHours_args args) throws TException {
        getAllNotFinishGrowUserByHours_result result = new getAllNotFinishGrowUserByHours_result();
        result.success = iface.getAllNotFinishGrowUserByHours(args.hours);
        return result;
      }
    }

    public static class listAllNotUseGiveFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listAllNotUseGiveFlower_args> {
      public listAllNotUseGiveFlower() {
        super("listAllNotUseGiveFlower");
      }

      public listAllNotUseGiveFlower_args getEmptyArgsInstance() {
        return new listAllNotUseGiveFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listAllNotUseGiveFlower_result getResult(I iface, listAllNotUseGiveFlower_args args) throws TException {
        listAllNotUseGiveFlower_result result = new listAllNotUseGiveFlower_result();
        result.success = iface.listAllNotUseGiveFlower(args.uid);
        return result;
      }
    }

    public static class growGiveFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, growGiveFlower_args> {
      public growGiveFlower() {
        super("growGiveFlower");
      }

      public growGiveFlower_args getEmptyArgsInstance() {
        return new growGiveFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public growGiveFlower_result getResult(I iface, growGiveFlower_args args) throws TException {
        growGiveFlower_result result = new growGiveFlower_result();
        result.success = iface.growGiveFlower(args.transNo, args.uid, args.giveUids);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("activateManor", new activateManor());
      processMap.put("growFlower", new growFlower());
      processMap.put("receiveUserGiveRedpackage", new receiveUserGiveRedpackage());
      processMap.put("receiveEvaryDayNectary", new receiveEvaryDayNectary());
      processMap.put("receiveUserGiveNectary", new receiveUserGiveNectary());
      processMap.put("giveUserNectary", new giveUserNectary());
      processMap.put("statisticsUserProps", new statisticsUserProps());
      processMap.put("sendPropsRedpackage", new sendPropsRedpackage());
      processMap.put("listUserPropsRedpackageHistoryByUid", new listUserPropsRedpackageHistoryByUid());
      processMap.put("listPropsRedpackageRecordByRedpackageId", new listPropsRedpackageRecordByRedpackageId());
      processMap.put("getPropsRedpackage", new getPropsRedpackage());
      processMap.put("statisticsUserRepertory", new statisticsUserRepertory());
      processMap.put("exchangeMoneyRedpackage", new exchangeMoneyRedpackage());
      processMap.put("addUserEnergy", new addUserEnergy());
      processMap.put("buyFlower", new buyFlower());
      processMap.put("nectaryReport", new nectaryReport());
      processMap.put("timerGrowFlower", new timerGrowFlower());
      processMap.put("getAllNotFinishGrowUserByHours", new getAllNotFinishGrowUserByHours());
      processMap.put("listAllNotUseGiveFlower", new listAllNotUseGiveFlower());
      processMap.put("growGiveFlower", new growGiveFlower());
      return processMap;
    }

    public static class activateManor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateManor_args, Result> {
      public activateManor() {
        super("activateManor");
      }

      public activateManor_args getEmptyArgsInstance() {
        return new activateManor_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            activateManor_result result = new activateManor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateManor_result result = new activateManor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateManor_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.activateManor(args.transNo, args.partenUid, args.uid, args.type, args.number,resultHandler);
      }
    }

    public static class growFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, growFlower_args, ResultList> {
      public growFlower() {
        super("growFlower");
      }

      public growFlower_args getEmptyArgsInstance() {
        return new growFlower_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            growFlower_result result = new growFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            growFlower_result result = new growFlower_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, growFlower_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.growFlower(args.transNo, args.uid, args.number,resultHandler);
      }
    }

    public static class receiveUserGiveRedpackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveUserGiveRedpackage_args, ResultList> {
      public receiveUserGiveRedpackage() {
        super("receiveUserGiveRedpackage");
      }

      public receiveUserGiveRedpackage_args getEmptyArgsInstance() {
        return new receiveUserGiveRedpackage_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            receiveUserGiveRedpackage_result result = new receiveUserGiveRedpackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveUserGiveRedpackage_result result = new receiveUserGiveRedpackage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveUserGiveRedpackage_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.receiveUserGiveRedpackage(args.transNo, args.uid, args.transNoList,resultHandler);
      }
    }

    public static class receiveEvaryDayNectary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveEvaryDayNectary_args, Result> {
      public receiveEvaryDayNectary() {
        super("receiveEvaryDayNectary");
      }

      public receiveEvaryDayNectary_args getEmptyArgsInstance() {
        return new receiveEvaryDayNectary_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            receiveEvaryDayNectary_result result = new receiveEvaryDayNectary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveEvaryDayNectary_result result = new receiveEvaryDayNectary_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveEvaryDayNectary_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.receiveEvaryDayNectary(args.transNo, args.uid, args.number,resultHandler);
      }
    }

    public static class receiveUserGiveNectary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveUserGiveNectary_args, ResultList> {
      public receiveUserGiveNectary() {
        super("receiveUserGiveNectary");
      }

      public receiveUserGiveNectary_args getEmptyArgsInstance() {
        return new receiveUserGiveNectary_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            receiveUserGiveNectary_result result = new receiveUserGiveNectary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveUserGiveNectary_result result = new receiveUserGiveNectary_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveUserGiveNectary_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.receiveUserGiveNectary(args.transNo, args.uid,resultHandler);
      }
    }

    public static class giveUserNectary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, giveUserNectary_args, Result> {
      public giveUserNectary() {
        super("giveUserNectary");
      }

      public giveUserNectary_args getEmptyArgsInstance() {
        return new giveUserNectary_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            giveUserNectary_result result = new giveUserNectary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            giveUserNectary_result result = new giveUserNectary_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, giveUserNectary_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.giveUserNectary(args.transNo, args.uid, args.giveUid, args.number, args.coverValue,resultHandler);
      }
    }

    public static class statisticsUserProps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statisticsUserProps_args, ResultList> {
      public statisticsUserProps() {
        super("statisticsUserProps");
      }

      public statisticsUserProps_args getEmptyArgsInstance() {
        return new statisticsUserProps_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            statisticsUserProps_result result = new statisticsUserProps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statisticsUserProps_result result = new statisticsUserProps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statisticsUserProps_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.statisticsUserProps(args.uid,resultHandler);
      }
    }

    public static class sendPropsRedpackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendPropsRedpackage_args, Result> {
      public sendPropsRedpackage() {
        super("sendPropsRedpackage");
      }

      public sendPropsRedpackage_args getEmptyArgsInstance() {
        return new sendPropsRedpackage_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            sendPropsRedpackage_result result = new sendPropsRedpackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendPropsRedpackage_result result = new sendPropsRedpackage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendPropsRedpackage_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.sendPropsRedpackage(args.transNo, args.uid, args.giveUids, args.number, args.amount, args.type, args.phone,resultHandler);
      }
    }

    public static class listUserPropsRedpackageHistoryByUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserPropsRedpackageHistoryByUid_args, ResultList> {
      public listUserPropsRedpackageHistoryByUid() {
        super("listUserPropsRedpackageHistoryByUid");
      }

      public listUserPropsRedpackageHistoryByUid_args getEmptyArgsInstance() {
        return new listUserPropsRedpackageHistoryByUid_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserPropsRedpackageHistoryByUid_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.listUserPropsRedpackageHistoryByUid(args.uid, args.offset, args.limit,resultHandler);
      }
    }

    public static class listPropsRedpackageRecordByRedpackageId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPropsRedpackageRecordByRedpackageId_args, ResultList> {
      public listPropsRedpackageRecordByRedpackageId() {
        super("listPropsRedpackageRecordByRedpackageId");
      }

      public listPropsRedpackageRecordByRedpackageId_args getEmptyArgsInstance() {
        return new listPropsRedpackageRecordByRedpackageId_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPropsRedpackageRecordByRedpackageId_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.listPropsRedpackageRecordByRedpackageId(args.redpackageId, args.uid,resultHandler);
      }
    }

    public static class getPropsRedpackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPropsRedpackage_args, Result> {
      public getPropsRedpackage() {
        super("getPropsRedpackage");
      }

      public getPropsRedpackage_args getEmptyArgsInstance() {
        return new getPropsRedpackage_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            getPropsRedpackage_result result = new getPropsRedpackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPropsRedpackage_result result = new getPropsRedpackage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPropsRedpackage_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.getPropsRedpackage(args.redpackageId, args.uid,resultHandler);
      }
    }

    public static class statisticsUserRepertory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statisticsUserRepertory_args, Result> {
      public statisticsUserRepertory() {
        super("statisticsUserRepertory");
      }

      public statisticsUserRepertory_args getEmptyArgsInstance() {
        return new statisticsUserRepertory_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            statisticsUserRepertory_result result = new statisticsUserRepertory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statisticsUserRepertory_result result = new statisticsUserRepertory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statisticsUserRepertory_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.statisticsUserRepertory(args.uid,resultHandler);
      }
    }

    public static class exchangeMoneyRedpackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exchangeMoneyRedpackage_args, Result> {
      public exchangeMoneyRedpackage() {
        super("exchangeMoneyRedpackage");
      }

      public exchangeMoneyRedpackage_args getEmptyArgsInstance() {
        return new exchangeMoneyRedpackage_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exchangeMoneyRedpackage_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exchangeMoneyRedpackage(args.transNo, args.uid, args.number, args.configNectarNumber, args.moneyRedpackage,resultHandler);
      }
    }

    public static class addUserEnergy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUserEnergy_args, Result> {
      public addUserEnergy() {
        super("addUserEnergy");
      }

      public addUserEnergy_args getEmptyArgsInstance() {
        return new addUserEnergy_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            addUserEnergy_result result = new addUserEnergy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addUserEnergy_result result = new addUserEnergy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addUserEnergy_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.addUserEnergy(args.transNo, args.uid, args.number, args.type,resultHandler);
      }
    }

    public static class buyFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, buyFlower_args, Result> {
      public buyFlower() {
        super("buyFlower");
      }

      public buyFlower_args getEmptyArgsInstance() {
        return new buyFlower_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            buyFlower_result result = new buyFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            buyFlower_result result = new buyFlower_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, buyFlower_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.buyFlower(args.transNo, args.uid, args.number, args.month, args.amount,resultHandler);
      }
    }

    public static class nectaryReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, nectaryReport_args, ResultList> {
      public nectaryReport() {
        super("nectaryReport");
      }

      public nectaryReport_args getEmptyArgsInstance() {
        return new nectaryReport_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            nectaryReport_result result = new nectaryReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            nectaryReport_result result = new nectaryReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, nectaryReport_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.nectaryReport(args.uid, args.offset, args.limit,resultHandler);
      }
    }

    public static class timerGrowFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, timerGrowFlower_args, ResultList> {
      public timerGrowFlower() {
        super("timerGrowFlower");
      }

      public timerGrowFlower_args getEmptyArgsInstance() {
        return new timerGrowFlower_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            timerGrowFlower_result result = new timerGrowFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            timerGrowFlower_result result = new timerGrowFlower_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, timerGrowFlower_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.timerGrowFlower(args.transNo, args.uid, args.hours,resultHandler);
      }
    }

    public static class getAllNotFinishGrowUserByHours<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllNotFinishGrowUserByHours_args, ResultList> {
      public getAllNotFinishGrowUserByHours() {
        super("getAllNotFinishGrowUserByHours");
      }

      public getAllNotFinishGrowUserByHours_args getEmptyArgsInstance() {
        return new getAllNotFinishGrowUserByHours_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            getAllNotFinishGrowUserByHours_result result = new getAllNotFinishGrowUserByHours_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllNotFinishGrowUserByHours_result result = new getAllNotFinishGrowUserByHours_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllNotFinishGrowUserByHours_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.getAllNotFinishGrowUserByHours(args.hours,resultHandler);
      }
    }

    public static class listAllNotUseGiveFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listAllNotUseGiveFlower_args, ResultList> {
      public listAllNotUseGiveFlower() {
        super("listAllNotUseGiveFlower");
      }

      public listAllNotUseGiveFlower_args getEmptyArgsInstance() {
        return new listAllNotUseGiveFlower_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            listAllNotUseGiveFlower_result result = new listAllNotUseGiveFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listAllNotUseGiveFlower_result result = new listAllNotUseGiveFlower_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listAllNotUseGiveFlower_args args, AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.listAllNotUseGiveFlower(args.uid,resultHandler);
      }
    }

    public static class growGiveFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, growGiveFlower_args, Result> {
      public growGiveFlower() {
        super("growGiveFlower");
      }

      public growGiveFlower_args getEmptyArgsInstance() {
        return new growGiveFlower_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            growGiveFlower_result result = new growGiveFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            growGiveFlower_result result = new growGiveFlower_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, growGiveFlower_args args, AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.growGiveFlower(args.transNo, args.uid, args.giveUids,resultHandler);
      }
    }

  }

  public static class activateManor_args implements org.apache.thrift.TBase<activateManor_args, activateManor_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateManor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateManor_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField PARTEN_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("partenUid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateManor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateManor_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long partenUid; // required
    public long uid; // required
    public int type; // required
    public int number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      PARTEN_UID((short)-2, "partenUid"),
      UID((short)-3, "uid"),
      TYPE((short)-4, "type"),
      NUMBER((short)-5, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // PARTEN_UID
            return PARTEN_UID;
          case -3: // UID
            return UID;
          case -4: // TYPE
            return TYPE;
          case -5: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARTENUID_ISSET_ID = 0;
    private static final int __UID_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __NUMBER_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTEN_UID, new org.apache.thrift.meta_data.FieldMetaData("partenUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateManor_args.class, metaDataMap);
    }

    public activateManor_args() {
    }

    public activateManor_args(
      String transNo,
      long partenUid,
      long uid,
      int type,
      int number)
    {
      this();
      this.transNo = transNo;
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateManor_args(activateManor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.partenUid = other.partenUid;
      this.uid = other.uid;
      this.type = other.type;
      this.number = other.number;
    }

    public activateManor_args deepCopy() {
      return new activateManor_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setPartenUidIsSet(false);
      this.partenUid = 0;
      setUidIsSet(false);
      this.uid = 0;
      setTypeIsSet(false);
      this.type = 0;
      setNumberIsSet(false);
      this.number = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public activateManor_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getPartenUid() {
      return this.partenUid;
    }

    public activateManor_args setPartenUid(long partenUid) {
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      return this;
    }

    public void unsetPartenUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    /** Returns true if field partenUid is set (has been assigned a value) and false otherwise */
    public boolean isSetPartenUid() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    public void setPartenUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTENUID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public activateManor_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public activateManor_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public activateManor_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case PARTEN_UID:
        if (value == null) {
          unsetPartenUid();
        } else {
          setPartenUid((Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case PARTEN_UID:
        return Long.valueOf(getPartenUid());

      case UID:
        return Long.valueOf(getUid());

      case TYPE:
        return Integer.valueOf(getType());

      case NUMBER:
        return Integer.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case PARTEN_UID:
        return isSetPartenUid();
      case UID:
        return isSetUid();
      case TYPE:
        return isSetType();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateManor_args)
        return this.equals((activateManor_args)that);
      return false;
    }

    public boolean equals(activateManor_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_partenUid = true;
      boolean that_present_partenUid = true;
      if (this_present_partenUid || that_present_partenUid) {
        if (!(this_present_partenUid && that_present_partenUid))
          return false;
        if (this.partenUid != that.partenUid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(activateManor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartenUid()).compareTo(other.isSetPartenUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartenUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partenUid, other.partenUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateManor_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partenUid:");
      sb.append(this.partenUid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateManor_argsStandardSchemeFactory implements SchemeFactory {
      public activateManor_argsStandardScheme getScheme() {
        return new activateManor_argsStandardScheme();
      }
    }

    private static class activateManor_argsStandardScheme extends StandardScheme<activateManor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateManor_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // PARTEN_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.partenUid = iprot.readI64();
                struct.setPartenUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateManor_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTEN_UID_FIELD_DESC);
        oprot.writeI64(struct.partenUid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateManor_argsTupleSchemeFactory implements SchemeFactory {
      public activateManor_argsTupleScheme getScheme() {
        return new activateManor_argsTupleScheme();
      }
    }

    private static class activateManor_argsTupleScheme extends TupleScheme<activateManor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateManor_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetPartenUid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        if (struct.isSetNumber()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetPartenUid()) {
          oprot.writeI64(struct.partenUid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateManor_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partenUid = iprot.readI64();
          struct.setPartenUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class activateManor_result implements org.apache.thrift.TBase<activateManor_result, activateManor_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateManor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateManor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateManor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateManor_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateManor_result.class, metaDataMap);
    }

    public activateManor_result() {
    }

    public activateManor_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateManor_result(activateManor_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public activateManor_result deepCopy() {
      return new activateManor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public activateManor_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateManor_result)
        return this.equals((activateManor_result)that);
      return false;
    }

    public boolean equals(activateManor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(activateManor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateManor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateManor_resultStandardSchemeFactory implements SchemeFactory {
      public activateManor_resultStandardScheme getScheme() {
        return new activateManor_resultStandardScheme();
      }
    }

    private static class activateManor_resultStandardScheme extends StandardScheme<activateManor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateManor_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateManor_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateManor_resultTupleSchemeFactory implements SchemeFactory {
      public activateManor_resultTupleScheme getScheme() {
        return new activateManor_resultTupleScheme();
      }
    }

    private static class activateManor_resultTupleScheme extends TupleScheme<activateManor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateManor_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateManor_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class growFlower_args implements org.apache.thrift.TBase<growFlower_args, growFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<growFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("growFlower_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new growFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new growFlower_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      NUMBER((short)-3, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(growFlower_args.class, metaDataMap);
    }

    public growFlower_args() {
    }

    public growFlower_args(
      String transNo,
      long uid,
      int number)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public growFlower_args(growFlower_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.number = other.number;
    }

    public growFlower_args deepCopy() {
      return new growFlower_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public growFlower_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public growFlower_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public growFlower_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof growFlower_args)
        return this.equals((growFlower_args)that);
      return false;
    }

    public boolean equals(growFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(growFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("growFlower_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class growFlower_argsStandardSchemeFactory implements SchemeFactory {
      public growFlower_argsStandardScheme getScheme() {
        return new growFlower_argsStandardScheme();
      }
    }

    private static class growFlower_argsStandardScheme extends StandardScheme<growFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, growFlower_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, growFlower_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class growFlower_argsTupleSchemeFactory implements SchemeFactory {
      public growFlower_argsTupleScheme getScheme() {
        return new growFlower_argsTupleScheme();
      }
    }

    private static class growFlower_argsTupleScheme extends TupleScheme<growFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, growFlower_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, growFlower_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class growFlower_result implements org.apache.thrift.TBase<growFlower_result, growFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<growFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("growFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new growFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new growFlower_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(growFlower_result.class, metaDataMap);
    }

    public growFlower_result() {
    }

    public growFlower_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public growFlower_result(growFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public growFlower_result deepCopy() {
      return new growFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public growFlower_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof growFlower_result)
        return this.equals((growFlower_result)that);
      return false;
    }

    public boolean equals(growFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(growFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("growFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class growFlower_resultStandardSchemeFactory implements SchemeFactory {
      public growFlower_resultStandardScheme getScheme() {
        return new growFlower_resultStandardScheme();
      }
    }

    private static class growFlower_resultStandardScheme extends StandardScheme<growFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, growFlower_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, growFlower_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class growFlower_resultTupleSchemeFactory implements SchemeFactory {
      public growFlower_resultTupleScheme getScheme() {
        return new growFlower_resultTupleScheme();
      }
    }

    private static class growFlower_resultTupleScheme extends TupleScheme<growFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, growFlower_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, growFlower_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class receiveUserGiveRedpackage_args implements org.apache.thrift.TBase<receiveUserGiveRedpackage_args, receiveUserGiveRedpackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveUserGiveRedpackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveUserGiveRedpackage_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField TRANS_NO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("transNoList", org.apache.thrift.protocol.TType.LIST, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveUserGiveRedpackage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveUserGiveRedpackage_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public List<String> transNoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      TRANS_NO_LIST((short)-3, "transNoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // TRANS_NO_LIST
            return TRANS_NO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TRANS_NO_LIST, new org.apache.thrift.meta_data.FieldMetaData("transNoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveUserGiveRedpackage_args.class, metaDataMap);
    }

    public receiveUserGiveRedpackage_args() {
    }

    public receiveUserGiveRedpackage_args(
      String transNo,
      long uid,
      List<String> transNoList)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.transNoList = transNoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveUserGiveRedpackage_args(receiveUserGiveRedpackage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      if (other.isSetTransNoList()) {
        List<String> __this__transNoList = new ArrayList<String>(other.transNoList);
        this.transNoList = __this__transNoList;
      }
    }

    public receiveUserGiveRedpackage_args deepCopy() {
      return new receiveUserGiveRedpackage_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      this.transNoList = null;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public receiveUserGiveRedpackage_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public receiveUserGiveRedpackage_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getTransNoListSize() {
      return (this.transNoList == null) ? 0 : this.transNoList.size();
    }

    public java.util.Iterator<String> getTransNoListIterator() {
      return (this.transNoList == null) ? null : this.transNoList.iterator();
    }

    public void addToTransNoList(String elem) {
      if (this.transNoList == null) {
        this.transNoList = new ArrayList<String>();
      }
      this.transNoList.add(elem);
    }

    public List<String> getTransNoList() {
      return this.transNoList;
    }

    public receiveUserGiveRedpackage_args setTransNoList(List<String> transNoList) {
      this.transNoList = transNoList;
      return this;
    }

    public void unsetTransNoList() {
      this.transNoList = null;
    }

    /** Returns true if field transNoList is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNoList() {
      return this.transNoList != null;
    }

    public void setTransNoListIsSet(boolean value) {
      if (!value) {
        this.transNoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case TRANS_NO_LIST:
        if (value == null) {
          unsetTransNoList();
        } else {
          setTransNoList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case TRANS_NO_LIST:
        return getTransNoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case TRANS_NO_LIST:
        return isSetTransNoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveUserGiveRedpackage_args)
        return this.equals((receiveUserGiveRedpackage_args)that);
      return false;
    }

    public boolean equals(receiveUserGiveRedpackage_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_transNoList = true && this.isSetTransNoList();
      boolean that_present_transNoList = true && that.isSetTransNoList();
      if (this_present_transNoList || that_present_transNoList) {
        if (!(this_present_transNoList && that_present_transNoList))
          return false;
        if (!this.transNoList.equals(that.transNoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveUserGiveRedpackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransNoList()).compareTo(other.isSetTransNoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNoList, other.transNoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveUserGiveRedpackage_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transNoList:");
      if (this.transNoList == null) {
        sb.append("null");
      } else {
        sb.append(this.transNoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveUserGiveRedpackage_argsStandardSchemeFactory implements SchemeFactory {
      public receiveUserGiveRedpackage_argsStandardScheme getScheme() {
        return new receiveUserGiveRedpackage_argsStandardScheme();
      }
    }

    private static class receiveUserGiveRedpackage_argsStandardScheme extends StandardScheme<receiveUserGiveRedpackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveUserGiveRedpackage_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // TRANS_NO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.transNoList = new ArrayList<String>(_list28.size);
                  for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                  {
                    String _elem30;
                    _elem30 = iprot.readString();
                    struct.transNoList.add(_elem30);
                  }
                  iprot.readListEnd();
                }
                struct.setTransNoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveUserGiveRedpackage_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transNoList != null) {
          oprot.writeFieldBegin(TRANS_NO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.transNoList.size()));
            for (String _iter31 : struct.transNoList)
            {
              oprot.writeString(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveUserGiveRedpackage_argsTupleSchemeFactory implements SchemeFactory {
      public receiveUserGiveRedpackage_argsTupleScheme getScheme() {
        return new receiveUserGiveRedpackage_argsTupleScheme();
      }
    }

    private static class receiveUserGiveRedpackage_argsTupleScheme extends TupleScheme<receiveUserGiveRedpackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveRedpackage_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetTransNoList()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetTransNoList()) {
          {
            oprot.writeI32(struct.transNoList.size());
            for (String _iter32 : struct.transNoList)
            {
              oprot.writeString(_iter32);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveRedpackage_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.transNoList = new ArrayList<String>(_list33.size);
            for (int _i34 = 0; _i34 < _list33.size; ++_i34)
            {
              String _elem35;
              _elem35 = iprot.readString();
              struct.transNoList.add(_elem35);
            }
          }
          struct.setTransNoListIsSet(true);
        }
      }
    }

  }

  public static class receiveUserGiveRedpackage_result implements org.apache.thrift.TBase<receiveUserGiveRedpackage_result, receiveUserGiveRedpackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveUserGiveRedpackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveUserGiveRedpackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveUserGiveRedpackage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveUserGiveRedpackage_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveUserGiveRedpackage_result.class, metaDataMap);
    }

    public receiveUserGiveRedpackage_result() {
    }

    public receiveUserGiveRedpackage_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveUserGiveRedpackage_result(receiveUserGiveRedpackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public receiveUserGiveRedpackage_result deepCopy() {
      return new receiveUserGiveRedpackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public receiveUserGiveRedpackage_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveUserGiveRedpackage_result)
        return this.equals((receiveUserGiveRedpackage_result)that);
      return false;
    }

    public boolean equals(receiveUserGiveRedpackage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveUserGiveRedpackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveUserGiveRedpackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveUserGiveRedpackage_resultStandardSchemeFactory implements SchemeFactory {
      public receiveUserGiveRedpackage_resultStandardScheme getScheme() {
        return new receiveUserGiveRedpackage_resultStandardScheme();
      }
    }

    private static class receiveUserGiveRedpackage_resultStandardScheme extends StandardScheme<receiveUserGiveRedpackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveUserGiveRedpackage_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveUserGiveRedpackage_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveUserGiveRedpackage_resultTupleSchemeFactory implements SchemeFactory {
      public receiveUserGiveRedpackage_resultTupleScheme getScheme() {
        return new receiveUserGiveRedpackage_resultTupleScheme();
      }
    }

    private static class receiveUserGiveRedpackage_resultTupleScheme extends TupleScheme<receiveUserGiveRedpackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveRedpackage_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveRedpackage_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class receiveEvaryDayNectary_args implements org.apache.thrift.TBase<receiveEvaryDayNectary_args, receiveEvaryDayNectary_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveEvaryDayNectary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveEvaryDayNectary_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.DOUBLE, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveEvaryDayNectary_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveEvaryDayNectary_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public double number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      NUMBER((short)-3, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveEvaryDayNectary_args.class, metaDataMap);
    }

    public receiveEvaryDayNectary_args() {
    }

    public receiveEvaryDayNectary_args(
      String transNo,
      long uid,
      double number)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveEvaryDayNectary_args(receiveEvaryDayNectary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.number = other.number;
    }

    public receiveEvaryDayNectary_args deepCopy() {
      return new receiveEvaryDayNectary_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0.0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public receiveEvaryDayNectary_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public receiveEvaryDayNectary_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public double getNumber() {
      return this.number;
    }

    public receiveEvaryDayNectary_args setNumber(double number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Double.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveEvaryDayNectary_args)
        return this.equals((receiveEvaryDayNectary_args)that);
      return false;
    }

    public boolean equals(receiveEvaryDayNectary_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveEvaryDayNectary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveEvaryDayNectary_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveEvaryDayNectary_argsStandardSchemeFactory implements SchemeFactory {
      public receiveEvaryDayNectary_argsStandardScheme getScheme() {
        return new receiveEvaryDayNectary_argsStandardScheme();
      }
    }

    private static class receiveEvaryDayNectary_argsStandardScheme extends StandardScheme<receiveEvaryDayNectary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveEvaryDayNectary_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.number = iprot.readDouble();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveEvaryDayNectary_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeDouble(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveEvaryDayNectary_argsTupleSchemeFactory implements SchemeFactory {
      public receiveEvaryDayNectary_argsTupleScheme getScheme() {
        return new receiveEvaryDayNectary_argsTupleScheme();
      }
    }

    private static class receiveEvaryDayNectary_argsTupleScheme extends TupleScheme<receiveEvaryDayNectary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveEvaryDayNectary_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeDouble(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveEvaryDayNectary_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.number = iprot.readDouble();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class receiveEvaryDayNectary_result implements org.apache.thrift.TBase<receiveEvaryDayNectary_result, receiveEvaryDayNectary_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveEvaryDayNectary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveEvaryDayNectary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveEvaryDayNectary_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveEvaryDayNectary_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveEvaryDayNectary_result.class, metaDataMap);
    }

    public receiveEvaryDayNectary_result() {
    }

    public receiveEvaryDayNectary_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveEvaryDayNectary_result(receiveEvaryDayNectary_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public receiveEvaryDayNectary_result deepCopy() {
      return new receiveEvaryDayNectary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public receiveEvaryDayNectary_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveEvaryDayNectary_result)
        return this.equals((receiveEvaryDayNectary_result)that);
      return false;
    }

    public boolean equals(receiveEvaryDayNectary_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveEvaryDayNectary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveEvaryDayNectary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveEvaryDayNectary_resultStandardSchemeFactory implements SchemeFactory {
      public receiveEvaryDayNectary_resultStandardScheme getScheme() {
        return new receiveEvaryDayNectary_resultStandardScheme();
      }
    }

    private static class receiveEvaryDayNectary_resultStandardScheme extends StandardScheme<receiveEvaryDayNectary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveEvaryDayNectary_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveEvaryDayNectary_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveEvaryDayNectary_resultTupleSchemeFactory implements SchemeFactory {
      public receiveEvaryDayNectary_resultTupleScheme getScheme() {
        return new receiveEvaryDayNectary_resultTupleScheme();
      }
    }

    private static class receiveEvaryDayNectary_resultTupleScheme extends TupleScheme<receiveEvaryDayNectary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveEvaryDayNectary_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveEvaryDayNectary_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class receiveUserGiveNectary_args implements org.apache.thrift.TBase<receiveUserGiveNectary_args, receiveUserGiveNectary_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveUserGiveNectary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveUserGiveNectary_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveUserGiveNectary_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveUserGiveNectary_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveUserGiveNectary_args.class, metaDataMap);
    }

    public receiveUserGiveNectary_args() {
    }

    public receiveUserGiveNectary_args(
      String transNo,
      long uid)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveUserGiveNectary_args(receiveUserGiveNectary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
    }

    public receiveUserGiveNectary_args deepCopy() {
      return new receiveUserGiveNectary_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public receiveUserGiveNectary_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public receiveUserGiveNectary_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveUserGiveNectary_args)
        return this.equals((receiveUserGiveNectary_args)that);
      return false;
    }

    public boolean equals(receiveUserGiveNectary_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveUserGiveNectary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveUserGiveNectary_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveUserGiveNectary_argsStandardSchemeFactory implements SchemeFactory {
      public receiveUserGiveNectary_argsStandardScheme getScheme() {
        return new receiveUserGiveNectary_argsStandardScheme();
      }
    }

    private static class receiveUserGiveNectary_argsStandardScheme extends StandardScheme<receiveUserGiveNectary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveUserGiveNectary_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveUserGiveNectary_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveUserGiveNectary_argsTupleSchemeFactory implements SchemeFactory {
      public receiveUserGiveNectary_argsTupleScheme getScheme() {
        return new receiveUserGiveNectary_argsTupleScheme();
      }
    }

    private static class receiveUserGiveNectary_argsTupleScheme extends TupleScheme<receiveUserGiveNectary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveNectary_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveNectary_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class receiveUserGiveNectary_result implements org.apache.thrift.TBase<receiveUserGiveNectary_result, receiveUserGiveNectary_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveUserGiveNectary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveUserGiveNectary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveUserGiveNectary_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveUserGiveNectary_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveUserGiveNectary_result.class, metaDataMap);
    }

    public receiveUserGiveNectary_result() {
    }

    public receiveUserGiveNectary_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveUserGiveNectary_result(receiveUserGiveNectary_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public receiveUserGiveNectary_result deepCopy() {
      return new receiveUserGiveNectary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public receiveUserGiveNectary_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveUserGiveNectary_result)
        return this.equals((receiveUserGiveNectary_result)that);
      return false;
    }

    public boolean equals(receiveUserGiveNectary_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(receiveUserGiveNectary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveUserGiveNectary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveUserGiveNectary_resultStandardSchemeFactory implements SchemeFactory {
      public receiveUserGiveNectary_resultStandardScheme getScheme() {
        return new receiveUserGiveNectary_resultStandardScheme();
      }
    }

    private static class receiveUserGiveNectary_resultStandardScheme extends StandardScheme<receiveUserGiveNectary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveUserGiveNectary_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveUserGiveNectary_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveUserGiveNectary_resultTupleSchemeFactory implements SchemeFactory {
      public receiveUserGiveNectary_resultTupleScheme getScheme() {
        return new receiveUserGiveNectary_resultTupleScheme();
      }
    }

    private static class receiveUserGiveNectary_resultTupleScheme extends TupleScheme<receiveUserGiveNectary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveNectary_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveUserGiveNectary_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class giveUserNectary_args implements org.apache.thrift.TBase<giveUserNectary_args, giveUserNectary_args._Fields>, java.io.Serializable, Cloneable, Comparable<giveUserNectary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giveUserNectary_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField GIVE_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("giveUid", org.apache.thrift.protocol.TType.I64, (short)-3);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField COVER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("coverValue", org.apache.thrift.protocol.TType.I32, (short)-5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giveUserNectary_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giveUserNectary_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public long giveUid; // required
    public int number; // required
    public int coverValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      GIVE_UID((short)-3, "giveUid"),
      NUMBER((short)-4, "number"),
      COVER_VALUE((short)-5, "coverValue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // GIVE_UID
            return GIVE_UID;
          case -4: // NUMBER
            return NUMBER;
          case -5: // COVER_VALUE
            return COVER_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __GIVEUID_ISSET_ID = 1;
    private static final int __NUMBER_ISSET_ID = 2;
    private static final int __COVERVALUE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GIVE_UID, new org.apache.thrift.meta_data.FieldMetaData("giveUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COVER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("coverValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giveUserNectary_args.class, metaDataMap);
    }

    public giveUserNectary_args() {
    }

    public giveUserNectary_args(
      String transNo,
      long uid,
      long giveUid,
      int number,
      int coverValue)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.giveUid = giveUid;
      setGiveUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
      this.coverValue = coverValue;
      setCoverValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giveUserNectary_args(giveUserNectary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.giveUid = other.giveUid;
      this.number = other.number;
      this.coverValue = other.coverValue;
    }

    public giveUserNectary_args deepCopy() {
      return new giveUserNectary_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setGiveUidIsSet(false);
      this.giveUid = 0;
      setNumberIsSet(false);
      this.number = 0;
      setCoverValueIsSet(false);
      this.coverValue = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public giveUserNectary_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public giveUserNectary_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public long getGiveUid() {
      return this.giveUid;
    }

    public giveUserNectary_args setGiveUid(long giveUid) {
      this.giveUid = giveUid;
      setGiveUidIsSet(true);
      return this;
    }

    public void unsetGiveUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEUID_ISSET_ID);
    }

    /** Returns true if field giveUid is set (has been assigned a value) and false otherwise */
    public boolean isSetGiveUid() {
      return EncodingUtils.testBit(__isset_bitfield, __GIVEUID_ISSET_ID);
    }

    public void setGiveUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEUID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public giveUserNectary_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public int getCoverValue() {
      return this.coverValue;
    }

    public giveUserNectary_args setCoverValue(int coverValue) {
      this.coverValue = coverValue;
      setCoverValueIsSet(true);
      return this;
    }

    public void unsetCoverValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COVERVALUE_ISSET_ID);
    }

    /** Returns true if field coverValue is set (has been assigned a value) and false otherwise */
    public boolean isSetCoverValue() {
      return EncodingUtils.testBit(__isset_bitfield, __COVERVALUE_ISSET_ID);
    }

    public void setCoverValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COVERVALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case GIVE_UID:
        if (value == null) {
          unsetGiveUid();
        } else {
          setGiveUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      case COVER_VALUE:
        if (value == null) {
          unsetCoverValue();
        } else {
          setCoverValue((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case GIVE_UID:
        return Long.valueOf(getGiveUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      case COVER_VALUE:
        return Integer.valueOf(getCoverValue());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case GIVE_UID:
        return isSetGiveUid();
      case NUMBER:
        return isSetNumber();
      case COVER_VALUE:
        return isSetCoverValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giveUserNectary_args)
        return this.equals((giveUserNectary_args)that);
      return false;
    }

    public boolean equals(giveUserNectary_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_giveUid = true;
      boolean that_present_giveUid = true;
      if (this_present_giveUid || that_present_giveUid) {
        if (!(this_present_giveUid && that_present_giveUid))
          return false;
        if (this.giveUid != that.giveUid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_coverValue = true;
      boolean that_present_coverValue = true;
      if (this_present_coverValue || that_present_coverValue) {
        if (!(this_present_coverValue && that_present_coverValue))
          return false;
        if (this.coverValue != that.coverValue)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(giveUserNectary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGiveUid()).compareTo(other.isSetGiveUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiveUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveUid, other.giveUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoverValue()).compareTo(other.isSetCoverValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoverValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverValue, other.coverValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giveUserNectary_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("giveUid:");
      sb.append(this.giveUid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coverValue:");
      sb.append(this.coverValue);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class giveUserNectary_argsStandardSchemeFactory implements SchemeFactory {
      public giveUserNectary_argsStandardScheme getScheme() {
        return new giveUserNectary_argsStandardScheme();
      }
    }

    private static class giveUserNectary_argsStandardScheme extends StandardScheme<giveUserNectary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giveUserNectary_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // GIVE_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.giveUid = iprot.readI64();
                struct.setGiveUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // COVER_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.coverValue = iprot.readI32();
                struct.setCoverValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giveUserNectary_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COVER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.coverValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GIVE_UID_FIELD_DESC);
        oprot.writeI64(struct.giveUid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giveUserNectary_argsTupleSchemeFactory implements SchemeFactory {
      public giveUserNectary_argsTupleScheme getScheme() {
        return new giveUserNectary_argsTupleScheme();
      }
    }

    private static class giveUserNectary_argsTupleScheme extends TupleScheme<giveUserNectary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giveUserNectary_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetGiveUid()) {
          optionals.set(2);
        }
        if (struct.isSetNumber()) {
          optionals.set(3);
        }
        if (struct.isSetCoverValue()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetGiveUid()) {
          oprot.writeI64(struct.giveUid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
        if (struct.isSetCoverValue()) {
          oprot.writeI32(struct.coverValue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giveUserNectary_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.giveUid = iprot.readI64();
          struct.setGiveUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.coverValue = iprot.readI32();
          struct.setCoverValueIsSet(true);
        }
      }
    }

  }

  public static class giveUserNectary_result implements org.apache.thrift.TBase<giveUserNectary_result, giveUserNectary_result._Fields>, java.io.Serializable, Cloneable, Comparable<giveUserNectary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giveUserNectary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giveUserNectary_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giveUserNectary_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giveUserNectary_result.class, metaDataMap);
    }

    public giveUserNectary_result() {
    }

    public giveUserNectary_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giveUserNectary_result(giveUserNectary_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public giveUserNectary_result deepCopy() {
      return new giveUserNectary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public giveUserNectary_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giveUserNectary_result)
        return this.equals((giveUserNectary_result)that);
      return false;
    }

    public boolean equals(giveUserNectary_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(giveUserNectary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giveUserNectary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class giveUserNectary_resultStandardSchemeFactory implements SchemeFactory {
      public giveUserNectary_resultStandardScheme getScheme() {
        return new giveUserNectary_resultStandardScheme();
      }
    }

    private static class giveUserNectary_resultStandardScheme extends StandardScheme<giveUserNectary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giveUserNectary_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giveUserNectary_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giveUserNectary_resultTupleSchemeFactory implements SchemeFactory {
      public giveUserNectary_resultTupleScheme getScheme() {
        return new giveUserNectary_resultTupleScheme();
      }
    }

    private static class giveUserNectary_resultTupleScheme extends TupleScheme<giveUserNectary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giveUserNectary_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giveUserNectary_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserProps_args implements org.apache.thrift.TBase<statisticsUserProps_args, statisticsUserProps_args._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserProps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserProps_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserProps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserProps_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserProps_args.class, metaDataMap);
    }

    public statisticsUserProps_args() {
    }

    public statisticsUserProps_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserProps_args(statisticsUserProps_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public statisticsUserProps_args deepCopy() {
      return new statisticsUserProps_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public statisticsUserProps_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserProps_args)
        return this.equals((statisticsUserProps_args)that);
      return false;
    }

    public boolean equals(statisticsUserProps_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserProps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserProps_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserProps_argsStandardSchemeFactory implements SchemeFactory {
      public statisticsUserProps_argsStandardScheme getScheme() {
        return new statisticsUserProps_argsStandardScheme();
      }
    }

    private static class statisticsUserProps_argsStandardScheme extends StandardScheme<statisticsUserProps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserProps_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserProps_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserProps_argsTupleSchemeFactory implements SchemeFactory {
      public statisticsUserProps_argsTupleScheme getScheme() {
        return new statisticsUserProps_argsTupleScheme();
      }
    }

    private static class statisticsUserProps_argsTupleScheme extends TupleScheme<statisticsUserProps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserProps_result implements org.apache.thrift.TBase<statisticsUserProps_result, statisticsUserProps_result._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserProps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserProps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserProps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserProps_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserProps_result.class, metaDataMap);
    }

    public statisticsUserProps_result() {
    }

    public statisticsUserProps_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserProps_result(statisticsUserProps_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public statisticsUserProps_result deepCopy() {
      return new statisticsUserProps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public statisticsUserProps_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserProps_result)
        return this.equals((statisticsUserProps_result)that);
      return false;
    }

    public boolean equals(statisticsUserProps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserProps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserProps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserProps_resultStandardSchemeFactory implements SchemeFactory {
      public statisticsUserProps_resultStandardScheme getScheme() {
        return new statisticsUserProps_resultStandardScheme();
      }
    }

    private static class statisticsUserProps_resultStandardScheme extends StandardScheme<statisticsUserProps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserProps_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserProps_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserProps_resultTupleSchemeFactory implements SchemeFactory {
      public statisticsUserProps_resultTupleScheme getScheme() {
        return new statisticsUserProps_resultTupleScheme();
      }
    }

    private static class statisticsUserProps_resultTupleScheme extends TupleScheme<statisticsUserProps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendPropsRedpackage_args implements org.apache.thrift.TBase<sendPropsRedpackage_args, sendPropsRedpackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendPropsRedpackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPropsRedpackage_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField GIVE_UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("giveUids", org.apache.thrift.protocol.TType.LIST, (short)-3);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)-5);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)-6);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)-7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPropsRedpackage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPropsRedpackage_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public List<Long> giveUids; // required
    public int number; // required
    public double amount; // required
    public int type; // required
    public String phone; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      GIVE_UIDS((short)-3, "giveUids"),
      NUMBER((short)-4, "number"),
      AMOUNT((short)-5, "amount"),
      TYPE((short)-6, "type"),
      PHONE((short)-7, "phone");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // GIVE_UIDS
            return GIVE_UIDS;
          case -4: // NUMBER
            return NUMBER;
          case -5: // AMOUNT
            return AMOUNT;
          case -6: // TYPE
            return TYPE;
          case -7: // PHONE
            return PHONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private static final int __AMOUNT_ISSET_ID = 2;
    private static final int __TYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GIVE_UIDS, new org.apache.thrift.meta_data.FieldMetaData("giveUids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPropsRedpackage_args.class, metaDataMap);
    }

    public sendPropsRedpackage_args() {
    }

    public sendPropsRedpackage_args(
      String transNo,
      long uid,
      List<Long> giveUids,
      int number,
      double amount,
      int type,
      String phone)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.giveUids = giveUids;
      this.number = number;
      setNumberIsSet(true);
      this.amount = amount;
      setAmountIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.phone = phone;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPropsRedpackage_args(sendPropsRedpackage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      if (other.isSetGiveUids()) {
        List<Long> __this__giveUids = new ArrayList<Long>(other.giveUids);
        this.giveUids = __this__giveUids;
      }
      this.number = other.number;
      this.amount = other.amount;
      this.type = other.type;
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
    }

    public sendPropsRedpackage_args deepCopy() {
      return new sendPropsRedpackage_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      this.giveUids = null;
      setNumberIsSet(false);
      this.number = 0;
      setAmountIsSet(false);
      this.amount = 0.0;
      setTypeIsSet(false);
      this.type = 0;
      this.phone = null;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public sendPropsRedpackage_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public sendPropsRedpackage_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getGiveUidsSize() {
      return (this.giveUids == null) ? 0 : this.giveUids.size();
    }

    public java.util.Iterator<Long> getGiveUidsIterator() {
      return (this.giveUids == null) ? null : this.giveUids.iterator();
    }

    public void addToGiveUids(long elem) {
      if (this.giveUids == null) {
        this.giveUids = new ArrayList<Long>();
      }
      this.giveUids.add(elem);
    }

    public List<Long> getGiveUids() {
      return this.giveUids;
    }

    public sendPropsRedpackage_args setGiveUids(List<Long> giveUids) {
      this.giveUids = giveUids;
      return this;
    }

    public void unsetGiveUids() {
      this.giveUids = null;
    }

    /** Returns true if field giveUids is set (has been assigned a value) and false otherwise */
    public boolean isSetGiveUids() {
      return this.giveUids != null;
    }

    public void setGiveUidsIsSet(boolean value) {
      if (!value) {
        this.giveUids = null;
      }
    }

    public int getNumber() {
      return this.number;
    }

    public sendPropsRedpackage_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public double getAmount() {
      return this.amount;
    }

    public sendPropsRedpackage_args setAmount(double amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public sendPropsRedpackage_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getPhone() {
      return this.phone;
    }

    public sendPropsRedpackage_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case GIVE_UIDS:
        if (value == null) {
          unsetGiveUids();
        } else {
          setGiveUids((List<Long>)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Double)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case GIVE_UIDS:
        return getGiveUids();

      case NUMBER:
        return Integer.valueOf(getNumber());

      case AMOUNT:
        return Double.valueOf(getAmount());

      case TYPE:
        return Integer.valueOf(getType());

      case PHONE:
        return getPhone();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case GIVE_UIDS:
        return isSetGiveUids();
      case NUMBER:
        return isSetNumber();
      case AMOUNT:
        return isSetAmount();
      case TYPE:
        return isSetType();
      case PHONE:
        return isSetPhone();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPropsRedpackage_args)
        return this.equals((sendPropsRedpackage_args)that);
      return false;
    }

    public boolean equals(sendPropsRedpackage_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_giveUids = true && this.isSetGiveUids();
      boolean that_present_giveUids = true && that.isSetGiveUids();
      if (this_present_giveUids || that_present_giveUids) {
        if (!(this_present_giveUids && that_present_giveUids))
          return false;
        if (!this.giveUids.equals(that.giveUids))
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendPropsRedpackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGiveUids()).compareTo(other.isSetGiveUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiveUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveUids, other.giveUids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPropsRedpackage_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("giveUids:");
      if (this.giveUids == null) {
        sb.append("null");
      } else {
        sb.append(this.giveUids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPropsRedpackage_argsStandardSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_argsStandardScheme getScheme() {
        return new sendPropsRedpackage_argsStandardScheme();
      }
    }

    private static class sendPropsRedpackage_argsStandardScheme extends StandardScheme<sendPropsRedpackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPropsRedpackage_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // GIVE_UIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.giveUids = new ArrayList<Long>(_list36.size);
                  for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                  {
                    long _elem38;
                    _elem38 = iprot.readI64();
                    struct.giveUids.add(_elem38);
                  }
                  iprot.readListEnd();
                }
                struct.setGiveUidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.amount = iprot.readDouble();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -6: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -7: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPropsRedpackage_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        if (struct.giveUids != null) {
          oprot.writeFieldBegin(GIVE_UIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.giveUids.size()));
            for (long _iter39 : struct.giveUids)
            {
              oprot.writeI64(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPropsRedpackage_argsTupleSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_argsTupleScheme getScheme() {
        return new sendPropsRedpackage_argsTupleScheme();
      }
    }

    private static class sendPropsRedpackage_argsTupleScheme extends TupleScheme<sendPropsRedpackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetGiveUids()) {
          optionals.set(2);
        }
        if (struct.isSetNumber()) {
          optionals.set(3);
        }
        if (struct.isSetAmount()) {
          optionals.set(4);
        }
        if (struct.isSetType()) {
          optionals.set(5);
        }
        if (struct.isSetPhone()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetGiveUids()) {
          {
            oprot.writeI32(struct.giveUids.size());
            for (long _iter40 : struct.giveUids)
            {
              oprot.writeI64(_iter40);
            }
          }
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
        if (struct.isSetAmount()) {
          oprot.writeDouble(struct.amount);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.giveUids = new ArrayList<Long>(_list41.size);
            for (int _i42 = 0; _i42 < _list41.size; ++_i42)
            {
              long _elem43;
              _elem43 = iprot.readI64();
              struct.giveUids.add(_elem43);
            }
          }
          struct.setGiveUidsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.amount = iprot.readDouble();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(5)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
      }
    }

  }

  public static class sendPropsRedpackage_result implements org.apache.thrift.TBase<sendPropsRedpackage_result, sendPropsRedpackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendPropsRedpackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPropsRedpackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPropsRedpackage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPropsRedpackage_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPropsRedpackage_result.class, metaDataMap);
    }

    public sendPropsRedpackage_result() {
    }

    public sendPropsRedpackage_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPropsRedpackage_result(sendPropsRedpackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public sendPropsRedpackage_result deepCopy() {
      return new sendPropsRedpackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public sendPropsRedpackage_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPropsRedpackage_result)
        return this.equals((sendPropsRedpackage_result)that);
      return false;
    }

    public boolean equals(sendPropsRedpackage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendPropsRedpackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPropsRedpackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPropsRedpackage_resultStandardSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_resultStandardScheme getScheme() {
        return new sendPropsRedpackage_resultStandardScheme();
      }
    }

    private static class sendPropsRedpackage_resultStandardScheme extends StandardScheme<sendPropsRedpackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPropsRedpackage_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPropsRedpackage_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPropsRedpackage_resultTupleSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_resultTupleScheme getScheme() {
        return new sendPropsRedpackage_resultTupleScheme();
      }
    }

    private static class sendPropsRedpackage_resultTupleScheme extends TupleScheme<sendPropsRedpackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listUserPropsRedpackageHistoryByUid_args implements org.apache.thrift.TBase<listUserPropsRedpackageHistoryByUid_args, listUserPropsRedpackageHistoryByUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserPropsRedpackageHistoryByUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserPropsRedpackageHistoryByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)-2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserPropsRedpackageHistoryByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserPropsRedpackageHistoryByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int offset; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid"),
      OFFSET((short)-2, "offset"),
      LIMIT((short)-3, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          case -2: // OFFSET
            return OFFSET;
          case -3: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __LIMIT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserPropsRedpackageHistoryByUid_args.class, metaDataMap);
    }

    public listUserPropsRedpackageHistoryByUid_args() {
    }

    public listUserPropsRedpackageHistoryByUid_args(
      long uid,
      int offset,
      int limit)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserPropsRedpackageHistoryByUid_args(listUserPropsRedpackageHistoryByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public listUserPropsRedpackageHistoryByUid_args deepCopy() {
      return new listUserPropsRedpackageHistoryByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public listUserPropsRedpackageHistoryByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listUserPropsRedpackageHistoryByUid_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public listUserPropsRedpackageHistoryByUid_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case OFFSET:
        return Integer.valueOf(getOffset());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserPropsRedpackageHistoryByUid_args)
        return this.equals((listUserPropsRedpackageHistoryByUid_args)that);
      return false;
    }

    public boolean equals(listUserPropsRedpackageHistoryByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listUserPropsRedpackageHistoryByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserPropsRedpackageHistoryByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_argsStandardSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_argsStandardScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_argsStandardScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_argsStandardScheme extends StandardScheme<listUserPropsRedpackageHistoryByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserPropsRedpackageHistoryByUid_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserPropsRedpackageHistoryByUid_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserPropsRedpackageHistoryByUid_argsTupleSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_argsTupleScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_argsTupleScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_argsTupleScheme extends TupleScheme<listUserPropsRedpackageHistoryByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class listUserPropsRedpackageHistoryByUid_result implements org.apache.thrift.TBase<listUserPropsRedpackageHistoryByUid_result, listUserPropsRedpackageHistoryByUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserPropsRedpackageHistoryByUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserPropsRedpackageHistoryByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserPropsRedpackageHistoryByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserPropsRedpackageHistoryByUid_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserPropsRedpackageHistoryByUid_result.class, metaDataMap);
    }

    public listUserPropsRedpackageHistoryByUid_result() {
    }

    public listUserPropsRedpackageHistoryByUid_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserPropsRedpackageHistoryByUid_result(listUserPropsRedpackageHistoryByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public listUserPropsRedpackageHistoryByUid_result deepCopy() {
      return new listUserPropsRedpackageHistoryByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public listUserPropsRedpackageHistoryByUid_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserPropsRedpackageHistoryByUid_result)
        return this.equals((listUserPropsRedpackageHistoryByUid_result)that);
      return false;
    }

    public boolean equals(listUserPropsRedpackageHistoryByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listUserPropsRedpackageHistoryByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserPropsRedpackageHistoryByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_resultStandardSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_resultStandardScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_resultStandardScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_resultStandardScheme extends StandardScheme<listUserPropsRedpackageHistoryByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserPropsRedpackageHistoryByUid_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserPropsRedpackageHistoryByUid_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserPropsRedpackageHistoryByUid_resultTupleSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_resultTupleScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_resultTupleScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_resultTupleScheme extends TupleScheme<listUserPropsRedpackageHistoryByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listPropsRedpackageRecordByRedpackageId_args implements org.apache.thrift.TBase<listPropsRedpackageRecordByRedpackageId_args, listPropsRedpackageRecordByRedpackageId_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPropsRedpackageRecordByRedpackageId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropsRedpackageRecordByRedpackageId_args");

    private static final org.apache.thrift.protocol.TField REDPACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("redpackageId", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPropsRedpackageRecordByRedpackageId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPropsRedpackageRecordByRedpackageId_argsTupleSchemeFactory());
    }

    public long redpackageId; // required
    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REDPACKAGE_ID((short)-1, "redpackageId"),
      UID((short)-2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // REDPACKAGE_ID
            return REDPACKAGE_ID;
          case -2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REDPACKAGEID_ISSET_ID = 0;
    private static final int __UID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REDPACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("redpackageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropsRedpackageRecordByRedpackageId_args.class, metaDataMap);
    }

    public listPropsRedpackageRecordByRedpackageId_args() {
    }

    public listPropsRedpackageRecordByRedpackageId_args(
      long redpackageId,
      long uid)
    {
      this();
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropsRedpackageRecordByRedpackageId_args(listPropsRedpackageRecordByRedpackageId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.redpackageId = other.redpackageId;
      this.uid = other.uid;
    }

    public listPropsRedpackageRecordByRedpackageId_args deepCopy() {
      return new listPropsRedpackageRecordByRedpackageId_args(this);
    }

    @Override
    public void clear() {
      setRedpackageIdIsSet(false);
      this.redpackageId = 0;
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getRedpackageId() {
      return this.redpackageId;
    }

    public listPropsRedpackageRecordByRedpackageId_args setRedpackageId(long redpackageId) {
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
      return this;
    }

    public void unsetRedpackageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    /** Returns true if field redpackageId is set (has been assigned a value) and false otherwise */
    public boolean isSetRedpackageId() {
      return EncodingUtils.testBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    public void setRedpackageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public listPropsRedpackageRecordByRedpackageId_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REDPACKAGE_ID:
        if (value == null) {
          unsetRedpackageId();
        } else {
          setRedpackageId((Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REDPACKAGE_ID:
        return Long.valueOf(getRedpackageId());

      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REDPACKAGE_ID:
        return isSetRedpackageId();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropsRedpackageRecordByRedpackageId_args)
        return this.equals((listPropsRedpackageRecordByRedpackageId_args)that);
      return false;
    }

    public boolean equals(listPropsRedpackageRecordByRedpackageId_args that) {
      if (that == null)
        return false;

      boolean this_present_redpackageId = true;
      boolean that_present_redpackageId = true;
      if (this_present_redpackageId || that_present_redpackageId) {
        if (!(this_present_redpackageId && that_present_redpackageId))
          return false;
        if (this.redpackageId != that.redpackageId)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listPropsRedpackageRecordByRedpackageId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRedpackageId()).compareTo(other.isSetRedpackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedpackageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redpackageId, other.redpackageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPropsRedpackageRecordByRedpackageId_args(");
      boolean first = true;

      sb.append("redpackageId:");
      sb.append(this.redpackageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_argsStandardSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_argsStandardScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_argsStandardScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_argsStandardScheme extends StandardScheme<listPropsRedpackageRecordByRedpackageId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropsRedpackageRecordByRedpackageId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // REDPACKAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.redpackageId = iprot.readI64();
                struct.setRedpackageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropsRedpackageRecordByRedpackageId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REDPACKAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.redpackageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropsRedpackageRecordByRedpackageId_argsTupleSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_argsTupleScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_argsTupleScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_argsTupleScheme extends TupleScheme<listPropsRedpackageRecordByRedpackageId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRedpackageId()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRedpackageId()) {
          oprot.writeI64(struct.redpackageId);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.redpackageId = iprot.readI64();
          struct.setRedpackageIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class listPropsRedpackageRecordByRedpackageId_result implements org.apache.thrift.TBase<listPropsRedpackageRecordByRedpackageId_result, listPropsRedpackageRecordByRedpackageId_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPropsRedpackageRecordByRedpackageId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropsRedpackageRecordByRedpackageId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPropsRedpackageRecordByRedpackageId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPropsRedpackageRecordByRedpackageId_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropsRedpackageRecordByRedpackageId_result.class, metaDataMap);
    }

    public listPropsRedpackageRecordByRedpackageId_result() {
    }

    public listPropsRedpackageRecordByRedpackageId_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropsRedpackageRecordByRedpackageId_result(listPropsRedpackageRecordByRedpackageId_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public listPropsRedpackageRecordByRedpackageId_result deepCopy() {
      return new listPropsRedpackageRecordByRedpackageId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public listPropsRedpackageRecordByRedpackageId_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropsRedpackageRecordByRedpackageId_result)
        return this.equals((listPropsRedpackageRecordByRedpackageId_result)that);
      return false;
    }

    public boolean equals(listPropsRedpackageRecordByRedpackageId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listPropsRedpackageRecordByRedpackageId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPropsRedpackageRecordByRedpackageId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_resultStandardSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_resultStandardScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_resultStandardScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_resultStandardScheme extends StandardScheme<listPropsRedpackageRecordByRedpackageId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropsRedpackageRecordByRedpackageId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropsRedpackageRecordByRedpackageId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropsRedpackageRecordByRedpackageId_resultTupleSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_resultTupleScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_resultTupleScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_resultTupleScheme extends TupleScheme<listPropsRedpackageRecordByRedpackageId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPropsRedpackage_args implements org.apache.thrift.TBase<getPropsRedpackage_args, getPropsRedpackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPropsRedpackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropsRedpackage_args");

    private static final org.apache.thrift.protocol.TField REDPACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("redpackageId", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPropsRedpackage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPropsRedpackage_argsTupleSchemeFactory());
    }

    public long redpackageId; // required
    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REDPACKAGE_ID((short)-1, "redpackageId"),
      UID((short)-2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // REDPACKAGE_ID
            return REDPACKAGE_ID;
          case -2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REDPACKAGEID_ISSET_ID = 0;
    private static final int __UID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REDPACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("redpackageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropsRedpackage_args.class, metaDataMap);
    }

    public getPropsRedpackage_args() {
    }

    public getPropsRedpackage_args(
      long redpackageId,
      long uid)
    {
      this();
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropsRedpackage_args(getPropsRedpackage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.redpackageId = other.redpackageId;
      this.uid = other.uid;
    }

    public getPropsRedpackage_args deepCopy() {
      return new getPropsRedpackage_args(this);
    }

    @Override
    public void clear() {
      setRedpackageIdIsSet(false);
      this.redpackageId = 0;
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getRedpackageId() {
      return this.redpackageId;
    }

    public getPropsRedpackage_args setRedpackageId(long redpackageId) {
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
      return this;
    }

    public void unsetRedpackageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    /** Returns true if field redpackageId is set (has been assigned a value) and false otherwise */
    public boolean isSetRedpackageId() {
      return EncodingUtils.testBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    public void setRedpackageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public getPropsRedpackage_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REDPACKAGE_ID:
        if (value == null) {
          unsetRedpackageId();
        } else {
          setRedpackageId((Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REDPACKAGE_ID:
        return Long.valueOf(getRedpackageId());

      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REDPACKAGE_ID:
        return isSetRedpackageId();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropsRedpackage_args)
        return this.equals((getPropsRedpackage_args)that);
      return false;
    }

    public boolean equals(getPropsRedpackage_args that) {
      if (that == null)
        return false;

      boolean this_present_redpackageId = true;
      boolean that_present_redpackageId = true;
      if (this_present_redpackageId || that_present_redpackageId) {
        if (!(this_present_redpackageId && that_present_redpackageId))
          return false;
        if (this.redpackageId != that.redpackageId)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPropsRedpackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRedpackageId()).compareTo(other.isSetRedpackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedpackageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redpackageId, other.redpackageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPropsRedpackage_args(");
      boolean first = true;

      sb.append("redpackageId:");
      sb.append(this.redpackageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropsRedpackage_argsStandardSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_argsStandardScheme getScheme() {
        return new getPropsRedpackage_argsStandardScheme();
      }
    }

    private static class getPropsRedpackage_argsStandardScheme extends StandardScheme<getPropsRedpackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropsRedpackage_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // REDPACKAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.redpackageId = iprot.readI64();
                struct.setRedpackageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropsRedpackage_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REDPACKAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.redpackageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropsRedpackage_argsTupleSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_argsTupleScheme getScheme() {
        return new getPropsRedpackage_argsTupleScheme();
      }
    }

    private static class getPropsRedpackage_argsTupleScheme extends TupleScheme<getPropsRedpackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRedpackageId()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRedpackageId()) {
          oprot.writeI64(struct.redpackageId);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.redpackageId = iprot.readI64();
          struct.setRedpackageIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getPropsRedpackage_result implements org.apache.thrift.TBase<getPropsRedpackage_result, getPropsRedpackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPropsRedpackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropsRedpackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPropsRedpackage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPropsRedpackage_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropsRedpackage_result.class, metaDataMap);
    }

    public getPropsRedpackage_result() {
    }

    public getPropsRedpackage_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropsRedpackage_result(getPropsRedpackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public getPropsRedpackage_result deepCopy() {
      return new getPropsRedpackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public getPropsRedpackage_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropsRedpackage_result)
        return this.equals((getPropsRedpackage_result)that);
      return false;
    }

    public boolean equals(getPropsRedpackage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPropsRedpackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPropsRedpackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropsRedpackage_resultStandardSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_resultStandardScheme getScheme() {
        return new getPropsRedpackage_resultStandardScheme();
      }
    }

    private static class getPropsRedpackage_resultStandardScheme extends StandardScheme<getPropsRedpackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropsRedpackage_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropsRedpackage_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropsRedpackage_resultTupleSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_resultTupleScheme getScheme() {
        return new getPropsRedpackage_resultTupleScheme();
      }
    }

    private static class getPropsRedpackage_resultTupleScheme extends TupleScheme<getPropsRedpackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserRepertory_args implements org.apache.thrift.TBase<statisticsUserRepertory_args, statisticsUserRepertory_args._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserRepertory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserRepertory_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserRepertory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserRepertory_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserRepertory_args.class, metaDataMap);
    }

    public statisticsUserRepertory_args() {
    }

    public statisticsUserRepertory_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserRepertory_args(statisticsUserRepertory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public statisticsUserRepertory_args deepCopy() {
      return new statisticsUserRepertory_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public statisticsUserRepertory_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserRepertory_args)
        return this.equals((statisticsUserRepertory_args)that);
      return false;
    }

    public boolean equals(statisticsUserRepertory_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserRepertory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserRepertory_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserRepertory_argsStandardSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_argsStandardScheme getScheme() {
        return new statisticsUserRepertory_argsStandardScheme();
      }
    }

    private static class statisticsUserRepertory_argsStandardScheme extends StandardScheme<statisticsUserRepertory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserRepertory_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserRepertory_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserRepertory_argsTupleSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_argsTupleScheme getScheme() {
        return new statisticsUserRepertory_argsTupleScheme();
      }
    }

    private static class statisticsUserRepertory_argsTupleScheme extends TupleScheme<statisticsUserRepertory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserRepertory_result implements org.apache.thrift.TBase<statisticsUserRepertory_result, statisticsUserRepertory_result._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserRepertory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserRepertory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserRepertory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserRepertory_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserRepertory_result.class, metaDataMap);
    }

    public statisticsUserRepertory_result() {
    }

    public statisticsUserRepertory_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserRepertory_result(statisticsUserRepertory_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public statisticsUserRepertory_result deepCopy() {
      return new statisticsUserRepertory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public statisticsUserRepertory_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserRepertory_result)
        return this.equals((statisticsUserRepertory_result)that);
      return false;
    }

    public boolean equals(statisticsUserRepertory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserRepertory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserRepertory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserRepertory_resultStandardSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_resultStandardScheme getScheme() {
        return new statisticsUserRepertory_resultStandardScheme();
      }
    }

    private static class statisticsUserRepertory_resultStandardScheme extends StandardScheme<statisticsUserRepertory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserRepertory_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserRepertory_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserRepertory_resultTupleSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_resultTupleScheme getScheme() {
        return new statisticsUserRepertory_resultTupleScheme();
      }
    }

    private static class statisticsUserRepertory_resultTupleScheme extends TupleScheme<statisticsUserRepertory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exchangeMoneyRedpackage_args implements org.apache.thrift.TBase<exchangeMoneyRedpackage_args, exchangeMoneyRedpackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeMoneyRedpackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeMoneyRedpackage_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-3);
    private static final org.apache.thrift.protocol.TField CONFIG_NECTAR_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("configNectarNumber", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField MONEY_REDPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyRedpackage", org.apache.thrift.protocol.TType.DOUBLE, (short)-5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeMoneyRedpackage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeMoneyRedpackage_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int number; // required
    public int configNectarNumber; // required
    public double moneyRedpackage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      NUMBER((short)-3, "number"),
      CONFIG_NECTAR_NUMBER((short)-4, "configNectarNumber"),
      MONEY_REDPACKAGE((short)-5, "moneyRedpackage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // NUMBER
            return NUMBER;
          case -4: // CONFIG_NECTAR_NUMBER
            return CONFIG_NECTAR_NUMBER;
          case -5: // MONEY_REDPACKAGE
            return MONEY_REDPACKAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private static final int __CONFIGNECTARNUMBER_ISSET_ID = 2;
    private static final int __MONEYREDPACKAGE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONFIG_NECTAR_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("configNectarNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MONEY_REDPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("moneyRedpackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeMoneyRedpackage_args.class, metaDataMap);
    }

    public exchangeMoneyRedpackage_args() {
    }

    public exchangeMoneyRedpackage_args(
      String transNo,
      long uid,
      int number,
      int configNectarNumber,
      double moneyRedpackage)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
      this.configNectarNumber = configNectarNumber;
      setConfigNectarNumberIsSet(true);
      this.moneyRedpackage = moneyRedpackage;
      setMoneyRedpackageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeMoneyRedpackage_args(exchangeMoneyRedpackage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.number = other.number;
      this.configNectarNumber = other.configNectarNumber;
      this.moneyRedpackage = other.moneyRedpackage;
    }

    public exchangeMoneyRedpackage_args deepCopy() {
      return new exchangeMoneyRedpackage_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0;
      setConfigNectarNumberIsSet(false);
      this.configNectarNumber = 0;
      setMoneyRedpackageIsSet(false);
      this.moneyRedpackage = 0.0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public exchangeMoneyRedpackage_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public exchangeMoneyRedpackage_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public exchangeMoneyRedpackage_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public int getConfigNectarNumber() {
      return this.configNectarNumber;
    }

    public exchangeMoneyRedpackage_args setConfigNectarNumber(int configNectarNumber) {
      this.configNectarNumber = configNectarNumber;
      setConfigNectarNumberIsSet(true);
      return this;
    }

    public void unsetConfigNectarNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGNECTARNUMBER_ISSET_ID);
    }

    /** Returns true if field configNectarNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigNectarNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIGNECTARNUMBER_ISSET_ID);
    }

    public void setConfigNectarNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGNECTARNUMBER_ISSET_ID, value);
    }

    public double getMoneyRedpackage() {
      return this.moneyRedpackage;
    }

    public exchangeMoneyRedpackage_args setMoneyRedpackage(double moneyRedpackage) {
      this.moneyRedpackage = moneyRedpackage;
      setMoneyRedpackageIsSet(true);
      return this;
    }

    public void unsetMoneyRedpackage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYREDPACKAGE_ISSET_ID);
    }

    /** Returns true if field moneyRedpackage is set (has been assigned a value) and false otherwise */
    public boolean isSetMoneyRedpackage() {
      return EncodingUtils.testBit(__isset_bitfield, __MONEYREDPACKAGE_ISSET_ID);
    }

    public void setMoneyRedpackageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYREDPACKAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      case CONFIG_NECTAR_NUMBER:
        if (value == null) {
          unsetConfigNectarNumber();
        } else {
          setConfigNectarNumber((Integer)value);
        }
        break;

      case MONEY_REDPACKAGE:
        if (value == null) {
          unsetMoneyRedpackage();
        } else {
          setMoneyRedpackage((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      case CONFIG_NECTAR_NUMBER:
        return Integer.valueOf(getConfigNectarNumber());

      case MONEY_REDPACKAGE:
        return Double.valueOf(getMoneyRedpackage());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      case CONFIG_NECTAR_NUMBER:
        return isSetConfigNectarNumber();
      case MONEY_REDPACKAGE:
        return isSetMoneyRedpackage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeMoneyRedpackage_args)
        return this.equals((exchangeMoneyRedpackage_args)that);
      return false;
    }

    public boolean equals(exchangeMoneyRedpackage_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_configNectarNumber = true;
      boolean that_present_configNectarNumber = true;
      if (this_present_configNectarNumber || that_present_configNectarNumber) {
        if (!(this_present_configNectarNumber && that_present_configNectarNumber))
          return false;
        if (this.configNectarNumber != that.configNectarNumber)
          return false;
      }

      boolean this_present_moneyRedpackage = true;
      boolean that_present_moneyRedpackage = true;
      if (this_present_moneyRedpackage || that_present_moneyRedpackage) {
        if (!(this_present_moneyRedpackage && that_present_moneyRedpackage))
          return false;
        if (this.moneyRedpackage != that.moneyRedpackage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeMoneyRedpackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigNectarNumber()).compareTo(other.isSetConfigNectarNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigNectarNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configNectarNumber, other.configNectarNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoneyRedpackage()).compareTo(other.isSetMoneyRedpackage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoneyRedpackage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyRedpackage, other.moneyRedpackage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeMoneyRedpackage_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("configNectarNumber:");
      sb.append(this.configNectarNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("moneyRedpackage:");
      sb.append(this.moneyRedpackage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeMoneyRedpackage_argsStandardSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_argsStandardScheme getScheme() {
        return new exchangeMoneyRedpackage_argsStandardScheme();
      }
    }

    private static class exchangeMoneyRedpackage_argsStandardScheme extends StandardScheme<exchangeMoneyRedpackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeMoneyRedpackage_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // CONFIG_NECTAR_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.configNectarNumber = iprot.readI32();
                struct.setConfigNectarNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // MONEY_REDPACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.moneyRedpackage = iprot.readDouble();
                struct.setMoneyRedpackageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeMoneyRedpackage_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MONEY_REDPACKAGE_FIELD_DESC);
        oprot.writeDouble(struct.moneyRedpackage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONFIG_NECTAR_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.configNectarNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeMoneyRedpackage_argsTupleSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_argsTupleScheme getScheme() {
        return new exchangeMoneyRedpackage_argsTupleScheme();
      }
    }

    private static class exchangeMoneyRedpackage_argsTupleScheme extends TupleScheme<exchangeMoneyRedpackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetNumber()) {
          optionals.set(2);
        }
        if (struct.isSetConfigNectarNumber()) {
          optionals.set(3);
        }
        if (struct.isSetMoneyRedpackage()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
        if (struct.isSetConfigNectarNumber()) {
          oprot.writeI32(struct.configNectarNumber);
        }
        if (struct.isSetMoneyRedpackage()) {
          oprot.writeDouble(struct.moneyRedpackage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.configNectarNumber = iprot.readI32();
          struct.setConfigNectarNumberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.moneyRedpackage = iprot.readDouble();
          struct.setMoneyRedpackageIsSet(true);
        }
      }
    }

  }

  public static class exchangeMoneyRedpackage_result implements org.apache.thrift.TBase<exchangeMoneyRedpackage_result, exchangeMoneyRedpackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeMoneyRedpackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeMoneyRedpackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeMoneyRedpackage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeMoneyRedpackage_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeMoneyRedpackage_result.class, metaDataMap);
    }

    public exchangeMoneyRedpackage_result() {
    }

    public exchangeMoneyRedpackage_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeMoneyRedpackage_result(exchangeMoneyRedpackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public exchangeMoneyRedpackage_result deepCopy() {
      return new exchangeMoneyRedpackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exchangeMoneyRedpackage_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeMoneyRedpackage_result)
        return this.equals((exchangeMoneyRedpackage_result)that);
      return false;
    }

    public boolean equals(exchangeMoneyRedpackage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeMoneyRedpackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeMoneyRedpackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeMoneyRedpackage_resultStandardSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_resultStandardScheme getScheme() {
        return new exchangeMoneyRedpackage_resultStandardScheme();
      }
    }

    private static class exchangeMoneyRedpackage_resultStandardScheme extends StandardScheme<exchangeMoneyRedpackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeMoneyRedpackage_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeMoneyRedpackage_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeMoneyRedpackage_resultTupleSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_resultTupleScheme getScheme() {
        return new exchangeMoneyRedpackage_resultTupleScheme();
      }
    }

    private static class exchangeMoneyRedpackage_resultTupleScheme extends TupleScheme<exchangeMoneyRedpackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addUserEnergy_args implements org.apache.thrift.TBase<addUserEnergy_args, addUserEnergy_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUserEnergy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserEnergy_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.DOUBLE, (short)-3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)-4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserEnergy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserEnergy_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public double number; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      NUMBER((short)-3, "number"),
      TYPE((short)-4, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // NUMBER
            return NUMBER;
          case -4: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserEnergy_args.class, metaDataMap);
    }

    public addUserEnergy_args() {
    }

    public addUserEnergy_args(
      String transNo,
      long uid,
      double number,
      int type)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserEnergy_args(addUserEnergy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.number = other.number;
      this.type = other.type;
    }

    public addUserEnergy_args deepCopy() {
      return new addUserEnergy_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0.0;
      setTypeIsSet(false);
      this.type = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public addUserEnergy_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public addUserEnergy_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public double getNumber() {
      return this.number;
    }

    public addUserEnergy_args setNumber(double number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public addUserEnergy_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Double)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Double.valueOf(getNumber());

      case TYPE:
        return Integer.valueOf(getType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserEnergy_args)
        return this.equals((addUserEnergy_args)that);
      return false;
    }

    public boolean equals(addUserEnergy_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addUserEnergy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserEnergy_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserEnergy_argsStandardSchemeFactory implements SchemeFactory {
      public addUserEnergy_argsStandardScheme getScheme() {
        return new addUserEnergy_argsStandardScheme();
      }
    }

    private static class addUserEnergy_argsStandardScheme extends StandardScheme<addUserEnergy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserEnergy_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.number = iprot.readDouble();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserEnergy_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeDouble(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserEnergy_argsTupleSchemeFactory implements SchemeFactory {
      public addUserEnergy_argsTupleScheme getScheme() {
        return new addUserEnergy_argsTupleScheme();
      }
    }

    private static class addUserEnergy_argsTupleScheme extends TupleScheme<addUserEnergy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserEnergy_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetNumber()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeDouble(struct.number);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserEnergy_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.number = iprot.readDouble();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class addUserEnergy_result implements org.apache.thrift.TBase<addUserEnergy_result, addUserEnergy_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUserEnergy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserEnergy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserEnergy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserEnergy_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserEnergy_result.class, metaDataMap);
    }

    public addUserEnergy_result() {
    }

    public addUserEnergy_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserEnergy_result(addUserEnergy_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public addUserEnergy_result deepCopy() {
      return new addUserEnergy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public addUserEnergy_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserEnergy_result)
        return this.equals((addUserEnergy_result)that);
      return false;
    }

    public boolean equals(addUserEnergy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addUserEnergy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserEnergy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserEnergy_resultStandardSchemeFactory implements SchemeFactory {
      public addUserEnergy_resultStandardScheme getScheme() {
        return new addUserEnergy_resultStandardScheme();
      }
    }

    private static class addUserEnergy_resultStandardScheme extends StandardScheme<addUserEnergy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserEnergy_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserEnergy_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserEnergy_resultTupleSchemeFactory implements SchemeFactory {
      public addUserEnergy_resultTupleScheme getScheme() {
        return new addUserEnergy_resultTupleScheme();
      }
    }

    private static class addUserEnergy_resultTupleScheme extends TupleScheme<addUserEnergy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserEnergy_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserEnergy_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class buyFlower_args implements org.apache.thrift.TBase<buyFlower_args, buyFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<buyFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyFlower_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-3);
    private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)-5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buyFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buyFlower_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int number; // required
    public int month; // required
    public double amount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      NUMBER((short)-3, "number"),
      MONTH((short)-4, "month"),
      AMOUNT((short)-5, "amount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // NUMBER
            return NUMBER;
          case -4: // MONTH
            return MONTH;
          case -5: // AMOUNT
            return AMOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private static final int __MONTH_ISSET_ID = 2;
    private static final int __AMOUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buyFlower_args.class, metaDataMap);
    }

    public buyFlower_args() {
    }

    public buyFlower_args(
      String transNo,
      long uid,
      int number,
      int month,
      double amount)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
      this.month = month;
      setMonthIsSet(true);
      this.amount = amount;
      setAmountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyFlower_args(buyFlower_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.number = other.number;
      this.month = other.month;
      this.amount = other.amount;
    }

    public buyFlower_args deepCopy() {
      return new buyFlower_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0;
      setMonthIsSet(false);
      this.month = 0;
      setAmountIsSet(false);
      this.amount = 0.0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public buyFlower_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public buyFlower_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public buyFlower_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public int getMonth() {
      return this.month;
    }

    public buyFlower_args setMonth(int month) {
      this.month = month;
      setMonthIsSet(true);
      return this;
    }

    public void unsetMonth() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
    }

    /** Returns true if field month is set (has been assigned a value) and false otherwise */
    public boolean isSetMonth() {
      return EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
    }

    public void setMonthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
    }

    public double getAmount() {
      return this.amount;
    }

    public buyFlower_args setAmount(double amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      case MONTH:
        if (value == null) {
          unsetMonth();
        } else {
          setMonth((Integer)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      case MONTH:
        return Integer.valueOf(getMonth());

      case AMOUNT:
        return Double.valueOf(getAmount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      case MONTH:
        return isSetMonth();
      case AMOUNT:
        return isSetAmount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyFlower_args)
        return this.equals((buyFlower_args)that);
      return false;
    }

    public boolean equals(buyFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_month = true;
      boolean that_present_month = true;
      if (this_present_month || that_present_month) {
        if (!(this_present_month && that_present_month))
          return false;
        if (this.month != that.month)
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buyFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buyFlower_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("month:");
      sb.append(this.month);
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buyFlower_argsStandardSchemeFactory implements SchemeFactory {
      public buyFlower_argsStandardScheme getScheme() {
        return new buyFlower_argsStandardScheme();
      }
    }

    private static class buyFlower_argsStandardScheme extends StandardScheme<buyFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buyFlower_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // MONTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.month = iprot.readI32();
                struct.setMonthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.amount = iprot.readDouble();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buyFlower_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MONTH_FIELD_DESC);
        oprot.writeI32(struct.month);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buyFlower_argsTupleSchemeFactory implements SchemeFactory {
      public buyFlower_argsTupleScheme getScheme() {
        return new buyFlower_argsTupleScheme();
      }
    }

    private static class buyFlower_argsTupleScheme extends TupleScheme<buyFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buyFlower_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetNumber()) {
          optionals.set(2);
        }
        if (struct.isSetMonth()) {
          optionals.set(3);
        }
        if (struct.isSetAmount()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
        if (struct.isSetMonth()) {
          oprot.writeI32(struct.month);
        }
        if (struct.isSetAmount()) {
          oprot.writeDouble(struct.amount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buyFlower_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.month = iprot.readI32();
          struct.setMonthIsSet(true);
        }
        if (incoming.get(4)) {
          struct.amount = iprot.readDouble();
          struct.setAmountIsSet(true);
        }
      }
    }

  }

  public static class buyFlower_result implements org.apache.thrift.TBase<buyFlower_result, buyFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<buyFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buyFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buyFlower_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buyFlower_result.class, metaDataMap);
    }

    public buyFlower_result() {
    }

    public buyFlower_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyFlower_result(buyFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public buyFlower_result deepCopy() {
      return new buyFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public buyFlower_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyFlower_result)
        return this.equals((buyFlower_result)that);
      return false;
    }

    public boolean equals(buyFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buyFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buyFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buyFlower_resultStandardSchemeFactory implements SchemeFactory {
      public buyFlower_resultStandardScheme getScheme() {
        return new buyFlower_resultStandardScheme();
      }
    }

    private static class buyFlower_resultStandardScheme extends StandardScheme<buyFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buyFlower_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buyFlower_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buyFlower_resultTupleSchemeFactory implements SchemeFactory {
      public buyFlower_resultTupleScheme getScheme() {
        return new buyFlower_resultTupleScheme();
      }
    }

    private static class buyFlower_resultTupleScheme extends TupleScheme<buyFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buyFlower_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buyFlower_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class nectaryReport_args implements org.apache.thrift.TBase<nectaryReport_args, nectaryReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<nectaryReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nectaryReport_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)-2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new nectaryReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new nectaryReport_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int offset; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid"),
      OFFSET((short)-2, "offset"),
      LIMIT((short)-3, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          case -2: // OFFSET
            return OFFSET;
          case -3: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __LIMIT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nectaryReport_args.class, metaDataMap);
    }

    public nectaryReport_args() {
    }

    public nectaryReport_args(
      long uid,
      int offset,
      int limit)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nectaryReport_args(nectaryReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public nectaryReport_args deepCopy() {
      return new nectaryReport_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public nectaryReport_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public nectaryReport_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public nectaryReport_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case OFFSET:
        return Integer.valueOf(getOffset());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof nectaryReport_args)
        return this.equals((nectaryReport_args)that);
      return false;
    }

    public boolean equals(nectaryReport_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(nectaryReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("nectaryReport_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nectaryReport_argsStandardSchemeFactory implements SchemeFactory {
      public nectaryReport_argsStandardScheme getScheme() {
        return new nectaryReport_argsStandardScheme();
      }
    }

    private static class nectaryReport_argsStandardScheme extends StandardScheme<nectaryReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nectaryReport_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nectaryReport_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nectaryReport_argsTupleSchemeFactory implements SchemeFactory {
      public nectaryReport_argsTupleScheme getScheme() {
        return new nectaryReport_argsTupleScheme();
      }
    }

    private static class nectaryReport_argsTupleScheme extends TupleScheme<nectaryReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nectaryReport_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nectaryReport_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class nectaryReport_result implements org.apache.thrift.TBase<nectaryReport_result, nectaryReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<nectaryReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nectaryReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new nectaryReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new nectaryReport_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nectaryReport_result.class, metaDataMap);
    }

    public nectaryReport_result() {
    }

    public nectaryReport_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nectaryReport_result(nectaryReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public nectaryReport_result deepCopy() {
      return new nectaryReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public nectaryReport_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof nectaryReport_result)
        return this.equals((nectaryReport_result)that);
      return false;
    }

    public boolean equals(nectaryReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(nectaryReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("nectaryReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nectaryReport_resultStandardSchemeFactory implements SchemeFactory {
      public nectaryReport_resultStandardScheme getScheme() {
        return new nectaryReport_resultStandardScheme();
      }
    }

    private static class nectaryReport_resultStandardScheme extends StandardScheme<nectaryReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nectaryReport_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nectaryReport_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nectaryReport_resultTupleSchemeFactory implements SchemeFactory {
      public nectaryReport_resultTupleScheme getScheme() {
        return new nectaryReport_resultTupleScheme();
      }
    }

    private static class nectaryReport_resultTupleScheme extends TupleScheme<nectaryReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nectaryReport_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nectaryReport_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class timerGrowFlower_args implements org.apache.thrift.TBase<timerGrowFlower_args, timerGrowFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<timerGrowFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timerGrowFlower_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField HOURS_FIELD_DESC = new org.apache.thrift.protocol.TField("hours", org.apache.thrift.protocol.TType.I32, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timerGrowFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timerGrowFlower_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int hours; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      HOURS((short)-3, "hours");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // HOURS
            return HOURS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __HOURS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.HOURS, new org.apache.thrift.meta_data.FieldMetaData("hours", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timerGrowFlower_args.class, metaDataMap);
    }

    public timerGrowFlower_args() {
    }

    public timerGrowFlower_args(
      String transNo,
      long uid,
      int hours)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.hours = hours;
      setHoursIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timerGrowFlower_args(timerGrowFlower_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.hours = other.hours;
    }

    public timerGrowFlower_args deepCopy() {
      return new timerGrowFlower_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setHoursIsSet(false);
      this.hours = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public timerGrowFlower_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public timerGrowFlower_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getHours() {
      return this.hours;
    }

    public timerGrowFlower_args setHours(int hours) {
      this.hours = hours;
      setHoursIsSet(true);
      return this;
    }

    public void unsetHours() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOURS_ISSET_ID);
    }

    /** Returns true if field hours is set (has been assigned a value) and false otherwise */
    public boolean isSetHours() {
      return EncodingUtils.testBit(__isset_bitfield, __HOURS_ISSET_ID);
    }

    public void setHoursIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOURS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case HOURS:
        if (value == null) {
          unsetHours();
        } else {
          setHours((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case HOURS:
        return Integer.valueOf(getHours());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case HOURS:
        return isSetHours();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timerGrowFlower_args)
        return this.equals((timerGrowFlower_args)that);
      return false;
    }

    public boolean equals(timerGrowFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_hours = true;
      boolean that_present_hours = true;
      if (this_present_hours || that_present_hours) {
        if (!(this_present_hours && that_present_hours))
          return false;
        if (this.hours != that.hours)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(timerGrowFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHours()).compareTo(other.isSetHours());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHours()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hours, other.hours);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timerGrowFlower_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hours:");
      sb.append(this.hours);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timerGrowFlower_argsStandardSchemeFactory implements SchemeFactory {
      public timerGrowFlower_argsStandardScheme getScheme() {
        return new timerGrowFlower_argsStandardScheme();
      }
    }

    private static class timerGrowFlower_argsStandardScheme extends StandardScheme<timerGrowFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timerGrowFlower_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // HOURS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hours = iprot.readI32();
                struct.setHoursIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timerGrowFlower_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HOURS_FIELD_DESC);
        oprot.writeI32(struct.hours);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timerGrowFlower_argsTupleSchemeFactory implements SchemeFactory {
      public timerGrowFlower_argsTupleScheme getScheme() {
        return new timerGrowFlower_argsTupleScheme();
      }
    }

    private static class timerGrowFlower_argsTupleScheme extends TupleScheme<timerGrowFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timerGrowFlower_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetHours()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetHours()) {
          oprot.writeI32(struct.hours);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timerGrowFlower_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hours = iprot.readI32();
          struct.setHoursIsSet(true);
        }
      }
    }

  }

  public static class timerGrowFlower_result implements org.apache.thrift.TBase<timerGrowFlower_result, timerGrowFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<timerGrowFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("timerGrowFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new timerGrowFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new timerGrowFlower_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(timerGrowFlower_result.class, metaDataMap);
    }

    public timerGrowFlower_result() {
    }

    public timerGrowFlower_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public timerGrowFlower_result(timerGrowFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public timerGrowFlower_result deepCopy() {
      return new timerGrowFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public timerGrowFlower_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof timerGrowFlower_result)
        return this.equals((timerGrowFlower_result)that);
      return false;
    }

    public boolean equals(timerGrowFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(timerGrowFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("timerGrowFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class timerGrowFlower_resultStandardSchemeFactory implements SchemeFactory {
      public timerGrowFlower_resultStandardScheme getScheme() {
        return new timerGrowFlower_resultStandardScheme();
      }
    }

    private static class timerGrowFlower_resultStandardScheme extends StandardScheme<timerGrowFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, timerGrowFlower_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, timerGrowFlower_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class timerGrowFlower_resultTupleSchemeFactory implements SchemeFactory {
      public timerGrowFlower_resultTupleScheme getScheme() {
        return new timerGrowFlower_resultTupleScheme();
      }
    }

    private static class timerGrowFlower_resultTupleScheme extends TupleScheme<timerGrowFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, timerGrowFlower_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, timerGrowFlower_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllNotFinishGrowUserByHours_args implements org.apache.thrift.TBase<getAllNotFinishGrowUserByHours_args, getAllNotFinishGrowUserByHours_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllNotFinishGrowUserByHours_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllNotFinishGrowUserByHours_args");

    private static final org.apache.thrift.protocol.TField HOURS_FIELD_DESC = new org.apache.thrift.protocol.TField("hours", org.apache.thrift.protocol.TType.I32, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllNotFinishGrowUserByHours_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllNotFinishGrowUserByHours_argsTupleSchemeFactory());
    }

    public int hours; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOURS((short)-1, "hours");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // HOURS
            return HOURS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HOURS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOURS, new org.apache.thrift.meta_data.FieldMetaData("hours", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllNotFinishGrowUserByHours_args.class, metaDataMap);
    }

    public getAllNotFinishGrowUserByHours_args() {
    }

    public getAllNotFinishGrowUserByHours_args(
      int hours)
    {
      this();
      this.hours = hours;
      setHoursIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllNotFinishGrowUserByHours_args(getAllNotFinishGrowUserByHours_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hours = other.hours;
    }

    public getAllNotFinishGrowUserByHours_args deepCopy() {
      return new getAllNotFinishGrowUserByHours_args(this);
    }

    @Override
    public void clear() {
      setHoursIsSet(false);
      this.hours = 0;
    }

    public int getHours() {
      return this.hours;
    }

    public getAllNotFinishGrowUserByHours_args setHours(int hours) {
      this.hours = hours;
      setHoursIsSet(true);
      return this;
    }

    public void unsetHours() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOURS_ISSET_ID);
    }

    /** Returns true if field hours is set (has been assigned a value) and false otherwise */
    public boolean isSetHours() {
      return EncodingUtils.testBit(__isset_bitfield, __HOURS_ISSET_ID);
    }

    public void setHoursIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOURS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOURS:
        if (value == null) {
          unsetHours();
        } else {
          setHours((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOURS:
        return Integer.valueOf(getHours());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOURS:
        return isSetHours();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllNotFinishGrowUserByHours_args)
        return this.equals((getAllNotFinishGrowUserByHours_args)that);
      return false;
    }

    public boolean equals(getAllNotFinishGrowUserByHours_args that) {
      if (that == null)
        return false;

      boolean this_present_hours = true;
      boolean that_present_hours = true;
      if (this_present_hours || that_present_hours) {
        if (!(this_present_hours && that_present_hours))
          return false;
        if (this.hours != that.hours)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllNotFinishGrowUserByHours_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHours()).compareTo(other.isSetHours());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHours()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hours, other.hours);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllNotFinishGrowUserByHours_args(");
      boolean first = true;

      sb.append("hours:");
      sb.append(this.hours);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllNotFinishGrowUserByHours_argsStandardSchemeFactory implements SchemeFactory {
      public getAllNotFinishGrowUserByHours_argsStandardScheme getScheme() {
        return new getAllNotFinishGrowUserByHours_argsStandardScheme();
      }
    }

    private static class getAllNotFinishGrowUserByHours_argsStandardScheme extends StandardScheme<getAllNotFinishGrowUserByHours_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllNotFinishGrowUserByHours_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // HOURS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hours = iprot.readI32();
                struct.setHoursIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllNotFinishGrowUserByHours_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HOURS_FIELD_DESC);
        oprot.writeI32(struct.hours);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllNotFinishGrowUserByHours_argsTupleSchemeFactory implements SchemeFactory {
      public getAllNotFinishGrowUserByHours_argsTupleScheme getScheme() {
        return new getAllNotFinishGrowUserByHours_argsTupleScheme();
      }
    }

    private static class getAllNotFinishGrowUserByHours_argsTupleScheme extends TupleScheme<getAllNotFinishGrowUserByHours_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllNotFinishGrowUserByHours_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHours()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHours()) {
          oprot.writeI32(struct.hours);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllNotFinishGrowUserByHours_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hours = iprot.readI32();
          struct.setHoursIsSet(true);
        }
      }
    }

  }

  public static class getAllNotFinishGrowUserByHours_result implements org.apache.thrift.TBase<getAllNotFinishGrowUserByHours_result, getAllNotFinishGrowUserByHours_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllNotFinishGrowUserByHours_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllNotFinishGrowUserByHours_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllNotFinishGrowUserByHours_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllNotFinishGrowUserByHours_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllNotFinishGrowUserByHours_result.class, metaDataMap);
    }

    public getAllNotFinishGrowUserByHours_result() {
    }

    public getAllNotFinishGrowUserByHours_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllNotFinishGrowUserByHours_result(getAllNotFinishGrowUserByHours_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public getAllNotFinishGrowUserByHours_result deepCopy() {
      return new getAllNotFinishGrowUserByHours_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public getAllNotFinishGrowUserByHours_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllNotFinishGrowUserByHours_result)
        return this.equals((getAllNotFinishGrowUserByHours_result)that);
      return false;
    }

    public boolean equals(getAllNotFinishGrowUserByHours_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllNotFinishGrowUserByHours_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllNotFinishGrowUserByHours_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllNotFinishGrowUserByHours_resultStandardSchemeFactory implements SchemeFactory {
      public getAllNotFinishGrowUserByHours_resultStandardScheme getScheme() {
        return new getAllNotFinishGrowUserByHours_resultStandardScheme();
      }
    }

    private static class getAllNotFinishGrowUserByHours_resultStandardScheme extends StandardScheme<getAllNotFinishGrowUserByHours_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllNotFinishGrowUserByHours_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllNotFinishGrowUserByHours_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllNotFinishGrowUserByHours_resultTupleSchemeFactory implements SchemeFactory {
      public getAllNotFinishGrowUserByHours_resultTupleScheme getScheme() {
        return new getAllNotFinishGrowUserByHours_resultTupleScheme();
      }
    }

    private static class getAllNotFinishGrowUserByHours_resultTupleScheme extends TupleScheme<getAllNotFinishGrowUserByHours_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllNotFinishGrowUserByHours_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllNotFinishGrowUserByHours_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listAllNotUseGiveFlower_args implements org.apache.thrift.TBase<listAllNotUseGiveFlower_args, listAllNotUseGiveFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<listAllNotUseGiveFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAllNotUseGiveFlower_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listAllNotUseGiveFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listAllNotUseGiveFlower_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAllNotUseGiveFlower_args.class, metaDataMap);
    }

    public listAllNotUseGiveFlower_args() {
    }

    public listAllNotUseGiveFlower_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAllNotUseGiveFlower_args(listAllNotUseGiveFlower_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public listAllNotUseGiveFlower_args deepCopy() {
      return new listAllNotUseGiveFlower_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public listAllNotUseGiveFlower_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listAllNotUseGiveFlower_args)
        return this.equals((listAllNotUseGiveFlower_args)that);
      return false;
    }

    public boolean equals(listAllNotUseGiveFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listAllNotUseGiveFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listAllNotUseGiveFlower_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listAllNotUseGiveFlower_argsStandardSchemeFactory implements SchemeFactory {
      public listAllNotUseGiveFlower_argsStandardScheme getScheme() {
        return new listAllNotUseGiveFlower_argsStandardScheme();
      }
    }

    private static class listAllNotUseGiveFlower_argsStandardScheme extends StandardScheme<listAllNotUseGiveFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listAllNotUseGiveFlower_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listAllNotUseGiveFlower_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listAllNotUseGiveFlower_argsTupleSchemeFactory implements SchemeFactory {
      public listAllNotUseGiveFlower_argsTupleScheme getScheme() {
        return new listAllNotUseGiveFlower_argsTupleScheme();
      }
    }

    private static class listAllNotUseGiveFlower_argsTupleScheme extends TupleScheme<listAllNotUseGiveFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listAllNotUseGiveFlower_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listAllNotUseGiveFlower_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class listAllNotUseGiveFlower_result implements org.apache.thrift.TBase<listAllNotUseGiveFlower_result, listAllNotUseGiveFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<listAllNotUseGiveFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAllNotUseGiveFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listAllNotUseGiveFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listAllNotUseGiveFlower_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAllNotUseGiveFlower_result.class, metaDataMap);
    }

    public listAllNotUseGiveFlower_result() {
    }

    public listAllNotUseGiveFlower_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAllNotUseGiveFlower_result(listAllNotUseGiveFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public listAllNotUseGiveFlower_result deepCopy() {
      return new listAllNotUseGiveFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public listAllNotUseGiveFlower_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listAllNotUseGiveFlower_result)
        return this.equals((listAllNotUseGiveFlower_result)that);
      return false;
    }

    public boolean equals(listAllNotUseGiveFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listAllNotUseGiveFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listAllNotUseGiveFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listAllNotUseGiveFlower_resultStandardSchemeFactory implements SchemeFactory {
      public listAllNotUseGiveFlower_resultStandardScheme getScheme() {
        return new listAllNotUseGiveFlower_resultStandardScheme();
      }
    }

    private static class listAllNotUseGiveFlower_resultStandardScheme extends StandardScheme<listAllNotUseGiveFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listAllNotUseGiveFlower_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listAllNotUseGiveFlower_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listAllNotUseGiveFlower_resultTupleSchemeFactory implements SchemeFactory {
      public listAllNotUseGiveFlower_resultTupleScheme getScheme() {
        return new listAllNotUseGiveFlower_resultTupleScheme();
      }
    }

    private static class listAllNotUseGiveFlower_resultTupleScheme extends TupleScheme<listAllNotUseGiveFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listAllNotUseGiveFlower_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listAllNotUseGiveFlower_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class growGiveFlower_args implements org.apache.thrift.TBase<growGiveFlower_args, growGiveFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<growGiveFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("growGiveFlower_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField GIVE_UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("giveUids", org.apache.thrift.protocol.TType.LIST, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new growGiveFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new growGiveFlower_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public List<Long> giveUids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      GIVE_UIDS((short)-3, "giveUids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // GIVE_UIDS
            return GIVE_UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GIVE_UIDS, new org.apache.thrift.meta_data.FieldMetaData("giveUids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(growGiveFlower_args.class, metaDataMap);
    }

    public growGiveFlower_args() {
    }

    public growGiveFlower_args(
      String transNo,
      long uid,
      List<Long> giveUids)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.giveUids = giveUids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public growGiveFlower_args(growGiveFlower_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      if (other.isSetGiveUids()) {
        List<Long> __this__giveUids = new ArrayList<Long>(other.giveUids);
        this.giveUids = __this__giveUids;
      }
    }

    public growGiveFlower_args deepCopy() {
      return new growGiveFlower_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      this.giveUids = null;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public growGiveFlower_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public growGiveFlower_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getGiveUidsSize() {
      return (this.giveUids == null) ? 0 : this.giveUids.size();
    }

    public java.util.Iterator<Long> getGiveUidsIterator() {
      return (this.giveUids == null) ? null : this.giveUids.iterator();
    }

    public void addToGiveUids(long elem) {
      if (this.giveUids == null) {
        this.giveUids = new ArrayList<Long>();
      }
      this.giveUids.add(elem);
    }

    public List<Long> getGiveUids() {
      return this.giveUids;
    }

    public growGiveFlower_args setGiveUids(List<Long> giveUids) {
      this.giveUids = giveUids;
      return this;
    }

    public void unsetGiveUids() {
      this.giveUids = null;
    }

    /** Returns true if field giveUids is set (has been assigned a value) and false otherwise */
    public boolean isSetGiveUids() {
      return this.giveUids != null;
    }

    public void setGiveUidsIsSet(boolean value) {
      if (!value) {
        this.giveUids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case GIVE_UIDS:
        if (value == null) {
          unsetGiveUids();
        } else {
          setGiveUids((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case GIVE_UIDS:
        return getGiveUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case GIVE_UIDS:
        return isSetGiveUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof growGiveFlower_args)
        return this.equals((growGiveFlower_args)that);
      return false;
    }

    public boolean equals(growGiveFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_giveUids = true && this.isSetGiveUids();
      boolean that_present_giveUids = true && that.isSetGiveUids();
      if (this_present_giveUids || that_present_giveUids) {
        if (!(this_present_giveUids && that_present_giveUids))
          return false;
        if (!this.giveUids.equals(that.giveUids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(growGiveFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGiveUids()).compareTo(other.isSetGiveUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiveUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveUids, other.giveUids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("growGiveFlower_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("giveUids:");
      if (this.giveUids == null) {
        sb.append("null");
      } else {
        sb.append(this.giveUids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class growGiveFlower_argsStandardSchemeFactory implements SchemeFactory {
      public growGiveFlower_argsStandardScheme getScheme() {
        return new growGiveFlower_argsStandardScheme();
      }
    }

    private static class growGiveFlower_argsStandardScheme extends StandardScheme<growGiveFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, growGiveFlower_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // GIVE_UIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.giveUids = new ArrayList<Long>(_list44.size);
                  for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                  {
                    long _elem46;
                    _elem46 = iprot.readI64();
                    struct.giveUids.add(_elem46);
                  }
                  iprot.readListEnd();
                }
                struct.setGiveUidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, growGiveFlower_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.giveUids != null) {
          oprot.writeFieldBegin(GIVE_UIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.giveUids.size()));
            for (long _iter47 : struct.giveUids)
            {
              oprot.writeI64(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class growGiveFlower_argsTupleSchemeFactory implements SchemeFactory {
      public growGiveFlower_argsTupleScheme getScheme() {
        return new growGiveFlower_argsTupleScheme();
      }
    }

    private static class growGiveFlower_argsTupleScheme extends TupleScheme<growGiveFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, growGiveFlower_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetGiveUids()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetGiveUids()) {
          {
            oprot.writeI32(struct.giveUids.size());
            for (long _iter48 : struct.giveUids)
            {
              oprot.writeI64(_iter48);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, growGiveFlower_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.giveUids = new ArrayList<Long>(_list49.size);
            for (int _i50 = 0; _i50 < _list49.size; ++_i50)
            {
              long _elem51;
              _elem51 = iprot.readI64();
              struct.giveUids.add(_elem51);
            }
          }
          struct.setGiveUidsIsSet(true);
        }
      }
    }

  }

  public static class growGiveFlower_result implements org.apache.thrift.TBase<growGiveFlower_result, growGiveFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<growGiveFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("growGiveFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new growGiveFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new growGiveFlower_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(growGiveFlower_result.class, metaDataMap);
    }

    public growGiveFlower_result() {
    }

    public growGiveFlower_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public growGiveFlower_result(growGiveFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public growGiveFlower_result deepCopy() {
      return new growGiveFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public growGiveFlower_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof growGiveFlower_result)
        return this.equals((growGiveFlower_result)that);
      return false;
    }

    public boolean equals(growGiveFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(growGiveFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("growGiveFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class growGiveFlower_resultStandardSchemeFactory implements SchemeFactory {
      public growGiveFlower_resultStandardScheme getScheme() {
        return new growGiveFlower_resultStandardScheme();
      }
    }

    private static class growGiveFlower_resultStandardScheme extends StandardScheme<growGiveFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, growGiveFlower_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, growGiveFlower_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class growGiveFlower_resultTupleSchemeFactory implements SchemeFactory {
      public growGiveFlower_resultTupleScheme getScheme() {
        return new growGiveFlower_resultTupleScheme();
      }
    }

    private static class growGiveFlower_resultTupleScheme extends TupleScheme<growGiveFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, growGiveFlower_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, growGiveFlower_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
