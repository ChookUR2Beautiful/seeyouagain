package com.xmniao.service.pay;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.apache.log4j.Logger;
import org.apache.thrift.TException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.umpay.api.util.StringUtil;
import com.xmniao.common.DateUtil;
import com.xmniao.common.MapUtil;
import com.xmniao.common.MapBeanUtil;
import com.xmniao.common.ParamUtil;
import com.xmniao.common.XmnConstants;
import com.xmniao.dao.WalletExpansionExpensesMapper;
import com.xmniao.dao.WalletExpansionMapper;
import com.xmniao.dao.WalletExpansionRecordMapper;
import com.xmniao.entity.WalletExpansion;
import com.xmniao.entity.WalletExpansionExpenses;
import com.xmniao.entity.WalletExpansionRecord;
import com.xmniao.entity.WalletExpenses;
import com.xmniao.exception.ParamBlankException;
import com.xmniao.service.CommonService;
import com.xmniao.service.WalletExService;
import com.xmniao.service.WalletService;
import com.xmniao.thrift.ledger.*;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.thrift.TException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.*;


@Service("WalletExpansionServiceImpl")
public class WalletExpansionServiceImpl implements WalletExpansionService.Iface{
	
	/**
	 * 日志记录
	 */
	private final Logger log = Logger.getLogger(WalletExpansionServiceImpl.class);
	
	@Autowired
	private WalletExpansionMapper walletExpansionMapper;
	
	@Autowired
	private WalletExpansionRecordMapper walletExpansionRecordMapper;
	
	/** 提现公共服务 */
	@Autowired
	private CommonService commonService;
	
	@Autowired
	private WalletService walletService;
	
	@Autowired
	private WalletExService walletExService;
	
	@Autowired
	private SynthesizeServiceImpl syServiceImpl;

	@Autowired
    private WalletExpansionExpensesMapper walletExpansionExpensesMapper;
	
	@Transactional(rollbackFor={Exception.class,FailureException.class})
	@Override
	public Map<String,String> updateWalletExpansion(Map<String,String> param)throws FailureException, TException{
		log.info("【开始执行更改扩展钱包接口】  param="+param);
		Map<String,String> map= ParamUtil.getParamMap(param,"type","option","amount");
		try {
			ParamUtil.checkMustParam(map);
			WalletExpansion wallet=walletService.getWalletExpansion(param);
			if(wallet==null){
				wallet=walletService.addWalletExpansion(param);
			}
			return updateWallet(param, wallet);
		} catch (ParamBlankException e) {
			log.info("调用更新扩展钱包余额接口参数不匹配",e);
			return ParamUtil.failMap(e.getMessage());
		}catch(Exception e){
			log.error("修改扩展钱包出现异常",e);
			throw new FailureException();
		}
	}
	
	/**
	 * 
	 * 方法描述：修改钱包操作
	 * 创建人：jianming  
	 * 创建时间：2017年4月24日 下午4:27:39   
	 * @param param
	 * @param wallet
	 * @return
	 */
	private Map<String, String> updateWallet(Map<String, String> param,
			WalletExpansion wallet) {
		Map<String, String> signMap = wallet.toSignMap();
		String sign = commonService.WalletExpansionSign(signMap);
		if(!sign.equals(wallet.getSign())){
			return ParamUtil.failMap("签名不正确");
		}
		if(wallet.getIsFreeze().intValue()==1){
			return ParamUtil.failMap("钱包已被冻结,不能修改!");
		}
		Integer option = Integer.valueOf(param.get("option"));
		WalletExpansionRecord expansionRecord = new WalletExpansionRecord();
		expansionRecord.setWalletExpansionId(wallet.getId());
		expansionRecord.setQamount(wallet.getAmount());
		expansionRecord.setCreateTime(new Date());
		BigDecimal amount= new BigDecimal(param.get("amount")).setScale(2);
		switch (option) {
		case 0:
			//添加
			expansionRecord.setType(Byte.valueOf("1"));
			wallet.setAmount(wallet.getAmount().add(amount));
			break;
		case 1:
			//减少
			expansionRecord.setType(Byte.valueOf("2"));
			if(wallet.getAmount().compareTo(amount)<0){
				return ParamUtil.failMap("金额不足");
			}
			amount=amount.multiply(BigDecimal.valueOf(-1));
			wallet.setAmount(wallet.getAmount().add(amount));
			break;
		default:
			return ParamUtil.failMap("option参数不正确");
		}
		String recordType = param.get("recordType");
		if(StringUtils.isNotBlank(recordType)){
			expansionRecord.setType(new Byte(recordType));
			if(expansionRecord.getType().intValue()==XmnConstants.EX_RECORD_TYPE_3||expansionRecord.getType().intValue()==XmnConstants.EX_RECORD_TYPE_4){
				wallet.setTransfer(wallet.getTransfer().add(amount.abs()));
			}
		}
		expansionRecord.setHamount(wallet.getAmount());
		expansionRecord.setRemark(param.get("remark"));
		expansionRecord.setSource(param.get("source"));
		expansionRecord.setAmount(amount);
		Map<String, String> signMap2 = wallet.toSignMap();
		String sign2 = commonService.WalletExpansionSign(signMap2);
		wallet.setOldSign(wallet.getSign());
		wallet.setSign(sign2);
		wallet.setAmount(amount);
		wallet.setModifyTime(new Date());
		int resultInt=walletExpansionMapper.updateAmountById(wallet);
		if(resultInt>0){
			int insert = walletExpansionRecordMapper.insert(expansionRecord);
			if(insert<=0){
				throw new RuntimeException("操作失败");
			}
			log.info("【执行更改钱包接口完毕操作成功】");
			return ParamUtil.successMap("操作成功");
		}else{
			log.info("【执行更改钱包接口完毕操作失败】");
			return ParamUtil.failMap("操作失败");
		}
	}
	
	@Transactional(rollbackFor={Exception.class,FailureException.class})
	@Override
	public ResponseData withdrawalsExpansion(Map<String, String> param) throws FailureException, TException {
		log.info("【开始调用扩展钱包转入到普通钱包操作】 param="+param);
		String commision= param.get("commision");
		if(StringUtils.isBlank(param.get("type"))){
			return ParamUtil.fail("type不能为空");
		}
		try {
			WalletExpansion wallet=walletService.getWalletExpansion(param);
			if(wallet==null){
				return ParamUtil.fail("钱包不存在");
			}
			if(XmnConstants.FORBIDTRANSFER_1.equals(wallet.getForbidTransfer())){
				return ParamUtil.fail("该钱包类型不能转出");
			}
			Map<String, String> signMap = wallet.toSignMap();
			String sign = commonService.WalletExpansionSign(signMap);
			if(!sign.equals(wallet.getSign())){
				return ParamUtil.fail("签名不正确");
			}
			if(wallet.getIsFreeze().intValue()==1){
				return ParamUtil.fail("钱包已被冻结,不能修改!");
			}
			BigDecimal newCommision;
			BigDecimal  rate=	walletExService.withdrawalsExpansion(param);
			Map<String,String> walletMap = new HashMap<>();
			walletMap.put("uId", param.get("uid"));
			walletMap.put("userType", param.get("typeId"));
			walletMap.put("option", "0");
			walletMap.put("rType", XmnConstants.getExpansionType2rType(wallet.getType().intValue()).toString());
			walletMap.put("expenses", rate.toString());
			walletMap.put("orderId", UUID.randomUUID().toString());
			if(StringUtils.isNotBlank(commision)){
				BigDecimal commision1 = new BigDecimal(commision);
				newCommision = commision1.subtract(rate);
				walletMap.put("commision", newCommision.toString());
			}else{
				newCommision=new BigDecimal(param.get("zbalance"));
				walletMap.put("zbalance", param.get("zbalance"));
			}
			Map<String, String> resMap = syServiceImpl.updateWalletAmount(walletMap);
			if(!"0".equals(resMap.get("state"))){
				log.info("会员钱包更新失败："+resMap+"\r\n"+param);
				throw new FailureException(1,resMap.get("msg"));
			}
			Map<String,String> resultMap = new HashMap<>();
			resultMap.put("amount", param.get("commision")==null?param.get("zbalance"):param.get("commision"));
			resultMap.put("rate", rate.toString());
			resultMap.put("amountCount", newCommision.toString());
			return ParamUtil.success("操作成功", resultMap);
		} catch (ParamBlankException e) {
			log.info("调用扩展钱包转入到普通钱包接口参数不匹配",e);
			return ParamUtil.fail(e.getMessage());
		}catch(Exception e){
			log.error("修改扩展钱包转入到普通钱包出现异常",e);
			throw new FailureException();
		}
	}

	@Override
	public Map<String, String> getExpansionExpense(Map<String, String> param) throws FailureException, TException {
		log.info("【开始调用扩展钱包获取手续费操作】 param="+param);
		Map<String, String> hashMap = new HashMap<>();
		hashMap.put("type", param.get("type"));
		hashMap.put("commision", param.get("commision"));
		try {
			ParamUtil.checkMustParam(hashMap);
			BigDecimal commision =new BigDecimal(hashMap.get("commision"));
			WalletExpenses expansionExpense = walletExService.getExpansionExpense(commision, hashMap.get("type"));
			Map<String, String> resultMap = ParamUtil.pojoToResultMap(expansionExpense, "rateType","rate","rateSum");
			return resultMap;
		} catch (ParamBlankException e) {
			log.info("调用查询手续费参数异常",e);
			return ParamUtil.failMap(e.getMessage());
		}catch (Exception e) {
			log.info("调用查询手续费出现异常",e);
			throw new FailureException();
		}
	}

	@Override
	public ResponsePageList getExpansion(Map<String, String> param) throws FailureException, TException {
		log.info("【开始调用扩展钱包获取钱包信息操作】 param="+param);
		ResponsePageList pageList = new ResponsePageList();
		try {
			List<WalletExpansion> walletExpansion = walletService.getWalletExpansionList(param);
			List<Map<String,String>> resultList=new LinkedList<>();
			for (WalletExpansion wa : walletExpansion) {
				Map<String, String> pojoToResultMap = ParamUtil.pojoToResultMap(wa,"type","amount","transfer","isFreeze","forbidTransfer");
				if(wa.getWalletExpenses()!=null){
					pojoToResultMap.put("rateType", wa.getWalletExpenses().getRateType()+"");
					pojoToResultMap.put("rate", wa.getWalletExpenses().getRate()+"");
				}
				resultList.add(pojoToResultMap);
			}
			ResponseData success = ParamUtil.success("操作成功", null);
			pageList.setDataInfo(success);
			pageList.setPageList(resultList);
			return pageList;
		} catch (ParamBlankException e) {
			log.info("调用查询扩展钱包余额参数异常",e);
			ResponseData fail = ParamUtil.fail(e.getMessage());
			pageList.setDataInfo(fail);
			return pageList;
		}catch(Exception e){
			log.error("调用查询扩展钱包余额出现异常",e);
			ResponseData error = ParamUtil.error();
			pageList.setDataInfo(error);
			return pageList;
		}
	}

	@Override
	public ResponsePageList getExpansionRecord(Map<String, String> param) throws FailureException, TException {
		log.info("【开始调用扩展钱包获取钱包操作记录】 param="+param);
		ResponsePageList pageList = new ResponsePageList();
		try {
			List<WalletExpansionRecord>  records = walletService.getWalletExpansionRecordList(param);
			
			List<Map<String,String>> resultList=new LinkedList<>();
			for (WalletExpansionRecord r : records) {
				Map<String, String> map = ParamUtil.pojoToResultMap(r,"type","remark","source","amount","expansionType");
				map.put("createTime", DateUtil.formatDate(r.getCreateTime(), DateUtil.Y_M_D_HMS));
				resultList.add(map);
			}
			ResponseData success = ParamUtil.success("操作成功", null);
			pageList.setDataInfo(success);
			pageList.setPageList(resultList);
			return pageList;
		}  catch (ParamBlankException e) {
			log.info("调用查询扩展钱包操作记录参数异常",e);
			ResponseData fail = ParamUtil.fail(e.getMessage());
			pageList.setDataInfo(fail);
			return pageList;
		}catch (Exception e) {
			log.error("调用查询扩展钱包操作记录出现异常",e);
			ResponseData error = ParamUtil.error();
			pageList.setDataInfo(error);
			return pageList;
		}
	}
	
	@Transactional(rollbackFor={Exception.class,FailureException.class})
	@Override
	public DataResponse updateExpansionAmount(Map<String, String> param) throws FailureException, TException {
		Map<String,String> map= ParamUtil.getParamMap(param,"option","amount");
		String[] types = StringUtil.isNotEmpty(param.get("type"))?param.get("type").split(","):null;
		String option= map.get("option");
		BigDecimal amount = new BigDecimal(map.get("amount"));
		try {
			ParamUtil.checkMustParam(map);
			Map<String, Object> mapParam = MapUtil.String2Object(param);
			mapParam.put("type", types);
			walletService.checkWalletSelectParam(MapUtil.Object2String(mapParam));
			List<WalletExpansion> walletExpansionList = walletExpansionMapper.getWalletExpansionList(mapParam);
			switch (option) {
			case "1":  //扣除余额
				//计算所有钱包余额是否足够扣除金额
				List<WalletExpansion> newList = operationAmount(walletExpansionList,amount);
				if(newList.isEmpty()){
					return ParamUtil.failDataResponse("钱包为空");
				}
				Map<String, String> paramMap = ParamUtil.getParamMap(param, "option","remark","source");
				updateWalletList(newList,amount,paramMap);
				break;
			default:
				return ParamUtil.failDataResponse("option格式有误");
			}
			return ParamUtil.successDataResponse("操作成功");
		} catch (ParamBlankException e) {
			log.info("调用批量修改扩展钱包时参数不正常",e);
			return ParamUtil.failDataResponse(e.getMessage());
		}catch (Exception e){
			log.error("调用批量修改扩展钱包时出现异常",e);
			throw new FailureException(ParamUtil.ERROR_STATE,"操作失败");
		}
	}
	
	/**
	 * 
	 * 方法描述：递归修改钱包余额
	 * 创建人：jianming  
	 * 创建时间：2017年4月24日 下午4:11:52   
	 * @param newList
	 * @param amount 
	 * @param param 
	 */
	private void updateWalletList(List<WalletExpansion> newList, BigDecimal amount, Map<String, String> param) {
		WalletExpansion walletExpansion = newList.get(0);
		BigDecimal amount2 = walletExpansion.getAmount();
		if(amount2.compareTo(amount)<0){
			//金额不足扣
			param.put("amount", amount2+"");
			Map<String, String> updateWallet = updateWallet(param,walletExpansion);
			if(!"0".equals(updateWallet.get("state"))){
				throw new RuntimeException("操作失败");
			}
			BigDecimal subtract = amount.subtract(amount2);
			newList.remove(0);
			updateWalletList(newList,subtract,param);
			
		}else{
			//金额足够
			param.put("amount", amount+"");
			Map<String, String> updateWallet = updateWallet(param,walletExpansion);
			if(!"0".equals(updateWallet.get("state"))){
				throw new RuntimeException("操作失败");
			}
		}
		
	}

	/**
	 * 
	 * 方法描述：计算金额是否足够扣除,并返回可扣除的钱包
	 * 创建人：jianming  
	 * 创建时间：2017年4月24日 下午3:47:27   
	 * @param walletExpansionList
	 * @param amount 
	 * @return
	 * @throws ParamBlankException 
	 */
	private List<WalletExpansion> operationAmount(List<WalletExpansion> walletExpansionList, BigDecimal amount) throws ParamBlankException {
		List<WalletExpansion> list=new ArrayList<>(); 
		BigDecimal sum=BigDecimal.valueOf(0);
		for (WalletExpansion walletExpansion : walletExpansionList) {
			if(walletExpansion.getAmount().compareTo(BigDecimal.valueOf(0))>0&&walletExpansion.getIsFreeze()==0&&walletExpansion.getForbidTransfer()==0){
				list.add(walletExpansion);
				sum=sum.add(walletExpansion.getAmount());
			}
		}
		if(sum.compareTo(amount)<0){
			throw new ParamBlankException("金额不足");
		}
		return list;
	}
	

    /**
     * 查询拓展钱包体现手续费
     *
     * @return
     * @throws FailureException
     * @throws TException
     */
    @Override
    public List<Map<String, String>> getExpansionExpenseRateList() throws FailureException, TException {
        List<Map<String,String>> rateList = new ArrayList<>();

        // 查询 [拓展金额转出/提现 手续费率设置]
        List<WalletExpansionExpenses> walletExpansionExpensesList = walletExpansionExpensesMapper
                .selectList();
        // 将Bean转成Map
        for (WalletExpansionExpenses expenses : walletExpansionExpensesList) {
            try {
                Map<String, String> rate = MapBeanUtil.convertMap(expenses, "type", "rateType", "rate");
                rateList.add(rate);
            } catch (Exception e) {
                log.error("Bean转换Map出现异常 bean:" + expenses,e);
            }
        }

        return rateList;
    }

    @Override
    public List<Map<String, String>> getExpansionExpenseRate(Map<String, String> paramMap)
            throws FailureException, TException {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public DataResponse updateExpansionExpenseRate(Map<String, String> param) throws FailureException, TException {
        // TODO Auto-generated method stub
        return null;
    }

}
