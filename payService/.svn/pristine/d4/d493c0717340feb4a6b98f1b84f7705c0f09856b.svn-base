package com.xmniao.service.pay.manor;

import com.xmniao.enums.BusinessStatusCodeEnum;
import com.xmniao.enums.ResultCodeEnum;
import com.xmniao.exception.CustomException;
import com.xmniao.service.PropsService;
import com.xmniao.thrift.manor.ManorPropsThriftService;
import com.xmniao.thrift.manor.Result;
import com.xmniao.thrift.manor.ResultList;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * 黄金家园thrift实现类
 *
 * @author liyuanbo
 * @create 2017-06-05 10:22
 **/
@Service("ManorPropsThriftServiceImpl")
public class ManorPropsThriftServiceImpl implements ManorPropsThriftService.Iface {
    @Autowired
    private PropsService propsService;

    private static Logger logger = Logger.getLogger(ManorPropsThriftServiceImpl.class);
    /**
     * 激活/续租庄园
     */
    public Result activateManor(String transNo, long partenUid, long uid, int type) {
        Result result = new Result();
        try {
            result = propsService.activateManor(transNo, partenUid, uid, type);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("激活/续租庄园失败,请重试.");
        } catch (Exception e) {
            logger.error("激活/续租庄园发生异常,异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("发送红包失败，请重试.");
        }
        return result;
    }

    /**
     * 施肥操作
     */
    public Result ferilizeByUid(String transNo, long uid, int channel, int number) {
        Result result = new Result();
        try {
            result = propsService.ferilizeByUid(transNo, uid, number);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("施肥失败,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"施肥操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("施肥失败，请重试.");
        }
        return result;
    }


    /**
     * 种花操作
     *
     * @param transNo 消费 交易号
     * @param uid     用户ID
     * @param number  数量
     */
    public Result growFlowersByUid(String transNo, long uid, int number) {
        Result result = new Result();
        try {
            result = propsService.growFlowersByUid(transNo, uid, number);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("种花失败,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"种花操作操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常,种花失败，请重试.");
        }
        return result;
    }


    /**
     * 统计用户道具
     *
     * @param uid 操作的用户ID
     */
    public ResultList statisticsUserProps(long uid) {
        ResultList result = new ResultList();
        try {
            result = propsService.statisticsUserProps(uid);
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"统计用户道具操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，统计用户道具,请重试.");
        }
        return result;
    }

    /**
     * 赠送用户道具
     *
     * @param transNo       消费交易号
     * @param uid           操作用户ID
     * @param giveUid       被赠送的用户ID
     * @param givePropsType 赠送的道具类型
     * @param amount        赠送的金额
     */
    public Result giveUserProps(String transNo, long uid, long giveUid, int givePropsType, int amount,int giveTime) {
        Result result = new Result();
        try {
            result = propsService.giveUserProps(transNo, uid, giveUid, givePropsType, amount,giveTime);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("赠送用户道具失败,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"赠送用户道具操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("赠送用户道具失败，请重试.");
        }
        return result;
    }

    /**
     * 获取道具统计数量
     *
     * @param uid 操作的用户ID
     */
    public Result statisticsUserRepertory(long uid) {
        Result result = new Result();
        try {
            result = propsService.statisticsUserRepertory(uid);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("获取用户道具统计数量,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"获取道具统计数量操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，请重试.");
        }
        return result;
    }


    /**
     * 购买道具
     *
     * @param transNo         消费的交易号
     * @param uid             操作的用户ID
     * @param propsType       道具类型
     * @param number          购买的数量
     * @param configSunNumber 配置的阳光比例数量
     */
    public Result buyPropsUsePropsSun(String transNo, long uid, int propsType, int number, int configSunNumber) {
        Result result = new Result();
        try {
            result = propsService.buyPropsUsePropsSun(transNo, uid, propsType, number, configSunNumber);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("购买道具失败,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"购买道具操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，请重试.");
        }
        return result;
    }


    /**
     * 兑换抵用券
     *
     * @param transNo           交易号
     * @param uid               操作用户ID
     * @param voucherType       抵用券类型
     * @param propsType         道具类型
     * @param configPropsNumber 配置比例
     * @param number            兑换数量
     */
    public Result exchangeVoucher(String transNo, long uid, int voucherType, int propsType, int configPropsNumber, int number) {
        Result result = new Result();
        try {
            result = propsService.exchangeVoucher(transNo, uid, voucherType, propsType, configPropsNumber, number);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("购买道具失败,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"兑换抵用券操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，请重试.");
        }
        return result;
    }

    /**
     * 发送红包
     */
    public Result sendPropsRedpackage(String transNo, long uid, int propsType, int type, int number, int amount) {
        Result result = new Result();
        try {
            result = propsService.sendPropsRedpackage(transNo, uid, propsType, type, number, amount);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("发送红包失败,请重试.");
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"发送红包操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("发送红包失败，请重试.");
        }
        return result;
    }


    /**
     * 查询操作用户发送的红包记录
     */
    public ResultList listUserPropsRedpackageHistoryByUid(long uid,int offset ,int limit) {
        ResultList result = new ResultList();
        try {
            result = propsService.listUserPropsRedpackageHistoryByUid(uid,offset,limit);
        } catch (Exception e) {
            logger.error("用户uid:"+uid+"查询操作的红包记录操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("查询发生异常,请重试.");
        }
        return result;
    }

    /**
     * 获取某个具体红包的领取记录
     */
    public ResultList listPropsRedpackageRecordByRedpackageId(long redpackageId) {
        ResultList result = new ResultList();
        try {
            result = propsService.listPropsRedpackageRecordByRedpackageId(redpackageId);
        } catch (Exception e) {
            logger.error("获取某个具体红包的领取记录操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("查询发生异常，请重试");

        }
        return result;

    }


    /**
     * 用户领取红包
     */
    public Result getPropsRedpackage(long redpackageId, long uid) {
        Result result = new Result();
        try {
            propsService.getPropsRedpackage(redpackageId, uid);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("发送红包失败,请重试.");
        } catch (Exception e) {
            logger.error("用户"+uid+"领取红包操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，领取红包失败,请重试.");
        }
        return result;
    }

    /**
     * 领取溢出的阳光红包
     */
    public Result getOverflowSun(String transNo, long uid, int repertory) {
        Result result = new Result();
        try {
            propsService.getOverflowSun(transNo, uid, repertory);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("发送红包失败,请重试.");
        } catch (Exception e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，领取红包失败,请重试.");
        }
        return result;
    }


    /**
     * 兑换现金红包
     *
     * @param transNo            交易号
     * @param uid                用户ID
     * @param number             兑换的现金数量
     * @param configNectarNumber 配置的花蜜数量
     * @param moneyRedpackage    兑换的红包额度
     */
    public Result exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, int moneyRedpackage) {
        Result result = new Result();
        try {

        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("使用花蜜兑换现金红包");
        } catch (Exception e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，使用花蜜兑换现金红包失败,请重试.");
        }
        return result;
    }

    /**
     * 获取用户的阳光数量
     *
     * @param uid 用户ID
     */
    public Result getUserSunTotal(long uid) {
        Result result = new Result();
        try {
            propsService.getUserSunTotal(uid);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("获取用户的阳光数量失败");
        } catch (Exception e) {
            logger.error("用户"+uid+"获取用户的阳光数量操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，获取用户的阳光数量失败,请重试.");
        }
        return result;
    }

    /**
     * 更新花苗状态
     * @param uid
     * @param giveUid
     * @return
     */
    public Result updateUserFlowerUseStatus(long uid,long giveUid){
        Result result = new Result();
        try {
            propsService.updateUserFlowerUseStatus(uid,giveUid);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("更新花苗状态发生异常.");
        } catch (Exception e) {
            logger.error("用户"+uid+"更新花苗状态操作失败，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，更新花苗失败,请重试.");
        }
        return result;
    }

    /**
     * 获取用户被赠送的花苗数量
     * @param uid
     * @return
     */
    public Result getUserGiveFlower(long uid ){
        Result result = new Result();
        try {
            propsService.getUserGiveFlower(uid);
        } catch (CustomException e) {
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setStatusCode(BusinessStatusCodeEnum.FAIL_ERROR_STATUS.getStatus());
            result.setMessage("更新花苗状态发生异常.");
        } catch (Exception e) {
            logger.error("用户"+uid+"获取用户被赠送的花苗数量，发生异常.异常信息如下:"+e);
            result.setCode(ResultCodeEnum.ERROR.status());
            result.setExceptionMessage(e.getMessage());
            result.setStatusCode(BusinessStatusCodeEnum.SYSTEM_ERROR_STATUS.getStatus());
            result.setMessage("系统发生异常，更新花苗失败,请重试.");
        }
        return result;
    }


}
