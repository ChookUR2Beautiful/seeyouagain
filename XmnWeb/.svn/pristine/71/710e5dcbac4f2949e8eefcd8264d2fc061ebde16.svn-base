/**
 * 
 */
package com.xmniao.xmn.core.manor.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xmniao.xmn.core.base.BaseDao;
import com.xmniao.xmn.core.base.BaseService;
import com.xmniao.xmn.core.base.Pageable;
import com.xmniao.xmn.core.manor.dao.ManorFlowerRelationDao;
import com.xmniao.xmn.core.manor.dao.ManorHoneyManageDao;
import com.xmniao.xmn.core.manor.dao.ManorInfoDao;
import com.xmniao.xmn.core.manor.entity.TManorFlowerRelation;
import com.xmniao.xmn.core.manor.entity.TManorHoneyManage;
import com.xmniao.xmn.core.manor.entity.TManorInfo;
import com.xmniao.xmn.core.reward_dividends.dao.BursEarningsRelationDao;
import com.xmniao.xmn.core.reward_dividends.entity.BursEarningsRelation;
import com.xmniao.xmn.core.thrift.client.proxy.ThriftClientProxy;
import com.xmniao.xmn.core.thrift.service.manorService.ResultList;
import com.xmniao.xmn.core.xmnburs.dao.BursDao;
import com.xmniao.xmn.core.xmnburs.entity.Burs;
import com.xmniao.xmn.core.xmnburs.service.BursService;


@Service
public class ManorMemberService extends BaseService<TManorInfo> {

	
	/**
	 * 注入主播(用户)服务
	 */
	@Autowired
	private ManorInfoDao manorInfoDao;
	
	@Autowired
	private BursDao bursDao;
	
	/**
	 * 寻蜜鸟用户Service
	 */
	@Autowired
	private BursService bursService;
	
	/**
	 * 注入获取庄园的服务
	 */
	@Resource(name = "manorPropsThriftServiceClient")
	private ThriftClientProxy manorPropsThriftServiceClient;	
	
	
	@Autowired
	private	ManorHoneyManageDao manorHoneyManageDao;
	
	/**
	 * 注入会员收益关系链DAO
	 */
	@Autowired
	private BursEarningsRelationDao earningsRelationDao;
	
	
	@Autowired
	private ManorFlowerRelationDao manorFlowerRelationDao;

	@SuppressWarnings("rawtypes")
	@Override
	protected BaseDao getBaseDao() {
		// TODO Auto-generated method stub
		return manorInfoDao;
	}

	
	public Pageable<TManorInfo> getManorInfoInfoList(TManorInfo manorInfo) {
		Pageable<TManorInfo> manorInfoInfoList = new Pageable<TManorInfo>(manorInfo);
		
		//通过会员昵称查询
		/*if (manorInfo.getNickname() != null && !"".equals(manorInfo.getNickname())) {
			Burs burs = new Burs();
			String nickname = manorInfo.getNickname();
			burs.setNname(nickname);
			List<Burs> bursList = bursService.getUrsList(burs);
			if (bursList != null && bursList.size() > 0) {
				Integer uid = bursList.get(0).getUid();
				manorInfo.setUid(uid);
			}
		}*/
		
		List<TManorInfo> manorInfoList = manorInfoDao.getManorMemberList(manorInfo);
		
		//通过关系链查找上级
		if (manorInfoList != null && manorInfoList.size() > 0){
			this.initManorInfoList(manorInfoList);
		}
	
		manorInfoInfoList.setContent(manorInfoList);
		manorInfoInfoList.setTotal(manorInfoDao.countManorMember(manorInfo));
		
	    return manorInfoInfoList;
	}
	
	
	private void initManorInfoList(List<TManorInfo> manorInfoList){
		List<Long> uids = new ArrayList<>();  //用户列表　
		List<Integer> superUids = new ArrayList<Integer>();  //推荐人列表
		
		for (TManorInfo ursRrelation: manorInfoList){  
			Integer uid = ursRrelation.getUid();//取下级
			uids.add(uid.longValue());
			//查询出当前用户的的下线(非当前用户的关系链信息) com.xmniao.xmn.core.util.StringUtils.generateUidStr(uid);
			Long juniors=0l;
			BursEarningsRelation bursRelationInfo = new BursEarningsRelation();
			bursRelationInfo.setObjectOriented(9);
			bursRelationInfo.setUid(uid);
			juniors = earningsRelationDao.countJuniorsNum(bursRelationInfo);
			ursRrelation.setLowerLevelNumber(Integer.parseInt(juniors.toString()) );
			
			//推荐人(当前用户关系链)
			if (ursRrelation.getSuperUid() != null)// 推荐人id
				superUids.add(ursRrelation.getSuperUid());
		}
		
		//查询推荐人名称信息
		if (superUids.size() > 0) {
			List<Burs> bursList = bursDao.getUrsListByUids(superUids.toArray());
			for (TManorInfo manorInfo: manorInfoList){
				for (Burs object : bursList) {
					if (manorInfo.getSuperUid() != null && manorInfo.getSuperUid().equals(object.getUid()) ){
						manorInfo.setSuperName(object.getNname());
					}
				}
			}
		}

		try {
			//连接接口进行查询
//			List<Long> uids = new ArrayList<>();
			com.xmniao.xmn.core.thrift.service.manorService.ManorPropsThriftService.Client client = (com.xmniao.xmn.core.thrift.service.manorService.ManorPropsThriftService.Client) (manorPropsThriftServiceClient.getClient());
			log.info("查询获取用户的花蜜和阳光开始");
			ResultList  response = client.getUserSunAndNectar (uids);
			if(response.getCode() != 1){
				log.error("调用获取用户的花蜜和阳光失败");
				throw new RuntimeException("获取用户的花蜜和阳光失败, 错误信息:"+ response.getStatusCode());
			}
			log.info("获取用户的花蜜和阳光结束，返回值：" + response.getStatusCode());
			//接口返回用户的花蜜和阳光
			List<Map<String, String>> sunAndNectarProfitList = response.getValues();
			
			this.getManorSunAndNectarProfitFromMap(manorInfoList, sunAndNectarProfitList);
			
		} catch (Exception e) {
			log.error("获取用户的花蜜和阳光失败", e);
//			throw new ApplicationException("修改指定收益类型提现手续费率异常", e, new Object[] { liveDepositorsTaxes.getType() });
			
		} finally {
			manorPropsThriftServiceClient.returnCon();
		}
		
		
	}
	
	
	public int saveUpdateActivity(TManorInfo manorInfo) throws Exception{
		manorInfo.setUpdateTime(new Date());
		return manorInfoDao.updateByPrimaryKeySelective(manorInfo);
	}
	
	public TManorInfo getManorInfoData(TManorInfo manorInfo) {
		TManorInfo manorInfoInfo = new TManorInfo();
		Integer recordId = manorInfo.getId();
		if (recordId != null) {
			manorInfoInfo = manorInfoDao.selectByPrimaryKey(recordId);
		}

		return manorInfoInfo;
	}
	
	
	public List<TManorInfo> getManorInfoList(TManorInfo manorInfo) {
		return manorInfoDao.getManorMemberList(manorInfo);
	}
	
	public List<TManorFlowerRelation> getManorMemberLowerLevelList(TManorInfo manorInfo) {
		List<TManorFlowerRelation> manorFlowerRelationList = new ArrayList<TManorFlowerRelation>();
		if (manorInfo.getUid() != null){
			List<Integer> uids=new ArrayList<Integer>();
			//取下级
			BursEarningsRelation bursRelationInfo = new BursEarningsRelation();
			bursRelationInfo.setObjectOriented(9);
			bursRelationInfo.setUid(manorInfo.getUid());
			List<BursEarningsRelation> juniorList = earningsRelationDao.getLowerBursEarningsRelationList(earningsRelationDao.getBursEarningsRelationByUid(bursRelationInfo));
	        for (BursEarningsRelation bean: juniorList){  //所有的下级信息
	        	uids.add(bean.getUid());
	        }
		
			//获取用户信息
			if(uids!=null && uids.size()>0){ //获取下级人员信息
				//取用户名称
				List<Burs> bursList = bursDao.getUrsListByUids(uids.toArray());
				//取用户当前贡献的花朵数
				manorFlowerRelationList = manorFlowerRelationDao.getCurrentFlowerRelationCount(uids.toArray());
				//取用户累计贡献的花朵数
				List<TManorFlowerRelation> totalFlowerRelationList = manorFlowerRelationDao.getTotalFlowerRelationCount(uids.toArray());
				
				if (manorFlowerRelationList != null && bursList != null) {
					for (TManorFlowerRelation manorFlowerRelation : manorFlowerRelationList) { // 所有的下级信息
						for (Burs burs : bursList) { // 所有的下级信息
							if ( manorFlowerRelation.getFromUid().equals(burs.getUid()) ){  //用户uid相同
								if (burs.getUname() != null)  //用户名称
									manorFlowerRelation.setFromUname(burs.getNname());
							}
						}
					}
				}
				if (manorFlowerRelationList != null && totalFlowerRelationList != null) {
					for (TManorFlowerRelation manorFlowerRelation : manorFlowerRelationList) { // 所有的下级信息
						for (TManorFlowerRelation totalFlowerRelation : totalFlowerRelationList) { // 所有的下级信息
							if ( manorFlowerRelation.getFromUid().equals(totalFlowerRelation.getFromUid()) ){  //用户uid相同
								if (totalFlowerRelation.getTotalFlowerRelationCount() != null)  //用户名称
									manorFlowerRelation.setTotalFlowerRelationCount(totalFlowerRelation.getTotalFlowerRelationCount());
							}
						}
					}
				}
			}
	    }
		
		return manorFlowerRelationList;
	}
	
	
	/**
	 * 方法描述：阳光花密数量 <br/>
	 * 创建人： Administrator <br/>
	 * 创建时间：2017年6月20日下午3:58:17 <br/>
	 * @param manorInfoList
	 * @param sunAndNectarProfitList
	 * @throws Exception
	 */
	public void getManorSunAndNectarProfitFromMap(List<TManorInfo> manorInfoList, List<Map<String, String>> sunAndNectarProfitList) throws Exception{
		TManorHoneyManage manorHoneyManage = manorHoneyManageDao.getManorHoneyManageData( new TManorHoneyManage());
		
		for (TManorInfo manorInfo: manorInfoList){
			for (Map<String, String> object : sunAndNectarProfitList) {
				Integer uid = new Integer(object.get("uid"));
				if (manorInfo.getUid().equals(uid) ){
					//阳光的总数量
					manorInfo.setSunNumber(new Double(object.get("sunNumber") == null ? "0" : object.get("sunNumber")) );
					//仓库数量
					manorInfo.setRepositoryNumber(new Double(object.get("repositoryNumber") == null ? "0" : object.get("repositoryNumber")));
					//花蜜的总数量
					Double nectarNumber = new Double(object.get("nectarNumber")== null ? "0" : object.get("nectarNumber"));
					//向上取整:Math.ceil()   //只要有小数都+1
					//向下取整:Math.floor()   //不取小数
					Double nectarStoreNumber = Math.floor(nectarNumber/manorHoneyManage.getPotHoney().doubleValue());  //取整
					manorInfo.setNectarStoreNumber(nectarStoreNumber);
					manorInfo.setNectarNumber(nectarNumber % manorHoneyManage.getPotHoney().doubleValue() );//取余余数 
	
		            //总共兑换的红包额度
					BigDecimal money = new BigDecimal(object.get("money")== null ? "0" : object.get("money"));
					money = money.setScale(2, BigDecimal.ROUND_HALF_UP);  
					manorInfo.setMoney(money);
				}
			}
		}
	}
	
	
}
