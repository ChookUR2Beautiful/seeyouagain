<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd"
	default-lazy-init="true">

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:/conf_*.properties" 
	ignore-resource-not-found="true" ignore-unresolvable="true" />
	
	<task:annotation-driven/>
	
	<!-- 数据源配置 -->
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${masterDriver}" />
		<property name="url" value="${masterUrl}" />
		<property name="username" value="${masterUser}" />
		<property name="password" value="${masterPassword}" />
		<!-- 配置过滤 -->
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 检测连接是否有效的SQL -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- <property name="poolPreparedStatements" value="false" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
	</bean>
	
	<!-- 数据源配置 -->
	<bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${slaveDriver}" />
		<property name="url" value="${slaveUrl}" />
		<property name="username" value="${slaveUser}" />
		<property name="password" value="${slavePassword}" />
		<!-- 配置过滤 -->
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 检测连接是否有效的SQL -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- <property name="poolPreparedStatements" value="false" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
	</bean>
	
	<!-- 支付服务数据源配置 -->
	<bean id="payDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${payDriver}" />
		<property name="url" value="${payUrl}" />
		<property name="username" value="${payUser}" />
		<property name="password" value="${payPassword}" />
		<!-- 配置过滤 -->
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 检测连接是否有效的SQL -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- <property name="poolPreparedStatements" value="false" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
	</bean>
	
	<!-- 用户服务数据源配置 -->
	<bean id="bursDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${bursDriver}" />
		<property name="url" value="${bursUrl}" />
		<property name="username" value="${bursUser}" />
		<property name="password" value="${bursPassword}" />
		<!-- 配置过滤 -->
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 检测连接是否有效的SQL -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- <property name="poolPreparedStatements" value="false" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
	</bean>
	
	<!-- 雏鸟云设计服务数据源配置 -->
	<bean id="designerDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${designerDriver}" />
		<property name="url" value="${designerUrl}" />
		<property name="username" value="${designerUser}" />
		<property name="password" value="${designerPassword}" />
		<!-- 配置过滤 -->
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 检测连接是否有效的SQL -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="false" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	
	
	<bean id="dataSource" class="com.xmniao.xmn.core.util.db.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="master" value-ref="masterDataSource"/>
				<entry key="slave" value-ref="slaveDataSource"/>
				<entry key="pay" value-ref="payDataSource"/>
				<entry key="burs" value-ref="bursDataSource"/>
				<entry key="designer" value-ref="designerDataSource"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource"></property>
	</bean>
	
	

	<!-- 配置Mybatis SqlSessionFactoryBean 自动装配映射文件 -->
	<bean id="sessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="plugins">
			<array>
				<bean class="com.xmniao.xmn.core.util.mybatis.interceptor.DataAuthorityInterceptor"></bean>
			</array>
		</property>
		<property name="configLocation">
			<value>classpath:com/xmniao/xmn/resource/config/sql-map-config.xml</value>
		</property>
	</bean>
	
	<!-- 自动 映射DAO层 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xmniao.xmn.core.*.dao.**" />
	</bean>
	

	
    <!-- 配置数据库注解aop -->
    <bean id="manyDataSourceAspect" class="com.xmniao.xmn.core.util.proxy.DataSourceAspect" />
    <aop:config>
        <aop:aspect id="c" ref="manyDataSourceAspect">
            <aop:pointcut id="tx" expression="execution(* com.xmniao.xmn.core.*.dao.*.*(..))"/>
            <aop:before pointcut-ref="tx" method="before"/>
        </aop:aspect>
    </aop:config> 
 

	<!-- 自动注入SERVICE层 -->
	<context:component-scan base-package="com.xmniao">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	

	<bean id="scheduler" class="com.xmniao.xmn.core.base.task.QuartzScheduler" lazy-init="false">
		<constructor-arg name="config" value="com/xmniao/xmn/resource/config/jobs.xml"/>
	 </bean>
	 
	<!-- 事务处理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置线程池 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 线程池维护线程的最少数量 -->
		<property name="corePoolSize" value="5" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="30000" />
		<!-- 线程池维护线程的最大数量 -->
		<property name="maxPoolSize" value="1000" />
		<!-- 线程池所使用的缓冲队列 -->
		<property name="queueCapacity" value="200" />
	</bean>
	
	<!-- redis -->	
	<bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
		<property name="usePool" value="true" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" >
		<property name="connectionFactory" ref="jedisConnFactory"/>
	</bean>

	<import resource="ledger-thrift.xml"/>
	<import resource="mongo.xml"/>
	
	<!-- 加载定时任务的配置 -->
	<import resource="quartz.xml"/>
</beans>	