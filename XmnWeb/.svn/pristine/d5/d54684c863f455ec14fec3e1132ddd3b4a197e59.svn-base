/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift.service.manorService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.xmniao.xmn.core.thrift.service.Result;

public class ManorPropsThriftService {

  public interface Iface {

    public Result activateManor(String transNo, long partenUid, long uid, int type) throws org.apache.thrift.TException;

    public Result ferilizeByUid(String transNo, long uid, long partenUid, int number) throws org.apache.thrift.TException;

    public Result growFlowersByUid(String transNo, long uid, long partenUid, int number) throws org.apache.thrift.TException;

    public ResultList statisticsUserProps(long uid) throws org.apache.thrift.TException;

    public Result giveUserProps(String transNo, long uid, long giveUid, int givePropsType, int giveTime) throws org.apache.thrift.TException;

    public Result statisticsUserRepertory(long uid) throws org.apache.thrift.TException;

    public Result buyPropsUsePropsSun(String transNo, long uid, int propsType, int number, int configSunNumber) throws org.apache.thrift.TException;

    public Result exchangeVoucher(String transNo, long uid, double moneyRedpackageAmount, int propsType, int configPropsNumber, int number) throws org.apache.thrift.TException;

    public Result getOverflowSun(String transNo, long uid) throws org.apache.thrift.TException;

    public Result exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage) throws org.apache.thrift.TException;

    public Result getUserSunTotal(long uid) throws org.apache.thrift.TException;

    public Result sendPropsRedpackage(String transNo, long uid, int propsType, int type, int number, int amount) throws org.apache.thrift.TException;

    public ResultList listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit) throws org.apache.thrift.TException;

    public ResultList listPropsRedpackageRecordByRedpackageId(long redpackageId) throws org.apache.thrift.TException;

    public Result getPropsRedpackage(long redpackageId, long uid) throws org.apache.thrift.TException;

    public Result updateUserFlowerUseStatus(String transNo, long uid, long giveUid) throws org.apache.thrift.TException;

    public Result getUserGiveFlower(long uid) throws org.apache.thrift.TException;

    public ResultList listPropsReport(long uid, int propsType, int offset, int limit) throws org.apache.thrift.TException;

    public ResultList exchangeReport(long uid, int offset, int limit) throws org.apache.thrift.TException;

    public ResultList listUserNectarList(int offset, int limit) throws org.apache.thrift.TException;

    public Result addUserNectar(String transNo, long uid, int number) throws org.apache.thrift.TException;

    public Result overFlowerSunNumber(long uid) throws org.apache.thrift.TException;

    public Result updateUserRepository(long uid, int number) throws org.apache.thrift.TException;

    public ResultList getUserSunAndNectar(List<Long> uids) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void activateManor(String transNo, long partenUid, long uid, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ferilizeByUid(String transNo, long uid, long partenUid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void growFlowersByUid(String transNo, long uid, long partenUid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statisticsUserProps(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void giveUserProps(String transNo, long uid, long giveUid, int givePropsType, int giveTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statisticsUserRepertory(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void buyPropsUsePropsSun(String transNo, long uid, int propsType, int number, int configSunNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exchangeVoucher(String transNo, long uid, double moneyRedpackageAmount, int propsType, int configPropsNumber, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOverflowSun(String transNo, long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserSunTotal(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendPropsRedpackage(String transNo, long uid, int propsType, int type, int number, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listPropsRedpackageRecordByRedpackageId(long redpackageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPropsRedpackage(long redpackageId, long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUserFlowerUseStatus(String transNo, long uid, long giveUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserGiveFlower(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listPropsReport(long uid, int propsType, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exchangeReport(long uid, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listUserNectarList(int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addUserNectar(String transNo, long uid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void overFlowerSunNumber(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUserRepository(long uid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserSunAndNectar(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Result activateManor(String transNo, long partenUid, long uid, int type) throws org.apache.thrift.TException
    {
      send_activateManor(transNo, partenUid, uid, type);
      return recv_activateManor();
    }

    public void send_activateManor(String transNo, long partenUid, long uid, int type) throws org.apache.thrift.TException
    {
      activateManor_args args = new activateManor_args();
      args.setTransNo(transNo);
      args.setPartenUid(partenUid);
      args.setUid(uid);
      args.setType(type);
      sendBase("activateManor", args);
    }

    public Result recv_activateManor() throws org.apache.thrift.TException
    {
      activateManor_result result = new activateManor_result();
      receiveBase(result, "activateManor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateManor failed: unknown result");
    }

    public Result ferilizeByUid(String transNo, long uid, long partenUid, int number) throws org.apache.thrift.TException
    {
      send_ferilizeByUid(transNo, uid, partenUid, number);
      return recv_ferilizeByUid();
    }

    public void send_ferilizeByUid(String transNo, long uid, long partenUid, int number) throws org.apache.thrift.TException
    {
      ferilizeByUid_args args = new ferilizeByUid_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setPartenUid(partenUid);
      args.setNumber(number);
      sendBase("ferilizeByUid", args);
    }

    public Result recv_ferilizeByUid() throws org.apache.thrift.TException
    {
      ferilizeByUid_result result = new ferilizeByUid_result();
      receiveBase(result, "ferilizeByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ferilizeByUid failed: unknown result");
    }

    public Result growFlowersByUid(String transNo, long uid, long partenUid, int number) throws org.apache.thrift.TException
    {
      send_growFlowersByUid(transNo, uid, partenUid, number);
      return recv_growFlowersByUid();
    }

    public void send_growFlowersByUid(String transNo, long uid, long partenUid, int number) throws org.apache.thrift.TException
    {
      growFlowersByUid_args args = new growFlowersByUid_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setPartenUid(partenUid);
      args.setNumber(number);
      sendBase("growFlowersByUid", args);
    }

    public Result recv_growFlowersByUid() throws org.apache.thrift.TException
    {
      growFlowersByUid_result result = new growFlowersByUid_result();
      receiveBase(result, "growFlowersByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "growFlowersByUid failed: unknown result");
    }

    public ResultList statisticsUserProps(long uid) throws org.apache.thrift.TException
    {
      send_statisticsUserProps(uid);
      return recv_statisticsUserProps();
    }

    public void send_statisticsUserProps(long uid) throws org.apache.thrift.TException
    {
      statisticsUserProps_args args = new statisticsUserProps_args();
      args.setUid(uid);
      sendBase("statisticsUserProps", args);
    }

    public ResultList recv_statisticsUserProps() throws org.apache.thrift.TException
    {
      statisticsUserProps_result result = new statisticsUserProps_result();
      receiveBase(result, "statisticsUserProps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statisticsUserProps failed: unknown result");
    }

    public Result giveUserProps(String transNo, long uid, long giveUid, int givePropsType, int giveTime) throws org.apache.thrift.TException
    {
      send_giveUserProps(transNo, uid, giveUid, givePropsType, giveTime);
      return recv_giveUserProps();
    }

    public void send_giveUserProps(String transNo, long uid, long giveUid, int givePropsType, int giveTime) throws org.apache.thrift.TException
    {
      giveUserProps_args args = new giveUserProps_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setGiveUid(giveUid);
      args.setGivePropsType(givePropsType);
      args.setGiveTime(giveTime);
      sendBase("giveUserProps", args);
    }

    public Result recv_giveUserProps() throws org.apache.thrift.TException
    {
      giveUserProps_result result = new giveUserProps_result();
      receiveBase(result, "giveUserProps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "giveUserProps failed: unknown result");
    }

    public Result statisticsUserRepertory(long uid) throws org.apache.thrift.TException
    {
      send_statisticsUserRepertory(uid);
      return recv_statisticsUserRepertory();
    }

    public void send_statisticsUserRepertory(long uid) throws org.apache.thrift.TException
    {
      statisticsUserRepertory_args args = new statisticsUserRepertory_args();
      args.setUid(uid);
      sendBase("statisticsUserRepertory", args);
    }

    public Result recv_statisticsUserRepertory() throws org.apache.thrift.TException
    {
      statisticsUserRepertory_result result = new statisticsUserRepertory_result();
      receiveBase(result, "statisticsUserRepertory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statisticsUserRepertory failed: unknown result");
    }

    public Result buyPropsUsePropsSun(String transNo, long uid, int propsType, int number, int configSunNumber) throws org.apache.thrift.TException
    {
      send_buyPropsUsePropsSun(transNo, uid, propsType, number, configSunNumber);
      return recv_buyPropsUsePropsSun();
    }

    public void send_buyPropsUsePropsSun(String transNo, long uid, int propsType, int number, int configSunNumber) throws org.apache.thrift.TException
    {
      buyPropsUsePropsSun_args args = new buyPropsUsePropsSun_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setPropsType(propsType);
      args.setNumber(number);
      args.setConfigSunNumber(configSunNumber);
      sendBase("buyPropsUsePropsSun", args);
    }

    public Result recv_buyPropsUsePropsSun() throws org.apache.thrift.TException
    {
      buyPropsUsePropsSun_result result = new buyPropsUsePropsSun_result();
      receiveBase(result, "buyPropsUsePropsSun");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "buyPropsUsePropsSun failed: unknown result");
    }

    public Result exchangeVoucher(String transNo, long uid, double moneyRedpackageAmount, int propsType, int configPropsNumber, int number) throws org.apache.thrift.TException
    {
      send_exchangeVoucher(transNo, uid, moneyRedpackageAmount, propsType, configPropsNumber, number);
      return recv_exchangeVoucher();
    }

    public void send_exchangeVoucher(String transNo, long uid, double moneyRedpackageAmount, int propsType, int configPropsNumber, int number) throws org.apache.thrift.TException
    {
      exchangeVoucher_args args = new exchangeVoucher_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setMoneyRedpackageAmount(moneyRedpackageAmount);
      args.setPropsType(propsType);
      args.setConfigPropsNumber(configPropsNumber);
      args.setNumber(number);
      sendBase("exchangeVoucher", args);
    }

    public Result recv_exchangeVoucher() throws org.apache.thrift.TException
    {
      exchangeVoucher_result result = new exchangeVoucher_result();
      receiveBase(result, "exchangeVoucher");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exchangeVoucher failed: unknown result");
    }

    public Result getOverflowSun(String transNo, long uid) throws org.apache.thrift.TException
    {
      send_getOverflowSun(transNo, uid);
      return recv_getOverflowSun();
    }

    public void send_getOverflowSun(String transNo, long uid) throws org.apache.thrift.TException
    {
      getOverflowSun_args args = new getOverflowSun_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      sendBase("getOverflowSun", args);
    }

    public Result recv_getOverflowSun() throws org.apache.thrift.TException
    {
      getOverflowSun_result result = new getOverflowSun_result();
      receiveBase(result, "getOverflowSun");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverflowSun failed: unknown result");
    }

    public Result exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage) throws org.apache.thrift.TException
    {
      send_exchangeMoneyRedpackage(transNo, uid, number, configNectarNumber, moneyRedpackage);
      return recv_exchangeMoneyRedpackage();
    }

    public void send_exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage) throws org.apache.thrift.TException
    {
      exchangeMoneyRedpackage_args args = new exchangeMoneyRedpackage_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setNumber(number);
      args.setConfigNectarNumber(configNectarNumber);
      args.setMoneyRedpackage(moneyRedpackage);
      sendBase("exchangeMoneyRedpackage", args);
    }

    public Result recv_exchangeMoneyRedpackage() throws org.apache.thrift.TException
    {
      exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
      receiveBase(result, "exchangeMoneyRedpackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exchangeMoneyRedpackage failed: unknown result");
    }

    public Result getUserSunTotal(long uid) throws org.apache.thrift.TException
    {
      send_getUserSunTotal(uid);
      return recv_getUserSunTotal();
    }

    public void send_getUserSunTotal(long uid) throws org.apache.thrift.TException
    {
      getUserSunTotal_args args = new getUserSunTotal_args();
      args.setUid(uid);
      sendBase("getUserSunTotal", args);
    }

    public Result recv_getUserSunTotal() throws org.apache.thrift.TException
    {
      getUserSunTotal_result result = new getUserSunTotal_result();
      receiveBase(result, "getUserSunTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserSunTotal failed: unknown result");
    }

    public Result sendPropsRedpackage(String transNo, long uid, int propsType, int type, int number, int amount) throws org.apache.thrift.TException
    {
      send_sendPropsRedpackage(transNo, uid, propsType, type, number, amount);
      return recv_sendPropsRedpackage();
    }

    public void send_sendPropsRedpackage(String transNo, long uid, int propsType, int type, int number, int amount) throws org.apache.thrift.TException
    {
      sendPropsRedpackage_args args = new sendPropsRedpackage_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setPropsType(propsType);
      args.setType(type);
      args.setNumber(number);
      args.setAmount(amount);
      sendBase("sendPropsRedpackage", args);
    }

    public Result recv_sendPropsRedpackage() throws org.apache.thrift.TException
    {
      sendPropsRedpackage_result result = new sendPropsRedpackage_result();
      receiveBase(result, "sendPropsRedpackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendPropsRedpackage failed: unknown result");
    }

    public ResultList listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit) throws org.apache.thrift.TException
    {
      send_listUserPropsRedpackageHistoryByUid(uid, offset, limit);
      return recv_listUserPropsRedpackageHistoryByUid();
    }

    public void send_listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit) throws org.apache.thrift.TException
    {
      listUserPropsRedpackageHistoryByUid_args args = new listUserPropsRedpackageHistoryByUid_args();
      args.setUid(uid);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("listUserPropsRedpackageHistoryByUid", args);
    }

    public ResultList recv_listUserPropsRedpackageHistoryByUid() throws org.apache.thrift.TException
    {
      listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
      receiveBase(result, "listUserPropsRedpackageHistoryByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserPropsRedpackageHistoryByUid failed: unknown result");
    }

    public ResultList listPropsRedpackageRecordByRedpackageId(long redpackageId) throws org.apache.thrift.TException
    {
      send_listPropsRedpackageRecordByRedpackageId(redpackageId);
      return recv_listPropsRedpackageRecordByRedpackageId();
    }

    public void send_listPropsRedpackageRecordByRedpackageId(long redpackageId) throws org.apache.thrift.TException
    {
      listPropsRedpackageRecordByRedpackageId_args args = new listPropsRedpackageRecordByRedpackageId_args();
      args.setRedpackageId(redpackageId);
      sendBase("listPropsRedpackageRecordByRedpackageId", args);
    }

    public ResultList recv_listPropsRedpackageRecordByRedpackageId() throws org.apache.thrift.TException
    {
      listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
      receiveBase(result, "listPropsRedpackageRecordByRedpackageId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPropsRedpackageRecordByRedpackageId failed: unknown result");
    }

    public Result getPropsRedpackage(long redpackageId, long uid) throws org.apache.thrift.TException
    {
      send_getPropsRedpackage(redpackageId, uid);
      return recv_getPropsRedpackage();
    }

    public void send_getPropsRedpackage(long redpackageId, long uid) throws org.apache.thrift.TException
    {
      getPropsRedpackage_args args = new getPropsRedpackage_args();
      args.setRedpackageId(redpackageId);
      args.setUid(uid);
      sendBase("getPropsRedpackage", args);
    }

    public Result recv_getPropsRedpackage() throws org.apache.thrift.TException
    {
      getPropsRedpackage_result result = new getPropsRedpackage_result();
      receiveBase(result, "getPropsRedpackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPropsRedpackage failed: unknown result");
    }

    public Result updateUserFlowerUseStatus(String transNo, long uid, long giveUid) throws org.apache.thrift.TException
    {
      send_updateUserFlowerUseStatus(transNo, uid, giveUid);
      return recv_updateUserFlowerUseStatus();
    }

    public void send_updateUserFlowerUseStatus(String transNo, long uid, long giveUid) throws org.apache.thrift.TException
    {
      updateUserFlowerUseStatus_args args = new updateUserFlowerUseStatus_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setGiveUid(giveUid);
      sendBase("updateUserFlowerUseStatus", args);
    }

    public Result recv_updateUserFlowerUseStatus() throws org.apache.thrift.TException
    {
      updateUserFlowerUseStatus_result result = new updateUserFlowerUseStatus_result();
      receiveBase(result, "updateUserFlowerUseStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserFlowerUseStatus failed: unknown result");
    }

    public Result getUserGiveFlower(long uid) throws org.apache.thrift.TException
    {
      send_getUserGiveFlower(uid);
      return recv_getUserGiveFlower();
    }

    public void send_getUserGiveFlower(long uid) throws org.apache.thrift.TException
    {
      getUserGiveFlower_args args = new getUserGiveFlower_args();
      args.setUid(uid);
      sendBase("getUserGiveFlower", args);
    }

    public Result recv_getUserGiveFlower() throws org.apache.thrift.TException
    {
      getUserGiveFlower_result result = new getUserGiveFlower_result();
      receiveBase(result, "getUserGiveFlower");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserGiveFlower failed: unknown result");
    }

    public ResultList listPropsReport(long uid, int propsType, int offset, int limit) throws org.apache.thrift.TException
    {
      send_listPropsReport(uid, propsType, offset, limit);
      return recv_listPropsReport();
    }

    public void send_listPropsReport(long uid, int propsType, int offset, int limit) throws org.apache.thrift.TException
    {
      listPropsReport_args args = new listPropsReport_args();
      args.setUid(uid);
      args.setPropsType(propsType);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("listPropsReport", args);
    }

    public ResultList recv_listPropsReport() throws org.apache.thrift.TException
    {
      listPropsReport_result result = new listPropsReport_result();
      receiveBase(result, "listPropsReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPropsReport failed: unknown result");
    }

    public ResultList exchangeReport(long uid, int offset, int limit) throws org.apache.thrift.TException
    {
      send_exchangeReport(uid, offset, limit);
      return recv_exchangeReport();
    }

    public void send_exchangeReport(long uid, int offset, int limit) throws org.apache.thrift.TException
    {
      exchangeReport_args args = new exchangeReport_args();
      args.setUid(uid);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("exchangeReport", args);
    }

    public ResultList recv_exchangeReport() throws org.apache.thrift.TException
    {
      exchangeReport_result result = new exchangeReport_result();
      receiveBase(result, "exchangeReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exchangeReport failed: unknown result");
    }

    public ResultList listUserNectarList(int offset, int limit) throws org.apache.thrift.TException
    {
      send_listUserNectarList(offset, limit);
      return recv_listUserNectarList();
    }

    public void send_listUserNectarList(int offset, int limit) throws org.apache.thrift.TException
    {
      listUserNectarList_args args = new listUserNectarList_args();
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("listUserNectarList", args);
    }

    public ResultList recv_listUserNectarList() throws org.apache.thrift.TException
    {
      listUserNectarList_result result = new listUserNectarList_result();
      receiveBase(result, "listUserNectarList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserNectarList failed: unknown result");
    }

    public Result addUserNectar(String transNo, long uid, int number) throws org.apache.thrift.TException
    {
      send_addUserNectar(transNo, uid, number);
      return recv_addUserNectar();
    }

    public void send_addUserNectar(String transNo, long uid, int number) throws org.apache.thrift.TException
    {
      addUserNectar_args args = new addUserNectar_args();
      args.setTransNo(transNo);
      args.setUid(uid);
      args.setNumber(number);
      sendBase("addUserNectar", args);
    }

    public Result recv_addUserNectar() throws org.apache.thrift.TException
    {
      addUserNectar_result result = new addUserNectar_result();
      receiveBase(result, "addUserNectar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addUserNectar failed: unknown result");
    }

    public Result overFlowerSunNumber(long uid) throws org.apache.thrift.TException
    {
      send_overFlowerSunNumber(uid);
      return recv_overFlowerSunNumber();
    }

    public void send_overFlowerSunNumber(long uid) throws org.apache.thrift.TException
    {
      overFlowerSunNumber_args args = new overFlowerSunNumber_args();
      args.setUid(uid);
      sendBase("overFlowerSunNumber", args);
    }

    public Result recv_overFlowerSunNumber() throws org.apache.thrift.TException
    {
      overFlowerSunNumber_result result = new overFlowerSunNumber_result();
      receiveBase(result, "overFlowerSunNumber");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "overFlowerSunNumber failed: unknown result");
    }

    public Result updateUserRepository(long uid, int number) throws org.apache.thrift.TException
    {
      send_updateUserRepository(uid, number);
      return recv_updateUserRepository();
    }

    public void send_updateUserRepository(long uid, int number) throws org.apache.thrift.TException
    {
      updateUserRepository_args args = new updateUserRepository_args();
      args.setUid(uid);
      args.setNumber(number);
      sendBase("updateUserRepository", args);
    }

    public Result recv_updateUserRepository() throws org.apache.thrift.TException
    {
      updateUserRepository_result result = new updateUserRepository_result();
      receiveBase(result, "updateUserRepository");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserRepository failed: unknown result");
    }

    public ResultList getUserSunAndNectar(List<Long> uids) throws org.apache.thrift.TException
    {
      send_getUserSunAndNectar(uids);
      return recv_getUserSunAndNectar();
    }

    public void send_getUserSunAndNectar(List<Long> uids) throws org.apache.thrift.TException
    {
      getUserSunAndNectar_args args = new getUserSunAndNectar_args();
      args.setUids(uids);
      sendBase("getUserSunAndNectar", args);
    }

    public ResultList recv_getUserSunAndNectar() throws org.apache.thrift.TException
    {
      getUserSunAndNectar_result result = new getUserSunAndNectar_result();
      receiveBase(result, "getUserSunAndNectar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserSunAndNectar failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void activateManor(String transNo, long partenUid, long uid, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateManor_call method_call = new activateManor_call(transNo, partenUid, uid, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateManor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long partenUid;
      private long uid;
      private int type;
      public activateManor_call(String transNo, long partenUid, long uid, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.partenUid = partenUid;
        this.uid = uid;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateManor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateManor_args args = new activateManor_args();
        args.setTransNo(transNo);
        args.setPartenUid(partenUid);
        args.setUid(uid);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateManor();
      }
    }

    public void ferilizeByUid(String transNo, long uid, long partenUid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ferilizeByUid_call method_call = new ferilizeByUid_call(transNo, uid, partenUid, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ferilizeByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private long partenUid;
      private int number;
      public ferilizeByUid_call(String transNo, long uid, long partenUid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.partenUid = partenUid;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ferilizeByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ferilizeByUid_args args = new ferilizeByUid_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setPartenUid(partenUid);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ferilizeByUid();
      }
    }

    public void growFlowersByUid(String transNo, long uid, long partenUid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      growFlowersByUid_call method_call = new growFlowersByUid_call(transNo, uid, partenUid, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class growFlowersByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private long partenUid;
      private int number;
      public growFlowersByUid_call(String transNo, long uid, long partenUid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.partenUid = partenUid;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("growFlowersByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        growFlowersByUid_args args = new growFlowersByUid_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setPartenUid(partenUid);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_growFlowersByUid();
      }
    }

    public void statisticsUserProps(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statisticsUserProps_call method_call = new statisticsUserProps_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statisticsUserProps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public statisticsUserProps_call(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statisticsUserProps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statisticsUserProps_args args = new statisticsUserProps_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statisticsUserProps();
      }
    }

    public void giveUserProps(String transNo, long uid, long giveUid, int givePropsType, int giveTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      giveUserProps_call method_call = new giveUserProps_call(transNo, uid, giveUid, givePropsType, giveTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class giveUserProps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private long giveUid;
      private int givePropsType;
      private int giveTime;
      public giveUserProps_call(String transNo, long uid, long giveUid, int givePropsType, int giveTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.giveUid = giveUid;
        this.givePropsType = givePropsType;
        this.giveTime = giveTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("giveUserProps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        giveUserProps_args args = new giveUserProps_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setGiveUid(giveUid);
        args.setGivePropsType(givePropsType);
        args.setGiveTime(giveTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_giveUserProps();
      }
    }

    public void statisticsUserRepertory(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statisticsUserRepertory_call method_call = new statisticsUserRepertory_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statisticsUserRepertory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public statisticsUserRepertory_call(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statisticsUserRepertory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statisticsUserRepertory_args args = new statisticsUserRepertory_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statisticsUserRepertory();
      }
    }

    public void buyPropsUsePropsSun(String transNo, long uid, int propsType, int number, int configSunNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      buyPropsUsePropsSun_call method_call = new buyPropsUsePropsSun_call(transNo, uid, propsType, number, configSunNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buyPropsUsePropsSun_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int propsType;
      private int number;
      private int configSunNumber;
      public buyPropsUsePropsSun_call(String transNo, long uid, int propsType, int number, int configSunNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.propsType = propsType;
        this.number = number;
        this.configSunNumber = configSunNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buyPropsUsePropsSun", org.apache.thrift.protocol.TMessageType.CALL, 0));
        buyPropsUsePropsSun_args args = new buyPropsUsePropsSun_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setPropsType(propsType);
        args.setNumber(number);
        args.setConfigSunNumber(configSunNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buyPropsUsePropsSun();
      }
    }

    public void exchangeVoucher(String transNo, long uid, double moneyRedpackageAmount, int propsType, int configPropsNumber, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exchangeVoucher_call method_call = new exchangeVoucher_call(transNo, uid, moneyRedpackageAmount, propsType, configPropsNumber, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exchangeVoucher_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private double moneyRedpackageAmount;
      private int propsType;
      private int configPropsNumber;
      private int number;
      public exchangeVoucher_call(String transNo, long uid, double moneyRedpackageAmount, int propsType, int configPropsNumber, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.moneyRedpackageAmount = moneyRedpackageAmount;
        this.propsType = propsType;
        this.configPropsNumber = configPropsNumber;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeVoucher", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exchangeVoucher_args args = new exchangeVoucher_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setMoneyRedpackageAmount(moneyRedpackageAmount);
        args.setPropsType(propsType);
        args.setConfigPropsNumber(configPropsNumber);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exchangeVoucher();
      }
    }

    public void getOverflowSun(String transNo, long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOverflowSun_call method_call = new getOverflowSun_call(transNo, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverflowSun_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      public getOverflowSun_call(String transNo, long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverflowSun", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverflowSun_args args = new getOverflowSun_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverflowSun();
      }
    }

    public void exchangeMoneyRedpackage(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exchangeMoneyRedpackage_call method_call = new exchangeMoneyRedpackage_call(transNo, uid, number, configNectarNumber, moneyRedpackage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exchangeMoneyRedpackage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int number;
      private int configNectarNumber;
      private double moneyRedpackage;
      public exchangeMoneyRedpackage_call(String transNo, long uid, int number, int configNectarNumber, double moneyRedpackage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.number = number;
        this.configNectarNumber = configNectarNumber;
        this.moneyRedpackage = moneyRedpackage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeMoneyRedpackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exchangeMoneyRedpackage_args args = new exchangeMoneyRedpackage_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setNumber(number);
        args.setConfigNectarNumber(configNectarNumber);
        args.setMoneyRedpackage(moneyRedpackage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exchangeMoneyRedpackage();
      }
    }

    public void getUserSunTotal(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserSunTotal_call method_call = new getUserSunTotal_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserSunTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public getUserSunTotal_call(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserSunTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserSunTotal_args args = new getUserSunTotal_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserSunTotal();
      }
    }

    public void sendPropsRedpackage(String transNo, long uid, int propsType, int type, int number, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendPropsRedpackage_call method_call = new sendPropsRedpackage_call(transNo, uid, propsType, type, number, amount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendPropsRedpackage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int propsType;
      private int type;
      private int number;
      private int amount;
      public sendPropsRedpackage_call(String transNo, long uid, int propsType, int type, int number, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.propsType = propsType;
        this.type = type;
        this.number = number;
        this.amount = amount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendPropsRedpackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendPropsRedpackage_args args = new sendPropsRedpackage_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setPropsType(propsType);
        args.setType(type);
        args.setNumber(number);
        args.setAmount(amount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendPropsRedpackage();
      }
    }

    public void listUserPropsRedpackageHistoryByUid(long uid, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserPropsRedpackageHistoryByUid_call method_call = new listUserPropsRedpackageHistoryByUid_call(uid, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserPropsRedpackageHistoryByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int offset;
      private int limit;
      public listUserPropsRedpackageHistoryByUid_call(long uid, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserPropsRedpackageHistoryByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserPropsRedpackageHistoryByUid_args args = new listUserPropsRedpackageHistoryByUid_args();
        args.setUid(uid);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserPropsRedpackageHistoryByUid();
      }
    }

    public void listPropsRedpackageRecordByRedpackageId(long redpackageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPropsRedpackageRecordByRedpackageId_call method_call = new listPropsRedpackageRecordByRedpackageId_call(redpackageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPropsRedpackageRecordByRedpackageId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long redpackageId;
      public listPropsRedpackageRecordByRedpackageId_call(long redpackageId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.redpackageId = redpackageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPropsRedpackageRecordByRedpackageId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPropsRedpackageRecordByRedpackageId_args args = new listPropsRedpackageRecordByRedpackageId_args();
        args.setRedpackageId(redpackageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPropsRedpackageRecordByRedpackageId();
      }
    }

    public void getPropsRedpackage(long redpackageId, long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPropsRedpackage_call method_call = new getPropsRedpackage_call(redpackageId, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPropsRedpackage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long redpackageId;
      private long uid;
      public getPropsRedpackage_call(long redpackageId, long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.redpackageId = redpackageId;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPropsRedpackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPropsRedpackage_args args = new getPropsRedpackage_args();
        args.setRedpackageId(redpackageId);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPropsRedpackage();
      }
    }

    public void updateUserFlowerUseStatus(String transNo, long uid, long giveUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserFlowerUseStatus_call method_call = new updateUserFlowerUseStatus_call(transNo, uid, giveUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserFlowerUseStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private long giveUid;
      public updateUserFlowerUseStatus_call(String transNo, long uid, long giveUid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.giveUid = giveUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserFlowerUseStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserFlowerUseStatus_args args = new updateUserFlowerUseStatus_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setGiveUid(giveUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserFlowerUseStatus();
      }
    }

    public void getUserGiveFlower(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserGiveFlower_call method_call = new getUserGiveFlower_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserGiveFlower_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public getUserGiveFlower_call(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserGiveFlower", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserGiveFlower_args args = new getUserGiveFlower_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserGiveFlower();
      }
    }

    public void listPropsReport(long uid, int propsType, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPropsReport_call method_call = new listPropsReport_call(uid, propsType, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPropsReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int propsType;
      private int offset;
      private int limit;
      public listPropsReport_call(long uid, int propsType, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.propsType = propsType;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPropsReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPropsReport_args args = new listPropsReport_args();
        args.setUid(uid);
        args.setPropsType(propsType);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPropsReport();
      }
    }

    public void exchangeReport(long uid, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exchangeReport_call method_call = new exchangeReport_call(uid, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exchangeReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int offset;
      private int limit;
      public exchangeReport_call(long uid, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exchangeReport_args args = new exchangeReport_args();
        args.setUid(uid);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exchangeReport();
      }
    }

    public void listUserNectarList(int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserNectarList_call method_call = new listUserNectarList_call(offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserNectarList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int offset;
      private int limit;
      public listUserNectarList_call(int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserNectarList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserNectarList_args args = new listUserNectarList_args();
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserNectarList();
      }
    }

    public void addUserNectar(String transNo, long uid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addUserNectar_call method_call = new addUserNectar_call(transNo, uid, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addUserNectar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transNo;
      private long uid;
      private int number;
      public addUserNectar_call(String transNo, long uid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transNo = transNo;
        this.uid = uid;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUserNectar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addUserNectar_args args = new addUserNectar_args();
        args.setTransNo(transNo);
        args.setUid(uid);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addUserNectar();
      }
    }

    public void overFlowerSunNumber(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      overFlowerSunNumber_call method_call = new overFlowerSunNumber_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class overFlowerSunNumber_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public overFlowerSunNumber_call(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("overFlowerSunNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
        overFlowerSunNumber_args args = new overFlowerSunNumber_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_overFlowerSunNumber();
      }
    }

    public void updateUserRepository(long uid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserRepository_call method_call = new updateUserRepository_call(uid, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserRepository_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int number;
      public updateUserRepository_call(long uid, int number, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserRepository", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserRepository_args args = new updateUserRepository_args();
        args.setUid(uid);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserRepository();
      }
    }

    public void getUserSunAndNectar(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserSunAndNectar_call method_call = new getUserSunAndNectar_call(uids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserSunAndNectar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> uids;
      public getUserSunAndNectar_call(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserSunAndNectar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserSunAndNectar_args args = new getUserSunAndNectar_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserSunAndNectar();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("activateManor", new activateManor());
      processMap.put("ferilizeByUid", new ferilizeByUid());
      processMap.put("growFlowersByUid", new growFlowersByUid());
      processMap.put("statisticsUserProps", new statisticsUserProps());
      processMap.put("giveUserProps", new giveUserProps());
      processMap.put("statisticsUserRepertory", new statisticsUserRepertory());
      processMap.put("buyPropsUsePropsSun", new buyPropsUsePropsSun());
      processMap.put("exchangeVoucher", new exchangeVoucher());
      processMap.put("getOverflowSun", new getOverflowSun());
      processMap.put("exchangeMoneyRedpackage", new exchangeMoneyRedpackage());
      processMap.put("getUserSunTotal", new getUserSunTotal());
      processMap.put("sendPropsRedpackage", new sendPropsRedpackage());
      processMap.put("listUserPropsRedpackageHistoryByUid", new listUserPropsRedpackageHistoryByUid());
      processMap.put("listPropsRedpackageRecordByRedpackageId", new listPropsRedpackageRecordByRedpackageId());
      processMap.put("getPropsRedpackage", new getPropsRedpackage());
      processMap.put("updateUserFlowerUseStatus", new updateUserFlowerUseStatus());
      processMap.put("getUserGiveFlower", new getUserGiveFlower());
      processMap.put("listPropsReport", new listPropsReport());
      processMap.put("exchangeReport", new exchangeReport());
      processMap.put("listUserNectarList", new listUserNectarList());
      processMap.put("addUserNectar", new addUserNectar());
      processMap.put("overFlowerSunNumber", new overFlowerSunNumber());
      processMap.put("updateUserRepository", new updateUserRepository());
      processMap.put("getUserSunAndNectar", new getUserSunAndNectar());
      return processMap;
    }

    public static class activateManor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateManor_args> {
      public activateManor() {
        super("activateManor");
      }

      public activateManor_args getEmptyArgsInstance() {
        return new activateManor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateManor_result getResult(I iface, activateManor_args args) throws org.apache.thrift.TException {
        activateManor_result result = new activateManor_result();
        result.success = iface.activateManor(args.transNo, args.partenUid, args.uid, args.type);
        return result;
      }
    }

    public static class ferilizeByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ferilizeByUid_args> {
      public ferilizeByUid() {
        super("ferilizeByUid");
      }

      public ferilizeByUid_args getEmptyArgsInstance() {
        return new ferilizeByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ferilizeByUid_result getResult(I iface, ferilizeByUid_args args) throws org.apache.thrift.TException {
        ferilizeByUid_result result = new ferilizeByUid_result();
        result.success = iface.ferilizeByUid(args.transNo, args.uid, args.partenUid, args.number);
        return result;
      }
    }

    public static class growFlowersByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, growFlowersByUid_args> {
      public growFlowersByUid() {
        super("growFlowersByUid");
      }

      public growFlowersByUid_args getEmptyArgsInstance() {
        return new growFlowersByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public growFlowersByUid_result getResult(I iface, growFlowersByUid_args args) throws org.apache.thrift.TException {
        growFlowersByUid_result result = new growFlowersByUid_result();
        result.success = iface.growFlowersByUid(args.transNo, args.uid, args.partenUid, args.number);
        return result;
      }
    }

    public static class statisticsUserProps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statisticsUserProps_args> {
      public statisticsUserProps() {
        super("statisticsUserProps");
      }

      public statisticsUserProps_args getEmptyArgsInstance() {
        return new statisticsUserProps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statisticsUserProps_result getResult(I iface, statisticsUserProps_args args) throws org.apache.thrift.TException {
        statisticsUserProps_result result = new statisticsUserProps_result();
        result.success = iface.statisticsUserProps(args.uid);
        return result;
      }
    }

    public static class giveUserProps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, giveUserProps_args> {
      public giveUserProps() {
        super("giveUserProps");
      }

      public giveUserProps_args getEmptyArgsInstance() {
        return new giveUserProps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public giveUserProps_result getResult(I iface, giveUserProps_args args) throws org.apache.thrift.TException {
        giveUserProps_result result = new giveUserProps_result();
        result.success = iface.giveUserProps(args.transNo, args.uid, args.giveUid, args.givePropsType, args.giveTime);
        return result;
      }
    }

    public static class statisticsUserRepertory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statisticsUserRepertory_args> {
      public statisticsUserRepertory() {
        super("statisticsUserRepertory");
      }

      public statisticsUserRepertory_args getEmptyArgsInstance() {
        return new statisticsUserRepertory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statisticsUserRepertory_result getResult(I iface, statisticsUserRepertory_args args) throws org.apache.thrift.TException {
        statisticsUserRepertory_result result = new statisticsUserRepertory_result();
        result.success = iface.statisticsUserRepertory(args.uid);
        return result;
      }
    }

    public static class buyPropsUsePropsSun<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buyPropsUsePropsSun_args> {
      public buyPropsUsePropsSun() {
        super("buyPropsUsePropsSun");
      }

      public buyPropsUsePropsSun_args getEmptyArgsInstance() {
        return new buyPropsUsePropsSun_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public buyPropsUsePropsSun_result getResult(I iface, buyPropsUsePropsSun_args args) throws org.apache.thrift.TException {
        buyPropsUsePropsSun_result result = new buyPropsUsePropsSun_result();
        result.success = iface.buyPropsUsePropsSun(args.transNo, args.uid, args.propsType, args.number, args.configSunNumber);
        return result;
      }
    }

    public static class exchangeVoucher<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exchangeVoucher_args> {
      public exchangeVoucher() {
        super("exchangeVoucher");
      }

      public exchangeVoucher_args getEmptyArgsInstance() {
        return new exchangeVoucher_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exchangeVoucher_result getResult(I iface, exchangeVoucher_args args) throws org.apache.thrift.TException {
        exchangeVoucher_result result = new exchangeVoucher_result();
        result.success = iface.exchangeVoucher(args.transNo, args.uid, args.moneyRedpackageAmount, args.propsType, args.configPropsNumber, args.number);
        return result;
      }
    }

    public static class getOverflowSun<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverflowSun_args> {
      public getOverflowSun() {
        super("getOverflowSun");
      }

      public getOverflowSun_args getEmptyArgsInstance() {
        return new getOverflowSun_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverflowSun_result getResult(I iface, getOverflowSun_args args) throws org.apache.thrift.TException {
        getOverflowSun_result result = new getOverflowSun_result();
        result.success = iface.getOverflowSun(args.transNo, args.uid);
        return result;
      }
    }

    public static class exchangeMoneyRedpackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exchangeMoneyRedpackage_args> {
      public exchangeMoneyRedpackage() {
        super("exchangeMoneyRedpackage");
      }

      public exchangeMoneyRedpackage_args getEmptyArgsInstance() {
        return new exchangeMoneyRedpackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exchangeMoneyRedpackage_result getResult(I iface, exchangeMoneyRedpackage_args args) throws org.apache.thrift.TException {
        exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
        result.success = iface.exchangeMoneyRedpackage(args.transNo, args.uid, args.number, args.configNectarNumber, args.moneyRedpackage);
        return result;
      }
    }

    public static class getUserSunTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserSunTotal_args> {
      public getUserSunTotal() {
        super("getUserSunTotal");
      }

      public getUserSunTotal_args getEmptyArgsInstance() {
        return new getUserSunTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserSunTotal_result getResult(I iface, getUserSunTotal_args args) throws org.apache.thrift.TException {
        getUserSunTotal_result result = new getUserSunTotal_result();
        result.success = iface.getUserSunTotal(args.uid);
        return result;
      }
    }

    public static class sendPropsRedpackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendPropsRedpackage_args> {
      public sendPropsRedpackage() {
        super("sendPropsRedpackage");
      }

      public sendPropsRedpackage_args getEmptyArgsInstance() {
        return new sendPropsRedpackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendPropsRedpackage_result getResult(I iface, sendPropsRedpackage_args args) throws org.apache.thrift.TException {
        sendPropsRedpackage_result result = new sendPropsRedpackage_result();
        result.success = iface.sendPropsRedpackage(args.transNo, args.uid, args.propsType, args.type, args.number, args.amount);
        return result;
      }
    }

    public static class listUserPropsRedpackageHistoryByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserPropsRedpackageHistoryByUid_args> {
      public listUserPropsRedpackageHistoryByUid() {
        super("listUserPropsRedpackageHistoryByUid");
      }

      public listUserPropsRedpackageHistoryByUid_args getEmptyArgsInstance() {
        return new listUserPropsRedpackageHistoryByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserPropsRedpackageHistoryByUid_result getResult(I iface, listUserPropsRedpackageHistoryByUid_args args) throws org.apache.thrift.TException {
        listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
        result.success = iface.listUserPropsRedpackageHistoryByUid(args.uid, args.offset, args.limit);
        return result;
      }
    }

    public static class listPropsRedpackageRecordByRedpackageId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPropsRedpackageRecordByRedpackageId_args> {
      public listPropsRedpackageRecordByRedpackageId() {
        super("listPropsRedpackageRecordByRedpackageId");
      }

      public listPropsRedpackageRecordByRedpackageId_args getEmptyArgsInstance() {
        return new listPropsRedpackageRecordByRedpackageId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPropsRedpackageRecordByRedpackageId_result getResult(I iface, listPropsRedpackageRecordByRedpackageId_args args) throws org.apache.thrift.TException {
        listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
        result.success = iface.listPropsRedpackageRecordByRedpackageId(args.redpackageId);
        return result;
      }
    }

    public static class getPropsRedpackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPropsRedpackage_args> {
      public getPropsRedpackage() {
        super("getPropsRedpackage");
      }

      public getPropsRedpackage_args getEmptyArgsInstance() {
        return new getPropsRedpackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPropsRedpackage_result getResult(I iface, getPropsRedpackage_args args) throws org.apache.thrift.TException {
        getPropsRedpackage_result result = new getPropsRedpackage_result();
        result.success = iface.getPropsRedpackage(args.redpackageId, args.uid);
        return result;
      }
    }

    public static class updateUserFlowerUseStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserFlowerUseStatus_args> {
      public updateUserFlowerUseStatus() {
        super("updateUserFlowerUseStatus");
      }

      public updateUserFlowerUseStatus_args getEmptyArgsInstance() {
        return new updateUserFlowerUseStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserFlowerUseStatus_result getResult(I iface, updateUserFlowerUseStatus_args args) throws org.apache.thrift.TException {
        updateUserFlowerUseStatus_result result = new updateUserFlowerUseStatus_result();
        result.success = iface.updateUserFlowerUseStatus(args.transNo, args.uid, args.giveUid);
        return result;
      }
    }

    public static class getUserGiveFlower<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserGiveFlower_args> {
      public getUserGiveFlower() {
        super("getUserGiveFlower");
      }

      public getUserGiveFlower_args getEmptyArgsInstance() {
        return new getUserGiveFlower_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserGiveFlower_result getResult(I iface, getUserGiveFlower_args args) throws org.apache.thrift.TException {
        getUserGiveFlower_result result = new getUserGiveFlower_result();
        result.success = iface.getUserGiveFlower(args.uid);
        return result;
      }
    }

    public static class listPropsReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPropsReport_args> {
      public listPropsReport() {
        super("listPropsReport");
      }

      public listPropsReport_args getEmptyArgsInstance() {
        return new listPropsReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPropsReport_result getResult(I iface, listPropsReport_args args) throws org.apache.thrift.TException {
        listPropsReport_result result = new listPropsReport_result();
        result.success = iface.listPropsReport(args.uid, args.propsType, args.offset, args.limit);
        return result;
      }
    }

    public static class exchangeReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exchangeReport_args> {
      public exchangeReport() {
        super("exchangeReport");
      }

      public exchangeReport_args getEmptyArgsInstance() {
        return new exchangeReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exchangeReport_result getResult(I iface, exchangeReport_args args) throws org.apache.thrift.TException {
        exchangeReport_result result = new exchangeReport_result();
        result.success = iface.exchangeReport(args.uid, args.offset, args.limit);
        return result;
      }
    }

    public static class listUserNectarList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserNectarList_args> {
      public listUserNectarList() {
        super("listUserNectarList");
      }

      public listUserNectarList_args getEmptyArgsInstance() {
        return new listUserNectarList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserNectarList_result getResult(I iface, listUserNectarList_args args) throws org.apache.thrift.TException {
        listUserNectarList_result result = new listUserNectarList_result();
        result.success = iface.listUserNectarList(args.offset, args.limit);
        return result;
      }
    }

    public static class addUserNectar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUserNectar_args> {
      public addUserNectar() {
        super("addUserNectar");
      }

      public addUserNectar_args getEmptyArgsInstance() {
        return new addUserNectar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addUserNectar_result getResult(I iface, addUserNectar_args args) throws org.apache.thrift.TException {
        addUserNectar_result result = new addUserNectar_result();
        result.success = iface.addUserNectar(args.transNo, args.uid, args.number);
        return result;
      }
    }

    public static class overFlowerSunNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, overFlowerSunNumber_args> {
      public overFlowerSunNumber() {
        super("overFlowerSunNumber");
      }

      public overFlowerSunNumber_args getEmptyArgsInstance() {
        return new overFlowerSunNumber_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public overFlowerSunNumber_result getResult(I iface, overFlowerSunNumber_args args) throws org.apache.thrift.TException {
        overFlowerSunNumber_result result = new overFlowerSunNumber_result();
        result.success = iface.overFlowerSunNumber(args.uid);
        return result;
      }
    }

    public static class updateUserRepository<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserRepository_args> {
      public updateUserRepository() {
        super("updateUserRepository");
      }

      public updateUserRepository_args getEmptyArgsInstance() {
        return new updateUserRepository_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserRepository_result getResult(I iface, updateUserRepository_args args) throws org.apache.thrift.TException {
        updateUserRepository_result result = new updateUserRepository_result();
        result.success = iface.updateUserRepository(args.uid, args.number);
        return result;
      }
    }

    public static class getUserSunAndNectar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserSunAndNectar_args> {
      public getUserSunAndNectar() {
        super("getUserSunAndNectar");
      }

      public getUserSunAndNectar_args getEmptyArgsInstance() {
        return new getUserSunAndNectar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserSunAndNectar_result getResult(I iface, getUserSunAndNectar_args args) throws org.apache.thrift.TException {
        getUserSunAndNectar_result result = new getUserSunAndNectar_result();
        result.success = iface.getUserSunAndNectar(args.uids);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("activateManor", new activateManor());
      processMap.put("ferilizeByUid", new ferilizeByUid());
      processMap.put("growFlowersByUid", new growFlowersByUid());
      processMap.put("statisticsUserProps", new statisticsUserProps());
      processMap.put("giveUserProps", new giveUserProps());
      processMap.put("statisticsUserRepertory", new statisticsUserRepertory());
      processMap.put("buyPropsUsePropsSun", new buyPropsUsePropsSun());
      processMap.put("exchangeVoucher", new exchangeVoucher());
      processMap.put("getOverflowSun", new getOverflowSun());
      processMap.put("exchangeMoneyRedpackage", new exchangeMoneyRedpackage());
      processMap.put("getUserSunTotal", new getUserSunTotal());
      processMap.put("sendPropsRedpackage", new sendPropsRedpackage());
      processMap.put("listUserPropsRedpackageHistoryByUid", new listUserPropsRedpackageHistoryByUid());
      processMap.put("listPropsRedpackageRecordByRedpackageId", new listPropsRedpackageRecordByRedpackageId());
      processMap.put("getPropsRedpackage", new getPropsRedpackage());
      processMap.put("updateUserFlowerUseStatus", new updateUserFlowerUseStatus());
      processMap.put("getUserGiveFlower", new getUserGiveFlower());
      processMap.put("listPropsReport", new listPropsReport());
      processMap.put("exchangeReport", new exchangeReport());
      processMap.put("listUserNectarList", new listUserNectarList());
      processMap.put("addUserNectar", new addUserNectar());
      processMap.put("overFlowerSunNumber", new overFlowerSunNumber());
      processMap.put("updateUserRepository", new updateUserRepository());
      processMap.put("getUserSunAndNectar", new getUserSunAndNectar());
      return processMap;
    }

    public static class activateManor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateManor_args, Result> {
      public activateManor() {
        super("activateManor");
      }

      public activateManor_args getEmptyArgsInstance() {
        return new activateManor_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            activateManor_result result = new activateManor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateManor_result result = new activateManor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateManor_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.activateManor(args.transNo, args.partenUid, args.uid, args.type,resultHandler);
      }
    }

    public static class ferilizeByUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ferilizeByUid_args, Result> {
      public ferilizeByUid() {
        super("ferilizeByUid");
      }

      public ferilizeByUid_args getEmptyArgsInstance() {
        return new ferilizeByUid_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            ferilizeByUid_result result = new ferilizeByUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ferilizeByUid_result result = new ferilizeByUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ferilizeByUid_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.ferilizeByUid(args.transNo, args.uid, args.partenUid, args.number,resultHandler);
      }
    }

    public static class growFlowersByUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, growFlowersByUid_args, Result> {
      public growFlowersByUid() {
        super("growFlowersByUid");
      }

      public growFlowersByUid_args getEmptyArgsInstance() {
        return new growFlowersByUid_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            growFlowersByUid_result result = new growFlowersByUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            growFlowersByUid_result result = new growFlowersByUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, growFlowersByUid_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.growFlowersByUid(args.transNo, args.uid, args.partenUid, args.number,resultHandler);
      }
    }

    public static class statisticsUserProps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statisticsUserProps_args, ResultList> {
      public statisticsUserProps() {
        super("statisticsUserProps");
      }

      public statisticsUserProps_args getEmptyArgsInstance() {
        return new statisticsUserProps_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            statisticsUserProps_result result = new statisticsUserProps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statisticsUserProps_result result = new statisticsUserProps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statisticsUserProps_args args, org.apache.thrift.async.AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.statisticsUserProps(args.uid,resultHandler);
      }
    }

    public static class giveUserProps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, giveUserProps_args, Result> {
      public giveUserProps() {
        super("giveUserProps");
      }

      public giveUserProps_args getEmptyArgsInstance() {
        return new giveUserProps_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            giveUserProps_result result = new giveUserProps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            giveUserProps_result result = new giveUserProps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, giveUserProps_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.giveUserProps(args.transNo, args.uid, args.giveUid, args.givePropsType, args.giveTime,resultHandler);
      }
    }

    public static class statisticsUserRepertory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statisticsUserRepertory_args, Result> {
      public statisticsUserRepertory() {
        super("statisticsUserRepertory");
      }

      public statisticsUserRepertory_args getEmptyArgsInstance() {
        return new statisticsUserRepertory_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            statisticsUserRepertory_result result = new statisticsUserRepertory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statisticsUserRepertory_result result = new statisticsUserRepertory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statisticsUserRepertory_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.statisticsUserRepertory(args.uid,resultHandler);
      }
    }

    public static class buyPropsUsePropsSun<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, buyPropsUsePropsSun_args, Result> {
      public buyPropsUsePropsSun() {
        super("buyPropsUsePropsSun");
      }

      public buyPropsUsePropsSun_args getEmptyArgsInstance() {
        return new buyPropsUsePropsSun_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            buyPropsUsePropsSun_result result = new buyPropsUsePropsSun_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            buyPropsUsePropsSun_result result = new buyPropsUsePropsSun_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, buyPropsUsePropsSun_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.buyPropsUsePropsSun(args.transNo, args.uid, args.propsType, args.number, args.configSunNumber,resultHandler);
      }
    }

    public static class exchangeVoucher<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exchangeVoucher_args, Result> {
      public exchangeVoucher() {
        super("exchangeVoucher");
      }

      public exchangeVoucher_args getEmptyArgsInstance() {
        return new exchangeVoucher_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exchangeVoucher_result result = new exchangeVoucher_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exchangeVoucher_result result = new exchangeVoucher_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exchangeVoucher_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exchangeVoucher(args.transNo, args.uid, args.moneyRedpackageAmount, args.propsType, args.configPropsNumber, args.number,resultHandler);
      }
    }

    public static class getOverflowSun<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverflowSun_args, Result> {
      public getOverflowSun() {
        super("getOverflowSun");
      }

      public getOverflowSun_args getEmptyArgsInstance() {
        return new getOverflowSun_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            getOverflowSun_result result = new getOverflowSun_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverflowSun_result result = new getOverflowSun_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverflowSun_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.getOverflowSun(args.transNo, args.uid,resultHandler);
      }
    }

    public static class exchangeMoneyRedpackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exchangeMoneyRedpackage_args, Result> {
      public exchangeMoneyRedpackage() {
        super("exchangeMoneyRedpackage");
      }

      public exchangeMoneyRedpackage_args getEmptyArgsInstance() {
        return new exchangeMoneyRedpackage_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exchangeMoneyRedpackage_result result = new exchangeMoneyRedpackage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exchangeMoneyRedpackage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.exchangeMoneyRedpackage(args.transNo, args.uid, args.number, args.configNectarNumber, args.moneyRedpackage,resultHandler);
      }
    }

    public static class getUserSunTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserSunTotal_args, Result> {
      public getUserSunTotal() {
        super("getUserSunTotal");
      }

      public getUserSunTotal_args getEmptyArgsInstance() {
        return new getUserSunTotal_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            getUserSunTotal_result result = new getUserSunTotal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserSunTotal_result result = new getUserSunTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserSunTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.getUserSunTotal(args.uid,resultHandler);
      }
    }

    public static class sendPropsRedpackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendPropsRedpackage_args, Result> {
      public sendPropsRedpackage() {
        super("sendPropsRedpackage");
      }

      public sendPropsRedpackage_args getEmptyArgsInstance() {
        return new sendPropsRedpackage_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            sendPropsRedpackage_result result = new sendPropsRedpackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendPropsRedpackage_result result = new sendPropsRedpackage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendPropsRedpackage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.sendPropsRedpackage(args.transNo, args.uid, args.propsType, args.type, args.number, args.amount,resultHandler);
      }
    }

    public static class listUserPropsRedpackageHistoryByUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserPropsRedpackageHistoryByUid_args, ResultList> {
      public listUserPropsRedpackageHistoryByUid() {
        super("listUserPropsRedpackageHistoryByUid");
      }

      public listUserPropsRedpackageHistoryByUid_args getEmptyArgsInstance() {
        return new listUserPropsRedpackageHistoryByUid_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listUserPropsRedpackageHistoryByUid_result result = new listUserPropsRedpackageHistoryByUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserPropsRedpackageHistoryByUid_args args, org.apache.thrift.async.AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.listUserPropsRedpackageHistoryByUid(args.uid, args.offset, args.limit,resultHandler);
      }
    }

    public static class listPropsRedpackageRecordByRedpackageId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPropsRedpackageRecordByRedpackageId_args, ResultList> {
      public listPropsRedpackageRecordByRedpackageId() {
        super("listPropsRedpackageRecordByRedpackageId");
      }

      public listPropsRedpackageRecordByRedpackageId_args getEmptyArgsInstance() {
        return new listPropsRedpackageRecordByRedpackageId_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listPropsRedpackageRecordByRedpackageId_result result = new listPropsRedpackageRecordByRedpackageId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPropsRedpackageRecordByRedpackageId_args args, org.apache.thrift.async.AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.listPropsRedpackageRecordByRedpackageId(args.redpackageId,resultHandler);
      }
    }

    public static class getPropsRedpackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPropsRedpackage_args, Result> {
      public getPropsRedpackage() {
        super("getPropsRedpackage");
      }

      public getPropsRedpackage_args getEmptyArgsInstance() {
        return new getPropsRedpackage_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            getPropsRedpackage_result result = new getPropsRedpackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPropsRedpackage_result result = new getPropsRedpackage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPropsRedpackage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.getPropsRedpackage(args.redpackageId, args.uid,resultHandler);
      }
    }

    public static class updateUserFlowerUseStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserFlowerUseStatus_args, Result> {
      public updateUserFlowerUseStatus() {
        super("updateUserFlowerUseStatus");
      }

      public updateUserFlowerUseStatus_args getEmptyArgsInstance() {
        return new updateUserFlowerUseStatus_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            updateUserFlowerUseStatus_result result = new updateUserFlowerUseStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserFlowerUseStatus_result result = new updateUserFlowerUseStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserFlowerUseStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.updateUserFlowerUseStatus(args.transNo, args.uid, args.giveUid,resultHandler);
      }
    }

    public static class getUserGiveFlower<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserGiveFlower_args, Result> {
      public getUserGiveFlower() {
        super("getUserGiveFlower");
      }

      public getUserGiveFlower_args getEmptyArgsInstance() {
        return new getUserGiveFlower_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            getUserGiveFlower_result result = new getUserGiveFlower_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserGiveFlower_result result = new getUserGiveFlower_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserGiveFlower_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.getUserGiveFlower(args.uid,resultHandler);
      }
    }

    public static class listPropsReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPropsReport_args, ResultList> {
      public listPropsReport() {
        super("listPropsReport");
      }

      public listPropsReport_args getEmptyArgsInstance() {
        return new listPropsReport_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            listPropsReport_result result = new listPropsReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listPropsReport_result result = new listPropsReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPropsReport_args args, org.apache.thrift.async.AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.listPropsReport(args.uid, args.propsType, args.offset, args.limit,resultHandler);
      }
    }

    public static class exchangeReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exchangeReport_args, ResultList> {
      public exchangeReport() {
        super("exchangeReport");
      }

      public exchangeReport_args getEmptyArgsInstance() {
        return new exchangeReport_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            exchangeReport_result result = new exchangeReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exchangeReport_result result = new exchangeReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exchangeReport_args args, org.apache.thrift.async.AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.exchangeReport(args.uid, args.offset, args.limit,resultHandler);
      }
    }

    public static class listUserNectarList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserNectarList_args, ResultList> {
      public listUserNectarList() {
        super("listUserNectarList");
      }

      public listUserNectarList_args getEmptyArgsInstance() {
        return new listUserNectarList_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            listUserNectarList_result result = new listUserNectarList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listUserNectarList_result result = new listUserNectarList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserNectarList_args args, org.apache.thrift.async.AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.listUserNectarList(args.offset, args.limit,resultHandler);
      }
    }

    public static class addUserNectar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUserNectar_args, Result> {
      public addUserNectar() {
        super("addUserNectar");
      }

      public addUserNectar_args getEmptyArgsInstance() {
        return new addUserNectar_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            addUserNectar_result result = new addUserNectar_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addUserNectar_result result = new addUserNectar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addUserNectar_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.addUserNectar(args.transNo, args.uid, args.number,resultHandler);
      }
    }

    public static class overFlowerSunNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, overFlowerSunNumber_args, Result> {
      public overFlowerSunNumber() {
        super("overFlowerSunNumber");
      }

      public overFlowerSunNumber_args getEmptyArgsInstance() {
        return new overFlowerSunNumber_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            overFlowerSunNumber_result result = new overFlowerSunNumber_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            overFlowerSunNumber_result result = new overFlowerSunNumber_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, overFlowerSunNumber_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.overFlowerSunNumber(args.uid,resultHandler);
      }
    }

    public static class updateUserRepository<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserRepository_args, Result> {
      public updateUserRepository() {
        super("updateUserRepository");
      }

      public updateUserRepository_args getEmptyArgsInstance() {
        return new updateUserRepository_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            updateUserRepository_result result = new updateUserRepository_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserRepository_result result = new updateUserRepository_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserRepository_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.updateUserRepository(args.uid, args.number,resultHandler);
      }
    }

    public static class getUserSunAndNectar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserSunAndNectar_args, ResultList> {
      public getUserSunAndNectar() {
        super("getUserSunAndNectar");
      }

      public getUserSunAndNectar_args getEmptyArgsInstance() {
        return new getUserSunAndNectar_args();
      }

      public AsyncMethodCallback<ResultList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultList>() { 
          public void onComplete(ResultList o) {
            getUserSunAndNectar_result result = new getUserSunAndNectar_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserSunAndNectar_result result = new getUserSunAndNectar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserSunAndNectar_args args, org.apache.thrift.async.AsyncMethodCallback<ResultList> resultHandler) throws TException {
        iface.getUserSunAndNectar(args.uids,resultHandler);
      }
    }

  }

  public static class activateManor_args implements org.apache.thrift.TBase<activateManor_args, activateManor_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateManor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateManor_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField PARTEN_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("partenUid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)-4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateManor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateManor_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long partenUid; // required
    public long uid; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      PARTEN_UID((short)-2, "partenUid"),
      UID((short)-3, "uid"),
      TYPE((short)-4, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // PARTEN_UID
            return PARTEN_UID;
          case -3: // UID
            return UID;
          case -4: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARTENUID_ISSET_ID = 0;
    private static final int __UID_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTEN_UID, new org.apache.thrift.meta_data.FieldMetaData("partenUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateManor_args.class, metaDataMap);
    }

    public activateManor_args() {
    }

    public activateManor_args(
      String transNo,
      long partenUid,
      long uid,
      int type)
    {
      this();
      this.transNo = transNo;
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateManor_args(activateManor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.partenUid = other.partenUid;
      this.uid = other.uid;
      this.type = other.type;
    }

    public activateManor_args deepCopy() {
      return new activateManor_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setPartenUidIsSet(false);
      this.partenUid = 0;
      setUidIsSet(false);
      this.uid = 0;
      setTypeIsSet(false);
      this.type = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public activateManor_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getPartenUid() {
      return this.partenUid;
    }

    public activateManor_args setPartenUid(long partenUid) {
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      return this;
    }

    public void unsetPartenUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    /** Returns true if field partenUid is set (has been assigned a value) and false otherwise */
    public boolean isSetPartenUid() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    public void setPartenUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTENUID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public activateManor_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public activateManor_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case PARTEN_UID:
        if (value == null) {
          unsetPartenUid();
        } else {
          setPartenUid((Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case PARTEN_UID:
        return Long.valueOf(getPartenUid());

      case UID:
        return Long.valueOf(getUid());

      case TYPE:
        return Integer.valueOf(getType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case PARTEN_UID:
        return isSetPartenUid();
      case UID:
        return isSetUid();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateManor_args)
        return this.equals((activateManor_args)that);
      return false;
    }

    public boolean equals(activateManor_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_partenUid = true;
      boolean that_present_partenUid = true;
      if (this_present_partenUid || that_present_partenUid) {
        if (!(this_present_partenUid && that_present_partenUid))
          return false;
        if (this.partenUid != that.partenUid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(activateManor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartenUid()).compareTo(other.isSetPartenUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartenUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partenUid, other.partenUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateManor_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partenUid:");
      sb.append(this.partenUid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateManor_argsStandardSchemeFactory implements SchemeFactory {
      public activateManor_argsStandardScheme getScheme() {
        return new activateManor_argsStandardScheme();
      }
    }

    private static class activateManor_argsStandardScheme extends StandardScheme<activateManor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateManor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // PARTEN_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.partenUid = iprot.readI64();
                struct.setPartenUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateManor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTEN_UID_FIELD_DESC);
        oprot.writeI64(struct.partenUid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateManor_argsTupleSchemeFactory implements SchemeFactory {
      public activateManor_argsTupleScheme getScheme() {
        return new activateManor_argsTupleScheme();
      }
    }

    private static class activateManor_argsTupleScheme extends TupleScheme<activateManor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateManor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetPartenUid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetPartenUid()) {
          oprot.writeI64(struct.partenUid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateManor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partenUid = iprot.readI64();
          struct.setPartenUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class activateManor_result implements org.apache.thrift.TBase<activateManor_result, activateManor_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateManor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateManor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateManor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateManor_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateManor_result.class, metaDataMap);
    }

    public activateManor_result() {
    }

    public activateManor_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateManor_result(activateManor_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public activateManor_result deepCopy() {
      return new activateManor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public activateManor_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateManor_result)
        return this.equals((activateManor_result)that);
      return false;
    }

    public boolean equals(activateManor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(activateManor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateManor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateManor_resultStandardSchemeFactory implements SchemeFactory {
      public activateManor_resultStandardScheme getScheme() {
        return new activateManor_resultStandardScheme();
      }
    }

    private static class activateManor_resultStandardScheme extends StandardScheme<activateManor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateManor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateManor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateManor_resultTupleSchemeFactory implements SchemeFactory {
      public activateManor_resultTupleScheme getScheme() {
        return new activateManor_resultTupleScheme();
      }
    }

    private static class activateManor_resultTupleScheme extends TupleScheme<activateManor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateManor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateManor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ferilizeByUid_args implements org.apache.thrift.TBase<ferilizeByUid_args, ferilizeByUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<ferilizeByUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ferilizeByUid_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField PARTEN_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("partenUid", org.apache.thrift.protocol.TType.I64, (short)-3);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ferilizeByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ferilizeByUid_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public long partenUid; // required
    public int number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      PARTEN_UID((short)-3, "partenUid"),
      NUMBER((short)-4, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // PARTEN_UID
            return PARTEN_UID;
          case -4: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __PARTENUID_ISSET_ID = 1;
    private static final int __NUMBER_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARTEN_UID, new org.apache.thrift.meta_data.FieldMetaData("partenUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ferilizeByUid_args.class, metaDataMap);
    }

    public ferilizeByUid_args() {
    }

    public ferilizeByUid_args(
      String transNo,
      long uid,
      long partenUid,
      int number)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ferilizeByUid_args(ferilizeByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.partenUid = other.partenUid;
      this.number = other.number;
    }

    public ferilizeByUid_args deepCopy() {
      return new ferilizeByUid_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setPartenUidIsSet(false);
      this.partenUid = 0;
      setNumberIsSet(false);
      this.number = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public ferilizeByUid_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public ferilizeByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public long getPartenUid() {
      return this.partenUid;
    }

    public ferilizeByUid_args setPartenUid(long partenUid) {
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      return this;
    }

    public void unsetPartenUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    /** Returns true if field partenUid is set (has been assigned a value) and false otherwise */
    public boolean isSetPartenUid() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    public void setPartenUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTENUID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public ferilizeByUid_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARTEN_UID:
        if (value == null) {
          unsetPartenUid();
        } else {
          setPartenUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case PARTEN_UID:
        return Long.valueOf(getPartenUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case PARTEN_UID:
        return isSetPartenUid();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ferilizeByUid_args)
        return this.equals((ferilizeByUid_args)that);
      return false;
    }

    public boolean equals(ferilizeByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_partenUid = true;
      boolean that_present_partenUid = true;
      if (this_present_partenUid || that_present_partenUid) {
        if (!(this_present_partenUid && that_present_partenUid))
          return false;
        if (this.partenUid != that.partenUid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ferilizeByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartenUid()).compareTo(other.isSetPartenUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartenUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partenUid, other.partenUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ferilizeByUid_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partenUid:");
      sb.append(this.partenUid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ferilizeByUid_argsStandardSchemeFactory implements SchemeFactory {
      public ferilizeByUid_argsStandardScheme getScheme() {
        return new ferilizeByUid_argsStandardScheme();
      }
    }

    private static class ferilizeByUid_argsStandardScheme extends StandardScheme<ferilizeByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ferilizeByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // PARTEN_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.partenUid = iprot.readI64();
                struct.setPartenUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ferilizeByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTEN_UID_FIELD_DESC);
        oprot.writeI64(struct.partenUid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ferilizeByUid_argsTupleSchemeFactory implements SchemeFactory {
      public ferilizeByUid_argsTupleScheme getScheme() {
        return new ferilizeByUid_argsTupleScheme();
      }
    }

    private static class ferilizeByUid_argsTupleScheme extends TupleScheme<ferilizeByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ferilizeByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetPartenUid()) {
          optionals.set(2);
        }
        if (struct.isSetNumber()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetPartenUid()) {
          oprot.writeI64(struct.partenUid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ferilizeByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partenUid = iprot.readI64();
          struct.setPartenUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class ferilizeByUid_result implements org.apache.thrift.TBase<ferilizeByUid_result, ferilizeByUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<ferilizeByUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ferilizeByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ferilizeByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ferilizeByUid_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ferilizeByUid_result.class, metaDataMap);
    }

    public ferilizeByUid_result() {
    }

    public ferilizeByUid_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ferilizeByUid_result(ferilizeByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public ferilizeByUid_result deepCopy() {
      return new ferilizeByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public ferilizeByUid_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ferilizeByUid_result)
        return this.equals((ferilizeByUid_result)that);
      return false;
    }

    public boolean equals(ferilizeByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ferilizeByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ferilizeByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ferilizeByUid_resultStandardSchemeFactory implements SchemeFactory {
      public ferilizeByUid_resultStandardScheme getScheme() {
        return new ferilizeByUid_resultStandardScheme();
      }
    }

    private static class ferilizeByUid_resultStandardScheme extends StandardScheme<ferilizeByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ferilizeByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ferilizeByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ferilizeByUid_resultTupleSchemeFactory implements SchemeFactory {
      public ferilizeByUid_resultTupleScheme getScheme() {
        return new ferilizeByUid_resultTupleScheme();
      }
    }

    private static class ferilizeByUid_resultTupleScheme extends TupleScheme<ferilizeByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ferilizeByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ferilizeByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class growFlowersByUid_args implements org.apache.thrift.TBase<growFlowersByUid_args, growFlowersByUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<growFlowersByUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("growFlowersByUid_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField PARTEN_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("partenUid", org.apache.thrift.protocol.TType.I64, (short)-3);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new growFlowersByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new growFlowersByUid_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public long partenUid; // required
    public int number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      PARTEN_UID((short)-3, "partenUid"),
      NUMBER((short)-4, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // PARTEN_UID
            return PARTEN_UID;
          case -4: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __PARTENUID_ISSET_ID = 1;
    private static final int __NUMBER_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARTEN_UID, new org.apache.thrift.meta_data.FieldMetaData("partenUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(growFlowersByUid_args.class, metaDataMap);
    }

    public growFlowersByUid_args() {
    }

    public growFlowersByUid_args(
      String transNo,
      long uid,
      long partenUid,
      int number)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public growFlowersByUid_args(growFlowersByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.partenUid = other.partenUid;
      this.number = other.number;
    }

    public growFlowersByUid_args deepCopy() {
      return new growFlowersByUid_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setPartenUidIsSet(false);
      this.partenUid = 0;
      setNumberIsSet(false);
      this.number = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public growFlowersByUid_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public growFlowersByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public long getPartenUid() {
      return this.partenUid;
    }

    public growFlowersByUid_args setPartenUid(long partenUid) {
      this.partenUid = partenUid;
      setPartenUidIsSet(true);
      return this;
    }

    public void unsetPartenUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    /** Returns true if field partenUid is set (has been assigned a value) and false otherwise */
    public boolean isSetPartenUid() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTENUID_ISSET_ID);
    }

    public void setPartenUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTENUID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public growFlowersByUid_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARTEN_UID:
        if (value == null) {
          unsetPartenUid();
        } else {
          setPartenUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case PARTEN_UID:
        return Long.valueOf(getPartenUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case PARTEN_UID:
        return isSetPartenUid();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof growFlowersByUid_args)
        return this.equals((growFlowersByUid_args)that);
      return false;
    }

    public boolean equals(growFlowersByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_partenUid = true;
      boolean that_present_partenUid = true;
      if (this_present_partenUid || that_present_partenUid) {
        if (!(this_present_partenUid && that_present_partenUid))
          return false;
        if (this.partenUid != that.partenUid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(growFlowersByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartenUid()).compareTo(other.isSetPartenUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartenUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partenUid, other.partenUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("growFlowersByUid_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partenUid:");
      sb.append(this.partenUid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class growFlowersByUid_argsStandardSchemeFactory implements SchemeFactory {
      public growFlowersByUid_argsStandardScheme getScheme() {
        return new growFlowersByUid_argsStandardScheme();
      }
    }

    private static class growFlowersByUid_argsStandardScheme extends StandardScheme<growFlowersByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, growFlowersByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // PARTEN_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.partenUid = iprot.readI64();
                struct.setPartenUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, growFlowersByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTEN_UID_FIELD_DESC);
        oprot.writeI64(struct.partenUid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class growFlowersByUid_argsTupleSchemeFactory implements SchemeFactory {
      public growFlowersByUid_argsTupleScheme getScheme() {
        return new growFlowersByUid_argsTupleScheme();
      }
    }

    private static class growFlowersByUid_argsTupleScheme extends TupleScheme<growFlowersByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, growFlowersByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetPartenUid()) {
          optionals.set(2);
        }
        if (struct.isSetNumber()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetPartenUid()) {
          oprot.writeI64(struct.partenUid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, growFlowersByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partenUid = iprot.readI64();
          struct.setPartenUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class growFlowersByUid_result implements org.apache.thrift.TBase<growFlowersByUid_result, growFlowersByUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<growFlowersByUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("growFlowersByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new growFlowersByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new growFlowersByUid_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(growFlowersByUid_result.class, metaDataMap);
    }

    public growFlowersByUid_result() {
    }

    public growFlowersByUid_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public growFlowersByUid_result(growFlowersByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public growFlowersByUid_result deepCopy() {
      return new growFlowersByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public growFlowersByUid_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof growFlowersByUid_result)
        return this.equals((growFlowersByUid_result)that);
      return false;
    }

    public boolean equals(growFlowersByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(growFlowersByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("growFlowersByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class growFlowersByUid_resultStandardSchemeFactory implements SchemeFactory {
      public growFlowersByUid_resultStandardScheme getScheme() {
        return new growFlowersByUid_resultStandardScheme();
      }
    }

    private static class growFlowersByUid_resultStandardScheme extends StandardScheme<growFlowersByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, growFlowersByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, growFlowersByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class growFlowersByUid_resultTupleSchemeFactory implements SchemeFactory {
      public growFlowersByUid_resultTupleScheme getScheme() {
        return new growFlowersByUid_resultTupleScheme();
      }
    }

    private static class growFlowersByUid_resultTupleScheme extends TupleScheme<growFlowersByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, growFlowersByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, growFlowersByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserProps_args implements org.apache.thrift.TBase<statisticsUserProps_args, statisticsUserProps_args._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserProps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserProps_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserProps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserProps_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserProps_args.class, metaDataMap);
    }

    public statisticsUserProps_args() {
    }

    public statisticsUserProps_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserProps_args(statisticsUserProps_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public statisticsUserProps_args deepCopy() {
      return new statisticsUserProps_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public statisticsUserProps_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserProps_args)
        return this.equals((statisticsUserProps_args)that);
      return false;
    }

    public boolean equals(statisticsUserProps_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserProps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserProps_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserProps_argsStandardSchemeFactory implements SchemeFactory {
      public statisticsUserProps_argsStandardScheme getScheme() {
        return new statisticsUserProps_argsStandardScheme();
      }
    }

    private static class statisticsUserProps_argsStandardScheme extends StandardScheme<statisticsUserProps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserProps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserProps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserProps_argsTupleSchemeFactory implements SchemeFactory {
      public statisticsUserProps_argsTupleScheme getScheme() {
        return new statisticsUserProps_argsTupleScheme();
      }
    }

    private static class statisticsUserProps_argsTupleScheme extends TupleScheme<statisticsUserProps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserProps_result implements org.apache.thrift.TBase<statisticsUserProps_result, statisticsUserProps_result._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserProps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserProps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserProps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserProps_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserProps_result.class, metaDataMap);
    }

    public statisticsUserProps_result() {
    }

    public statisticsUserProps_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserProps_result(statisticsUserProps_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public statisticsUserProps_result deepCopy() {
      return new statisticsUserProps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public statisticsUserProps_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserProps_result)
        return this.equals((statisticsUserProps_result)that);
      return false;
    }

    public boolean equals(statisticsUserProps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserProps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserProps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserProps_resultStandardSchemeFactory implements SchemeFactory {
      public statisticsUserProps_resultStandardScheme getScheme() {
        return new statisticsUserProps_resultStandardScheme();
      }
    }

    private static class statisticsUserProps_resultStandardScheme extends StandardScheme<statisticsUserProps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserProps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserProps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserProps_resultTupleSchemeFactory implements SchemeFactory {
      public statisticsUserProps_resultTupleScheme getScheme() {
        return new statisticsUserProps_resultTupleScheme();
      }
    }

    private static class statisticsUserProps_resultTupleScheme extends TupleScheme<statisticsUserProps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserProps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class giveUserProps_args implements org.apache.thrift.TBase<giveUserProps_args, giveUserProps_args._Fields>, java.io.Serializable, Cloneable, Comparable<giveUserProps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giveUserProps_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField GIVE_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("giveUid", org.apache.thrift.protocol.TType.I64, (short)-3);
    private static final org.apache.thrift.protocol.TField GIVE_PROPS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("givePropsType", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField GIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("giveTime", org.apache.thrift.protocol.TType.I32, (short)-5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giveUserProps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giveUserProps_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public long giveUid; // required
    public int givePropsType; // required
    public int giveTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      GIVE_UID((short)-3, "giveUid"),
      GIVE_PROPS_TYPE((short)-4, "givePropsType"),
      GIVE_TIME((short)-5, "giveTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // GIVE_UID
            return GIVE_UID;
          case -4: // GIVE_PROPS_TYPE
            return GIVE_PROPS_TYPE;
          case -5: // GIVE_TIME
            return GIVE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __GIVEUID_ISSET_ID = 1;
    private static final int __GIVEPROPSTYPE_ISSET_ID = 2;
    private static final int __GIVETIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GIVE_UID, new org.apache.thrift.meta_data.FieldMetaData("giveUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GIVE_PROPS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("givePropsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("giveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giveUserProps_args.class, metaDataMap);
    }

    public giveUserProps_args() {
    }

    public giveUserProps_args(
      String transNo,
      long uid,
      long giveUid,
      int givePropsType,
      int giveTime)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.giveUid = giveUid;
      setGiveUidIsSet(true);
      this.givePropsType = givePropsType;
      setGivePropsTypeIsSet(true);
      this.giveTime = giveTime;
      setGiveTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giveUserProps_args(giveUserProps_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.giveUid = other.giveUid;
      this.givePropsType = other.givePropsType;
      this.giveTime = other.giveTime;
    }

    public giveUserProps_args deepCopy() {
      return new giveUserProps_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setGiveUidIsSet(false);
      this.giveUid = 0;
      setGivePropsTypeIsSet(false);
      this.givePropsType = 0;
      setGiveTimeIsSet(false);
      this.giveTime = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public giveUserProps_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public giveUserProps_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public long getGiveUid() {
      return this.giveUid;
    }

    public giveUserProps_args setGiveUid(long giveUid) {
      this.giveUid = giveUid;
      setGiveUidIsSet(true);
      return this;
    }

    public void unsetGiveUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEUID_ISSET_ID);
    }

    /** Returns true if field giveUid is set (has been assigned a value) and false otherwise */
    public boolean isSetGiveUid() {
      return EncodingUtils.testBit(__isset_bitfield, __GIVEUID_ISSET_ID);
    }

    public void setGiveUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEUID_ISSET_ID, value);
    }

    public int getGivePropsType() {
      return this.givePropsType;
    }

    public giveUserProps_args setGivePropsType(int givePropsType) {
      this.givePropsType = givePropsType;
      setGivePropsTypeIsSet(true);
      return this;
    }

    public void unsetGivePropsType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEPROPSTYPE_ISSET_ID);
    }

    /** Returns true if field givePropsType is set (has been assigned a value) and false otherwise */
    public boolean isSetGivePropsType() {
      return EncodingUtils.testBit(__isset_bitfield, __GIVEPROPSTYPE_ISSET_ID);
    }

    public void setGivePropsTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEPROPSTYPE_ISSET_ID, value);
    }

    public int getGiveTime() {
      return this.giveTime;
    }

    public giveUserProps_args setGiveTime(int giveTime) {
      this.giveTime = giveTime;
      setGiveTimeIsSet(true);
      return this;
    }

    public void unsetGiveTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVETIME_ISSET_ID);
    }

    /** Returns true if field giveTime is set (has been assigned a value) and false otherwise */
    public boolean isSetGiveTime() {
      return EncodingUtils.testBit(__isset_bitfield, __GIVETIME_ISSET_ID);
    }

    public void setGiveTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case GIVE_UID:
        if (value == null) {
          unsetGiveUid();
        } else {
          setGiveUid((Long)value);
        }
        break;

      case GIVE_PROPS_TYPE:
        if (value == null) {
          unsetGivePropsType();
        } else {
          setGivePropsType((Integer)value);
        }
        break;

      case GIVE_TIME:
        if (value == null) {
          unsetGiveTime();
        } else {
          setGiveTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case GIVE_UID:
        return Long.valueOf(getGiveUid());

      case GIVE_PROPS_TYPE:
        return Integer.valueOf(getGivePropsType());

      case GIVE_TIME:
        return Integer.valueOf(getGiveTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case GIVE_UID:
        return isSetGiveUid();
      case GIVE_PROPS_TYPE:
        return isSetGivePropsType();
      case GIVE_TIME:
        return isSetGiveTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giveUserProps_args)
        return this.equals((giveUserProps_args)that);
      return false;
    }

    public boolean equals(giveUserProps_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_giveUid = true;
      boolean that_present_giveUid = true;
      if (this_present_giveUid || that_present_giveUid) {
        if (!(this_present_giveUid && that_present_giveUid))
          return false;
        if (this.giveUid != that.giveUid)
          return false;
      }

      boolean this_present_givePropsType = true;
      boolean that_present_givePropsType = true;
      if (this_present_givePropsType || that_present_givePropsType) {
        if (!(this_present_givePropsType && that_present_givePropsType))
          return false;
        if (this.givePropsType != that.givePropsType)
          return false;
      }

      boolean this_present_giveTime = true;
      boolean that_present_giveTime = true;
      if (this_present_giveTime || that_present_giveTime) {
        if (!(this_present_giveTime && that_present_giveTime))
          return false;
        if (this.giveTime != that.giveTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(giveUserProps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGiveUid()).compareTo(other.isSetGiveUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiveUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveUid, other.giveUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGivePropsType()).compareTo(other.isSetGivePropsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGivePropsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.givePropsType, other.givePropsType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGiveTime()).compareTo(other.isSetGiveTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiveTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveTime, other.giveTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giveUserProps_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("giveUid:");
      sb.append(this.giveUid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("givePropsType:");
      sb.append(this.givePropsType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("giveTime:");
      sb.append(this.giveTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class giveUserProps_argsStandardSchemeFactory implements SchemeFactory {
      public giveUserProps_argsStandardScheme getScheme() {
        return new giveUserProps_argsStandardScheme();
      }
    }

    private static class giveUserProps_argsStandardScheme extends StandardScheme<giveUserProps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giveUserProps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // GIVE_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.giveUid = iprot.readI64();
                struct.setGiveUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // GIVE_PROPS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.givePropsType = iprot.readI32();
                struct.setGivePropsTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // GIVE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.giveTime = iprot.readI32();
                struct.setGiveTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giveUserProps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GIVE_TIME_FIELD_DESC);
        oprot.writeI32(struct.giveTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GIVE_PROPS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.givePropsType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GIVE_UID_FIELD_DESC);
        oprot.writeI64(struct.giveUid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giveUserProps_argsTupleSchemeFactory implements SchemeFactory {
      public giveUserProps_argsTupleScheme getScheme() {
        return new giveUserProps_argsTupleScheme();
      }
    }

    private static class giveUserProps_argsTupleScheme extends TupleScheme<giveUserProps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giveUserProps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetGiveUid()) {
          optionals.set(2);
        }
        if (struct.isSetGivePropsType()) {
          optionals.set(3);
        }
        if (struct.isSetGiveTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetGiveUid()) {
          oprot.writeI64(struct.giveUid);
        }
        if (struct.isSetGivePropsType()) {
          oprot.writeI32(struct.givePropsType);
        }
        if (struct.isSetGiveTime()) {
          oprot.writeI32(struct.giveTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giveUserProps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.giveUid = iprot.readI64();
          struct.setGiveUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.givePropsType = iprot.readI32();
          struct.setGivePropsTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.giveTime = iprot.readI32();
          struct.setGiveTimeIsSet(true);
        }
      }
    }

  }

  public static class giveUserProps_result implements org.apache.thrift.TBase<giveUserProps_result, giveUserProps_result._Fields>, java.io.Serializable, Cloneable, Comparable<giveUserProps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giveUserProps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giveUserProps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giveUserProps_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giveUserProps_result.class, metaDataMap);
    }

    public giveUserProps_result() {
    }

    public giveUserProps_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giveUserProps_result(giveUserProps_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public giveUserProps_result deepCopy() {
      return new giveUserProps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public giveUserProps_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giveUserProps_result)
        return this.equals((giveUserProps_result)that);
      return false;
    }

    public boolean equals(giveUserProps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(giveUserProps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giveUserProps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class giveUserProps_resultStandardSchemeFactory implements SchemeFactory {
      public giveUserProps_resultStandardScheme getScheme() {
        return new giveUserProps_resultStandardScheme();
      }
    }

    private static class giveUserProps_resultStandardScheme extends StandardScheme<giveUserProps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giveUserProps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giveUserProps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giveUserProps_resultTupleSchemeFactory implements SchemeFactory {
      public giveUserProps_resultTupleScheme getScheme() {
        return new giveUserProps_resultTupleScheme();
      }
    }

    private static class giveUserProps_resultTupleScheme extends TupleScheme<giveUserProps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giveUserProps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giveUserProps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserRepertory_args implements org.apache.thrift.TBase<statisticsUserRepertory_args, statisticsUserRepertory_args._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserRepertory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserRepertory_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserRepertory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserRepertory_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserRepertory_args.class, metaDataMap);
    }

    public statisticsUserRepertory_args() {
    }

    public statisticsUserRepertory_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserRepertory_args(statisticsUserRepertory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public statisticsUserRepertory_args deepCopy() {
      return new statisticsUserRepertory_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public statisticsUserRepertory_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserRepertory_args)
        return this.equals((statisticsUserRepertory_args)that);
      return false;
    }

    public boolean equals(statisticsUserRepertory_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserRepertory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserRepertory_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserRepertory_argsStandardSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_argsStandardScheme getScheme() {
        return new statisticsUserRepertory_argsStandardScheme();
      }
    }

    private static class statisticsUserRepertory_argsStandardScheme extends StandardScheme<statisticsUserRepertory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserRepertory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserRepertory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserRepertory_argsTupleSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_argsTupleScheme getScheme() {
        return new statisticsUserRepertory_argsTupleScheme();
      }
    }

    private static class statisticsUserRepertory_argsTupleScheme extends TupleScheme<statisticsUserRepertory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class statisticsUserRepertory_result implements org.apache.thrift.TBase<statisticsUserRepertory_result, statisticsUserRepertory_result._Fields>, java.io.Serializable, Cloneable, Comparable<statisticsUserRepertory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticsUserRepertory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticsUserRepertory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticsUserRepertory_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticsUserRepertory_result.class, metaDataMap);
    }

    public statisticsUserRepertory_result() {
    }

    public statisticsUserRepertory_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticsUserRepertory_result(statisticsUserRepertory_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public statisticsUserRepertory_result deepCopy() {
      return new statisticsUserRepertory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public statisticsUserRepertory_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticsUserRepertory_result)
        return this.equals((statisticsUserRepertory_result)that);
      return false;
    }

    public boolean equals(statisticsUserRepertory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticsUserRepertory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticsUserRepertory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticsUserRepertory_resultStandardSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_resultStandardScheme getScheme() {
        return new statisticsUserRepertory_resultStandardScheme();
      }
    }

    private static class statisticsUserRepertory_resultStandardScheme extends StandardScheme<statisticsUserRepertory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticsUserRepertory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticsUserRepertory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticsUserRepertory_resultTupleSchemeFactory implements SchemeFactory {
      public statisticsUserRepertory_resultTupleScheme getScheme() {
        return new statisticsUserRepertory_resultTupleScheme();
      }
    }

    private static class statisticsUserRepertory_resultTupleScheme extends TupleScheme<statisticsUserRepertory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticsUserRepertory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class buyPropsUsePropsSun_args implements org.apache.thrift.TBase<buyPropsUsePropsSun_args, buyPropsUsePropsSun_args._Fields>, java.io.Serializable, Cloneable, Comparable<buyPropsUsePropsSun_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyPropsUsePropsSun_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField PROPS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("propsType", org.apache.thrift.protocol.TType.I32, (short)-3);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField CONFIG_SUN_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("configSunNumber", org.apache.thrift.protocol.TType.I32, (short)-5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buyPropsUsePropsSun_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buyPropsUsePropsSun_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int propsType; // required
    public int number; // required
    public int configSunNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      PROPS_TYPE((short)-3, "propsType"),
      NUMBER((short)-4, "number"),
      CONFIG_SUN_NUMBER((short)-5, "configSunNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // PROPS_TYPE
            return PROPS_TYPE;
          case -4: // NUMBER
            return NUMBER;
          case -5: // CONFIG_SUN_NUMBER
            return CONFIG_SUN_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __PROPSTYPE_ISSET_ID = 1;
    private static final int __NUMBER_ISSET_ID = 2;
    private static final int __CONFIGSUNNUMBER_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROPS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("propsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONFIG_SUN_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("configSunNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buyPropsUsePropsSun_args.class, metaDataMap);
    }

    public buyPropsUsePropsSun_args() {
    }

    public buyPropsUsePropsSun_args(
      String transNo,
      long uid,
      int propsType,
      int number,
      int configSunNumber)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      this.number = number;
      setNumberIsSet(true);
      this.configSunNumber = configSunNumber;
      setConfigSunNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyPropsUsePropsSun_args(buyPropsUsePropsSun_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.propsType = other.propsType;
      this.number = other.number;
      this.configSunNumber = other.configSunNumber;
    }

    public buyPropsUsePropsSun_args deepCopy() {
      return new buyPropsUsePropsSun_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setPropsTypeIsSet(false);
      this.propsType = 0;
      setNumberIsSet(false);
      this.number = 0;
      setConfigSunNumberIsSet(false);
      this.configSunNumber = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public buyPropsUsePropsSun_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public buyPropsUsePropsSun_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getPropsType() {
      return this.propsType;
    }

    public buyPropsUsePropsSun_args setPropsType(int propsType) {
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      return this;
    }

    public void unsetPropsType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    /** Returns true if field propsType is set (has been assigned a value) and false otherwise */
    public boolean isSetPropsType() {
      return EncodingUtils.testBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    public void setPropsTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPSTYPE_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public buyPropsUsePropsSun_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public int getConfigSunNumber() {
      return this.configSunNumber;
    }

    public buyPropsUsePropsSun_args setConfigSunNumber(int configSunNumber) {
      this.configSunNumber = configSunNumber;
      setConfigSunNumberIsSet(true);
      return this;
    }

    public void unsetConfigSunNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGSUNNUMBER_ISSET_ID);
    }

    /** Returns true if field configSunNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigSunNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIGSUNNUMBER_ISSET_ID);
    }

    public void setConfigSunNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGSUNNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PROPS_TYPE:
        if (value == null) {
          unsetPropsType();
        } else {
          setPropsType((Integer)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      case CONFIG_SUN_NUMBER:
        if (value == null) {
          unsetConfigSunNumber();
        } else {
          setConfigSunNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case PROPS_TYPE:
        return Integer.valueOf(getPropsType());

      case NUMBER:
        return Integer.valueOf(getNumber());

      case CONFIG_SUN_NUMBER:
        return Integer.valueOf(getConfigSunNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case PROPS_TYPE:
        return isSetPropsType();
      case NUMBER:
        return isSetNumber();
      case CONFIG_SUN_NUMBER:
        return isSetConfigSunNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyPropsUsePropsSun_args)
        return this.equals((buyPropsUsePropsSun_args)that);
      return false;
    }

    public boolean equals(buyPropsUsePropsSun_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_propsType = true;
      boolean that_present_propsType = true;
      if (this_present_propsType || that_present_propsType) {
        if (!(this_present_propsType && that_present_propsType))
          return false;
        if (this.propsType != that.propsType)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_configSunNumber = true;
      boolean that_present_configSunNumber = true;
      if (this_present_configSunNumber || that_present_configSunNumber) {
        if (!(this_present_configSunNumber && that_present_configSunNumber))
          return false;
        if (this.configSunNumber != that.configSunNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buyPropsUsePropsSun_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropsType()).compareTo(other.isSetPropsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propsType, other.propsType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigSunNumber()).compareTo(other.isSetConfigSunNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigSunNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configSunNumber, other.configSunNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buyPropsUsePropsSun_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propsType:");
      sb.append(this.propsType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("configSunNumber:");
      sb.append(this.configSunNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buyPropsUsePropsSun_argsStandardSchemeFactory implements SchemeFactory {
      public buyPropsUsePropsSun_argsStandardScheme getScheme() {
        return new buyPropsUsePropsSun_argsStandardScheme();
      }
    }

    private static class buyPropsUsePropsSun_argsStandardScheme extends StandardScheme<buyPropsUsePropsSun_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buyPropsUsePropsSun_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // PROPS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.propsType = iprot.readI32();
                struct.setPropsTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // CONFIG_SUN_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.configSunNumber = iprot.readI32();
                struct.setConfigSunNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buyPropsUsePropsSun_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CONFIG_SUN_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.configSunNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROPS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.propsType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buyPropsUsePropsSun_argsTupleSchemeFactory implements SchemeFactory {
      public buyPropsUsePropsSun_argsTupleScheme getScheme() {
        return new buyPropsUsePropsSun_argsTupleScheme();
      }
    }

    private static class buyPropsUsePropsSun_argsTupleScheme extends TupleScheme<buyPropsUsePropsSun_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buyPropsUsePropsSun_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetPropsType()) {
          optionals.set(2);
        }
        if (struct.isSetNumber()) {
          optionals.set(3);
        }
        if (struct.isSetConfigSunNumber()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetPropsType()) {
          oprot.writeI32(struct.propsType);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
        if (struct.isSetConfigSunNumber()) {
          oprot.writeI32(struct.configSunNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buyPropsUsePropsSun_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.propsType = iprot.readI32();
          struct.setPropsTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.configSunNumber = iprot.readI32();
          struct.setConfigSunNumberIsSet(true);
        }
      }
    }

  }

  public static class buyPropsUsePropsSun_result implements org.apache.thrift.TBase<buyPropsUsePropsSun_result, buyPropsUsePropsSun_result._Fields>, java.io.Serializable, Cloneable, Comparable<buyPropsUsePropsSun_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyPropsUsePropsSun_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buyPropsUsePropsSun_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buyPropsUsePropsSun_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buyPropsUsePropsSun_result.class, metaDataMap);
    }

    public buyPropsUsePropsSun_result() {
    }

    public buyPropsUsePropsSun_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyPropsUsePropsSun_result(buyPropsUsePropsSun_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public buyPropsUsePropsSun_result deepCopy() {
      return new buyPropsUsePropsSun_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public buyPropsUsePropsSun_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyPropsUsePropsSun_result)
        return this.equals((buyPropsUsePropsSun_result)that);
      return false;
    }

    public boolean equals(buyPropsUsePropsSun_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buyPropsUsePropsSun_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buyPropsUsePropsSun_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buyPropsUsePropsSun_resultStandardSchemeFactory implements SchemeFactory {
      public buyPropsUsePropsSun_resultStandardScheme getScheme() {
        return new buyPropsUsePropsSun_resultStandardScheme();
      }
    }

    private static class buyPropsUsePropsSun_resultStandardScheme extends StandardScheme<buyPropsUsePropsSun_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buyPropsUsePropsSun_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buyPropsUsePropsSun_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buyPropsUsePropsSun_resultTupleSchemeFactory implements SchemeFactory {
      public buyPropsUsePropsSun_resultTupleScheme getScheme() {
        return new buyPropsUsePropsSun_resultTupleScheme();
      }
    }

    private static class buyPropsUsePropsSun_resultTupleScheme extends TupleScheme<buyPropsUsePropsSun_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buyPropsUsePropsSun_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buyPropsUsePropsSun_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exchangeVoucher_args implements org.apache.thrift.TBase<exchangeVoucher_args, exchangeVoucher_args._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeVoucher_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeVoucher_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField MONEY_REDPACKAGE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyRedpackageAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)-3);
    private static final org.apache.thrift.protocol.TField PROPS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("propsType", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField CONFIG_PROPS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("configPropsNumber", org.apache.thrift.protocol.TType.I32, (short)-5);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeVoucher_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeVoucher_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public double moneyRedpackageAmount; // required
    public int propsType; // required
    public int configPropsNumber; // required
    public int number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      MONEY_REDPACKAGE_AMOUNT((short)-3, "moneyRedpackageAmount"),
      PROPS_TYPE((short)-4, "propsType"),
      CONFIG_PROPS_NUMBER((short)-5, "configPropsNumber"),
      NUMBER((short)-6, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // MONEY_REDPACKAGE_AMOUNT
            return MONEY_REDPACKAGE_AMOUNT;
          case -4: // PROPS_TYPE
            return PROPS_TYPE;
          case -5: // CONFIG_PROPS_NUMBER
            return CONFIG_PROPS_NUMBER;
          case -6: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __MONEYREDPACKAGEAMOUNT_ISSET_ID = 1;
    private static final int __PROPSTYPE_ISSET_ID = 2;
    private static final int __CONFIGPROPSNUMBER_ISSET_ID = 3;
    private static final int __NUMBER_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MONEY_REDPACKAGE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("moneyRedpackageAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PROPS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("propsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONFIG_PROPS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("configPropsNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeVoucher_args.class, metaDataMap);
    }

    public exchangeVoucher_args() {
    }

    public exchangeVoucher_args(
      String transNo,
      long uid,
      double moneyRedpackageAmount,
      int propsType,
      int configPropsNumber,
      int number)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.moneyRedpackageAmount = moneyRedpackageAmount;
      setMoneyRedpackageAmountIsSet(true);
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      this.configPropsNumber = configPropsNumber;
      setConfigPropsNumberIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeVoucher_args(exchangeVoucher_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.moneyRedpackageAmount = other.moneyRedpackageAmount;
      this.propsType = other.propsType;
      this.configPropsNumber = other.configPropsNumber;
      this.number = other.number;
    }

    public exchangeVoucher_args deepCopy() {
      return new exchangeVoucher_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setMoneyRedpackageAmountIsSet(false);
      this.moneyRedpackageAmount = 0.0;
      setPropsTypeIsSet(false);
      this.propsType = 0;
      setConfigPropsNumberIsSet(false);
      this.configPropsNumber = 0;
      setNumberIsSet(false);
      this.number = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public exchangeVoucher_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public exchangeVoucher_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public double getMoneyRedpackageAmount() {
      return this.moneyRedpackageAmount;
    }

    public exchangeVoucher_args setMoneyRedpackageAmount(double moneyRedpackageAmount) {
      this.moneyRedpackageAmount = moneyRedpackageAmount;
      setMoneyRedpackageAmountIsSet(true);
      return this;
    }

    public void unsetMoneyRedpackageAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYREDPACKAGEAMOUNT_ISSET_ID);
    }

    /** Returns true if field moneyRedpackageAmount is set (has been assigned a value) and false otherwise */
    public boolean isSetMoneyRedpackageAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __MONEYREDPACKAGEAMOUNT_ISSET_ID);
    }

    public void setMoneyRedpackageAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYREDPACKAGEAMOUNT_ISSET_ID, value);
    }

    public int getPropsType() {
      return this.propsType;
    }

    public exchangeVoucher_args setPropsType(int propsType) {
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      return this;
    }

    public void unsetPropsType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    /** Returns true if field propsType is set (has been assigned a value) and false otherwise */
    public boolean isSetPropsType() {
      return EncodingUtils.testBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    public void setPropsTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPSTYPE_ISSET_ID, value);
    }

    public int getConfigPropsNumber() {
      return this.configPropsNumber;
    }

    public exchangeVoucher_args setConfigPropsNumber(int configPropsNumber) {
      this.configPropsNumber = configPropsNumber;
      setConfigPropsNumberIsSet(true);
      return this;
    }

    public void unsetConfigPropsNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGPROPSNUMBER_ISSET_ID);
    }

    /** Returns true if field configPropsNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigPropsNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIGPROPSNUMBER_ISSET_ID);
    }

    public void setConfigPropsNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGPROPSNUMBER_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public exchangeVoucher_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case MONEY_REDPACKAGE_AMOUNT:
        if (value == null) {
          unsetMoneyRedpackageAmount();
        } else {
          setMoneyRedpackageAmount((Double)value);
        }
        break;

      case PROPS_TYPE:
        if (value == null) {
          unsetPropsType();
        } else {
          setPropsType((Integer)value);
        }
        break;

      case CONFIG_PROPS_NUMBER:
        if (value == null) {
          unsetConfigPropsNumber();
        } else {
          setConfigPropsNumber((Integer)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case MONEY_REDPACKAGE_AMOUNT:
        return Double.valueOf(getMoneyRedpackageAmount());

      case PROPS_TYPE:
        return Integer.valueOf(getPropsType());

      case CONFIG_PROPS_NUMBER:
        return Integer.valueOf(getConfigPropsNumber());

      case NUMBER:
        return Integer.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case MONEY_REDPACKAGE_AMOUNT:
        return isSetMoneyRedpackageAmount();
      case PROPS_TYPE:
        return isSetPropsType();
      case CONFIG_PROPS_NUMBER:
        return isSetConfigPropsNumber();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeVoucher_args)
        return this.equals((exchangeVoucher_args)that);
      return false;
    }

    public boolean equals(exchangeVoucher_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_moneyRedpackageAmount = true;
      boolean that_present_moneyRedpackageAmount = true;
      if (this_present_moneyRedpackageAmount || that_present_moneyRedpackageAmount) {
        if (!(this_present_moneyRedpackageAmount && that_present_moneyRedpackageAmount))
          return false;
        if (this.moneyRedpackageAmount != that.moneyRedpackageAmount)
          return false;
      }

      boolean this_present_propsType = true;
      boolean that_present_propsType = true;
      if (this_present_propsType || that_present_propsType) {
        if (!(this_present_propsType && that_present_propsType))
          return false;
        if (this.propsType != that.propsType)
          return false;
      }

      boolean this_present_configPropsNumber = true;
      boolean that_present_configPropsNumber = true;
      if (this_present_configPropsNumber || that_present_configPropsNumber) {
        if (!(this_present_configPropsNumber && that_present_configPropsNumber))
          return false;
        if (this.configPropsNumber != that.configPropsNumber)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeVoucher_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoneyRedpackageAmount()).compareTo(other.isSetMoneyRedpackageAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoneyRedpackageAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyRedpackageAmount, other.moneyRedpackageAmount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropsType()).compareTo(other.isSetPropsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propsType, other.propsType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigPropsNumber()).compareTo(other.isSetConfigPropsNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigPropsNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configPropsNumber, other.configPropsNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeVoucher_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("moneyRedpackageAmount:");
      sb.append(this.moneyRedpackageAmount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propsType:");
      sb.append(this.propsType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("configPropsNumber:");
      sb.append(this.configPropsNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeVoucher_argsStandardSchemeFactory implements SchemeFactory {
      public exchangeVoucher_argsStandardScheme getScheme() {
        return new exchangeVoucher_argsStandardScheme();
      }
    }

    private static class exchangeVoucher_argsStandardScheme extends StandardScheme<exchangeVoucher_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeVoucher_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // MONEY_REDPACKAGE_AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.moneyRedpackageAmount = iprot.readDouble();
                struct.setMoneyRedpackageAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // PROPS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.propsType = iprot.readI32();
                struct.setPropsTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // CONFIG_PROPS_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.configPropsNumber = iprot.readI32();
                struct.setConfigPropsNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -6: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeVoucher_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONFIG_PROPS_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.configPropsNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROPS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.propsType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MONEY_REDPACKAGE_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.moneyRedpackageAmount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeVoucher_argsTupleSchemeFactory implements SchemeFactory {
      public exchangeVoucher_argsTupleScheme getScheme() {
        return new exchangeVoucher_argsTupleScheme();
      }
    }

    private static class exchangeVoucher_argsTupleScheme extends TupleScheme<exchangeVoucher_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeVoucher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetMoneyRedpackageAmount()) {
          optionals.set(2);
        }
        if (struct.isSetPropsType()) {
          optionals.set(3);
        }
        if (struct.isSetConfigPropsNumber()) {
          optionals.set(4);
        }
        if (struct.isSetNumber()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetMoneyRedpackageAmount()) {
          oprot.writeDouble(struct.moneyRedpackageAmount);
        }
        if (struct.isSetPropsType()) {
          oprot.writeI32(struct.propsType);
        }
        if (struct.isSetConfigPropsNumber()) {
          oprot.writeI32(struct.configPropsNumber);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeVoucher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.moneyRedpackageAmount = iprot.readDouble();
          struct.setMoneyRedpackageAmountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.propsType = iprot.readI32();
          struct.setPropsTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.configPropsNumber = iprot.readI32();
          struct.setConfigPropsNumberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class exchangeVoucher_result implements org.apache.thrift.TBase<exchangeVoucher_result, exchangeVoucher_result._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeVoucher_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeVoucher_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeVoucher_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeVoucher_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeVoucher_result.class, metaDataMap);
    }

    public exchangeVoucher_result() {
    }

    public exchangeVoucher_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeVoucher_result(exchangeVoucher_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public exchangeVoucher_result deepCopy() {
      return new exchangeVoucher_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exchangeVoucher_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeVoucher_result)
        return this.equals((exchangeVoucher_result)that);
      return false;
    }

    public boolean equals(exchangeVoucher_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeVoucher_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeVoucher_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeVoucher_resultStandardSchemeFactory implements SchemeFactory {
      public exchangeVoucher_resultStandardScheme getScheme() {
        return new exchangeVoucher_resultStandardScheme();
      }
    }

    private static class exchangeVoucher_resultStandardScheme extends StandardScheme<exchangeVoucher_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeVoucher_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeVoucher_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeVoucher_resultTupleSchemeFactory implements SchemeFactory {
      public exchangeVoucher_resultTupleScheme getScheme() {
        return new exchangeVoucher_resultTupleScheme();
      }
    }

    private static class exchangeVoucher_resultTupleScheme extends TupleScheme<exchangeVoucher_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeVoucher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeVoucher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverflowSun_args implements org.apache.thrift.TBase<getOverflowSun_args, getOverflowSun_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverflowSun_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverflowSun_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverflowSun_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverflowSun_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverflowSun_args.class, metaDataMap);
    }

    public getOverflowSun_args() {
    }

    public getOverflowSun_args(
      String transNo,
      long uid)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverflowSun_args(getOverflowSun_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
    }

    public getOverflowSun_args deepCopy() {
      return new getOverflowSun_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public getOverflowSun_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public getOverflowSun_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverflowSun_args)
        return this.equals((getOverflowSun_args)that);
      return false;
    }

    public boolean equals(getOverflowSun_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOverflowSun_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverflowSun_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverflowSun_argsStandardSchemeFactory implements SchemeFactory {
      public getOverflowSun_argsStandardScheme getScheme() {
        return new getOverflowSun_argsStandardScheme();
      }
    }

    private static class getOverflowSun_argsStandardScheme extends StandardScheme<getOverflowSun_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverflowSun_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverflowSun_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverflowSun_argsTupleSchemeFactory implements SchemeFactory {
      public getOverflowSun_argsTupleScheme getScheme() {
        return new getOverflowSun_argsTupleScheme();
      }
    }

    private static class getOverflowSun_argsTupleScheme extends TupleScheme<getOverflowSun_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverflowSun_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverflowSun_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getOverflowSun_result implements org.apache.thrift.TBase<getOverflowSun_result, getOverflowSun_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverflowSun_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverflowSun_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverflowSun_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverflowSun_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverflowSun_result.class, metaDataMap);
    }

    public getOverflowSun_result() {
    }

    public getOverflowSun_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverflowSun_result(getOverflowSun_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public getOverflowSun_result deepCopy() {
      return new getOverflowSun_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public getOverflowSun_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverflowSun_result)
        return this.equals((getOverflowSun_result)that);
      return false;
    }

    public boolean equals(getOverflowSun_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOverflowSun_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverflowSun_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverflowSun_resultStandardSchemeFactory implements SchemeFactory {
      public getOverflowSun_resultStandardScheme getScheme() {
        return new getOverflowSun_resultStandardScheme();
      }
    }

    private static class getOverflowSun_resultStandardScheme extends StandardScheme<getOverflowSun_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverflowSun_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverflowSun_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverflowSun_resultTupleSchemeFactory implements SchemeFactory {
      public getOverflowSun_resultTupleScheme getScheme() {
        return new getOverflowSun_resultTupleScheme();
      }
    }

    private static class getOverflowSun_resultTupleScheme extends TupleScheme<getOverflowSun_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverflowSun_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverflowSun_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exchangeMoneyRedpackage_args implements org.apache.thrift.TBase<exchangeMoneyRedpackage_args, exchangeMoneyRedpackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeMoneyRedpackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeMoneyRedpackage_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-3);
    private static final org.apache.thrift.protocol.TField CONFIG_NECTAR_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("configNectarNumber", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField MONEY_REDPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyRedpackage", org.apache.thrift.protocol.TType.DOUBLE, (short)-5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeMoneyRedpackage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeMoneyRedpackage_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int number; // required
    public int configNectarNumber; // required
    public double moneyRedpackage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      NUMBER((short)-3, "number"),
      CONFIG_NECTAR_NUMBER((short)-4, "configNectarNumber"),
      MONEY_REDPACKAGE((short)-5, "moneyRedpackage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // NUMBER
            return NUMBER;
          case -4: // CONFIG_NECTAR_NUMBER
            return CONFIG_NECTAR_NUMBER;
          case -5: // MONEY_REDPACKAGE
            return MONEY_REDPACKAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private static final int __CONFIGNECTARNUMBER_ISSET_ID = 2;
    private static final int __MONEYREDPACKAGE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONFIG_NECTAR_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("configNectarNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MONEY_REDPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("moneyRedpackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeMoneyRedpackage_args.class, metaDataMap);
    }

    public exchangeMoneyRedpackage_args() {
    }

    public exchangeMoneyRedpackage_args(
      String transNo,
      long uid,
      int number,
      int configNectarNumber,
      double moneyRedpackage)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
      this.configNectarNumber = configNectarNumber;
      setConfigNectarNumberIsSet(true);
      this.moneyRedpackage = moneyRedpackage;
      setMoneyRedpackageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeMoneyRedpackage_args(exchangeMoneyRedpackage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.number = other.number;
      this.configNectarNumber = other.configNectarNumber;
      this.moneyRedpackage = other.moneyRedpackage;
    }

    public exchangeMoneyRedpackage_args deepCopy() {
      return new exchangeMoneyRedpackage_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0;
      setConfigNectarNumberIsSet(false);
      this.configNectarNumber = 0;
      setMoneyRedpackageIsSet(false);
      this.moneyRedpackage = 0.0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public exchangeMoneyRedpackage_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public exchangeMoneyRedpackage_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public exchangeMoneyRedpackage_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public int getConfigNectarNumber() {
      return this.configNectarNumber;
    }

    public exchangeMoneyRedpackage_args setConfigNectarNumber(int configNectarNumber) {
      this.configNectarNumber = configNectarNumber;
      setConfigNectarNumberIsSet(true);
      return this;
    }

    public void unsetConfigNectarNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGNECTARNUMBER_ISSET_ID);
    }

    /** Returns true if field configNectarNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigNectarNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIGNECTARNUMBER_ISSET_ID);
    }

    public void setConfigNectarNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGNECTARNUMBER_ISSET_ID, value);
    }

    public double getMoneyRedpackage() {
      return this.moneyRedpackage;
    }

    public exchangeMoneyRedpackage_args setMoneyRedpackage(double moneyRedpackage) {
      this.moneyRedpackage = moneyRedpackage;
      setMoneyRedpackageIsSet(true);
      return this;
    }

    public void unsetMoneyRedpackage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYREDPACKAGE_ISSET_ID);
    }

    /** Returns true if field moneyRedpackage is set (has been assigned a value) and false otherwise */
    public boolean isSetMoneyRedpackage() {
      return EncodingUtils.testBit(__isset_bitfield, __MONEYREDPACKAGE_ISSET_ID);
    }

    public void setMoneyRedpackageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYREDPACKAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      case CONFIG_NECTAR_NUMBER:
        if (value == null) {
          unsetConfigNectarNumber();
        } else {
          setConfigNectarNumber((Integer)value);
        }
        break;

      case MONEY_REDPACKAGE:
        if (value == null) {
          unsetMoneyRedpackage();
        } else {
          setMoneyRedpackage((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      case CONFIG_NECTAR_NUMBER:
        return Integer.valueOf(getConfigNectarNumber());

      case MONEY_REDPACKAGE:
        return Double.valueOf(getMoneyRedpackage());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      case CONFIG_NECTAR_NUMBER:
        return isSetConfigNectarNumber();
      case MONEY_REDPACKAGE:
        return isSetMoneyRedpackage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeMoneyRedpackage_args)
        return this.equals((exchangeMoneyRedpackage_args)that);
      return false;
    }

    public boolean equals(exchangeMoneyRedpackage_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_configNectarNumber = true;
      boolean that_present_configNectarNumber = true;
      if (this_present_configNectarNumber || that_present_configNectarNumber) {
        if (!(this_present_configNectarNumber && that_present_configNectarNumber))
          return false;
        if (this.configNectarNumber != that.configNectarNumber)
          return false;
      }

      boolean this_present_moneyRedpackage = true;
      boolean that_present_moneyRedpackage = true;
      if (this_present_moneyRedpackage || that_present_moneyRedpackage) {
        if (!(this_present_moneyRedpackage && that_present_moneyRedpackage))
          return false;
        if (this.moneyRedpackage != that.moneyRedpackage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeMoneyRedpackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigNectarNumber()).compareTo(other.isSetConfigNectarNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigNectarNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configNectarNumber, other.configNectarNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoneyRedpackage()).compareTo(other.isSetMoneyRedpackage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoneyRedpackage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyRedpackage, other.moneyRedpackage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeMoneyRedpackage_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("configNectarNumber:");
      sb.append(this.configNectarNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("moneyRedpackage:");
      sb.append(this.moneyRedpackage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeMoneyRedpackage_argsStandardSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_argsStandardScheme getScheme() {
        return new exchangeMoneyRedpackage_argsStandardScheme();
      }
    }

    private static class exchangeMoneyRedpackage_argsStandardScheme extends StandardScheme<exchangeMoneyRedpackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeMoneyRedpackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // CONFIG_NECTAR_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.configNectarNumber = iprot.readI32();
                struct.setConfigNectarNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // MONEY_REDPACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.moneyRedpackage = iprot.readDouble();
                struct.setMoneyRedpackageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeMoneyRedpackage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MONEY_REDPACKAGE_FIELD_DESC);
        oprot.writeDouble(struct.moneyRedpackage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONFIG_NECTAR_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.configNectarNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeMoneyRedpackage_argsTupleSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_argsTupleScheme getScheme() {
        return new exchangeMoneyRedpackage_argsTupleScheme();
      }
    }

    private static class exchangeMoneyRedpackage_argsTupleScheme extends TupleScheme<exchangeMoneyRedpackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetNumber()) {
          optionals.set(2);
        }
        if (struct.isSetConfigNectarNumber()) {
          optionals.set(3);
        }
        if (struct.isSetMoneyRedpackage()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
        if (struct.isSetConfigNectarNumber()) {
          oprot.writeI32(struct.configNectarNumber);
        }
        if (struct.isSetMoneyRedpackage()) {
          oprot.writeDouble(struct.moneyRedpackage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.configNectarNumber = iprot.readI32();
          struct.setConfigNectarNumberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.moneyRedpackage = iprot.readDouble();
          struct.setMoneyRedpackageIsSet(true);
        }
      }
    }

  }

  public static class exchangeMoneyRedpackage_result implements org.apache.thrift.TBase<exchangeMoneyRedpackage_result, exchangeMoneyRedpackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeMoneyRedpackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeMoneyRedpackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeMoneyRedpackage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeMoneyRedpackage_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeMoneyRedpackage_result.class, metaDataMap);
    }

    public exchangeMoneyRedpackage_result() {
    }

    public exchangeMoneyRedpackage_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeMoneyRedpackage_result(exchangeMoneyRedpackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public exchangeMoneyRedpackage_result deepCopy() {
      return new exchangeMoneyRedpackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public exchangeMoneyRedpackage_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeMoneyRedpackage_result)
        return this.equals((exchangeMoneyRedpackage_result)that);
      return false;
    }

    public boolean equals(exchangeMoneyRedpackage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeMoneyRedpackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeMoneyRedpackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeMoneyRedpackage_resultStandardSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_resultStandardScheme getScheme() {
        return new exchangeMoneyRedpackage_resultStandardScheme();
      }
    }

    private static class exchangeMoneyRedpackage_resultStandardScheme extends StandardScheme<exchangeMoneyRedpackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeMoneyRedpackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeMoneyRedpackage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeMoneyRedpackage_resultTupleSchemeFactory implements SchemeFactory {
      public exchangeMoneyRedpackage_resultTupleScheme getScheme() {
        return new exchangeMoneyRedpackage_resultTupleScheme();
      }
    }

    private static class exchangeMoneyRedpackage_resultTupleScheme extends TupleScheme<exchangeMoneyRedpackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeMoneyRedpackage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserSunTotal_args implements org.apache.thrift.TBase<getUserSunTotal_args, getUserSunTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserSunTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserSunTotal_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserSunTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserSunTotal_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSunTotal_args.class, metaDataMap);
    }

    public getUserSunTotal_args() {
    }

    public getUserSunTotal_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserSunTotal_args(getUserSunTotal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public getUserSunTotal_args deepCopy() {
      return new getUserSunTotal_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public getUserSunTotal_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserSunTotal_args)
        return this.equals((getUserSunTotal_args)that);
      return false;
    }

    public boolean equals(getUserSunTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserSunTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserSunTotal_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserSunTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getUserSunTotal_argsStandardScheme getScheme() {
        return new getUserSunTotal_argsStandardScheme();
      }
    }

    private static class getUserSunTotal_argsStandardScheme extends StandardScheme<getUserSunTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSunTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSunTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserSunTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getUserSunTotal_argsTupleScheme getScheme() {
        return new getUserSunTotal_argsTupleScheme();
      }
    }

    private static class getUserSunTotal_argsTupleScheme extends TupleScheme<getUserSunTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserSunTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserSunTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getUserSunTotal_result implements org.apache.thrift.TBase<getUserSunTotal_result, getUserSunTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserSunTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserSunTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserSunTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserSunTotal_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSunTotal_result.class, metaDataMap);
    }

    public getUserSunTotal_result() {
    }

    public getUserSunTotal_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserSunTotal_result(getUserSunTotal_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public getUserSunTotal_result deepCopy() {
      return new getUserSunTotal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public getUserSunTotal_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserSunTotal_result)
        return this.equals((getUserSunTotal_result)that);
      return false;
    }

    public boolean equals(getUserSunTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserSunTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserSunTotal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserSunTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getUserSunTotal_resultStandardScheme getScheme() {
        return new getUserSunTotal_resultStandardScheme();
      }
    }

    private static class getUserSunTotal_resultStandardScheme extends StandardScheme<getUserSunTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSunTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSunTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserSunTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getUserSunTotal_resultTupleScheme getScheme() {
        return new getUserSunTotal_resultTupleScheme();
      }
    }

    private static class getUserSunTotal_resultTupleScheme extends TupleScheme<getUserSunTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserSunTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserSunTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendPropsRedpackage_args implements org.apache.thrift.TBase<sendPropsRedpackage_args, sendPropsRedpackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendPropsRedpackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPropsRedpackage_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField PROPS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("propsType", org.apache.thrift.protocol.TType.I32, (short)-3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)-4);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-5);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)-6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPropsRedpackage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPropsRedpackage_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int propsType; // required
    public int type; // required
    public int number; // required
    public int amount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      PROPS_TYPE((short)-3, "propsType"),
      TYPE((short)-4, "type"),
      NUMBER((short)-5, "number"),
      AMOUNT((short)-6, "amount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // PROPS_TYPE
            return PROPS_TYPE;
          case -4: // TYPE
            return TYPE;
          case -5: // NUMBER
            return NUMBER;
          case -6: // AMOUNT
            return AMOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __PROPSTYPE_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __NUMBER_ISSET_ID = 3;
    private static final int __AMOUNT_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROPS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("propsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPropsRedpackage_args.class, metaDataMap);
    }

    public sendPropsRedpackage_args() {
    }

    public sendPropsRedpackage_args(
      String transNo,
      long uid,
      int propsType,
      int type,
      int number,
      int amount)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.number = number;
      setNumberIsSet(true);
      this.amount = amount;
      setAmountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPropsRedpackage_args(sendPropsRedpackage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.propsType = other.propsType;
      this.type = other.type;
      this.number = other.number;
      this.amount = other.amount;
    }

    public sendPropsRedpackage_args deepCopy() {
      return new sendPropsRedpackage_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setPropsTypeIsSet(false);
      this.propsType = 0;
      setTypeIsSet(false);
      this.type = 0;
      setNumberIsSet(false);
      this.number = 0;
      setAmountIsSet(false);
      this.amount = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public sendPropsRedpackage_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public sendPropsRedpackage_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getPropsType() {
      return this.propsType;
    }

    public sendPropsRedpackage_args setPropsType(int propsType) {
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      return this;
    }

    public void unsetPropsType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    /** Returns true if field propsType is set (has been assigned a value) and false otherwise */
    public boolean isSetPropsType() {
      return EncodingUtils.testBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    public void setPropsTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPSTYPE_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public sendPropsRedpackage_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public sendPropsRedpackage_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public int getAmount() {
      return this.amount;
    }

    public sendPropsRedpackage_args setAmount(int amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PROPS_TYPE:
        if (value == null) {
          unsetPropsType();
        } else {
          setPropsType((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case PROPS_TYPE:
        return Integer.valueOf(getPropsType());

      case TYPE:
        return Integer.valueOf(getType());

      case NUMBER:
        return Integer.valueOf(getNumber());

      case AMOUNT:
        return Integer.valueOf(getAmount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case PROPS_TYPE:
        return isSetPropsType();
      case TYPE:
        return isSetType();
      case NUMBER:
        return isSetNumber();
      case AMOUNT:
        return isSetAmount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPropsRedpackage_args)
        return this.equals((sendPropsRedpackage_args)that);
      return false;
    }

    public boolean equals(sendPropsRedpackage_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_propsType = true;
      boolean that_present_propsType = true;
      if (this_present_propsType || that_present_propsType) {
        if (!(this_present_propsType && that_present_propsType))
          return false;
        if (this.propsType != that.propsType)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendPropsRedpackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropsType()).compareTo(other.isSetPropsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propsType, other.propsType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPropsRedpackage_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propsType:");
      sb.append(this.propsType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPropsRedpackage_argsStandardSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_argsStandardScheme getScheme() {
        return new sendPropsRedpackage_argsStandardScheme();
      }
    }

    private static class sendPropsRedpackage_argsStandardScheme extends StandardScheme<sendPropsRedpackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPropsRedpackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // PROPS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.propsType = iprot.readI32();
                struct.setPropsTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -6: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.amount = iprot.readI32();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPropsRedpackage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROPS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.propsType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPropsRedpackage_argsTupleSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_argsTupleScheme getScheme() {
        return new sendPropsRedpackage_argsTupleScheme();
      }
    }

    private static class sendPropsRedpackage_argsTupleScheme extends TupleScheme<sendPropsRedpackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetPropsType()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        if (struct.isSetNumber()) {
          optionals.set(4);
        }
        if (struct.isSetAmount()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetPropsType()) {
          oprot.writeI32(struct.propsType);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
        if (struct.isSetAmount()) {
          oprot.writeI32(struct.amount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.propsType = iprot.readI32();
          struct.setPropsTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.amount = iprot.readI32();
          struct.setAmountIsSet(true);
        }
      }
    }

  }

  public static class sendPropsRedpackage_result implements org.apache.thrift.TBase<sendPropsRedpackage_result, sendPropsRedpackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendPropsRedpackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPropsRedpackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPropsRedpackage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPropsRedpackage_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPropsRedpackage_result.class, metaDataMap);
    }

    public sendPropsRedpackage_result() {
    }

    public sendPropsRedpackage_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPropsRedpackage_result(sendPropsRedpackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public sendPropsRedpackage_result deepCopy() {
      return new sendPropsRedpackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public sendPropsRedpackage_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPropsRedpackage_result)
        return this.equals((sendPropsRedpackage_result)that);
      return false;
    }

    public boolean equals(sendPropsRedpackage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendPropsRedpackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPropsRedpackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPropsRedpackage_resultStandardSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_resultStandardScheme getScheme() {
        return new sendPropsRedpackage_resultStandardScheme();
      }
    }

    private static class sendPropsRedpackage_resultStandardScheme extends StandardScheme<sendPropsRedpackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPropsRedpackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPropsRedpackage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPropsRedpackage_resultTupleSchemeFactory implements SchemeFactory {
      public sendPropsRedpackage_resultTupleScheme getScheme() {
        return new sendPropsRedpackage_resultTupleScheme();
      }
    }

    private static class sendPropsRedpackage_resultTupleScheme extends TupleScheme<sendPropsRedpackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPropsRedpackage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listUserPropsRedpackageHistoryByUid_args implements org.apache.thrift.TBase<listUserPropsRedpackageHistoryByUid_args, listUserPropsRedpackageHistoryByUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserPropsRedpackageHistoryByUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserPropsRedpackageHistoryByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)-2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserPropsRedpackageHistoryByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserPropsRedpackageHistoryByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int offset; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid"),
      OFFSET((short)-2, "offset"),
      LIMIT((short)-3, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          case -2: // OFFSET
            return OFFSET;
          case -3: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __LIMIT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserPropsRedpackageHistoryByUid_args.class, metaDataMap);
    }

    public listUserPropsRedpackageHistoryByUid_args() {
    }

    public listUserPropsRedpackageHistoryByUid_args(
      long uid,
      int offset,
      int limit)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserPropsRedpackageHistoryByUid_args(listUserPropsRedpackageHistoryByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public listUserPropsRedpackageHistoryByUid_args deepCopy() {
      return new listUserPropsRedpackageHistoryByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public listUserPropsRedpackageHistoryByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listUserPropsRedpackageHistoryByUid_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public listUserPropsRedpackageHistoryByUid_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case OFFSET:
        return Integer.valueOf(getOffset());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserPropsRedpackageHistoryByUid_args)
        return this.equals((listUserPropsRedpackageHistoryByUid_args)that);
      return false;
    }

    public boolean equals(listUserPropsRedpackageHistoryByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listUserPropsRedpackageHistoryByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserPropsRedpackageHistoryByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_argsStandardSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_argsStandardScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_argsStandardScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_argsStandardScheme extends StandardScheme<listUserPropsRedpackageHistoryByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserPropsRedpackageHistoryByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserPropsRedpackageHistoryByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserPropsRedpackageHistoryByUid_argsTupleSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_argsTupleScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_argsTupleScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_argsTupleScheme extends TupleScheme<listUserPropsRedpackageHistoryByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class listUserPropsRedpackageHistoryByUid_result implements org.apache.thrift.TBase<listUserPropsRedpackageHistoryByUid_result, listUserPropsRedpackageHistoryByUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserPropsRedpackageHistoryByUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserPropsRedpackageHistoryByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserPropsRedpackageHistoryByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserPropsRedpackageHistoryByUid_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserPropsRedpackageHistoryByUid_result.class, metaDataMap);
    }

    public listUserPropsRedpackageHistoryByUid_result() {
    }

    public listUserPropsRedpackageHistoryByUid_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserPropsRedpackageHistoryByUid_result(listUserPropsRedpackageHistoryByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public listUserPropsRedpackageHistoryByUid_result deepCopy() {
      return new listUserPropsRedpackageHistoryByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public listUserPropsRedpackageHistoryByUid_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserPropsRedpackageHistoryByUid_result)
        return this.equals((listUserPropsRedpackageHistoryByUid_result)that);
      return false;
    }

    public boolean equals(listUserPropsRedpackageHistoryByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listUserPropsRedpackageHistoryByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserPropsRedpackageHistoryByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_resultStandardSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_resultStandardScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_resultStandardScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_resultStandardScheme extends StandardScheme<listUserPropsRedpackageHistoryByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserPropsRedpackageHistoryByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserPropsRedpackageHistoryByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserPropsRedpackageHistoryByUid_resultTupleSchemeFactory implements SchemeFactory {
      public listUserPropsRedpackageHistoryByUid_resultTupleScheme getScheme() {
        return new listUserPropsRedpackageHistoryByUid_resultTupleScheme();
      }
    }

    private static class listUserPropsRedpackageHistoryByUid_resultTupleScheme extends TupleScheme<listUserPropsRedpackageHistoryByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserPropsRedpackageHistoryByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listPropsRedpackageRecordByRedpackageId_args implements org.apache.thrift.TBase<listPropsRedpackageRecordByRedpackageId_args, listPropsRedpackageRecordByRedpackageId_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPropsRedpackageRecordByRedpackageId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropsRedpackageRecordByRedpackageId_args");

    private static final org.apache.thrift.protocol.TField REDPACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("redpackageId", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPropsRedpackageRecordByRedpackageId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPropsRedpackageRecordByRedpackageId_argsTupleSchemeFactory());
    }

    public long redpackageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REDPACKAGE_ID((short)-1, "redpackageId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // REDPACKAGE_ID
            return REDPACKAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REDPACKAGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REDPACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("redpackageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropsRedpackageRecordByRedpackageId_args.class, metaDataMap);
    }

    public listPropsRedpackageRecordByRedpackageId_args() {
    }

    public listPropsRedpackageRecordByRedpackageId_args(
      long redpackageId)
    {
      this();
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropsRedpackageRecordByRedpackageId_args(listPropsRedpackageRecordByRedpackageId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.redpackageId = other.redpackageId;
    }

    public listPropsRedpackageRecordByRedpackageId_args deepCopy() {
      return new listPropsRedpackageRecordByRedpackageId_args(this);
    }

    @Override
    public void clear() {
      setRedpackageIdIsSet(false);
      this.redpackageId = 0;
    }

    public long getRedpackageId() {
      return this.redpackageId;
    }

    public listPropsRedpackageRecordByRedpackageId_args setRedpackageId(long redpackageId) {
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
      return this;
    }

    public void unsetRedpackageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    /** Returns true if field redpackageId is set (has been assigned a value) and false otherwise */
    public boolean isSetRedpackageId() {
      return EncodingUtils.testBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    public void setRedpackageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REDPACKAGE_ID:
        if (value == null) {
          unsetRedpackageId();
        } else {
          setRedpackageId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REDPACKAGE_ID:
        return Long.valueOf(getRedpackageId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REDPACKAGE_ID:
        return isSetRedpackageId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropsRedpackageRecordByRedpackageId_args)
        return this.equals((listPropsRedpackageRecordByRedpackageId_args)that);
      return false;
    }

    public boolean equals(listPropsRedpackageRecordByRedpackageId_args that) {
      if (that == null)
        return false;

      boolean this_present_redpackageId = true;
      boolean that_present_redpackageId = true;
      if (this_present_redpackageId || that_present_redpackageId) {
        if (!(this_present_redpackageId && that_present_redpackageId))
          return false;
        if (this.redpackageId != that.redpackageId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listPropsRedpackageRecordByRedpackageId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRedpackageId()).compareTo(other.isSetRedpackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedpackageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redpackageId, other.redpackageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPropsRedpackageRecordByRedpackageId_args(");
      boolean first = true;

      sb.append("redpackageId:");
      sb.append(this.redpackageId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_argsStandardSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_argsStandardScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_argsStandardScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_argsStandardScheme extends StandardScheme<listPropsRedpackageRecordByRedpackageId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropsRedpackageRecordByRedpackageId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // REDPACKAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.redpackageId = iprot.readI64();
                struct.setRedpackageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropsRedpackageRecordByRedpackageId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REDPACKAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.redpackageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropsRedpackageRecordByRedpackageId_argsTupleSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_argsTupleScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_argsTupleScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_argsTupleScheme extends TupleScheme<listPropsRedpackageRecordByRedpackageId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRedpackageId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRedpackageId()) {
          oprot.writeI64(struct.redpackageId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.redpackageId = iprot.readI64();
          struct.setRedpackageIdIsSet(true);
        }
      }
    }

  }

  public static class listPropsRedpackageRecordByRedpackageId_result implements org.apache.thrift.TBase<listPropsRedpackageRecordByRedpackageId_result, listPropsRedpackageRecordByRedpackageId_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPropsRedpackageRecordByRedpackageId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropsRedpackageRecordByRedpackageId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPropsRedpackageRecordByRedpackageId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPropsRedpackageRecordByRedpackageId_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropsRedpackageRecordByRedpackageId_result.class, metaDataMap);
    }

    public listPropsRedpackageRecordByRedpackageId_result() {
    }

    public listPropsRedpackageRecordByRedpackageId_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropsRedpackageRecordByRedpackageId_result(listPropsRedpackageRecordByRedpackageId_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public listPropsRedpackageRecordByRedpackageId_result deepCopy() {
      return new listPropsRedpackageRecordByRedpackageId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public listPropsRedpackageRecordByRedpackageId_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropsRedpackageRecordByRedpackageId_result)
        return this.equals((listPropsRedpackageRecordByRedpackageId_result)that);
      return false;
    }

    public boolean equals(listPropsRedpackageRecordByRedpackageId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listPropsRedpackageRecordByRedpackageId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPropsRedpackageRecordByRedpackageId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_resultStandardSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_resultStandardScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_resultStandardScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_resultStandardScheme extends StandardScheme<listPropsRedpackageRecordByRedpackageId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropsRedpackageRecordByRedpackageId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropsRedpackageRecordByRedpackageId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropsRedpackageRecordByRedpackageId_resultTupleSchemeFactory implements SchemeFactory {
      public listPropsRedpackageRecordByRedpackageId_resultTupleScheme getScheme() {
        return new listPropsRedpackageRecordByRedpackageId_resultTupleScheme();
      }
    }

    private static class listPropsRedpackageRecordByRedpackageId_resultTupleScheme extends TupleScheme<listPropsRedpackageRecordByRedpackageId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropsRedpackageRecordByRedpackageId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPropsRedpackage_args implements org.apache.thrift.TBase<getPropsRedpackage_args, getPropsRedpackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPropsRedpackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropsRedpackage_args");

    private static final org.apache.thrift.protocol.TField REDPACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("redpackageId", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPropsRedpackage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPropsRedpackage_argsTupleSchemeFactory());
    }

    public long redpackageId; // required
    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REDPACKAGE_ID((short)-1, "redpackageId"),
      UID((short)-2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // REDPACKAGE_ID
            return REDPACKAGE_ID;
          case -2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REDPACKAGEID_ISSET_ID = 0;
    private static final int __UID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REDPACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("redpackageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropsRedpackage_args.class, metaDataMap);
    }

    public getPropsRedpackage_args() {
    }

    public getPropsRedpackage_args(
      long redpackageId,
      long uid)
    {
      this();
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropsRedpackage_args(getPropsRedpackage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.redpackageId = other.redpackageId;
      this.uid = other.uid;
    }

    public getPropsRedpackage_args deepCopy() {
      return new getPropsRedpackage_args(this);
    }

    @Override
    public void clear() {
      setRedpackageIdIsSet(false);
      this.redpackageId = 0;
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getRedpackageId() {
      return this.redpackageId;
    }

    public getPropsRedpackage_args setRedpackageId(long redpackageId) {
      this.redpackageId = redpackageId;
      setRedpackageIdIsSet(true);
      return this;
    }

    public void unsetRedpackageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    /** Returns true if field redpackageId is set (has been assigned a value) and false otherwise */
    public boolean isSetRedpackageId() {
      return EncodingUtils.testBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID);
    }

    public void setRedpackageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDPACKAGEID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public getPropsRedpackage_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REDPACKAGE_ID:
        if (value == null) {
          unsetRedpackageId();
        } else {
          setRedpackageId((Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REDPACKAGE_ID:
        return Long.valueOf(getRedpackageId());

      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REDPACKAGE_ID:
        return isSetRedpackageId();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropsRedpackage_args)
        return this.equals((getPropsRedpackage_args)that);
      return false;
    }

    public boolean equals(getPropsRedpackage_args that) {
      if (that == null)
        return false;

      boolean this_present_redpackageId = true;
      boolean that_present_redpackageId = true;
      if (this_present_redpackageId || that_present_redpackageId) {
        if (!(this_present_redpackageId && that_present_redpackageId))
          return false;
        if (this.redpackageId != that.redpackageId)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPropsRedpackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRedpackageId()).compareTo(other.isSetRedpackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedpackageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redpackageId, other.redpackageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPropsRedpackage_args(");
      boolean first = true;

      sb.append("redpackageId:");
      sb.append(this.redpackageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropsRedpackage_argsStandardSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_argsStandardScheme getScheme() {
        return new getPropsRedpackage_argsStandardScheme();
      }
    }

    private static class getPropsRedpackage_argsStandardScheme extends StandardScheme<getPropsRedpackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropsRedpackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // REDPACKAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.redpackageId = iprot.readI64();
                struct.setRedpackageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropsRedpackage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REDPACKAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.redpackageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropsRedpackage_argsTupleSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_argsTupleScheme getScheme() {
        return new getPropsRedpackage_argsTupleScheme();
      }
    }

    private static class getPropsRedpackage_argsTupleScheme extends TupleScheme<getPropsRedpackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRedpackageId()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRedpackageId()) {
          oprot.writeI64(struct.redpackageId);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.redpackageId = iprot.readI64();
          struct.setRedpackageIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getPropsRedpackage_result implements org.apache.thrift.TBase<getPropsRedpackage_result, getPropsRedpackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPropsRedpackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropsRedpackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPropsRedpackage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPropsRedpackage_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropsRedpackage_result.class, metaDataMap);
    }

    public getPropsRedpackage_result() {
    }

    public getPropsRedpackage_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropsRedpackage_result(getPropsRedpackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public getPropsRedpackage_result deepCopy() {
      return new getPropsRedpackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public getPropsRedpackage_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropsRedpackage_result)
        return this.equals((getPropsRedpackage_result)that);
      return false;
    }

    public boolean equals(getPropsRedpackage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPropsRedpackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPropsRedpackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropsRedpackage_resultStandardSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_resultStandardScheme getScheme() {
        return new getPropsRedpackage_resultStandardScheme();
      }
    }

    private static class getPropsRedpackage_resultStandardScheme extends StandardScheme<getPropsRedpackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropsRedpackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropsRedpackage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropsRedpackage_resultTupleSchemeFactory implements SchemeFactory {
      public getPropsRedpackage_resultTupleScheme getScheme() {
        return new getPropsRedpackage_resultTupleScheme();
      }
    }

    private static class getPropsRedpackage_resultTupleScheme extends TupleScheme<getPropsRedpackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropsRedpackage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateUserFlowerUseStatus_args implements org.apache.thrift.TBase<updateUserFlowerUseStatus_args, updateUserFlowerUseStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserFlowerUseStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserFlowerUseStatus_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField GIVE_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("giveUid", org.apache.thrift.protocol.TType.I64, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserFlowerUseStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserFlowerUseStatus_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public long giveUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      GIVE_UID((short)-3, "giveUid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // GIVE_UID
            return GIVE_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __GIVEUID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GIVE_UID, new org.apache.thrift.meta_data.FieldMetaData("giveUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserFlowerUseStatus_args.class, metaDataMap);
    }

    public updateUserFlowerUseStatus_args() {
    }

    public updateUserFlowerUseStatus_args(
      String transNo,
      long uid,
      long giveUid)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.giveUid = giveUid;
      setGiveUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserFlowerUseStatus_args(updateUserFlowerUseStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.giveUid = other.giveUid;
    }

    public updateUserFlowerUseStatus_args deepCopy() {
      return new updateUserFlowerUseStatus_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setGiveUidIsSet(false);
      this.giveUid = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public updateUserFlowerUseStatus_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public updateUserFlowerUseStatus_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public long getGiveUid() {
      return this.giveUid;
    }

    public updateUserFlowerUseStatus_args setGiveUid(long giveUid) {
      this.giveUid = giveUid;
      setGiveUidIsSet(true);
      return this;
    }

    public void unsetGiveUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEUID_ISSET_ID);
    }

    /** Returns true if field giveUid is set (has been assigned a value) and false otherwise */
    public boolean isSetGiveUid() {
      return EncodingUtils.testBit(__isset_bitfield, __GIVEUID_ISSET_ID);
    }

    public void setGiveUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case GIVE_UID:
        if (value == null) {
          unsetGiveUid();
        } else {
          setGiveUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case GIVE_UID:
        return Long.valueOf(getGiveUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case GIVE_UID:
        return isSetGiveUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserFlowerUseStatus_args)
        return this.equals((updateUserFlowerUseStatus_args)that);
      return false;
    }

    public boolean equals(updateUserFlowerUseStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_giveUid = true;
      boolean that_present_giveUid = true;
      if (this_present_giveUid || that_present_giveUid) {
        if (!(this_present_giveUid && that_present_giveUid))
          return false;
        if (this.giveUid != that.giveUid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserFlowerUseStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGiveUid()).compareTo(other.isSetGiveUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiveUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveUid, other.giveUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserFlowerUseStatus_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("giveUid:");
      sb.append(this.giveUid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserFlowerUseStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserFlowerUseStatus_argsStandardScheme getScheme() {
        return new updateUserFlowerUseStatus_argsStandardScheme();
      }
    }

    private static class updateUserFlowerUseStatus_argsStandardScheme extends StandardScheme<updateUserFlowerUseStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserFlowerUseStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // GIVE_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.giveUid = iprot.readI64();
                struct.setGiveUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserFlowerUseStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GIVE_UID_FIELD_DESC);
        oprot.writeI64(struct.giveUid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserFlowerUseStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserFlowerUseStatus_argsTupleScheme getScheme() {
        return new updateUserFlowerUseStatus_argsTupleScheme();
      }
    }

    private static class updateUserFlowerUseStatus_argsTupleScheme extends TupleScheme<updateUserFlowerUseStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserFlowerUseStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetGiveUid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetGiveUid()) {
          oprot.writeI64(struct.giveUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserFlowerUseStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.giveUid = iprot.readI64();
          struct.setGiveUidIsSet(true);
        }
      }
    }

  }

  public static class updateUserFlowerUseStatus_result implements org.apache.thrift.TBase<updateUserFlowerUseStatus_result, updateUserFlowerUseStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserFlowerUseStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserFlowerUseStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserFlowerUseStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserFlowerUseStatus_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserFlowerUseStatus_result.class, metaDataMap);
    }

    public updateUserFlowerUseStatus_result() {
    }

    public updateUserFlowerUseStatus_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserFlowerUseStatus_result(updateUserFlowerUseStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public updateUserFlowerUseStatus_result deepCopy() {
      return new updateUserFlowerUseStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public updateUserFlowerUseStatus_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserFlowerUseStatus_result)
        return this.equals((updateUserFlowerUseStatus_result)that);
      return false;
    }

    public boolean equals(updateUserFlowerUseStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserFlowerUseStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserFlowerUseStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserFlowerUseStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserFlowerUseStatus_resultStandardScheme getScheme() {
        return new updateUserFlowerUseStatus_resultStandardScheme();
      }
    }

    private static class updateUserFlowerUseStatus_resultStandardScheme extends StandardScheme<updateUserFlowerUseStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserFlowerUseStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserFlowerUseStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserFlowerUseStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserFlowerUseStatus_resultTupleScheme getScheme() {
        return new updateUserFlowerUseStatus_resultTupleScheme();
      }
    }

    private static class updateUserFlowerUseStatus_resultTupleScheme extends TupleScheme<updateUserFlowerUseStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserFlowerUseStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserFlowerUseStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserGiveFlower_args implements org.apache.thrift.TBase<getUserGiveFlower_args, getUserGiveFlower_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserGiveFlower_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserGiveFlower_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserGiveFlower_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserGiveFlower_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserGiveFlower_args.class, metaDataMap);
    }

    public getUserGiveFlower_args() {
    }

    public getUserGiveFlower_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserGiveFlower_args(getUserGiveFlower_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public getUserGiveFlower_args deepCopy() {
      return new getUserGiveFlower_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public getUserGiveFlower_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserGiveFlower_args)
        return this.equals((getUserGiveFlower_args)that);
      return false;
    }

    public boolean equals(getUserGiveFlower_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserGiveFlower_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserGiveFlower_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserGiveFlower_argsStandardSchemeFactory implements SchemeFactory {
      public getUserGiveFlower_argsStandardScheme getScheme() {
        return new getUserGiveFlower_argsStandardScheme();
      }
    }

    private static class getUserGiveFlower_argsStandardScheme extends StandardScheme<getUserGiveFlower_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserGiveFlower_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserGiveFlower_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserGiveFlower_argsTupleSchemeFactory implements SchemeFactory {
      public getUserGiveFlower_argsTupleScheme getScheme() {
        return new getUserGiveFlower_argsTupleScheme();
      }
    }

    private static class getUserGiveFlower_argsTupleScheme extends TupleScheme<getUserGiveFlower_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserGiveFlower_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserGiveFlower_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getUserGiveFlower_result implements org.apache.thrift.TBase<getUserGiveFlower_result, getUserGiveFlower_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserGiveFlower_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserGiveFlower_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserGiveFlower_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserGiveFlower_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserGiveFlower_result.class, metaDataMap);
    }

    public getUserGiveFlower_result() {
    }

    public getUserGiveFlower_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserGiveFlower_result(getUserGiveFlower_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public getUserGiveFlower_result deepCopy() {
      return new getUserGiveFlower_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public getUserGiveFlower_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserGiveFlower_result)
        return this.equals((getUserGiveFlower_result)that);
      return false;
    }

    public boolean equals(getUserGiveFlower_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserGiveFlower_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserGiveFlower_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserGiveFlower_resultStandardSchemeFactory implements SchemeFactory {
      public getUserGiveFlower_resultStandardScheme getScheme() {
        return new getUserGiveFlower_resultStandardScheme();
      }
    }

    private static class getUserGiveFlower_resultStandardScheme extends StandardScheme<getUserGiveFlower_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserGiveFlower_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserGiveFlower_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserGiveFlower_resultTupleSchemeFactory implements SchemeFactory {
      public getUserGiveFlower_resultTupleScheme getScheme() {
        return new getUserGiveFlower_resultTupleScheme();
      }
    }

    private static class getUserGiveFlower_resultTupleScheme extends TupleScheme<getUserGiveFlower_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserGiveFlower_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserGiveFlower_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listPropsReport_args implements org.apache.thrift.TBase<listPropsReport_args, listPropsReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPropsReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropsReport_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField PROPS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("propsType", org.apache.thrift.protocol.TType.I32, (short)-2);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)-3);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)-4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPropsReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPropsReport_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int propsType; // required
    public int offset; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid"),
      PROPS_TYPE((short)-2, "propsType"),
      OFFSET((short)-3, "offset"),
      LIMIT((short)-4, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          case -2: // PROPS_TYPE
            return PROPS_TYPE;
          case -3: // OFFSET
            return OFFSET;
          case -4: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __PROPSTYPE_ISSET_ID = 1;
    private static final int __OFFSET_ISSET_ID = 2;
    private static final int __LIMIT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROPS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("propsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropsReport_args.class, metaDataMap);
    }

    public listPropsReport_args() {
    }

    public listPropsReport_args(
      long uid,
      int propsType,
      int offset,
      int limit)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropsReport_args(listPropsReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.propsType = other.propsType;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public listPropsReport_args deepCopy() {
      return new listPropsReport_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setPropsTypeIsSet(false);
      this.propsType = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public listPropsReport_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getPropsType() {
      return this.propsType;
    }

    public listPropsReport_args setPropsType(int propsType) {
      this.propsType = propsType;
      setPropsTypeIsSet(true);
      return this;
    }

    public void unsetPropsType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    /** Returns true if field propsType is set (has been assigned a value) and false otherwise */
    public boolean isSetPropsType() {
      return EncodingUtils.testBit(__isset_bitfield, __PROPSTYPE_ISSET_ID);
    }

    public void setPropsTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPSTYPE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listPropsReport_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public listPropsReport_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PROPS_TYPE:
        if (value == null) {
          unsetPropsType();
        } else {
          setPropsType((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PROPS_TYPE:
        return Integer.valueOf(getPropsType());

      case OFFSET:
        return Integer.valueOf(getOffset());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PROPS_TYPE:
        return isSetPropsType();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropsReport_args)
        return this.equals((listPropsReport_args)that);
      return false;
    }

    public boolean equals(listPropsReport_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_propsType = true;
      boolean that_present_propsType = true;
      if (this_present_propsType || that_present_propsType) {
        if (!(this_present_propsType && that_present_propsType))
          return false;
        if (this.propsType != that.propsType)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listPropsReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropsType()).compareTo(other.isSetPropsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propsType, other.propsType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPropsReport_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("propsType:");
      sb.append(this.propsType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropsReport_argsStandardSchemeFactory implements SchemeFactory {
      public listPropsReport_argsStandardScheme getScheme() {
        return new listPropsReport_argsStandardScheme();
      }
    }

    private static class listPropsReport_argsStandardScheme extends StandardScheme<listPropsReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropsReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // PROPS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.propsType = iprot.readI32();
                struct.setPropsTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropsReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROPS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.propsType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropsReport_argsTupleSchemeFactory implements SchemeFactory {
      public listPropsReport_argsTupleScheme getScheme() {
        return new listPropsReport_argsTupleScheme();
      }
    }

    private static class listPropsReport_argsTupleScheme extends TupleScheme<listPropsReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropsReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetPropsType()) {
          optionals.set(1);
        }
        if (struct.isSetOffset()) {
          optionals.set(2);
        }
        if (struct.isSetLimit()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetPropsType()) {
          oprot.writeI32(struct.propsType);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropsReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.propsType = iprot.readI32();
          struct.setPropsTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(3)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class listPropsReport_result implements org.apache.thrift.TBase<listPropsReport_result, listPropsReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPropsReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropsReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPropsReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPropsReport_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropsReport_result.class, metaDataMap);
    }

    public listPropsReport_result() {
    }

    public listPropsReport_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropsReport_result(listPropsReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public listPropsReport_result deepCopy() {
      return new listPropsReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public listPropsReport_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropsReport_result)
        return this.equals((listPropsReport_result)that);
      return false;
    }

    public boolean equals(listPropsReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listPropsReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPropsReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropsReport_resultStandardSchemeFactory implements SchemeFactory {
      public listPropsReport_resultStandardScheme getScheme() {
        return new listPropsReport_resultStandardScheme();
      }
    }

    private static class listPropsReport_resultStandardScheme extends StandardScheme<listPropsReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropsReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropsReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropsReport_resultTupleSchemeFactory implements SchemeFactory {
      public listPropsReport_resultTupleScheme getScheme() {
        return new listPropsReport_resultTupleScheme();
      }
    }

    private static class listPropsReport_resultTupleScheme extends TupleScheme<listPropsReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropsReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropsReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exchangeReport_args implements org.apache.thrift.TBase<exchangeReport_args, exchangeReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeReport_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)-2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeReport_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int offset; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid"),
      OFFSET((short)-2, "offset"),
      LIMIT((short)-3, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          case -2: // OFFSET
            return OFFSET;
          case -3: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __LIMIT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeReport_args.class, metaDataMap);
    }

    public exchangeReport_args() {
    }

    public exchangeReport_args(
      long uid,
      int offset,
      int limit)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeReport_args(exchangeReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public exchangeReport_args deepCopy() {
      return new exchangeReport_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public exchangeReport_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public exchangeReport_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public exchangeReport_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case OFFSET:
        return Integer.valueOf(getOffset());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeReport_args)
        return this.equals((exchangeReport_args)that);
      return false;
    }

    public boolean equals(exchangeReport_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeReport_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeReport_argsStandardSchemeFactory implements SchemeFactory {
      public exchangeReport_argsStandardScheme getScheme() {
        return new exchangeReport_argsStandardScheme();
      }
    }

    private static class exchangeReport_argsStandardScheme extends StandardScheme<exchangeReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeReport_argsTupleSchemeFactory implements SchemeFactory {
      public exchangeReport_argsTupleScheme getScheme() {
        return new exchangeReport_argsTupleScheme();
      }
    }

    private static class exchangeReport_argsTupleScheme extends TupleScheme<exchangeReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class exchangeReport_result implements org.apache.thrift.TBase<exchangeReport_result, exchangeReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<exchangeReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeReport_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeReport_result.class, metaDataMap);
    }

    public exchangeReport_result() {
    }

    public exchangeReport_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeReport_result(exchangeReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public exchangeReport_result deepCopy() {
      return new exchangeReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public exchangeReport_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeReport_result)
        return this.equals((exchangeReport_result)that);
      return false;
    }

    public boolean equals(exchangeReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exchangeReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeReport_resultStandardSchemeFactory implements SchemeFactory {
      public exchangeReport_resultStandardScheme getScheme() {
        return new exchangeReport_resultStandardScheme();
      }
    }

    private static class exchangeReport_resultStandardScheme extends StandardScheme<exchangeReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeReport_resultTupleSchemeFactory implements SchemeFactory {
      public exchangeReport_resultTupleScheme getScheme() {
        return new exchangeReport_resultTupleScheme();
      }
    }

    private static class exchangeReport_resultTupleScheme extends TupleScheme<exchangeReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listUserNectarList_args implements org.apache.thrift.TBase<listUserNectarList_args, listUserNectarList_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserNectarList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserNectarList_args");

    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)-1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserNectarList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserNectarList_argsTupleSchemeFactory());
    }

    public int offset; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OFFSET((short)-1, "offset"),
      LIMIT((short)-2, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // OFFSET
            return OFFSET;
          case -2: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserNectarList_args.class, metaDataMap);
    }

    public listUserNectarList_args() {
    }

    public listUserNectarList_args(
      int offset,
      int limit)
    {
      this();
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserNectarList_args(listUserNectarList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public listUserNectarList_args deepCopy() {
      return new listUserNectarList_args(this);
    }

    @Override
    public void clear() {
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public int getOffset() {
      return this.offset;
    }

    public listUserNectarList_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public listUserNectarList_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OFFSET:
        return Integer.valueOf(getOffset());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserNectarList_args)
        return this.equals((listUserNectarList_args)that);
      return false;
    }

    public boolean equals(listUserNectarList_args that) {
      if (that == null)
        return false;

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listUserNectarList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserNectarList_args(");
      boolean first = true;

      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserNectarList_argsStandardSchemeFactory implements SchemeFactory {
      public listUserNectarList_argsStandardScheme getScheme() {
        return new listUserNectarList_argsStandardScheme();
      }
    }

    private static class listUserNectarList_argsStandardScheme extends StandardScheme<listUserNectarList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserNectarList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserNectarList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserNectarList_argsTupleSchemeFactory implements SchemeFactory {
      public listUserNectarList_argsTupleScheme getScheme() {
        return new listUserNectarList_argsTupleScheme();
      }
    }

    private static class listUserNectarList_argsTupleScheme extends TupleScheme<listUserNectarList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserNectarList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOffset()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserNectarList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class listUserNectarList_result implements org.apache.thrift.TBase<listUserNectarList_result, listUserNectarList_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserNectarList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserNectarList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserNectarList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserNectarList_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserNectarList_result.class, metaDataMap);
    }

    public listUserNectarList_result() {
    }

    public listUserNectarList_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserNectarList_result(listUserNectarList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public listUserNectarList_result deepCopy() {
      return new listUserNectarList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public listUserNectarList_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserNectarList_result)
        return this.equals((listUserNectarList_result)that);
      return false;
    }

    public boolean equals(listUserNectarList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listUserNectarList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserNectarList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserNectarList_resultStandardSchemeFactory implements SchemeFactory {
      public listUserNectarList_resultStandardScheme getScheme() {
        return new listUserNectarList_resultStandardScheme();
      }
    }

    private static class listUserNectarList_resultStandardScheme extends StandardScheme<listUserNectarList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserNectarList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserNectarList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserNectarList_resultTupleSchemeFactory implements SchemeFactory {
      public listUserNectarList_resultTupleScheme getScheme() {
        return new listUserNectarList_resultTupleScheme();
      }
    }

    private static class listUserNectarList_resultTupleScheme extends TupleScheme<listUserNectarList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserNectarList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserNectarList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addUserNectar_args implements org.apache.thrift.TBase<addUserNectar_args, addUserNectar_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUserNectar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserNectar_args");

    private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserNectar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserNectar_argsTupleSchemeFactory());
    }

    public String transNo; // required
    public long uid; // required
    public int number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_NO((short)-1, "transNo"),
      UID((short)-2, "uid"),
      NUMBER((short)-3, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // TRANS_NO
            return TRANS_NO;
          case -2: // UID
            return UID;
          case -3: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserNectar_args.class, metaDataMap);
    }

    public addUserNectar_args() {
    }

    public addUserNectar_args(
      String transNo,
      long uid,
      int number)
    {
      this();
      this.transNo = transNo;
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserNectar_args(addUserNectar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTransNo()) {
        this.transNo = other.transNo;
      }
      this.uid = other.uid;
      this.number = other.number;
    }

    public addUserNectar_args deepCopy() {
      return new addUserNectar_args(this);
    }

    @Override
    public void clear() {
      this.transNo = null;
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0;
    }

    public String getTransNo() {
      return this.transNo;
    }

    public addUserNectar_args setTransNo(String transNo) {
      this.transNo = transNo;
      return this;
    }

    public void unsetTransNo() {
      this.transNo = null;
    }

    /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransNo() {
      return this.transNo != null;
    }

    public void setTransNoIsSet(boolean value) {
      if (!value) {
        this.transNo = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public addUserNectar_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public addUserNectar_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_NO:
        return getTransNo();

      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_NO:
        return isSetTransNo();
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserNectar_args)
        return this.equals((addUserNectar_args)that);
      return false;
    }

    public boolean equals(addUserNectar_args that) {
      if (that == null)
        return false;

      boolean this_present_transNo = true && this.isSetTransNo();
      boolean that_present_transNo = true && that.isSetTransNo();
      if (this_present_transNo || that_present_transNo) {
        if (!(this_present_transNo && that_present_transNo))
          return false;
        if (!this.transNo.equals(that.transNo))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addUserNectar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserNectar_args(");
      boolean first = true;

      sb.append("transNo:");
      if (this.transNo == null) {
        sb.append("null");
      } else {
        sb.append(this.transNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserNectar_argsStandardSchemeFactory implements SchemeFactory {
      public addUserNectar_argsStandardScheme getScheme() {
        return new addUserNectar_argsStandardScheme();
      }
    }

    private static class addUserNectar_argsStandardScheme extends StandardScheme<addUserNectar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserNectar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // TRANS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transNo = iprot.readString();
                struct.setTransNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserNectar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.transNo != null) {
          oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
          oprot.writeString(struct.transNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserNectar_argsTupleSchemeFactory implements SchemeFactory {
      public addUserNectar_argsTupleScheme getScheme() {
        return new addUserNectar_argsTupleScheme();
      }
    }

    private static class addUserNectar_argsTupleScheme extends TupleScheme<addUserNectar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserNectar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransNo()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTransNo()) {
          oprot.writeString(struct.transNo);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserNectar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.transNo = iprot.readString();
          struct.setTransNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class addUserNectar_result implements org.apache.thrift.TBase<addUserNectar_result, addUserNectar_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUserNectar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserNectar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserNectar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserNectar_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserNectar_result.class, metaDataMap);
    }

    public addUserNectar_result() {
    }

    public addUserNectar_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserNectar_result(addUserNectar_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public addUserNectar_result deepCopy() {
      return new addUserNectar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public addUserNectar_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserNectar_result)
        return this.equals((addUserNectar_result)that);
      return false;
    }

    public boolean equals(addUserNectar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addUserNectar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserNectar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserNectar_resultStandardSchemeFactory implements SchemeFactory {
      public addUserNectar_resultStandardScheme getScheme() {
        return new addUserNectar_resultStandardScheme();
      }
    }

    private static class addUserNectar_resultStandardScheme extends StandardScheme<addUserNectar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserNectar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserNectar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserNectar_resultTupleSchemeFactory implements SchemeFactory {
      public addUserNectar_resultTupleScheme getScheme() {
        return new addUserNectar_resultTupleScheme();
      }
    }

    private static class addUserNectar_resultTupleScheme extends TupleScheme<addUserNectar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserNectar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserNectar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class overFlowerSunNumber_args implements org.apache.thrift.TBase<overFlowerSunNumber_args, overFlowerSunNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<overFlowerSunNumber_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("overFlowerSunNumber_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new overFlowerSunNumber_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new overFlowerSunNumber_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(overFlowerSunNumber_args.class, metaDataMap);
    }

    public overFlowerSunNumber_args() {
    }

    public overFlowerSunNumber_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public overFlowerSunNumber_args(overFlowerSunNumber_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public overFlowerSunNumber_args deepCopy() {
      return new overFlowerSunNumber_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public overFlowerSunNumber_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof overFlowerSunNumber_args)
        return this.equals((overFlowerSunNumber_args)that);
      return false;
    }

    public boolean equals(overFlowerSunNumber_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(overFlowerSunNumber_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("overFlowerSunNumber_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class overFlowerSunNumber_argsStandardSchemeFactory implements SchemeFactory {
      public overFlowerSunNumber_argsStandardScheme getScheme() {
        return new overFlowerSunNumber_argsStandardScheme();
      }
    }

    private static class overFlowerSunNumber_argsStandardScheme extends StandardScheme<overFlowerSunNumber_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, overFlowerSunNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, overFlowerSunNumber_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class overFlowerSunNumber_argsTupleSchemeFactory implements SchemeFactory {
      public overFlowerSunNumber_argsTupleScheme getScheme() {
        return new overFlowerSunNumber_argsTupleScheme();
      }
    }

    private static class overFlowerSunNumber_argsTupleScheme extends TupleScheme<overFlowerSunNumber_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, overFlowerSunNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, overFlowerSunNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class overFlowerSunNumber_result implements org.apache.thrift.TBase<overFlowerSunNumber_result, overFlowerSunNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<overFlowerSunNumber_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("overFlowerSunNumber_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new overFlowerSunNumber_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new overFlowerSunNumber_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(overFlowerSunNumber_result.class, metaDataMap);
    }

    public overFlowerSunNumber_result() {
    }

    public overFlowerSunNumber_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public overFlowerSunNumber_result(overFlowerSunNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public overFlowerSunNumber_result deepCopy() {
      return new overFlowerSunNumber_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public overFlowerSunNumber_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof overFlowerSunNumber_result)
        return this.equals((overFlowerSunNumber_result)that);
      return false;
    }

    public boolean equals(overFlowerSunNumber_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(overFlowerSunNumber_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("overFlowerSunNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class overFlowerSunNumber_resultStandardSchemeFactory implements SchemeFactory {
      public overFlowerSunNumber_resultStandardScheme getScheme() {
        return new overFlowerSunNumber_resultStandardScheme();
      }
    }

    private static class overFlowerSunNumber_resultStandardScheme extends StandardScheme<overFlowerSunNumber_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, overFlowerSunNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, overFlowerSunNumber_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class overFlowerSunNumber_resultTupleSchemeFactory implements SchemeFactory {
      public overFlowerSunNumber_resultTupleScheme getScheme() {
        return new overFlowerSunNumber_resultTupleScheme();
      }
    }

    private static class overFlowerSunNumber_resultTupleScheme extends TupleScheme<overFlowerSunNumber_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, overFlowerSunNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, overFlowerSunNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateUserRepository_args implements org.apache.thrift.TBase<updateUserRepository_args, updateUserRepository_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserRepository_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserRepository_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)-1);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserRepository_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserRepository_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)-1, "uid"),
      NUMBER((short)-2, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UID
            return UID;
          case -2: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserRepository_args.class, metaDataMap);
    }

    public updateUserRepository_args() {
    }

    public updateUserRepository_args(
      long uid,
      int number)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserRepository_args(updateUserRepository_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.number = other.number;
    }

    public updateUserRepository_args deepCopy() {
      return new updateUserRepository_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setNumberIsSet(false);
      this.number = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public updateUserRepository_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getNumber() {
      return this.number;
    }

    public updateUserRepository_args setNumber(int number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case NUMBER:
        return Integer.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserRepository_args)
        return this.equals((updateUserRepository_args)that);
      return false;
    }

    public boolean equals(updateUserRepository_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserRepository_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserRepository_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserRepository_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserRepository_argsStandardScheme getScheme() {
        return new updateUserRepository_argsStandardScheme();
      }
    }

    private static class updateUserRepository_argsStandardScheme extends StandardScheme<updateUserRepository_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserRepository_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserRepository_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserRepository_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserRepository_argsTupleScheme getScheme() {
        return new updateUserRepository_argsTupleScheme();
      }
    }

    private static class updateUserRepository_argsTupleScheme extends TupleScheme<updateUserRepository_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetNumber()) {
          oprot.writeI32(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.number = iprot.readI32();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class updateUserRepository_result implements org.apache.thrift.TBase<updateUserRepository_result, updateUserRepository_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserRepository_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserRepository_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserRepository_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserRepository_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserRepository_result.class, metaDataMap);
    }

    public updateUserRepository_result() {
    }

    public updateUserRepository_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserRepository_result(updateUserRepository_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public updateUserRepository_result deepCopy() {
      return new updateUserRepository_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public updateUserRepository_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserRepository_result)
        return this.equals((updateUserRepository_result)that);
      return false;
    }

    public boolean equals(updateUserRepository_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserRepository_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserRepository_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserRepository_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserRepository_resultStandardScheme getScheme() {
        return new updateUserRepository_resultStandardScheme();
      }
    }

    private static class updateUserRepository_resultStandardScheme extends StandardScheme<updateUserRepository_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserRepository_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserRepository_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserRepository_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserRepository_resultTupleScheme getScheme() {
        return new updateUserRepository_resultTupleScheme();
      }
    }

    private static class updateUserRepository_resultTupleScheme extends TupleScheme<updateUserRepository_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserSunAndNectar_args implements org.apache.thrift.TBase<getUserSunAndNectar_args, getUserSunAndNectar_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserSunAndNectar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserSunAndNectar_args");

    private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.LIST, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserSunAndNectar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserSunAndNectar_argsTupleSchemeFactory());
    }

    public List<Long> uids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UIDS((short)-1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSunAndNectar_args.class, metaDataMap);
    }

    public getUserSunAndNectar_args() {
    }

    public getUserSunAndNectar_args(
      List<Long> uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserSunAndNectar_args(getUserSunAndNectar_args other) {
      if (other.isSetUids()) {
        List<Long> __this__uids = new ArrayList<Long>(other.uids);
        this.uids = __this__uids;
      }
    }

    public getUserSunAndNectar_args deepCopy() {
      return new getUserSunAndNectar_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<Long> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(long elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<Long>();
      }
      this.uids.add(elem);
    }

    public List<Long> getUids() {
      return this.uids;
    }

    public getUserSunAndNectar_args setUids(List<Long> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been assigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserSunAndNectar_args)
        return this.equals((getUserSunAndNectar_args)that);
      return false;
    }

    public boolean equals(getUserSunAndNectar_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserSunAndNectar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(other.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, other.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserSunAndNectar_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserSunAndNectar_argsStandardSchemeFactory implements SchemeFactory {
      public getUserSunAndNectar_argsStandardScheme getScheme() {
        return new getUserSunAndNectar_argsStandardScheme();
      }
    }

    private static class getUserSunAndNectar_argsStandardScheme extends StandardScheme<getUserSunAndNectar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSunAndNectar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // UIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.uids = new ArrayList<Long>(_list28.size);
                  for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                  {
                    long _elem30;
                    _elem30 = iprot.readI64();
                    struct.uids.add(_elem30);
                  }
                  iprot.readListEnd();
                }
                struct.setUidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSunAndNectar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uids != null) {
          oprot.writeFieldBegin(UIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.uids.size()));
            for (long _iter31 : struct.uids)
            {
              oprot.writeI64(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserSunAndNectar_argsTupleSchemeFactory implements SchemeFactory {
      public getUserSunAndNectar_argsTupleScheme getScheme() {
        return new getUserSunAndNectar_argsTupleScheme();
      }
    }

    private static class getUserSunAndNectar_argsTupleScheme extends TupleScheme<getUserSunAndNectar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserSunAndNectar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUids()) {
          {
            oprot.writeI32(struct.uids.size());
            for (long _iter32 : struct.uids)
            {
              oprot.writeI64(_iter32);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserSunAndNectar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.uids = new ArrayList<Long>(_list33.size);
            for (int _i34 = 0; _i34 < _list33.size; ++_i34)
            {
              long _elem35;
              _elem35 = iprot.readI64();
              struct.uids.add(_elem35);
            }
          }
          struct.setUidsIsSet(true);
        }
      }
    }

  }

  public static class getUserSunAndNectar_result implements org.apache.thrift.TBase<getUserSunAndNectar_result, getUserSunAndNectar_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserSunAndNectar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserSunAndNectar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserSunAndNectar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserSunAndNectar_resultTupleSchemeFactory());
    }

    public ResultList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSunAndNectar_result.class, metaDataMap);
    }

    public getUserSunAndNectar_result() {
    }

    public getUserSunAndNectar_result(
      ResultList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserSunAndNectar_result(getUserSunAndNectar_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultList(other.success);
      }
    }

    public getUserSunAndNectar_result deepCopy() {
      return new getUserSunAndNectar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultList getSuccess() {
      return this.success;
    }

    public getUserSunAndNectar_result setSuccess(ResultList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserSunAndNectar_result)
        return this.equals((getUserSunAndNectar_result)that);
      return false;
    }

    public boolean equals(getUserSunAndNectar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserSunAndNectar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserSunAndNectar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserSunAndNectar_resultStandardSchemeFactory implements SchemeFactory {
      public getUserSunAndNectar_resultStandardScheme getScheme() {
        return new getUserSunAndNectar_resultStandardScheme();
      }
    }

    private static class getUserSunAndNectar_resultStandardScheme extends StandardScheme<getUserSunAndNectar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSunAndNectar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSunAndNectar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserSunAndNectar_resultTupleSchemeFactory implements SchemeFactory {
      public getUserSunAndNectar_resultTupleScheme getScheme() {
        return new getUserSunAndNectar_resultTupleScheme();
      }
    }

    private static class getUserSunAndNectar_resultTupleScheme extends TupleScheme<getUserSunAndNectar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserSunAndNectar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserSunAndNectar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
