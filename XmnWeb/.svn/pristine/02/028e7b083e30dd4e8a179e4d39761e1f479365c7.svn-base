/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift.service.ledgerService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BusineAccountService {

	public interface Iface {

		/**
		 * 查询争议订单
		 * @param queryParmas 查询条件
		 * @return
		 * @throws org.apache.thrift.TException
		 */

		public Result queryOrder(Map<String, String> queryParmas)
				throws org.apache.thrift.TException;

		public String updateOrderState(Map<String, String> params)
				throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void queryOrder(Map<String, String> queryParmas,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void updateOrderState(Map<String, String> params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public Result queryOrder(Map<String, String> queryParmas)
				throws org.apache.thrift.TException {
			send_queryOrder(queryParmas);
			return recv_queryOrder();
		}

		public void send_queryOrder(Map<String, String> queryParmas)
				throws org.apache.thrift.TException {
			queryOrder_args args = new queryOrder_args();
			args.setQueryParmas(queryParmas);
			sendBase("queryOrder", args);
		}

		public Result recv_queryOrder() throws org.apache.thrift.TException {
			queryOrder_result result = new queryOrder_result();
			receiveBase(result, "queryOrder");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"queryOrder failed: unknown result");
		}

		public String updateOrderState(Map<String, String> params)
				throws org.apache.thrift.TException {
			send_updateOrderState(params);
			return recv_updateOrderState();
		}

		public void send_updateOrderState(Map<String, String> params)
				throws org.apache.thrift.TException {
			updateOrderState_args args = new updateOrderState_args();
			args.setParams(params);
			sendBase("updateOrderState", args);
		}

		public String recv_updateOrderState() throws org.apache.thrift.TException {
			updateOrderState_result result = new updateOrderState_result();
			receiveBase(result, "updateOrderState");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"updateOrderState failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements
			AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void queryOrder(Map<String, String> queryParmas,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			queryOrder_call method_call = new queryOrder_call(queryParmas, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class queryOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
			private Map<String, String> queryParmas;

			public queryOrder_call(Map<String, String> queryParmas,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.queryParmas = queryParmas;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOrder",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				queryOrder_args args = new queryOrder_args();
				args.setQueryParmas(queryParmas);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_queryOrder();
			}
		}

		public void updateOrderState(Map<String, String> params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			updateOrderState_call method_call = new updateOrderState_call(params, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class updateOrderState_call extends org.apache.thrift.async.TAsyncMethodCall {
			private Map<String, String> params;

			public updateOrderState_call(Map<String, String> params,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOrderState",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				updateOrderState_args args = new updateOrderState_args();
				args.setParams(params);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_updateOrderState();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("queryOrder", new queryOrder());
			processMap.put("updateOrderState", new updateOrderState());
			return processMap;
		}

		public static class queryOrder<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, queryOrder_args> {
			public queryOrder() {
				super("queryOrder");
			}

			public queryOrder_args getEmptyArgsInstance() {
				return new queryOrder_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public queryOrder_result getResult(I iface, queryOrder_args args)
					throws org.apache.thrift.TException {
				queryOrder_result result = new queryOrder_result();
				result.success = iface.queryOrder(args.queryParmas);
				return result;
			}
		}

		public static class updateOrderState<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, updateOrderState_args> {
			public updateOrderState() {
				super("updateOrderState");
			}

			public updateOrderState_args getEmptyArgsInstance() {
				return new updateOrderState_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public updateOrderState_result getResult(I iface, updateOrderState_args args)
					throws org.apache.thrift.TException {
				updateOrderState_result result = new updateOrderState_result();
				result.success = iface.updateOrderState(args.params);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends
			org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(
				I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("queryOrder", new queryOrder());
			processMap.put("updateOrderState", new updateOrderState());
			return processMap;
		}

		public static class queryOrder<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, queryOrder_args, Result> {
			public queryOrder() {
				super("queryOrder");
			}

			public queryOrder_args getEmptyArgsInstance() {
				return new queryOrder_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						queryOrder_result result = new queryOrder_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result,
									org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						queryOrder_result result = new queryOrder_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, queryOrder_args args,
					org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler)
					throws TException {
				iface.queryOrder(args.queryParmas, resultHandler);
			}
		}

		public static class updateOrderState<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, updateOrderState_args, String> {
			public updateOrderState() {
				super("updateOrderState");
			}

			public updateOrderState_args getEmptyArgsInstance() {
				return new updateOrderState_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						updateOrderState_result result = new updateOrderState_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result,
									org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						updateOrderState_result result = new updateOrderState_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, updateOrderState_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
					throws TException {
				iface.updateOrderState(args.params, resultHandler);
			}
		}

	}

	public static class queryOrder_args implements
			org.apache.thrift.TBase<queryOrder_args, queryOrder_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<queryOrder_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"queryOrder_args");

		private static final org.apache.thrift.protocol.TField QUERY_PARMAS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"queryParmas", org.apache.thrift.protocol.TType.MAP, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new queryOrder_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new queryOrder_argsTupleSchemeFactory());
		}

		public Map<String, String> queryParmas; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			QUERY_PARMAS((short) 1, "queryParmas");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY_PARMAS
					return QUERY_PARMAS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY_PARMAS, new org.apache.thrift.meta_data.FieldMetaData(
					"queryParmas", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(
							org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING),
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOrder_args.class,
					metaDataMap);
		}

		public queryOrder_args() {
		}

		public queryOrder_args(Map<String, String> queryParmas) {
			this();
			this.queryParmas = queryParmas;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public queryOrder_args(queryOrder_args other) {
			if (other.isSetQueryParmas()) {
				Map<String, String> __this__queryParmas = new HashMap<String, String>(
						other.queryParmas);
				this.queryParmas = __this__queryParmas;
			}
		}

		public queryOrder_args deepCopy() {
			return new queryOrder_args(this);
		}

		@Override
		public void clear() {
			this.queryParmas = null;
		}

		public int getQueryParmasSize() {
			return (this.queryParmas == null) ? 0 : this.queryParmas.size();
		}

		public void putToQueryParmas(String key, String val) {
			if (this.queryParmas == null) {
				this.queryParmas = new HashMap<String, String>();
			}
			this.queryParmas.put(key, val);
		}

		public Map<String, String> getQueryParmas() {
			return this.queryParmas;
		}

		public queryOrder_args setQueryParmas(Map<String, String> queryParmas) {
			this.queryParmas = queryParmas;
			return this;
		}

		public void unsetQueryParmas() {
			this.queryParmas = null;
		}

		/**
		 * Returns true if field queryParmas is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetQueryParmas() {
			return this.queryParmas != null;
		}

		public void setQueryParmasIsSet(boolean value) {
			if (!value) {
				this.queryParmas = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case QUERY_PARMAS:
				if (value == null) {
					unsetQueryParmas();
				} else {
					setQueryParmas((Map<String, String>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY_PARMAS:
				return getQueryParmas();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case QUERY_PARMAS:
				return isSetQueryParmas();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof queryOrder_args)
				return this.equals((queryOrder_args) that);
			return false;
		}

		public boolean equals(queryOrder_args that) {
			if (that == null)
				return false;

			boolean this_present_queryParmas = true && this.isSetQueryParmas();
			boolean that_present_queryParmas = true && that.isSetQueryParmas();
			if (this_present_queryParmas || that_present_queryParmas) {
				if (!(this_present_queryParmas && that_present_queryParmas))
					return false;
				if (!this.queryParmas.equals(that.queryParmas))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(queryOrder_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetQueryParmas())
					.compareTo(other.isSetQueryParmas());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQueryParmas()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryParmas,
						other.queryParmas);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("queryOrder_args(");
			boolean first = true;

			sb.append("queryParmas:");
			if (this.queryParmas == null) {
				sb.append("null");
			} else {
				sb.append(this.queryParmas);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class queryOrder_argsStandardSchemeFactory implements SchemeFactory {
			public queryOrder_argsStandardScheme getScheme() {
				return new queryOrder_argsStandardScheme();
			}
		}

		private static class queryOrder_argsStandardScheme extends StandardScheme<queryOrder_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, queryOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY_PARMAS
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
								struct.queryParmas = new HashMap<String, String>(2 * _map18.size);
								for (int _i19 = 0; _i19 < _map18.size; ++_i19) {
									String _key20;
									String _val21;
									_key20 = iprot.readString();
									_val21 = iprot.readString();
									struct.queryParmas.put(_key20, _val21);
								}
								iprot.readMapEnd();
							}
							struct.setQueryParmasIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, queryOrder_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.queryParmas != null) {
					oprot.writeFieldBegin(QUERY_PARMAS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.STRING, struct.queryParmas.size()));
						for (Map.Entry<String, String> _iter22 : struct.queryParmas.entrySet()) {
							oprot.writeString(_iter22.getKey());
							oprot.writeString(_iter22.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class queryOrder_argsTupleSchemeFactory implements SchemeFactory {
			public queryOrder_argsTupleScheme getScheme() {
				return new queryOrder_argsTupleScheme();
			}
		}

		private static class queryOrder_argsTupleScheme extends TupleScheme<queryOrder_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, queryOrder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetQueryParmas()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQueryParmas()) {
					{
						oprot.writeI32(struct.queryParmas.size());
						for (Map.Entry<String, String> _iter23 : struct.queryParmas.entrySet()) {
							oprot.writeString(_iter23.getKey());
							oprot.writeString(_iter23.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, queryOrder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.queryParmas = new HashMap<String, String>(2 * _map24.size);
						for (int _i25 = 0; _i25 < _map24.size; ++_i25) {
							String _key26;
							String _val27;
							_key26 = iprot.readString();
							_val27 = iprot.readString();
							struct.queryParmas.put(_key26, _val27);
						}
					}
					struct.setQueryParmasIsSet(true);
				}
			}
		}

	}

	public static class queryOrder_result implements
			org.apache.thrift.TBase<queryOrder_result, queryOrder_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<queryOrder_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"queryOrder_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new queryOrder_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new queryOrder_resultTupleSchemeFactory());
		}

		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOrder_result.class,
					metaDataMap);
		}

		public queryOrder_result() {
		}

		public queryOrder_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public queryOrder_result(queryOrder_result other) {
			if (other.isSetSuccess()) {
				this.success = new Result(other.success);
			}
		}

		public queryOrder_result deepCopy() {
			return new queryOrder_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public Result getSuccess() {
			return this.success;
		}

		public queryOrder_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof queryOrder_result)
				return this.equals((queryOrder_result) that);
			return false;
		}

		public boolean equals(queryOrder_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(queryOrder_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
						other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("queryOrder_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class queryOrder_resultStandardSchemeFactory implements SchemeFactory {
			public queryOrder_resultStandardScheme getScheme() {
				return new queryOrder_resultStandardScheme();
			}
		}

		private static class queryOrder_resultStandardScheme extends
				StandardScheme<queryOrder_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, queryOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Result();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, queryOrder_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class queryOrder_resultTupleSchemeFactory implements SchemeFactory {
			public queryOrder_resultTupleScheme getScheme() {
				return new queryOrder_resultTupleScheme();
			}
		}

		private static class queryOrder_resultTupleScheme extends TupleScheme<queryOrder_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, queryOrder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, queryOrder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new Result();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class updateOrderState_args implements
			org.apache.thrift.TBase<updateOrderState_args, updateOrderState_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<updateOrderState_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateOrderState_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.MAP, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new updateOrderState_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new updateOrderState_argsTupleSchemeFactory());
		}

		public Map<String, String> params; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.MapMetaData(
							org.apache.thrift.protocol.TType.MAP,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING),
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					updateOrderState_args.class, metaDataMap);
		}

		public updateOrderState_args() {
		}

		public updateOrderState_args(Map<String, String> params) {
			this();
			this.params = params;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateOrderState_args(updateOrderState_args other) {
			if (other.isSetParams()) {
				Map<String, String> __this__params = new HashMap<String, String>(other.params);
				this.params = __this__params;
			}
		}

		public updateOrderState_args deepCopy() {
			return new updateOrderState_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
		}

		public int getParamsSize() {
			return (this.params == null) ? 0 : this.params.size();
		}

		public void putToParams(String key, String val) {
			if (this.params == null) {
				this.params = new HashMap<String, String>();
			}
			this.params.put(key, val);
		}

		public Map<String, String> getParams() {
			return this.params;
		}

		public updateOrderState_args setParams(Map<String, String> params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((Map<String, String>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateOrderState_args)
				return this.equals((updateOrderState_args) that);
			return false;
		}

		public boolean equals(updateOrderState_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(updateOrderState_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateOrderState_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateOrderState_argsStandardSchemeFactory implements SchemeFactory {
			public updateOrderState_argsStandardScheme getScheme() {
				return new updateOrderState_argsStandardScheme();
			}
		}

		private static class updateOrderState_argsStandardScheme extends
				StandardScheme<updateOrderState_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					updateOrderState_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
								struct.params = new HashMap<String, String>(2 * _map28.size);
								for (int _i29 = 0; _i29 < _map28.size; ++_i29) {
									String _key30;
									String _val31;
									_key30 = iprot.readString();
									_val31 = iprot.readString();
									struct.params.put(_key30, _val31);
								}
								iprot.readMapEnd();
							}
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					updateOrderState_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.STRING, struct.params.size()));
						for (Map.Entry<String, String> _iter32 : struct.params.entrySet()) {
							oprot.writeString(_iter32.getKey());
							oprot.writeString(_iter32.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateOrderState_argsTupleSchemeFactory implements SchemeFactory {
			public updateOrderState_argsTupleScheme getScheme() {
				return new updateOrderState_argsTupleScheme();
			}
		}

		private static class updateOrderState_argsTupleScheme extends
				TupleScheme<updateOrderState_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					updateOrderState_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParams()) {
					{
						oprot.writeI32(struct.params.size());
						for (Map.Entry<String, String> _iter33 : struct.params.entrySet()) {
							oprot.writeString(_iter33.getKey());
							oprot.writeString(_iter33.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, updateOrderState_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.params = new HashMap<String, String>(2 * _map34.size);
						for (int _i35 = 0; _i35 < _map34.size; ++_i35) {
							String _key36;
							String _val37;
							_key36 = iprot.readString();
							_val37 = iprot.readString();
							struct.params.put(_key36, _val37);
						}
					}
					struct.setParamsIsSet(true);
				}
			}
		}

	}

	public static class updateOrderState_result implements
			org.apache.thrift.TBase<updateOrderState_result, updateOrderState_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<updateOrderState_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateOrderState_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new updateOrderState_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new updateOrderState_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(
							org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					updateOrderState_result.class, metaDataMap);
		}

		public updateOrderState_result() {
		}

		public updateOrderState_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateOrderState_result(updateOrderState_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public updateOrderState_result deepCopy() {
			return new updateOrderState_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public updateOrderState_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateOrderState_result)
				return this.equals((updateOrderState_result) that);
			return false;
		}

		public boolean equals(updateOrderState_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(updateOrderState_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
						other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateOrderState_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateOrderState_resultStandardSchemeFactory implements SchemeFactory {
			public updateOrderState_resultStandardScheme getScheme() {
				return new updateOrderState_resultStandardScheme();
			}
		}

		private static class updateOrderState_resultStandardScheme extends
				StandardScheme<updateOrderState_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					updateOrderState_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					updateOrderState_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateOrderState_resultTupleSchemeFactory implements SchemeFactory {
			public updateOrderState_resultTupleScheme getScheme() {
				return new updateOrderState_resultTupleScheme();
			}
		}

		private static class updateOrderState_resultTupleScheme extends
				TupleScheme<updateOrderState_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					updateOrderState_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					updateOrderState_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
