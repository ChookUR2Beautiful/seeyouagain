package com.xmniao.xmn.core.businessman.controller;

import com.xmniao.xmn.core.base.BaseController;
import com.xmniao.xmn.core.base.Pageable;
import com.xmniao.xmn.core.base.Resultable;
import com.xmniao.xmn.core.billmanagerment.entity.Bill;
import com.xmniao.xmn.core.billmanagerment.service.AllBillService;
import com.xmniao.xmn.core.business_cooperation.entity.TJoint;
import com.xmniao.xmn.core.business_cooperation.entity.TStaff;
import com.xmniao.xmn.core.business_cooperation.service.JointService;
import com.xmniao.xmn.core.business_cooperation.service.StaffService;
import com.xmniao.xmn.core.businessman.dao.SellerAccountDao;
import com.xmniao.xmn.core.businessman.entity.*;
import com.xmniao.xmn.core.businessman.service.SellerDetailedService;
import com.xmniao.xmn.core.businessman.service.SellerMarketingService;
import com.xmniao.xmn.core.businessman.service.SellerService;
import com.xmniao.xmn.core.businessman.util.SellerConstants;
import com.xmniao.xmn.core.exception.ApplicationException;
import com.xmniao.xmn.core.util.*;
import com.xmniao.xmn.core.util.Base64;
import com.xmniao.xmn.core.util.handler.annotation.RequestLogging;
import com.xmniao.xmn.core.util.handler.annotation.RequestToken;
import com.xmniao.xmn.core.xmermanagerment.entity.BXmer;
import com.xmniao.xmn.core.xmermanagerment.service.BXmerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;

/**
 * 
 * 项目名称：XmnWeb
 * 
 * 类名称：SellerController
 * 
 * 类描述： 操作日志
 * 
 * 创建人： chenerxin
 * 
 * 创建时间：2014年11月11日 下午10:03:47
 * 
 * Copyright (c) 深圳市寻蜜鸟有限公司-版权所有
 */
@RequestLogging(name = "商家信息管理")
@Controller
@RequestMapping(value = "businessman/seller")
public class SellerController extends BaseController {

	@Autowired
	private SellerService sellerService;

	/**
	 * 订单service
	 */
	@Autowired
	private AllBillService allBillService;
	/**
	 * 商家营销关系
	 */
	@Autowired
	private SellerMarketingService sellerMarketingService;
	/**
	 * 商家详情表
	 */
	@Autowired
	private SellerDetailedService sellerDetailedService;
	/**
	 * 账号信息dao
	 */
	@Autowired
	private SellerAccountDao sellerAccountDao;

	@Autowired
	private StaffService staffService;

	/**
	 * service
	 */
	@Autowired
	private JointService jointService;

	@Autowired
	private BXmerService xmerService;

	@Autowired
	private BXmerService bxmerService;

	// 微信商城扫码支付地址
	public String WXAPI_URL = PropertiesUtil.readValue("wxapi.url");

	/**
	 * 初始化商家信息
	 */
	@RequestMapping(value = "init")
	public ModelAndView init() {
		ModelAndView mav = new ModelAndView("businessman/seller");
		mav.addObject("wxapiUrl", WXAPI_URL);
		return mav;
	}

	/**
	 * 获取商家列表
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "init/list")
	@ResponseBody
	public Object list(TSeller seller) {
		this.log.info("SellerController-->list seller=" + seller);
		Pageable<TSeller> pageable = new Pageable<TSeller>(seller);
		pageable = sellerService.getSellerInfoList(seller);
		return pageable;
	}

	
	/**
	 * 导出商户列表
	 * 
	 * @param seller
	 * @param request
	 * @param response
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	@RequestMapping(value = "export")
	public void export(TSeller seller, HttpServletRequest request,
			HttpServletResponse response) throws FileNotFoundException,
			IOException {
		seller.setOrder(PageConstant.NOT_ORDER);
		seller.setLimit(SellerConstants.PAGE_LIMIT_NO);
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("list", sellerService.getSellerList(seller));
		doExport(request, response, "businessman/seller.xls", params);
//		sellerService.batchReloadOnlineSellerMongoDB();
//		sellerService.initOnlineSellerInfo();
	}

	/**
	 * 初始化商家经营状况信息
	 */
	@RequestMapping(value = "manageDetails")
	public String manageDetails(Model model,
			@RequestParam("sellerid") int sellerid) {
		this.log.info("SellerController-->manageDetails");
		model.addAttribute("sellerid", sellerid);
		return "businessman/manageDetails";
	}

	/**
	 * 更改商家状态
	 * 
	 * @param seller
	 * @return
	 */
	@RequestLogging(name = "商家审核处理")
	@ResponseBody
	@RequestMapping(value = "updateSellerStatus")
	@RequestToken(removeToken = true, tokenName = "updateStatusToken")
	public Object updateSellerStatus(TSeller seller, HttpServletRequest request) {
		
		Resultable resultable = null;
		try {
			String ids = seller.getIds();
			this.log.info("SellerController-->updateSellerStatus,待审核商家ids:"+ids);
			if (StringUtils.hasLength(ids)) {
				String[] objects = StringUtils.paresToArray(ids, ",");
				StringBuilder resultMsg = new StringBuilder();
				TSeller persistentSeller = null;
				List<TSeller> sellerList = new ArrayList<TSeller>();
				
				for(String sellerIdStr : objects){
					persistentSeller = sellerService.getObject(new Long(Integer.parseInt(sellerIdStr)));	//获取当前商家信息
					sellerList.add(persistentSeller);
					String result = sellerService.prePending(persistentSeller,seller.getStatus());			//检查商家信息完整性
					resultMsg.append(result==null?"":result);
				}
				
				if(resultMsg.length()!=0){
					resultable = new Resultable(false, resultMsg.toString());//没有绑定合作商提示的信息
				}else{
					int fail = 0;
					StringBuilder failSeller = new StringBuilder();
					seller.setUdate(new Date());
					for(TSeller sellerInfo:sellerList){						//更新商家状态
						if(sellerInfo.getStatus()!=seller.getStatus()){
							try{
								sellerService.updateSellerStatusOptimized(sellerInfo,seller);
								sellerService.ledgerAndReturn(sellerInfo,seller);
							}catch(Exception e){
								failSeller.append("商家【"+sellerInfo.getSellerid()+"-"+sellerInfo.getSellername()+"】审核失败\r\n");
								log.error("商家【"+sellerInfo.getSellerid()+"-"+sellerInfo.getSellername()+"】审核失败",e);
								fail++;
							}
						}else{
							log.error("该商家【"+sellerInfo.getSellerid()+"】状态与当前审核状态一致，无需修改");
						}
					}
					if(fail==0){
						resultable = new Resultable(true, "批量审核操作成功！");
					}else{
						resultable = new Resultable(false, "共有"+fail+"家审核失败，分别是："+failSeller);
					}
				}
			}else{
				resultable = new Resultable(false, "操作失败！");
			}
//			if (StringUtils.hasLength(ids)) {
//				String[] objects = StringUtils.paresToArray(ids, ",");
//				sellerService.batchUpdateSellerStatusOptimized(objects, seller);
//				sellerService.ledgerAndReturn(objects,seller);
//				resultable = new Resultable(true, "操作成功！");
//			} else {
//				resultable = new Resultable(false, "操作失败！");
//			}
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败！");
		}
		return resultable;
	}

	/**
	 * 商家信息管理->修改
	 */
	@RequestMapping(value = "update/init")
	@RequestToken(createToken = true, tokenName = "sellerToken,sellerLandmarkToken,sellerDetailedToken")
	public ModelAndView updateInit(ModelAndView model, @RequestParam(value = "sellerid", required = true, defaultValue = "-1") Integer sellerid) {
		sellerService.findSellerInfo(sellerid, model);
		model.addObject("isType", "update");
		model.setViewName("businessman/editSeller");
		return model;
	}
	
	/**
	 * 
	 * 方法描述：更新商家鸟币支付状态
	 * 创建人： chenJie <br/>
	 * 创建时间：2016年12月20日上午10:04:06 <br/>
	 * @param seller
	 * @return
	 */
	@RequestMapping("/update/coinStatus")
	@ResponseBody
	public Object updateCoinStatus(TSeller seller){
		log.info("更新商家鸟币支付状态updateCoinStatus"+seller);
		Resultable resultable = null;
		try {
			Boolean result = sellerService.updateCoinStatus(seller);
		} catch (Exception e) {
			log.info("更新商家鸟币支付状态失败",e);
			resultable = new Resultable(false,"更新失败！");
		}
		resultable = new Resultable(true,"更新成功！");
		
		return resultable;
	}
	
	/**
	 * 商家信息管理->查看
	 * 
	 * @param model
	 * @param sellerid
	 * @return
	 */
	@RequestMapping(value = "getInit")
	@RequestToken(createToken = true, tokenName = "updateStatusToken")
	public ModelAndView getInit(ModelAndView model,
			@RequestParam("sellerid") Integer sellerid) {
		this.log.info("SellerController-->updateInit");
		try {
			sellerService.findSellerInfo(sellerid, model);
		} catch (Exception e) {
			e.printStackTrace();
			this.log.error("查询商家信息失败", e);
		}
		model.setViewName("businessman/viewSeller");
		return model;
	}
	
	/**
	 * 商家信息管理->查看
	 * 
	 * @param model
	 * @param sellerid
	 * @return
	 */
	@RequestMapping(value = "getSellerInfoById")
	@ResponseBody
	public Object getSellerInfoById(@RequestParam("sellerid") Long sellerid) {
			return sellerService.getObject(sellerid);
	}
	
	/**
	 * 
	 * 方法描述：在此处添加方法描述 <br/>
	 * 创建人：  huang'tao <br/>
	 * 创建时间：2016-12-13上午10:53:02 <br/>
	 * @param sellerid
	 * @return
	 */
	@RequestMapping(value = "getSellerLandmarkInfoById")
	@ResponseBody
	public Object getSellerLandmarkInfoById(@RequestParam("sellerid") Long sellerid) {
			return sellerService.getSellerLandmarkInfoById(sellerid);
	}

	/**
	 * 修改商家信息
	 * 
	 * @param seller
	 *            zhoude
	 * @return
	 */
	@RequestLogging(name = "商家修改")
	@ResponseBody
	@RequestMapping(value = "update/Seller")
	@RequestToken(removeToken = true, tokenName = "sellerToken")
	public Object updateSeller(TSeller seller, HttpServletRequest request) {
		Resultable resultable = null;
		try {
			// 修改商户信息
			Map<String,Object> resultMap = sellerService.addAndUpdateSellerOptimize(seller, request);
			resultable = new Resultable(true, "基本信息修改成功！",resultMap);
			this.log.info("修改成功!");
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;
	}

	/**
	 * 初始化平台补贴
	 */
	@RequestMapping(value = "update/initFlatAgio")
	public ModelAndView initFlatAgio(ModelAndView model,
			@RequestParam("sellerid") Integer sellerid) {
		sellerService.findSellerInfo(sellerid, model);
		model.setViewName("businessman/editFlatAgio");
		return model;
	}

	/**
	 * 修改平台补贴
	 * 
	 * @param seller
	 *            zhoude
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "update/flatAgio")
	public Object updateFlatAgio(TSeller seller) {
		Resultable resultable = null;
		try {
			// 修改平台补贴
			sellerService.updateFlatAgio(seller);
			resultable = new Resultable(true, "平台补贴修改成功！");
			this.log.info("平台补贴修改成功！");
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;

	}

	/**
	 * 批量删除商家
	 * 
	 * @param seller
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "beachDeleteSeller")
	public Object beachDeleteSeller(String ids) {
		Resultable resultable = null;
		Object[] objects = {};
		if (null != ids) {
			objects = ids.split(",");
		}
		try {
			Integer resultNum = sellerService.deleteSeller(objects);
			if (resultNum > SellerConstants.COMMON_PARAM_Z) {
				this.log.info("删除成功");
				resultable = new Resultable(true, "操作成功");
			}
		} catch (Exception e) {
			this.log.error("删除异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;

	}

	/**
	 * 更新商家账号信息
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "update/SellerAccount")
	@ResponseBody
	public Object updateSellerAccount(@RequestBody TSellerAccount[] infoList) {
		Resultable resultable = null;
		try {
			sellerService.addAndUpdateAccount(infoList);
			this.log.info("修改成功!");
			Long aid = sellerAccountDao.getMaxId();
			resultable = new Resultable(true, "账号信息更新成功！");
			resultable.setData(aid);
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;

	}

	/**
	 * 更新详细信息
	 * 
	 * @param sellerDetailed
	 * @return
	 */
	@RequestLogging(name = "更新详细信息")
	@ResponseBody
	@RequestMapping("/update/SellerDetailed")
	@RequestToken(removeToken = true, tokenName = "sellerDetailedToken")
	public Object updateSellerDetailed(SellerDetailedForm sellerDetailedForm,
			HttpServletRequest request) {
		Resultable resultable = null;
		try {
			// 2016年3月31日 Edit By ChenBo 取消修改商家等级与商家参加活动的限制关系
			// if(!sellerService.getAllow(sellerDetailedForm.getSellerDetailed().getSellerid())){
			// if(sellerService.getGrade(sellerDetailedForm.getSellerDetailed().getSellerid(),sellerDetailedForm.getSellerDetailed().getSellerGrade())){
			// this.log.info("该商家已经参加相关活动，不能修改商家等级!");
			// resultable = new Resultable(true, "该商家已经参加相关活动，不能修改商家等级!");
			// return resultable;
			// }
			// }
			Map<String, String> res = sellerService.updateSellerDetailed(
					sellerDetailedForm, request);
			sellerService.updateSellerDateTime(sellerDetailedForm
					.getSellerDetailed().getSellerid());// 更新主表t_seller 数据操作时间
			this.log.info("修改成功!");
			resultable = new Resultable(true, "详细信息更新成功！");
			resultable.setData(res);
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;
	}

	/**
	 * 更新经纬度
	 * 
	 * @param sellerDetailed
	 * @return
	 */
	@RequestLogging(name = "更新经纬度")
	@ResponseBody
	@RequestMapping("/update/SellerLandmark")
	@RequestToken(removeToken = true, tokenName = "sellerLandmarkToken")
	public Object updateSellerLandmark(TSellerLandmark sellerLandmark) {
		Resultable resultable = null;
		try {
			// latitude 纬度 longitude 经度(计算HASH值)
			String geohashs = "";
			try {
				geohashs = HashUtil.getInstance().getGeoHash(
						sellerLandmark.getLatitude(),
						sellerLandmark.getLongitude());
			} catch (Exception e) {
				this.log.error("经纬度格式不正确", e);
				resultable = new Resultable(false, "经纬度格式不正确");
				return resultable;
			}
			sellerLandmark.setGeohash(geohashs);
			sellerLandmark.setSdate(new Date());
			sellerService.updateSellerLandmark(sellerLandmark);
			sellerService.updateSellerDateTime(sellerLandmark.getSellerid());// 更新主表t_seller
																				// 数据操作时间
			this.log.info("操作成功!");
			resultable = new Resultable(true, "操作成功!");
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;

	}

	/**
	 * 初始化分店信息
	 */
	@RequestMapping(value = "/init/splitShop")
	public ModelAndView initSplitShop(ModelAndView model,
			@RequestParam("sellerid") Integer sellerid) {
		model.setViewName("businessman/splitShop");
		model.addObject("sellerid", sellerid);
		return model;
	}

	/**
	 * 获取分店列表
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "init/splitShop/list")
	@ResponseBody
	public Object listSplitShop(TSeller seller) {
		Pageable<TSeller> pageable = new Pageable<TSeller>(seller);
		pageable = sellerService.getSplitShopList(seller);
		return pageable;
	}

	/**
	 * 
	 * 审批初始化(编辑时初始化)
	 * 
	 * @author：zhou'sheng
	 */
	@RequestMapping(value = "updateSellerStatus/init")
	@RequestToken(removeToken = true, tokenName = "updateStatusToken")
	public ModelAndView stateInit() {
		ModelAndView modelAndView = new ModelAndView(
				"businessman/examineinfoAdd");
		return modelAndView;
	}

	/**
	 * 
	 * 初始化批量不通过页面
	 * 
	 * @author：zhou'sheng
	 */
	@RequestMapping(value = "sellerState")
	public ModelAndView sellerState() {
		ModelAndView modelAndView = new ModelAndView(
				"businessman/examineinfoSeller");
		return modelAndView;
	}

	/**
	 * ========================================================================
	 * ======================== 添加商家账号信息
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "add/SellerAccount")
	@ResponseBody
	public Object addSellerAccount(@RequestBody TSellerAccount[] infoList) {
		Resultable resultable = null;
		try {
			sellerService.addAndUpdateAccount(infoList);
			this.log.info("添加成功!");
			Long aid = sellerAccountDao.getMaxId();
			resultable = new Resultable(true, "账号信息添加成功！");
			resultable.setData(aid);
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;

	}

	/**
	 * 添加经纬度
	 * 
	 * @param sellerDetailed
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/add/SellerLandmark")
	public Object addSellerLandmark(TSellerLandmark sellerLandmark) {
		Resultable resultable = null;
		try {
			// latitude 纬度 longitude 经度(计算HASH值)
			String geohashs = "";
			try {
				geohashs = HashUtil.getInstance().getGeoHash(
						sellerLandmark.getLatitude(),
						sellerLandmark.getLongitude());
			} catch (Exception e) {
				this.log.error("经纬度格式不正确", e);
				resultable = new Resultable(false, "经纬度格式不正确");
				// e.printStackTrace();
				return resultable;
			}
			sellerLandmark.setGeohash(geohashs);
			sellerLandmark.setSdate(new Date());
			int res = sellerService.updateSellerLandmark(sellerLandmark);
			this.log.info("修改成功!");
			resultable = new Resultable(true, "详细信息更新成功！");
			if (res != 0) {
				resultable.setData(res);
			}

		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;

	}

	/**
	 * 添加详细信息
	 * 
	 * @param sellerDetailed
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/add/SellerDetailed")
	public Object addSellerDetailed(SellerDetailedForm sellerDetailedForm,
			HttpServletRequest request) {
		Resultable resultable = null;
		try {
			sellerService.updateSellerDetailed(sellerDetailedForm, request);
			this.log.info("修改成功!");
			resultable = new Resultable(true, "详细信息更新成功！");
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;
	}

	/**
	 * 
	 * addInit(商户添加初始化)
	 * 
	 * @author：zhou'sheng
	 */
	@RequestMapping(value = "/add/init")
	@RequestToken(createToken = true, tokenName = "sellerToken")
	public ModelAndView addInit() {
		ModelAndView modelAndView = new ModelAndView("businessman/addSeller");
		modelAndView.addObject("isType", "add");
		return modelAndView;
	}

	/**
	 * 添加商家信息
	 * 
	 * @param seller
	 *            zhoude
	 * @return
	 */
	@RequestLogging(name = "商家添加")
	@ResponseBody
	@RequestMapping(value = "add/Seller")
	@RequestToken(removeToken = true, tokenName = "sellerToken")
	public Object addSeller(TSeller seller, HttpServletRequest request) {
		Resultable resultable = null;
		try {
			// 添加商家信息
			Map<String,Object> resultMap = sellerService.addAndUpdateSellerOptimize(seller,
					request);
			// 获取新添加的主键id
			resultable = new Resultable(true, "基本信息添加成功！");
			resultable.setData(resultMap);
			this.log.info("添加成功!");
		} catch (Exception e) {
			this.log.error("添加异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;
	}

	/**
	 * 校验手机号唯一性
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "init/checkPhone")
	public Long checkPhone(@RequestParam("phoneid") String phoneid) {
		TSeller pInfo = new TSeller();
		pInfo.setPhoneid(phoneid);
		Long num = sellerService.count(pInfo);
		return num;
	}

	/**
	 * 获取商家列表
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "getFatherSeller")
	@ResponseBody
	public Object getFatherSeller(TSeller seller) {
		Pageable<TSeller> pageable = new Pageable<TSeller>(seller);
		pageable = sellerService.getFatherSeller(seller);
		return pageable;
	}

	/**
	 * 获取商家列表
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "getSellerIdAndSellerName")
	@ResponseBody
	public Object getSellerIdAndSellerName(TSeller seller) {
		Pageable<TSeller> pageable = new Pageable<TSeller>(seller);
		pageable = sellerService.getSellerIdAndSellerName(seller);
		return pageable;
	}
	

	/**
	 * 获取已上线的签约商家
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "getSellerIdAndName")
	@ResponseBody
	public Object getSellerIdAndName(TSeller seller) {
		Pageable<TSeller> pageable = new Pageable<TSeller>(seller);
		pageable = sellerService.getSellerIdAndName(seller);
		return pageable;
	}
	
	/**
	 * 获取相应的合作商
	 * 
	 * @param seller
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "getJointInfoByArea")
	public Object getJointInfoByArea(@RequestParam("areaId") String areaId) {
		TJoint joint = sellerService.getJointInfoByArea(areaId);
		return joint == null ? false : joint;
	}

	/**
	 * 批量下线初始化
	 * 
	 * @param seller
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "downLine")
	public Object downLine(TSeller seller) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("businessman/downLineConfirm");
		return modelAndView;
	}

	/**
	 * 批量上线
	 * 
	 * @param seller
	 * @return
	 */
	@RequestLogging(name = "商家上线")
	@ResponseBody
	@RequestMapping(value = "beachOnLine")
	public Object beachOnLine(TSeller seller) {
		Resultable resultable = null;
		try {
			Object[] objects = null;
			String ids = seller.getIds();
			if (StringUtils.hasLength(ids)) {
				objects = StringUtils.paresToArray(ids, ",");
			}
			boolean num = sellerService.beachOnLine(objects, seller);
			if (num) {
				resultable = new Resultable(true, "操作成功！");
				this.log.info("上线成功!");
			} else {
				resultable = new Resultable(false, "操作失败！");
				this.log.info("上线失败!");
			}
		} catch (Exception e) {
			this.log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败！");
		}
		return resultable;

	}

	/**
	 * 
	 * 方法描述：批量修改商家   公开商户，参与分红，付费商家  状态
	 * 创建人： chenJie <br/>
	 * 创建时间：2016年12月28日下午6:34:22 <br/>
	 * @param seller
	 * @param flag 1 公开商户，2 参与分红，3 付费商家  状态
	 * @param state 0 关 1 开
	 * @return
	 */
	@RequestMapping("/beachOnLine/statusOption")
	@ResponseBody
	public Object statusOption(TSeller seller,@RequestParam(value="flag")String flag,@RequestParam(value="state")String state){
		log.info("批量修改商家状态statusOption："+seller);
		Resultable resultable=null;
		try {
			if("1".equals(flag)){
				seller.setIsPublic(Integer.valueOf(state));
			}else if("2".equals(flag)){
				seller.setJoinDividend(Integer.valueOf(state));
			}else if("3".equals(flag)){
				seller.setIsPaid(Integer.valueOf(state));
			}else {
				resultable=new Resultable(false,"参数异常");
				return resultable;
			}
			sellerService.statusOption(seller);
			log.info("更新成功");
			resultable = new Resultable(true,"更新成功");
		} catch (Exception e) {
			log.error("修改失败",e);
			resultable = new Resultable(false,"更新失败");
		}
		return resultable;
	}
	
	/**
	 * 
	 * init(初始化列表页面)
	 * 
	 */
	@RequestMapping(value = "initOrder")
	public String initOrder() {
		return "businessman/sellerBillList";
	}

	/**
	 * 获取订单列表
	 * 
	 * @param list
	 * @return Object
	 */
	@RequestMapping(value = "initOrder/list")
	@ResponseBody
	public Object initOrderList(Bill bill) {
		this.log.info("AllBillController-->list bill=" + bill);
		Pageable<Bill> pageable = new Pageable<Bill>(bill);
		pageable = allBillService.getBillBySellerid(bill);
		return pageable;
	}

	/**
	 * 校验是否为业务员是否为管理员
	 * 
	 * @param request
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "init/checkStaff")
	@ResponseBody
	public Long checkStaff(HttpServletRequest request,
			@RequestParam("staffid") String staffid) {
		TStaff staff = new TStaff();
		staff.setStaffid(new Integer(staffid));
		// 管理员
		staff.setCategory(SellerConstants.STAFF_CATEGORY_ADM);
		long num = staffService.count(staff);
		return num;
	}

	/**
	 * 查看钱包
	 */
	@RequestMapping(value = "viewWallet")
	public ModelAndView viewWallet(ModelAndView model,
			@RequestParam("sellerid") Integer sellerid) {
		model.setViewName("businessman/viewWallet");
		model.addObject(
				"wallet",
				jointService.getWallet(sellerid.toString(),
						String.valueOf(SellerConstants.USER_TYPE_B)));
		return model;
	}

	/**
	 * @author dong'jietao
	 * @date 2015年4月23日 下午2:27:26
	 * @TODO 计算规则显示
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/init/CalculationRule")
	public ModelAndView CalculationRule(HttpServletRequest request) {// 计算规则显示
		ModelAndView modelAndView = new ModelAndView(
				"businessman/CalculationRuleView");
		return modelAndView;
	}

	/**
	 * @author dong'jietao
	 * @date 2015年4月23日 下午2:27:00
	 * @TODO 原因展示
	 * @param request
	 * @param seller
	 * @return
	 */
	@RequestMapping(value = "/init/examineInfo")
	public ModelAndView examineInfo(HttpServletRequest request, TSeller seller) {// 商家审批未通过原因展示
		Pageable<TSeller> pageable = sellerService.getSellerInfo(seller);
		ModelAndView modelAndView = null;
		if (seller.getIsonline() != null) {// 商家下线原因
			modelAndView = new ModelAndView("businessman/offlineReason");
		} else {// 商家审批未通过原因展示
			modelAndView = new ModelAndView("businessman/examineInfo");
		}
		modelAndView.addObject("seller", pageable.getContent().get(0));
		return modelAndView;
	}

	/**
	 * updateFlatAgioBatchInit(批量设置平台补贴折扣初始化页面)
	 * 
	 * @param seller
	 * @return
	 * @author zhang'zhiwen
	 */
	@RequestMapping(value = "/updateFlatAgioBatch/init")
	public ModelAndView updateFlatAgioBatchInit(TSeller seller) {
		ModelAndView modelAndView = new ModelAndView(
				"businessman/editFlatAgioBatch");
		sellerService.getSellerAndSellerAgio(seller, modelAndView);
		return modelAndView;
	}

	/**
	 * updateFlatAgioBatchInit(批量设置平台补贴折扣)
	 * 
	 * @param sellerForm
	 * @return
	 * @author zhang'zhiwen
	 */
	@RequestLogging(name = "批量设置平台补贴折扣")
	@RequestMapping(value = "/updateFlatAgioBatch")
	@ResponseBody
	public Object updateFlatAgioBatch(TSeller seller) {
		Resultable resultable = null;
		try {
			sellerService.batchUpdateSellerDetailedFlatAgio(seller);
			resultable = new Resultable(true, "操作成功");
		} catch (Exception e) {
			log.error("修改异常", e);
			resultable = new Resultable(false, "操作失败");
		}
		return resultable;
	}

	/**
	 * 
	 * 用户（用于下拉列表）
	 * 
	 * @author：zhou'dekun
	 */
	@RequestMapping(value = "sellerInfo")
	@ResponseBody
	public Object businessInfo(TSeller seller) {
		Pageable<TSeller> pageable = new Pageable<TSeller>(seller);
		pageable.setContent(sellerService.getSelect(seller));
		return pageable;
	}

	/*
	 * @RequestMapping(value = "init/ld" ,method = RequestMethod.POST) public
	 * void getLd(HttpServletRequest request, HttpServletResponse response)
	 * throws IOException { Long rid =
	 * ResultUtil.getCurrentUser(request).getRoleId(); Long auid =
	 * AuthorityAreaHandler
	 * .getInstance().getUrlByAuthorityId("businessman/seller/init/list");
	 * response.getWriter().print(sellerService.getLd(rid, auid)); }
	 */

	@RequestMapping(value = "/islock")
	@ResponseBody
	@RequestLogging(name = "开启是否锁定提现")
	public Resultable lockSeller(TSeller seller) {
		Map<String, String> resultMap = null;
		try {
			resultMap = sellerService.updateSellerIsLock(seller);
		} catch (Exception e) {
			sellerService.fireLoginEvent(StringUtils.addStrToStrArray(
					((ApplicationException) e).getLogInfo(),
					new ApplicationException("商家更新锁定异常", e,
							new Object[] { seller }).getMessage()), 0);
		}
		return recordLogInfo(resultMap, seller);
	}

	/**
	 * 记录日志信息
	 * 
	 * @param resultMap
	 * @param seller
	 * @return
	 */
	private Resultable recordLogInfo(Map<String, String> resultMap,
			TSeller seller) {
		String msg;
		String[] islockLog;
		if (SellerConstants.SELLER_IS_UNLOCK == seller.getIsLock()) {
			msg = "锁定提现功能";
			islockLog = new String[] { "商家编号", seller.getSellerid().toString(),
					"锁定提现功能", "锁定" };
		} else {
			msg = "解锁提现功能";
			islockLog = new String[] { "商家编号", seller.getSellerid().toString(),
					"解锁提现功能", "解锁" };
		}
		if (null == resultMap) {
			return new Resultable(false, msg + "操作失败");
		} else if (String.valueOf(SellerConstants.UPDATE_SELLER_LOCK).equals(
				resultMap.get("code"))) {
			sellerService.fireLoginEvent(islockLog, 1);
			return new Resultable(true, msg + "操作成功");
		} else {
			sellerService.fireLoginEvent(islockLog, 0);
			return new Resultable(false, resultMap.get("msg"));
		}
	}

	/**
	 * @author dong'jietao
	 * @date 2015年4月30日 上午11:11:56
	 * @TODO 商家银行卡绑定List
	 * @param request
	 * @param sellerid
	 * @return
	 */
	@RequestMapping(value = "/bindCardInit/init")
	@ResponseBody
	public ModelAndView bindCardInit(HttpServletRequest request, Card card) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("businessman/sellerCard/bindCardInit");
		mav.addObject("crad", card);
		return mav;
	}

	/**
	 * @author dong'jietao
	 * @date 2015年4月30日 下午2:14:43
	 * @TODO 获取商家的银行卡list
	 * @param request
	 * @param card
	 * @return
	 */
	@RequestMapping(value = "/bindCardList")
	@ResponseBody
	public Object bindCardList(HttpServletRequest request, Card card) {
		Pageable<Card> pageable = new Pageable<Card>(card);
		pageable = sellerService.getCardList(card);
		this.log.info("MultipShopController-->list pageable=" + pageable);
		return pageable;
	}

	/**
	 * @author dong'jietao
	 * @date 2015年4月30日 上午11:11:56
	 * @TODO 商家银行卡添加初始化
	 * @param request
	 * @param sellerid
	 * @return
	 */
	@RequestMapping(value = "/bindCardInit/addCardInit")
	@ResponseBody
	public ModelAndView addCardInit(HttpServletRequest request, Card card) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("businessman/sellerCard/addCardInit");
		mav.addObject("card", card);
		return mav;
	}

	/**
	 * @author wangzhimin
	 * @date 2015/08/25 10:55:30
	 * @TODO 商家银行卡添加
	 * @param request
	 * @param card
	 * @return
	 */
	@RequestLogging(name = "商家银行卡添加")
	@RequestMapping(value = "/addCard")
	@ResponseBody
	public Object addCard(HttpServletRequest request, Card card) {
		Resultable resultable = null;
		try {
			resultable = sellerService.addCard(card);
			String[] s = { "商家", card.getSellername(), "银行卡增加", "增加" };
			sellerService.fireLoginEvent(s);
		} catch (Exception e) {
			sellerService.fireLoginEvent(StringUtils.addStrToStrArray(
					((ApplicationException) e).getLogInfo(),
					new ApplicationException("商家添加银行卡异常", e, new Object[] {
							request, card }).getMessage()), 0);
		}
		return resultable;
	}

	/**
	 * @author dong'jietao
	 * @date 2015年4月30日 下午5:36:06
	 * @TODO 商家银行卡信息修改初始化
	 * @param request
	 * @param card
	 * @return
	 */
	@RequestMapping(value = "/bindCardInit/updateCardInit")
	@ResponseBody
	public ModelAndView updateCardInit(HttpServletRequest request, Card card) {
		ModelAndView mav = new ModelAndView();
		TSeller seller = new TSeller();
		seller.setSellerid(card.sellerid);
		sellerService.getSellerList(seller).get(0).getSellername();
		card.setSellername(sellerService.getSellerList(seller).get(0)
				.getSellername());
		Card cardr = sellerService.getUpdateByCard(card);
		cardr.setSellername(card.getSellername());
		mav.setViewName("businessman/sellerCard/updateCardInit");
		mav.addObject("card", cardr);
		return mav;
	}

	/**
	 * @author wangzhimin
	 * @date 2015/08/25 16:55:30
	 * @TODO 商家银行卡信息修改
	 * @param request
	 * @param card
	 * @return
	 */
	@RequestLogging(name = "商家银行卡信息修改")
	@RequestMapping(value = "/updateCard")
	@ResponseBody
	public Object updateCard(HttpServletRequest request, Card card) {
		Resultable resultable = null;
		try {
			resultable = sellerService.updateCard(card);
			String[] s = { "商家", card.getSellername(), "修改银行卡", "修改" };
			sellerService.fireLoginEvent(s);
		} catch (Exception e) {
			sellerService.fireLoginEvent(StringUtils.addStrToStrArray(
					((ApplicationException) e).getLogInfo(),
					new ApplicationException("商家修改银行卡异常", e, new Object[] {
							request, card }).getMessage()), 0);
		}
		return resultable;
	}

	/**
	 * 商家或者会员重置提现密码
	 * 
	 * @param request
	 * @return
	 */
	@RequestLogging(name = "重置提现密码")
	@RequestMapping("resetDepositPassW")
	@ResponseBody
	public Object resetDepositPassW(TSeller tSeller) {
		Map<String, String> resultMap = null;
		try {
			resultMap = sellerService.resetDepositPassW(tSeller);
		} catch (Exception e) {
			sellerService.fireLoginEvent(StringUtils.addStrToStrArray(
					((ApplicationException) e).getLogInfo(),
					new ApplicationException("重置提现密码异常", e,
							new Object[] { tSeller }).getMessage()), 0);
		}
		return recordLog(resultMap, tSeller);
	}

	/**
	 * 记录重置提现密码的日志信息和返回页面提示信息
	 * 
	 * @param resultMap
	 * @param seller
	 * @return
	 */
	private Object recordLog(Map<String, String> resultMap, TSeller seller) {
		if (null == resultMap) {
			return new Resultable(false, "操作失败");
		} else if (String.valueOf(SellerConstants.RESET_DEPOSIT_PASSWORD)
				.equals(resultMap.get("state"))) {
			String[] s = { "用户编号", seller.getSellerid().toString(), "重置提现密码",
					"重置" };
			sellerService.fireLoginEvent(s, 1);
			return new Resultable(true, "操作成功");
		} else {
			return new Resultable(false, resultMap.get("msg"));
		}
	}

	/**
	 * @Title:base64ToEncrypt
	 * @Description:给字符串加密并返回
	 * @param request
	 * @param response
	 * @return String
	 * @throw
	 */
	@RequestMapping(value = "init/base64ToEncrypt")
	@ResponseBody
	public String base64ToEncrypt(HttpServletRequest request,
			HttpServletResponse response) {
		String sellerid = request.getParameter("sellerid");
		String sellername = request.getParameter("sellername");
		String aid = request.getParameter("aid");
		Map<String, String> codeMap = new HashMap<>();
		codeMap.put("sellerid", sellerid);
		codeMap.put("sellername", sellername);
		codeMap.put("aid", aid);
		String codeStr = JsonUtil.toJSONString(codeMap);// 转成json字符串
		String encryptCode = Base64.getBase64(codeStr);// 加密
		return encryptCode;// 返回
	}

	/**
	 * @Description: 获取寻蜜客客列表
	 * @Param:
	 * @return:Object
	 * @author:lifeng
	 * @time:2016年6月6日下午7:55:30
	 */
	@RequestMapping(value = "initXmer")
	@ResponseBody
	public Object getXmerPhone(BXmer bxmer) {
		Pageable<BXmer> pageable = new Pageable<BXmer>(bxmer);
		pageable = bxmerService.getXmerPageable(bxmer);
		return pageable;
	}

	/**
	 * 跳转到修改物料状态页面
	 * 
	 * @return
	 * @author:chenjie
	 */
	/*@RequestMapping(value = "toMaterielPage")
	@ResponseBody
	public ModelAndView toMaterielPage(
			@RequestParam("sellerid") String sellerid,
			@RequestParam("uid") String uid,
			@RequestParam("email") String email,
			@RequestParam("materielStatus") String status) {

		log.info("商家id:" + sellerid + " 寻觅客id：" + uid + " 邮箱：" + email);
		ModelAndView mv = new ModelAndView("businessman/changeMaterielStatus");
		mv.addObject("sellerid", sellerid);
		mv.addObject("uid", uid);
		mv.addObject("email", email);
		mv.addObject("status", status);
		return mv;
	}
*/
	/**
	 * 修改物料状态
	 * 
	 * @returnf
	 * @author:chenjie
	 */
/*	@RequestMapping(value = "changeMaterielStatus")
	public Object changeMaterielStatus(
			@RequestParam("sellerid") String sellerid,
			@RequestParam("uid") String uid) {
		log.info("商家id:" + sellerid + " 寻觅客id：" + uid);
		sellerService.changeMaterielStatus(sellerid, uid);
		return "redirect:/businessman/seller/init.jhtml";
	}*/
}