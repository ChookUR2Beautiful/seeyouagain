/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift.service.synthesizeService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SellerStatistics implements org.apache.thrift.TBase<SellerStatistics, SellerStatistics._Fields>, java.io.Serializable, Cloneable, Comparable<SellerStatistics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SellerStatistics");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATISTICS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("statisticsList", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SellerStatisticsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SellerStatisticsTupleSchemeFactory());
  }

  public int state; // required
  public String msg; // required
  public int count; // required
  public int pageCount; // required
  public List<Map<String,String>> statisticsList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE((short)1, "state"),
    MSG((short)2, "msg"),
    COUNT((short)3, "count"),
    PAGE_COUNT((short)4, "pageCount"),
    STATISTICS_LIST((short)5, "statisticsList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // MSG
          return MSG;
        case 3: // COUNT
          return COUNT;
        case 4: // PAGE_COUNT
          return PAGE_COUNT;
        case 5: // STATISTICS_LIST
          return STATISTICS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATE_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private static final int __PAGECOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATISTICS_LIST, new org.apache.thrift.meta_data.FieldMetaData("statisticsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SellerStatistics.class, metaDataMap);
  }

  public SellerStatistics() {
  }

  public SellerStatistics(
    int state,
    String msg,
    int count,
    int pageCount,
    List<Map<String,String>> statisticsList)
  {
    this();
    this.state = state;
    setStateIsSet(true);
    this.msg = msg;
    this.count = count;
    setCountIsSet(true);
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    this.statisticsList = statisticsList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SellerStatistics(SellerStatistics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.state = other.state;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    this.count = other.count;
    this.pageCount = other.pageCount;
    if (other.isSetStatisticsList()) {
      List<Map<String,String>> __this__statisticsList = new ArrayList<Map<String,String>>(other.statisticsList.size());
      for (Map<String,String> other_element : other.statisticsList) {
        Map<String,String> __this__statisticsList_copy = new HashMap<String,String>(other_element);
        __this__statisticsList.add(__this__statisticsList_copy);
      }
      this.statisticsList = __this__statisticsList;
    }
  }

  public SellerStatistics deepCopy() {
    return new SellerStatistics(this);
  }

  @Override
  public void clear() {
    setStateIsSet(false);
    this.state = 0;
    this.msg = null;
    setCountIsSet(false);
    this.count = 0;
    setPageCountIsSet(false);
    this.pageCount = 0;
    this.statisticsList = null;
  }

  public int getState() {
    return this.state;
  }

  public SellerStatistics setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public SellerStatistics setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public SellerStatistics setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getPageCount() {
    return this.pageCount;
  }

  public SellerStatistics setPageCount(int pageCount) {
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    return this;
  }

  public void unsetPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  public void setPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
  }

  public int getStatisticsListSize() {
    return (this.statisticsList == null) ? 0 : this.statisticsList.size();
  }

  public java.util.Iterator<Map<String,String>> getStatisticsListIterator() {
    return (this.statisticsList == null) ? null : this.statisticsList.iterator();
  }

  public void addToStatisticsList(Map<String,String> elem) {
    if (this.statisticsList == null) {
      this.statisticsList = new ArrayList<Map<String,String>>();
    }
    this.statisticsList.add(elem);
  }

  public List<Map<String,String>> getStatisticsList() {
    return this.statisticsList;
  }

  public SellerStatistics setStatisticsList(List<Map<String,String>> statisticsList) {
    this.statisticsList = statisticsList;
    return this;
  }

  public void unsetStatisticsList() {
    this.statisticsList = null;
  }

  /** Returns true if field statisticsList is set (has been assigned a value) and false otherwise */
  public boolean isSetStatisticsList() {
    return this.statisticsList != null;
  }

  public void setStatisticsListIsSet(boolean value) {
    if (!value) {
      this.statisticsList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case PAGE_COUNT:
      if (value == null) {
        unsetPageCount();
      } else {
        setPageCount((Integer)value);
      }
      break;

    case STATISTICS_LIST:
      if (value == null) {
        unsetStatisticsList();
      } else {
        setStatisticsList((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return Integer.valueOf(getState());

    case MSG:
      return getMsg();

    case COUNT:
      return Integer.valueOf(getCount());

    case PAGE_COUNT:
      return Integer.valueOf(getPageCount());

    case STATISTICS_LIST:
      return getStatisticsList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case MSG:
      return isSetMsg();
    case COUNT:
      return isSetCount();
    case PAGE_COUNT:
      return isSetPageCount();
    case STATISTICS_LIST:
      return isSetStatisticsList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SellerStatistics)
      return this.equals((SellerStatistics)that);
    return false;
  }

  public boolean equals(SellerStatistics that) {
    if (that == null)
      return false;

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_pageCount = true;
    boolean that_present_pageCount = true;
    if (this_present_pageCount || that_present_pageCount) {
      if (!(this_present_pageCount && that_present_pageCount))
        return false;
      if (this.pageCount != that.pageCount)
        return false;
    }

    boolean this_present_statisticsList = true && this.isSetStatisticsList();
    boolean that_present_statisticsList = true && that.isSetStatisticsList();
    if (this_present_statisticsList || that_present_statisticsList) {
      if (!(this_present_statisticsList && that_present_statisticsList))
        return false;
      if (!this.statisticsList.equals(that.statisticsList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SellerStatistics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(other.isSetPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, other.pageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatisticsList()).compareTo(other.isSetStatisticsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatisticsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statisticsList, other.statisticsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SellerStatistics(");
    boolean first = true;

    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageCount:");
    sb.append(this.pageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statisticsList:");
    if (this.statisticsList == null) {
      sb.append("null");
    } else {
      sb.append(this.statisticsList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SellerStatisticsStandardSchemeFactory implements SchemeFactory {
    public SellerStatisticsStandardScheme getScheme() {
      return new SellerStatisticsStandardScheme();
    }
  }

  private static class SellerStatisticsStandardScheme extends StandardScheme<SellerStatistics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SellerStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageCount = iprot.readI32();
              struct.setPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATISTICS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                struct.statisticsList = new ArrayList<Map<String,String>>(_list90.size);
                for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                {
                  Map<String,String> _elem92;
                  {
                    org.apache.thrift.protocol.TMap _map93 = iprot.readMapBegin();
                    _elem92 = new HashMap<String,String>(2*_map93.size);
                    for (int _i94 = 0; _i94 < _map93.size; ++_i94)
                    {
                      String _key95;
                      String _val96;
                      _key95 = iprot.readString();
                      _val96 = iprot.readString();
                      _elem92.put(_key95, _val96);
                    }
                    iprot.readMapEnd();
                  }
                  struct.statisticsList.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setStatisticsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SellerStatistics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.pageCount);
      oprot.writeFieldEnd();
      if (struct.statisticsList != null) {
        oprot.writeFieldBegin(STATISTICS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.statisticsList.size()));
          for (Map<String,String> _iter97 : struct.statisticsList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter97.size()));
              for (Map.Entry<String, String> _iter98 : _iter97.entrySet())
              {
                oprot.writeString(_iter98.getKey());
                oprot.writeString(_iter98.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SellerStatisticsTupleSchemeFactory implements SchemeFactory {
    public SellerStatisticsTupleScheme getScheme() {
      return new SellerStatisticsTupleScheme();
    }
  }

  private static class SellerStatisticsTupleScheme extends TupleScheme<SellerStatistics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SellerStatistics struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetMsg()) {
        optionals.set(1);
      }
      if (struct.isSetCount()) {
        optionals.set(2);
      }
      if (struct.isSetPageCount()) {
        optionals.set(3);
      }
      if (struct.isSetStatisticsList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetPageCount()) {
        oprot.writeI32(struct.pageCount);
      }
      if (struct.isSetStatisticsList()) {
        {
          oprot.writeI32(struct.statisticsList.size());
          for (Map<String,String> _iter99 : struct.statisticsList)
          {
            {
              oprot.writeI32(_iter99.size());
              for (Map.Entry<String, String> _iter100 : _iter99.entrySet())
              {
                oprot.writeString(_iter100.getKey());
                oprot.writeString(_iter100.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SellerStatistics struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageCount = iprot.readI32();
        struct.setPageCountIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.statisticsList = new ArrayList<Map<String,String>>(_list101.size);
          for (int _i102 = 0; _i102 < _list101.size; ++_i102)
          {
            Map<String,String> _elem103;
            {
              org.apache.thrift.protocol.TMap _map104 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem103 = new HashMap<String,String>(2*_map104.size);
              for (int _i105 = 0; _i105 < _map104.size; ++_i105)
              {
                String _key106;
                String _val107;
                _key106 = iprot.readString();
                _val107 = iprot.readString();
                _elem103.put(_key106, _val107);
              }
            }
            struct.statisticsList.add(_elem103);
          }
        }
        struct.setStatisticsListIsSet(true);
      }
    }
  }

}

