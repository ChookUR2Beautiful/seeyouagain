/**
 * 
 */
package com.xmniao.xmn.core.vstar.controller;

import java.io.File;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.csource.common.MyException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.xmniao.xmn.core.base.BaseController;
import com.xmniao.xmn.core.base.Pageable;
import com.xmniao.xmn.core.base.Plupload;
import com.xmniao.xmn.core.base.Resultable;
import com.xmniao.xmn.core.common.service.CkeditorUpdateService;
import com.xmniao.xmn.core.util.FastFdsFile;
import com.xmniao.xmn.core.util.PluploadUtil;
import com.xmniao.xmn.core.vstar.constant.VstarConstant;
import com.xmniao.xmn.core.vstar.entity.TVstarDict;
import com.xmniao.xmn.core.vstar.entity.VstarLiverContent;
import com.xmniao.xmn.core.vstar.entity.VstarLiverContentAttachment;
import com.xmniao.xmn.core.vstar.entity.VstarLiverContentVideo;
import com.xmniao.xmn.core.vstar.service.TVstarDictService;
import com.xmniao.xmn.core.vstar.service.VstarLiverContentAttachmentService;
import com.xmniao.xmn.core.vstar.service.VstarLiverContentService;
import com.xmniao.xmn.core.vstar.service.VstarLiverContentVideoService;

/**
 * 
 * 项目名称：XmnWeb_vstar
 * 
 * 类名称：VstarLiverContentController
 * 
 * 类描述： 在此处添加类描述
 * 
 * 创建人： jianming
 * 
 * 创建时间：2017年7月18日 下午2:10:49 
 * 
 * Copyright (c) 广东寻蜜鸟网络技术有限公司 
 */
@Controller
@RequestMapping("/vstarLiverContent")
public class VstarLiverContentController extends BaseController{

	public static final String FileDir = "uploadfile/";

	public static final ObjectMapper MAPPER = new ObjectMapper();

	@Autowired
	private CkeditorUpdateService ckeditorUpdateService;
	
	@Autowired
	private TVstarDictService vstarDictService;
	
	@Autowired
	private VstarLiverContentVideoService vstarLiverContentVideoService;
	
	@Autowired
	private VstarLiverContentAttachmentService vstarLiverContentAttachmentService;
	
	@Autowired
	private VstarLiverContentService vstarLiverContentService;
	
	@RequestMapping("/main/edit/init")
	public Object init(Integer id){
		ModelAndView modelAndView = new ModelAndView("vstar/vstarLiverContent/liverContentMainEdit");
		if(id!=null){
			VstarLiverContent vstarLiverContent = vstarLiverContentService.getObject(id.longValue());
			vstarLiverContent.setContentAttachments(vstarLiverContentAttachmentService.getListByContentId(id.longValue()));
			modelAndView.addObject("content",vstarLiverContent);
		}
		modelAndView.addObject("dicts", vstarDictService.getList(new TVstarDict()));
		return modelAndView;
	}
	
	@RequestMapping("video/edit/init")
	@ResponseBody
	public Object addVideo(VstarLiverContentVideo vstarLiverContentVideo){
		 if(vstarLiverContentVideo.getId()!=null){
			 vstarLiverContentVideo.setUpdateTime(new Date());
			 vstarLiverContentVideoService.update(vstarLiverContentVideo);
		 }else{
			 vstarLiverContentVideo.setCreateTime(new Date());
			 vstarLiverContentVideoService.add(vstarLiverContentVideo);
		 }
		 Resultable success = Resultable.success();
		 success.setData(vstarLiverContentVideo);
		 return success;
	}
	
	
	@RequestMapping(value = "video/edit/getvideosByIds")
	@ResponseBody
	public Object getvideosByIds(@RequestParam(required=true)String ids){
		List<VstarLiverContentVideo> list=vstarLiverContentVideoService.getByIds(Arrays.asList(ids.split(",")));
		return Resultable.success("操作成功", list);
	}
	
	
	@RequestMapping(value = "init/video")
	public Object initVideo(Integer id,Model model){
		if(id!=null){
			VstarLiverContentVideo video = vstarLiverContentVideoService.getObject(id.longValue());
			model.addAttribute("video", video);
		}
		return "vstar/vstarLiverContent/liverContentVideoEdit";
	}
	
	@RequestMapping(value = "video/edit/deleteVideo")
	@ResponseBody
	public Object deleteVideo(@RequestParam(required=true)Integer id){
		vstarLiverContentVideoService.deleteByPrimaryKey(id.longValue());
		return Resultable.success();
	}
	
	
	@RequestMapping(value = "fileUpload", method = { RequestMethod.POST })
	@ResponseBody
	public Object fileUpload(Plupload plupload, HttpServletRequest request, HttpServletResponse response)
			throws JsonProcessingException, MyException {
	
		plupload.setRequest(request);
		// 文件存储路径
		File dir = new File(plupload.getRequest().getSession().getServletContext().getRealPath("/") + FileDir);

		System.out.println(dir.getPath());

		try {
			// 上传文件
			File upload = PluploadUtil.upload(plupload, dir);
			// 判断文件是否上传成功（被分成块的文件是否全部上传完成）
			if (PluploadUtil.isUploadFinish(plupload)) {
				System.out.println(plupload.getName() + "----");
				try {
						String filename = plupload.getName();
					String extendStr = filename.substring(filename.lastIndexOf(".")+1);
					String[] filetype = { "pdf", "ppt", "zip", "rar", "doc", "xls" };
					boolean pass = false;
					for (String f : filetype) {
						if (extendStr.toLowerCase().equals(f)) {
							pass = true;
							break;
						}
					}
					if (!pass) {
						HashMap<String, String> resultMap = new HashMap<>();
						resultMap.put("result", "failed");
						resultMap.put("message", "只支持上传" + filetype.toString() + "格式的图片文件");
						return MAPPER.writeValueAsString(resultMap);
					}
					Map<String, String> upload2 = FastFdsFile.getInstance().upload(upload, false);
					VstarLiverContentAttachment vstarLiverContentAttachment = new VstarLiverContentAttachment();
					vstarLiverContentAttachment.setFileUrl(upload2.get("url"));
					vstarLiverContentAttachment.setFileName(plupload.getName());
					vstarLiverContentAttachment.setCreateTime(new Date());
					vstarLiverContentAttachment.setUpdateTime(new Date());
					vstarLiverContentAttachment.setFileType(extendStr);
					vstarLiverContentAttachment.setStatus(1);
					vstarLiverContentAttachmentService.add(vstarLiverContentAttachment);
					HashMap<String, String> resultMap = new HashMap<>();
					resultMap.put("result", "ok");
					resultMap.put("id", vstarLiverContentAttachment.getId().toString());
					resultMap.put("url", upload2.get("url"));
					return resultMap;
				} catch (Exception e) {
					log.error("调用上传文件接口出现异常",e);
					throw new RuntimeException();
				}finally{
					upload.delete();
				}
			}
		} catch (Exception e) {
			log.error("调用上传文件接口出现异常",e);
			throw new RuntimeException();
		}

		return "login.upload";
	}
	
	
	@RequestMapping(value ={ "main/edit/ckeditorUpload","range/edit/ckeditorUpload"}, method = { RequestMethod.POST })
	public void uploadFile3(@RequestParam("upload") MultipartFile filedata, HttpServletRequest request,
			HttpServletResponse response) {
		System.out.println("文件上传Controller3");
		ckeditorUpdateService.ckeditorUpdate(filedata, request, response);
	}
	
	
	
	@RequestMapping(value = "main/edit")
	@ResponseBody
	public Object addMain(VstarLiverContent content){
		content.setContentType(1);
		content.setUpdateTime(new Date());
		if(content.getId()!=null){
			vstarLiverContentService.updateMain(content);
		}else{
			content.setCreateTime(new Date());
			vstarLiverContentService.addMain(content);
		}
		return Resultable.success("操作成功");
	}
	
	@RequestMapping(value = "/init/getContentEditMsg")
	@ResponseBody
	public Object getContentEditMsg(@RequestParam(required=true) Integer id){
		Map<String,List> content =  vstarLiverContentService.getContentEditMsg(id);
		return content;
	}
	
	@RequestMapping("range/edit/init")
	public Object rangeInit(Integer id,Model model){
		ModelAndView modelAndView = new ModelAndView("vstar/vstarLiverContent/liverContentRangeEdit");
		modelAndView.addObject("dicts", vstarDictService.getList(new TVstarDict()));
		if(id!=null){
			VstarLiverContent vstarLiverContent = vstarLiverContentService.getObject(id.longValue());
			vstarLiverContent.setContentAttachments(vstarLiverContentAttachmentService.getListByContentId(id.longValue()));
			modelAndView.addObject("content",vstarLiverContent);
		}
		return modelAndView;
	}
	
	
	@RequestMapping(value = "range/edit")
	@ResponseBody
	public Object addRange(VstarLiverContent content){
		content.setUpdateTime(new Date());
		content.setContentType(2);
		if(content.getId()!=null){
			vstarLiverContentService.updateRange(content);
		}else{
			content.setCreateTime(new Date());
			vstarLiverContentService.addRange(content);
		}
		return Resultable.success("操作成功");
	}
	
	
	@RequestMapping(value = "/init")
	public Object init(){
		return "vstar/vstarLiverContent/liverContentManage";
	}
	
	
	@RequestMapping(value = "/init/list")
	@ResponseBody
	public Object initList(VstarLiverContent content){
		Pageable<VstarLiverContent> pageable = new Pageable<>(content);
		pageable.setContent(vstarLiverContentService.getList(content));
		pageable.setTotal(vstarLiverContentService.count(content));
		return pageable;
	}
	
	
	/**
	 * 
	 * 方法描述：批量更新商品上架状态<br/>
	 * 创建人：  huang'tao <br/>
	 * 创建时间：2016-11-23下午2:11:30 <br/>
	 * @param ids
	 * @param status
	 * @return
	 */
	@RequestMapping(value="/update/statusBatch")
	@ResponseBody
	public Object updateStatusBatch(@RequestParam("ids") String ids,@RequestParam("status") String status){
		Resultable result=new Resultable();
		result=vstarLiverContentService.updateStatusBatch(ids,status);
		return result;
	}
	
}
