/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift.service.orderService;	

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新订单信息接口请求参数
 */
public class UpdateOrderRequest implements org.apache.thrift.TBase<UpdateOrderRequest, UpdateOrderRequest._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateOrderRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateOrderRequest");

  private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAYTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paytype", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ORDERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ordertype", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PAYID_FIELD_DESC = new org.apache.thrift.protocol.TField("payid", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ORDERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ordername", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORDERDETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("orderdetail", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PAYAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("payamount", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("samount", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MERCHID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchid", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField MERCHNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchname", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LEDGERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ledgertype", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ZDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("zdate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PHONEID_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneid", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField COMMISION_FIELD_DESC = new org.apache.thrift.protocol.TField("commision", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("profit", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField GIVE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("giveMoney", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField THIRD_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdUid", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateOrderRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateOrderRequestTupleSchemeFactory());
  }

  public String bid; // required
  public String number; // required
  public String paytype; // required
  public int status; // required
  public int ordertype; // required
  public long payid; // required
  public String ordername; // required
  public String orderdetail; // required
  public String payamount; // required
  public String samount; // required
  public long merchid; // required
  public String merchname; // required
  public int ledgertype; // required
  public String zdate; // required
  public String phoneid; // required
  public String commision; // required
  public String profit; // required
  public String giveMoney; // required
  public String thirdUid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BID((short)1, "bid"),
    NUMBER((short)2, "number"),
    PAYTYPE((short)3, "paytype"),
    STATUS((short)4, "status"),
    ORDERTYPE((short)5, "ordertype"),
    PAYID((short)6, "payid"),
    ORDERNAME((short)7, "ordername"),
    ORDERDETAIL((short)8, "orderdetail"),
    PAYAMOUNT((short)9, "payamount"),
    SAMOUNT((short)10, "samount"),
    MERCHID((short)11, "merchid"),
    MERCHNAME((short)12, "merchname"),
    LEDGERTYPE((short)13, "ledgertype"),
    ZDATE((short)14, "zdate"),
    PHONEID((short)15, "phoneid"),
    COMMISION((short)16, "commision"),
    PROFIT((short)17, "profit"),
    GIVE_MONEY((short)18, "giveMoney"),
    THIRD_UID((short)19, "thirdUid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BID
          return BID;
        case 2: // NUMBER
          return NUMBER;
        case 3: // PAYTYPE
          return PAYTYPE;
        case 4: // STATUS
          return STATUS;
        case 5: // ORDERTYPE
          return ORDERTYPE;
        case 6: // PAYID
          return PAYID;
        case 7: // ORDERNAME
          return ORDERNAME;
        case 8: // ORDERDETAIL
          return ORDERDETAIL;
        case 9: // PAYAMOUNT
          return PAYAMOUNT;
        case 10: // SAMOUNT
          return SAMOUNT;
        case 11: // MERCHID
          return MERCHID;
        case 12: // MERCHNAME
          return MERCHNAME;
        case 13: // LEDGERTYPE
          return LEDGERTYPE;
        case 14: // ZDATE
          return ZDATE;
        case 15: // PHONEID
          return PHONEID;
        case 16: // COMMISION
          return COMMISION;
        case 17: // PROFIT
          return PROFIT;
        case 18: // GIVE_MONEY
          return GIVE_MONEY;
        case 19: // THIRD_UID
          return THIRD_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __ORDERTYPE_ISSET_ID = 1;
  private static final int __PAYID_ISSET_ID = 2;
  private static final int __MERCHID_ISSET_ID = 3;
  private static final int __LEDGERTYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYTYPE, new org.apache.thrift.meta_data.FieldMetaData("paytype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDERTYPE, new org.apache.thrift.meta_data.FieldMetaData("ordertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYID, new org.apache.thrift.meta_data.FieldMetaData("payid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDERNAME, new org.apache.thrift.meta_data.FieldMetaData("ordername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDERDETAIL, new org.apache.thrift.meta_data.FieldMetaData("orderdetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("payamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("samount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHID, new org.apache.thrift.meta_data.FieldMetaData("merchid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHNAME, new org.apache.thrift.meta_data.FieldMetaData("merchname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEDGERTYPE, new org.apache.thrift.meta_data.FieldMetaData("ledgertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ZDATE, new org.apache.thrift.meta_data.FieldMetaData("zdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONEID, new org.apache.thrift.meta_data.FieldMetaData("phoneid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMISION, new org.apache.thrift.meta_data.FieldMetaData("commision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFIT, new org.apache.thrift.meta_data.FieldMetaData("profit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("giveMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_UID, new org.apache.thrift.meta_data.FieldMetaData("thirdUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateOrderRequest.class, metaDataMap);
  }

  public UpdateOrderRequest() {
  }

  public UpdateOrderRequest(
    String bid,
    String number,
    String paytype,
    int status,
    int ordertype,
    long payid,
    String ordername,
    String orderdetail,
    String payamount,
    String samount,
    long merchid,
    String merchname,
    int ledgertype,
    String zdate,
    String phoneid,
    String commision,
    String profit,
    String giveMoney,
    String thirdUid)
  {
    this();
    this.bid = bid;
    this.number = number;
    this.paytype = paytype;
    this.status = status;
    setStatusIsSet(true);
    this.ordertype = ordertype;
    setOrdertypeIsSet(true);
    this.payid = payid;
    setPayidIsSet(true);
    this.ordername = ordername;
    this.orderdetail = orderdetail;
    this.payamount = payamount;
    this.samount = samount;
    this.merchid = merchid;
    setMerchidIsSet(true);
    this.merchname = merchname;
    this.ledgertype = ledgertype;
    setLedgertypeIsSet(true);
    this.zdate = zdate;
    this.phoneid = phoneid;
    this.commision = commision;
    this.profit = profit;
    this.giveMoney = giveMoney;
    this.thirdUid = thirdUid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateOrderRequest(UpdateOrderRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBid()) {
      this.bid = other.bid;
    }
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    if (other.isSetPaytype()) {
      this.paytype = other.paytype;
    }
    this.status = other.status;
    this.ordertype = other.ordertype;
    this.payid = other.payid;
    if (other.isSetOrdername()) {
      this.ordername = other.ordername;
    }
    if (other.isSetOrderdetail()) {
      this.orderdetail = other.orderdetail;
    }
    if (other.isSetPayamount()) {
      this.payamount = other.payamount;
    }
    if (other.isSetSamount()) {
      this.samount = other.samount;
    }
    this.merchid = other.merchid;
    if (other.isSetMerchname()) {
      this.merchname = other.merchname;
    }
    this.ledgertype = other.ledgertype;
    if (other.isSetZdate()) {
      this.zdate = other.zdate;
    }
    if (other.isSetPhoneid()) {
      this.phoneid = other.phoneid;
    }
    if (other.isSetCommision()) {
      this.commision = other.commision;
    }
    if (other.isSetProfit()) {
      this.profit = other.profit;
    }
    if (other.isSetGiveMoney()) {
      this.giveMoney = other.giveMoney;
    }
    if (other.isSetThirdUid()) {
      this.thirdUid = other.thirdUid;
    }
  }

  public UpdateOrderRequest deepCopy() {
    return new UpdateOrderRequest(this);
  }

  @Override
  public void clear() {
    this.bid = null;
    this.number = null;
    this.paytype = null;
    setStatusIsSet(false);
    this.status = 0;
    setOrdertypeIsSet(false);
    this.ordertype = 0;
    setPayidIsSet(false);
    this.payid = 0;
    this.ordername = null;
    this.orderdetail = null;
    this.payamount = null;
    this.samount = null;
    setMerchidIsSet(false);
    this.merchid = 0;
    this.merchname = null;
    setLedgertypeIsSet(false);
    this.ledgertype = 0;
    this.zdate = null;
    this.phoneid = null;
    this.commision = null;
    this.profit = null;
    this.giveMoney = null;
    this.thirdUid = null;
  }

  public String getBid() {
    return this.bid;
  }

  public UpdateOrderRequest setBid(String bid) {
    this.bid = bid;
    return this;
  }

  public void unsetBid() {
    this.bid = null;
  }

  /** Returns true if field bid is set (has been assigned a value) and false otherwise */
  public boolean isSetBid() {
    return this.bid != null;
  }

  public void setBidIsSet(boolean value) {
    if (!value) {
      this.bid = null;
    }
  }

  public String getNumber() {
    return this.number;
  }

  public UpdateOrderRequest setNumber(String number) {
    this.number = number;
    return this;
  }

  public void unsetNumber() {
    this.number = null;
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return this.number != null;
  }

  public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }

  public String getPaytype() {
    return this.paytype;
  }

  public UpdateOrderRequest setPaytype(String paytype) {
    this.paytype = paytype;
    return this;
  }

  public void unsetPaytype() {
    this.paytype = null;
  }

  /** Returns true if field paytype is set (has been assigned a value) and false otherwise */
  public boolean isSetPaytype() {
    return this.paytype != null;
  }

  public void setPaytypeIsSet(boolean value) {
    if (!value) {
      this.paytype = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public UpdateOrderRequest setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getOrdertype() {
    return this.ordertype;
  }

  public UpdateOrderRequest setOrdertype(int ordertype) {
    this.ordertype = ordertype;
    setOrdertypeIsSet(true);
    return this;
  }

  public void unsetOrdertype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  /** Returns true if field ordertype is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdertype() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  public void setOrdertypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
  }

  public long getPayid() {
    return this.payid;
  }

  public UpdateOrderRequest setPayid(long payid) {
    this.payid = payid;
    setPayidIsSet(true);
    return this;
  }

  public void unsetPayid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYID_ISSET_ID);
  }

  /** Returns true if field payid is set (has been assigned a value) and false otherwise */
  public boolean isSetPayid() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYID_ISSET_ID);
  }

  public void setPayidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYID_ISSET_ID, value);
  }

  public String getOrdername() {
    return this.ordername;
  }

  public UpdateOrderRequest setOrdername(String ordername) {
    this.ordername = ordername;
    return this;
  }

  public void unsetOrdername() {
    this.ordername = null;
  }

  /** Returns true if field ordername is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdername() {
    return this.ordername != null;
  }

  public void setOrdernameIsSet(boolean value) {
    if (!value) {
      this.ordername = null;
    }
  }

  public String getOrderdetail() {
    return this.orderdetail;
  }

  public UpdateOrderRequest setOrderdetail(String orderdetail) {
    this.orderdetail = orderdetail;
    return this;
  }

  public void unsetOrderdetail() {
    this.orderdetail = null;
  }

  /** Returns true if field orderdetail is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderdetail() {
    return this.orderdetail != null;
  }

  public void setOrderdetailIsSet(boolean value) {
    if (!value) {
      this.orderdetail = null;
    }
  }

  public String getPayamount() {
    return this.payamount;
  }

  public UpdateOrderRequest setPayamount(String payamount) {
    this.payamount = payamount;
    return this;
  }

  public void unsetPayamount() {
    this.payamount = null;
  }

  /** Returns true if field payamount is set (has been assigned a value) and false otherwise */
  public boolean isSetPayamount() {
    return this.payamount != null;
  }

  public void setPayamountIsSet(boolean value) {
    if (!value) {
      this.payamount = null;
    }
  }

  public String getSamount() {
    return this.samount;
  }

  public UpdateOrderRequest setSamount(String samount) {
    this.samount = samount;
    return this;
  }

  public void unsetSamount() {
    this.samount = null;
  }

  /** Returns true if field samount is set (has been assigned a value) and false otherwise */
  public boolean isSetSamount() {
    return this.samount != null;
  }

  public void setSamountIsSet(boolean value) {
    if (!value) {
      this.samount = null;
    }
  }

  public long getMerchid() {
    return this.merchid;
  }

  public UpdateOrderRequest setMerchid(long merchid) {
    this.merchid = merchid;
    setMerchidIsSet(true);
    return this;
  }

  public void unsetMerchid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHID_ISSET_ID);
  }

  /** Returns true if field merchid is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchid() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHID_ISSET_ID);
  }

  public void setMerchidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHID_ISSET_ID, value);
  }

  public String getMerchname() {
    return this.merchname;
  }

  public UpdateOrderRequest setMerchname(String merchname) {
    this.merchname = merchname;
    return this;
  }

  public void unsetMerchname() {
    this.merchname = null;
  }

  /** Returns true if field merchname is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchname() {
    return this.merchname != null;
  }

  public void setMerchnameIsSet(boolean value) {
    if (!value) {
      this.merchname = null;
    }
  }

  public int getLedgertype() {
    return this.ledgertype;
  }

  public UpdateOrderRequest setLedgertype(int ledgertype) {
    this.ledgertype = ledgertype;
    setLedgertypeIsSet(true);
    return this;
  }

  public void unsetLedgertype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEDGERTYPE_ISSET_ID);
  }

  /** Returns true if field ledgertype is set (has been assigned a value) and false otherwise */
  public boolean isSetLedgertype() {
    return EncodingUtils.testBit(__isset_bitfield, __LEDGERTYPE_ISSET_ID);
  }

  public void setLedgertypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEDGERTYPE_ISSET_ID, value);
  }

  public String getZdate() {
    return this.zdate;
  }

  public UpdateOrderRequest setZdate(String zdate) {
    this.zdate = zdate;
    return this;
  }

  public void unsetZdate() {
    this.zdate = null;
  }

  /** Returns true if field zdate is set (has been assigned a value) and false otherwise */
  public boolean isSetZdate() {
    return this.zdate != null;
  }

  public void setZdateIsSet(boolean value) {
    if (!value) {
      this.zdate = null;
    }
  }

  public String getPhoneid() {
    return this.phoneid;
  }

  public UpdateOrderRequest setPhoneid(String phoneid) {
    this.phoneid = phoneid;
    return this;
  }

  public void unsetPhoneid() {
    this.phoneid = null;
  }

  /** Returns true if field phoneid is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneid() {
    return this.phoneid != null;
  }

  public void setPhoneidIsSet(boolean value) {
    if (!value) {
      this.phoneid = null;
    }
  }

  public String getCommision() {
    return this.commision;
  }

  public UpdateOrderRequest setCommision(String commision) {
    this.commision = commision;
    return this;
  }

  public void unsetCommision() {
    this.commision = null;
  }

  /** Returns true if field commision is set (has been assigned a value) and false otherwise */
  public boolean isSetCommision() {
    return this.commision != null;
  }

  public void setCommisionIsSet(boolean value) {
    if (!value) {
      this.commision = null;
    }
  }

  public String getProfit() {
    return this.profit;
  }

  public UpdateOrderRequest setProfit(String profit) {
    this.profit = profit;
    return this;
  }

  public void unsetProfit() {
    this.profit = null;
  }

  /** Returns true if field profit is set (has been assigned a value) and false otherwise */
  public boolean isSetProfit() {
    return this.profit != null;
  }

  public void setProfitIsSet(boolean value) {
    if (!value) {
      this.profit = null;
    }
  }

  public String getGiveMoney() {
    return this.giveMoney;
  }

  public UpdateOrderRequest setGiveMoney(String giveMoney) {
    this.giveMoney = giveMoney;
    return this;
  }

  public void unsetGiveMoney() {
    this.giveMoney = null;
  }

  /** Returns true if field giveMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveMoney() {
    return this.giveMoney != null;
  }

  public void setGiveMoneyIsSet(boolean value) {
    if (!value) {
      this.giveMoney = null;
    }
  }

  public String getThirdUid() {
    return this.thirdUid;
  }

  public UpdateOrderRequest setThirdUid(String thirdUid) {
    this.thirdUid = thirdUid;
    return this;
  }

  public void unsetThirdUid() {
    this.thirdUid = null;
  }

  /** Returns true if field thirdUid is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdUid() {
    return this.thirdUid != null;
  }

  public void setThirdUidIsSet(boolean value) {
    if (!value) {
      this.thirdUid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BID:
      if (value == null) {
        unsetBid();
      } else {
        setBid((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case PAYTYPE:
      if (value == null) {
        unsetPaytype();
      } else {
        setPaytype((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ORDERTYPE:
      if (value == null) {
        unsetOrdertype();
      } else {
        setOrdertype((Integer)value);
      }
      break;

    case PAYID:
      if (value == null) {
        unsetPayid();
      } else {
        setPayid((Long)value);
      }
      break;

    case ORDERNAME:
      if (value == null) {
        unsetOrdername();
      } else {
        setOrdername((String)value);
      }
      break;

    case ORDERDETAIL:
      if (value == null) {
        unsetOrderdetail();
      } else {
        setOrderdetail((String)value);
      }
      break;

    case PAYAMOUNT:
      if (value == null) {
        unsetPayamount();
      } else {
        setPayamount((String)value);
      }
      break;

    case SAMOUNT:
      if (value == null) {
        unsetSamount();
      } else {
        setSamount((String)value);
      }
      break;

    case MERCHID:
      if (value == null) {
        unsetMerchid();
      } else {
        setMerchid((Long)value);
      }
      break;

    case MERCHNAME:
      if (value == null) {
        unsetMerchname();
      } else {
        setMerchname((String)value);
      }
      break;

    case LEDGERTYPE:
      if (value == null) {
        unsetLedgertype();
      } else {
        setLedgertype((Integer)value);
      }
      break;

    case ZDATE:
      if (value == null) {
        unsetZdate();
      } else {
        setZdate((String)value);
      }
      break;

    case PHONEID:
      if (value == null) {
        unsetPhoneid();
      } else {
        setPhoneid((String)value);
      }
      break;

    case COMMISION:
      if (value == null) {
        unsetCommision();
      } else {
        setCommision((String)value);
      }
      break;

    case PROFIT:
      if (value == null) {
        unsetProfit();
      } else {
        setProfit((String)value);
      }
      break;

    case GIVE_MONEY:
      if (value == null) {
        unsetGiveMoney();
      } else {
        setGiveMoney((String)value);
      }
      break;

    case THIRD_UID:
      if (value == null) {
        unsetThirdUid();
      } else {
        setThirdUid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BID:
      return getBid();

    case NUMBER:
      return getNumber();

    case PAYTYPE:
      return getPaytype();

    case STATUS:
      return Integer.valueOf(getStatus());

    case ORDERTYPE:
      return Integer.valueOf(getOrdertype());

    case PAYID:
      return Long.valueOf(getPayid());

    case ORDERNAME:
      return getOrdername();

    case ORDERDETAIL:
      return getOrderdetail();

    case PAYAMOUNT:
      return getPayamount();

    case SAMOUNT:
      return getSamount();

    case MERCHID:
      return Long.valueOf(getMerchid());

    case MERCHNAME:
      return getMerchname();

    case LEDGERTYPE:
      return Integer.valueOf(getLedgertype());

    case ZDATE:
      return getZdate();

    case PHONEID:
      return getPhoneid();

    case COMMISION:
      return getCommision();

    case PROFIT:
      return getProfit();

    case GIVE_MONEY:
      return getGiveMoney();

    case THIRD_UID:
      return getThirdUid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BID:
      return isSetBid();
    case NUMBER:
      return isSetNumber();
    case PAYTYPE:
      return isSetPaytype();
    case STATUS:
      return isSetStatus();
    case ORDERTYPE:
      return isSetOrdertype();
    case PAYID:
      return isSetPayid();
    case ORDERNAME:
      return isSetOrdername();
    case ORDERDETAIL:
      return isSetOrderdetail();
    case PAYAMOUNT:
      return isSetPayamount();
    case SAMOUNT:
      return isSetSamount();
    case MERCHID:
      return isSetMerchid();
    case MERCHNAME:
      return isSetMerchname();
    case LEDGERTYPE:
      return isSetLedgertype();
    case ZDATE:
      return isSetZdate();
    case PHONEID:
      return isSetPhoneid();
    case COMMISION:
      return isSetCommision();
    case PROFIT:
      return isSetProfit();
    case GIVE_MONEY:
      return isSetGiveMoney();
    case THIRD_UID:
      return isSetThirdUid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateOrderRequest)
      return this.equals((UpdateOrderRequest)that);
    return false;
  }

  public boolean equals(UpdateOrderRequest that) {
    if (that == null)
      return false;

    boolean this_present_bid = true && this.isSetBid();
    boolean that_present_bid = true && that.isSetBid();
    if (this_present_bid || that_present_bid) {
      if (!(this_present_bid && that_present_bid))
        return false;
      if (!this.bid.equals(that.bid))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_paytype = true && this.isSetPaytype();
    boolean that_present_paytype = true && that.isSetPaytype();
    if (this_present_paytype || that_present_paytype) {
      if (!(this_present_paytype && that_present_paytype))
        return false;
      if (!this.paytype.equals(that.paytype))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_ordertype = true;
    boolean that_present_ordertype = true;
    if (this_present_ordertype || that_present_ordertype) {
      if (!(this_present_ordertype && that_present_ordertype))
        return false;
      if (this.ordertype != that.ordertype)
        return false;
    }

    boolean this_present_payid = true;
    boolean that_present_payid = true;
    if (this_present_payid || that_present_payid) {
      if (!(this_present_payid && that_present_payid))
        return false;
      if (this.payid != that.payid)
        return false;
    }

    boolean this_present_ordername = true && this.isSetOrdername();
    boolean that_present_ordername = true && that.isSetOrdername();
    if (this_present_ordername || that_present_ordername) {
      if (!(this_present_ordername && that_present_ordername))
        return false;
      if (!this.ordername.equals(that.ordername))
        return false;
    }

    boolean this_present_orderdetail = true && this.isSetOrderdetail();
    boolean that_present_orderdetail = true && that.isSetOrderdetail();
    if (this_present_orderdetail || that_present_orderdetail) {
      if (!(this_present_orderdetail && that_present_orderdetail))
        return false;
      if (!this.orderdetail.equals(that.orderdetail))
        return false;
    }

    boolean this_present_payamount = true && this.isSetPayamount();
    boolean that_present_payamount = true && that.isSetPayamount();
    if (this_present_payamount || that_present_payamount) {
      if (!(this_present_payamount && that_present_payamount))
        return false;
      if (!this.payamount.equals(that.payamount))
        return false;
    }

    boolean this_present_samount = true && this.isSetSamount();
    boolean that_present_samount = true && that.isSetSamount();
    if (this_present_samount || that_present_samount) {
      if (!(this_present_samount && that_present_samount))
        return false;
      if (!this.samount.equals(that.samount))
        return false;
    }

    boolean this_present_merchid = true;
    boolean that_present_merchid = true;
    if (this_present_merchid || that_present_merchid) {
      if (!(this_present_merchid && that_present_merchid))
        return false;
      if (this.merchid != that.merchid)
        return false;
    }

    boolean this_present_merchname = true && this.isSetMerchname();
    boolean that_present_merchname = true && that.isSetMerchname();
    if (this_present_merchname || that_present_merchname) {
      if (!(this_present_merchname && that_present_merchname))
        return false;
      if (!this.merchname.equals(that.merchname))
        return false;
    }

    boolean this_present_ledgertype = true;
    boolean that_present_ledgertype = true;
    if (this_present_ledgertype || that_present_ledgertype) {
      if (!(this_present_ledgertype && that_present_ledgertype))
        return false;
      if (this.ledgertype != that.ledgertype)
        return false;
    }

    boolean this_present_zdate = true && this.isSetZdate();
    boolean that_present_zdate = true && that.isSetZdate();
    if (this_present_zdate || that_present_zdate) {
      if (!(this_present_zdate && that_present_zdate))
        return false;
      if (!this.zdate.equals(that.zdate))
        return false;
    }

    boolean this_present_phoneid = true && this.isSetPhoneid();
    boolean that_present_phoneid = true && that.isSetPhoneid();
    if (this_present_phoneid || that_present_phoneid) {
      if (!(this_present_phoneid && that_present_phoneid))
        return false;
      if (!this.phoneid.equals(that.phoneid))
        return false;
    }

    boolean this_present_commision = true && this.isSetCommision();
    boolean that_present_commision = true && that.isSetCommision();
    if (this_present_commision || that_present_commision) {
      if (!(this_present_commision && that_present_commision))
        return false;
      if (!this.commision.equals(that.commision))
        return false;
    }

    boolean this_present_profit = true && this.isSetProfit();
    boolean that_present_profit = true && that.isSetProfit();
    if (this_present_profit || that_present_profit) {
      if (!(this_present_profit && that_present_profit))
        return false;
      if (!this.profit.equals(that.profit))
        return false;
    }

    boolean this_present_giveMoney = true && this.isSetGiveMoney();
    boolean that_present_giveMoney = true && that.isSetGiveMoney();
    if (this_present_giveMoney || that_present_giveMoney) {
      if (!(this_present_giveMoney && that_present_giveMoney))
        return false;
      if (!this.giveMoney.equals(that.giveMoney))
        return false;
    }

    boolean this_present_thirdUid = true && this.isSetThirdUid();
    boolean that_present_thirdUid = true && that.isSetThirdUid();
    if (this_present_thirdUid || that_present_thirdUid) {
      if (!(this_present_thirdUid && that_present_thirdUid))
        return false;
      if (!this.thirdUid.equals(that.thirdUid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UpdateOrderRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBid()).compareTo(other.isSetBid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaytype()).compareTo(other.isSetPaytype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaytype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paytype, other.paytype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrdertype()).compareTo(other.isSetOrdertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordertype, other.ordertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayid()).compareTo(other.isSetPayid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payid, other.payid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrdername()).compareTo(other.isSetOrdername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordername, other.ordername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderdetail()).compareTo(other.isSetOrderdetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderdetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderdetail, other.orderdetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayamount()).compareTo(other.isSetPayamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payamount, other.payamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSamount()).compareTo(other.isSetSamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samount, other.samount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchid()).compareTo(other.isSetMerchid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchid, other.merchid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchname()).compareTo(other.isSetMerchname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchname, other.merchname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLedgertype()).compareTo(other.isSetLedgertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLedgertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ledgertype, other.ledgertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZdate()).compareTo(other.isSetZdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdate, other.zdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneid()).compareTo(other.isSetPhoneid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneid, other.phoneid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommision()).compareTo(other.isSetCommision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commision, other.commision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfit()).compareTo(other.isSetProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profit, other.profit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveMoney()).compareTo(other.isSetGiveMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveMoney, other.giveMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdUid()).compareTo(other.isSetThirdUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdUid, other.thirdUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateOrderRequest(");
    boolean first = true;

    sb.append("bid:");
    if (this.bid == null) {
      sb.append("null");
    } else {
      sb.append(this.bid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paytype:");
    if (this.paytype == null) {
      sb.append("null");
    } else {
      sb.append(this.paytype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ordertype:");
    sb.append(this.ordertype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payid:");
    sb.append(this.payid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ordername:");
    if (this.ordername == null) {
      sb.append("null");
    } else {
      sb.append(this.ordername);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderdetail:");
    if (this.orderdetail == null) {
      sb.append("null");
    } else {
      sb.append(this.orderdetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payamount:");
    if (this.payamount == null) {
      sb.append("null");
    } else {
      sb.append(this.payamount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("samount:");
    if (this.samount == null) {
      sb.append("null");
    } else {
      sb.append(this.samount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchid:");
    sb.append(this.merchid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchname:");
    if (this.merchname == null) {
      sb.append("null");
    } else {
      sb.append(this.merchname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ledgertype:");
    sb.append(this.ledgertype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdate:");
    if (this.zdate == null) {
      sb.append("null");
    } else {
      sb.append(this.zdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneid:");
    if (this.phoneid == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commision:");
    if (this.commision == null) {
      sb.append("null");
    } else {
      sb.append(this.commision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profit:");
    if (this.profit == null) {
      sb.append("null");
    } else {
      sb.append(this.profit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveMoney:");
    if (this.giveMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.giveMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdUid:");
    if (this.thirdUid == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdUid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateOrderRequestStandardSchemeFactory implements SchemeFactory {
    public UpdateOrderRequestStandardScheme getScheme() {
      return new UpdateOrderRequestStandardScheme();
    }
  }

  private static class UpdateOrderRequestStandardScheme extends StandardScheme<UpdateOrderRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateOrderRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bid = iprot.readString();
              struct.setBidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.number = iprot.readString();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paytype = iprot.readString();
              struct.setPaytypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ordertype = iprot.readI32();
              struct.setOrdertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.payid = iprot.readI64();
              struct.setPayidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ordername = iprot.readString();
              struct.setOrdernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDERDETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderdetail = iprot.readString();
              struct.setOrderdetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAYAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payamount = iprot.readString();
              struct.setPayamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.samount = iprot.readString();
              struct.setSamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MERCHID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchid = iprot.readI64();
              struct.setMerchidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MERCHNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchname = iprot.readString();
              struct.setMerchnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LEDGERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ledgertype = iprot.readI32();
              struct.setLedgertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ZDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zdate = iprot.readString();
              struct.setZdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PHONEID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneid = iprot.readString();
              struct.setPhoneidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COMMISION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commision = iprot.readString();
              struct.setCommisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profit = iprot.readString();
              struct.setProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GIVE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giveMoney = iprot.readString();
              struct.setGiveMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // THIRD_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdUid = iprot.readString();
              struct.setThirdUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateOrderRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bid != null) {
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeString(struct.bid);
        oprot.writeFieldEnd();
      }
      if (struct.number != null) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeString(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.paytype != null) {
        oprot.writeFieldBegin(PAYTYPE_FIELD_DESC);
        oprot.writeString(struct.paytype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDERTYPE_FIELD_DESC);
      oprot.writeI32(struct.ordertype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYID_FIELD_DESC);
      oprot.writeI64(struct.payid);
      oprot.writeFieldEnd();
      if (struct.ordername != null) {
        oprot.writeFieldBegin(ORDERNAME_FIELD_DESC);
        oprot.writeString(struct.ordername);
        oprot.writeFieldEnd();
      }
      if (struct.orderdetail != null) {
        oprot.writeFieldBegin(ORDERDETAIL_FIELD_DESC);
        oprot.writeString(struct.orderdetail);
        oprot.writeFieldEnd();
      }
      if (struct.payamount != null) {
        oprot.writeFieldBegin(PAYAMOUNT_FIELD_DESC);
        oprot.writeString(struct.payamount);
        oprot.writeFieldEnd();
      }
      if (struct.samount != null) {
        oprot.writeFieldBegin(SAMOUNT_FIELD_DESC);
        oprot.writeString(struct.samount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERCHID_FIELD_DESC);
      oprot.writeI64(struct.merchid);
      oprot.writeFieldEnd();
      if (struct.merchname != null) {
        oprot.writeFieldBegin(MERCHNAME_FIELD_DESC);
        oprot.writeString(struct.merchname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEDGERTYPE_FIELD_DESC);
      oprot.writeI32(struct.ledgertype);
      oprot.writeFieldEnd();
      if (struct.zdate != null) {
        oprot.writeFieldBegin(ZDATE_FIELD_DESC);
        oprot.writeString(struct.zdate);
        oprot.writeFieldEnd();
      }
      if (struct.phoneid != null) {
        oprot.writeFieldBegin(PHONEID_FIELD_DESC);
        oprot.writeString(struct.phoneid);
        oprot.writeFieldEnd();
      }
      if (struct.commision != null) {
        oprot.writeFieldBegin(COMMISION_FIELD_DESC);
        oprot.writeString(struct.commision);
        oprot.writeFieldEnd();
      }
      if (struct.profit != null) {
        oprot.writeFieldBegin(PROFIT_FIELD_DESC);
        oprot.writeString(struct.profit);
        oprot.writeFieldEnd();
      }
      if (struct.giveMoney != null) {
        oprot.writeFieldBegin(GIVE_MONEY_FIELD_DESC);
        oprot.writeString(struct.giveMoney);
        oprot.writeFieldEnd();
      }
      if (struct.thirdUid != null) {
        oprot.writeFieldBegin(THIRD_UID_FIELD_DESC);
        oprot.writeString(struct.thirdUid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateOrderRequestTupleSchemeFactory implements SchemeFactory {
    public UpdateOrderRequestTupleScheme getScheme() {
      return new UpdateOrderRequestTupleScheme();
    }
  }

  private static class UpdateOrderRequestTupleScheme extends TupleScheme<UpdateOrderRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateOrderRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBid()) {
        optionals.set(0);
      }
      if (struct.isSetNumber()) {
        optionals.set(1);
      }
      if (struct.isSetPaytype()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetOrdertype()) {
        optionals.set(4);
      }
      if (struct.isSetPayid()) {
        optionals.set(5);
      }
      if (struct.isSetOrdername()) {
        optionals.set(6);
      }
      if (struct.isSetOrderdetail()) {
        optionals.set(7);
      }
      if (struct.isSetPayamount()) {
        optionals.set(8);
      }
      if (struct.isSetSamount()) {
        optionals.set(9);
      }
      if (struct.isSetMerchid()) {
        optionals.set(10);
      }
      if (struct.isSetMerchname()) {
        optionals.set(11);
      }
      if (struct.isSetLedgertype()) {
        optionals.set(12);
      }
      if (struct.isSetZdate()) {
        optionals.set(13);
      }
      if (struct.isSetPhoneid()) {
        optionals.set(14);
      }
      if (struct.isSetCommision()) {
        optionals.set(15);
      }
      if (struct.isSetProfit()) {
        optionals.set(16);
      }
      if (struct.isSetGiveMoney()) {
        optionals.set(17);
      }
      if (struct.isSetThirdUid()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetBid()) {
        oprot.writeString(struct.bid);
      }
      if (struct.isSetNumber()) {
        oprot.writeString(struct.number);
      }
      if (struct.isSetPaytype()) {
        oprot.writeString(struct.paytype);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetOrdertype()) {
        oprot.writeI32(struct.ordertype);
      }
      if (struct.isSetPayid()) {
        oprot.writeI64(struct.payid);
      }
      if (struct.isSetOrdername()) {
        oprot.writeString(struct.ordername);
      }
      if (struct.isSetOrderdetail()) {
        oprot.writeString(struct.orderdetail);
      }
      if (struct.isSetPayamount()) {
        oprot.writeString(struct.payamount);
      }
      if (struct.isSetSamount()) {
        oprot.writeString(struct.samount);
      }
      if (struct.isSetMerchid()) {
        oprot.writeI64(struct.merchid);
      }
      if (struct.isSetMerchname()) {
        oprot.writeString(struct.merchname);
      }
      if (struct.isSetLedgertype()) {
        oprot.writeI32(struct.ledgertype);
      }
      if (struct.isSetZdate()) {
        oprot.writeString(struct.zdate);
      }
      if (struct.isSetPhoneid()) {
        oprot.writeString(struct.phoneid);
      }
      if (struct.isSetCommision()) {
        oprot.writeString(struct.commision);
      }
      if (struct.isSetProfit()) {
        oprot.writeString(struct.profit);
      }
      if (struct.isSetGiveMoney()) {
        oprot.writeString(struct.giveMoney);
      }
      if (struct.isSetThirdUid()) {
        oprot.writeString(struct.thirdUid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateOrderRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.bid = iprot.readString();
        struct.setBidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.number = iprot.readString();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paytype = iprot.readString();
        struct.setPaytypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ordertype = iprot.readI32();
        struct.setOrdertypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payid = iprot.readI64();
        struct.setPayidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ordername = iprot.readString();
        struct.setOrdernameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderdetail = iprot.readString();
        struct.setOrderdetailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.payamount = iprot.readString();
        struct.setPayamountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.samount = iprot.readString();
        struct.setSamountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.merchid = iprot.readI64();
        struct.setMerchidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.merchname = iprot.readString();
        struct.setMerchnameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ledgertype = iprot.readI32();
        struct.setLedgertypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.zdate = iprot.readString();
        struct.setZdateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.phoneid = iprot.readString();
        struct.setPhoneidIsSet(true);
      }
      if (incoming.get(15)) {
        struct.commision = iprot.readString();
        struct.setCommisionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.profit = iprot.readString();
        struct.setProfitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.giveMoney = iprot.readString();
        struct.setGiveMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.thirdUid = iprot.readString();
        struct.setThirdUidIsSet(true);
      }
    }
  }

}

