<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xmniao.xmn.core.fresh.dao.FreshActivityCommonDao" >
  <resultMap id="BaseResultMap" type="com.xmniao.xmn.core.fresh.entity.FreshActivityCommon" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="img" property="img" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="orderval" property="orderval" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="begin_date" property="beginDate" jdbcType="TIMESTAMP" />
    <result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="bill_num" property="billNum" jdbcType="INTEGER" />
    <result column="label_id" property="labelId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, title, img, type, url, status, orderval, remark, begin_date, end_date, end_time, create_time, 
    update_time,spike_id,order_limit,label_id
  </sql>
  <update id="updateStatus">
  	update t_fresh_activity_common set status = #{status},update_time=now() where spike_id =#{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_fresh_activity_common
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="selectHostSaleActivity" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from t_fresh_activity_common
        where type = 2
        AND status = 0
        order by orderval desc
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_fresh_activity_common
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xmniao.xmn.core.fresh.entity.FreshActivityCommon" useGeneratedKeys="true" keyProperty="id">
    insert into t_fresh_activity_common (id, title, img, 
      type, url, status, 
      orderval, remark, begin_date, end_date, 
      end_time, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{img,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{url,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{orderval,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{beginDate,jdbcType=TIMESTAMP}, #{endDate,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="add" parameterType="com.xmniao.xmn.core.fresh.entity.FreshActivityCommon"  useGeneratedKeys="true" keyProperty="id">
    insert into t_fresh_activity_common
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="img != null" >
        img,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="url != null" >
        url,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="orderval != null" >
        orderval,
      </if>
       <if test="remark != null" >
        remark,
      </if>
      <if test="beginDate != null" >
        begin_date,
      </if>
      <if test="endDate != null" >
        end_date,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="spikeId != null" >
        spike_id,
      </if>
      <if test="orderLimit != null" >
        order_limit,
      </if>
      <if test="labelId != null" >
        label_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="img != null" >
        #{img,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="orderval != null" >
        #{orderval,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=INTEGER},
      </if>
      <if test="beginDate != null" >
        #{beginDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="spikeId != null" >
        #{spikeId,jdbcType=TIMESTAMP},
      </if>
      <if test="orderLimit != null" >
        #{orderLimit,jdbcType=TIMESTAMP},
      </if>
      <if test="labelId != null" >
        #{labelId,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="update" parameterType="com.xmniao.xmn.core.fresh.entity.FreshActivityCommon" >
    update t_fresh_activity_common
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="img != null" >
        img = #{img,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="orderval != null" >
        orderval = #{orderval,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=INTEGER},
      </if>
      <if test="beginDate != null" >
        begin_date = #{beginDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        end_date = #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="labelId != null" >
        label_id = #{labelId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xmniao.xmn.core.fresh.entity.FreshActivityCommon" >
    update t_fresh_activity_common
    set title = #{title,jdbcType=VARCHAR},
      img = #{img,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      url = #{url,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      orderval = #{orderval,jdbcType=INTEGER},
      remark = #{remark,jdbcType=INTEGER},
      begin_date = #{beginDate,jdbcType=TIMESTAMP},
      end_date = #{endDate,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectList" resultMap="BaseResultMap">
	 select   <include refid="Base_Column_List" />,IFNULL(bill_num,0) as bill_num
    from t_fresh_activity_common left join
    (SELECT activityId,count(1) as bill_num FROM `t_product_bill` where activityId is not null GROUP BY activityId ) bill
    on t_fresh_activity_common.id=bill.activityId
    where (status = 0 or status = 1) 
    	<choose>
    		<when test="spikeId !=null">
    			and spike_id = #{spikeId}
    		</when>
    		<otherwise>
    			and spike_id is null
    		</otherwise>
    	</choose>
    	<if test="title != null and title != ''">
    		and title like '%${title}%'
    	</if>
    	<if test="beginDate !=null and endDate != null">
    		and begin_date>#{beginDate} and end_Date &lt; #{endDate}
    	</if>
    	<choose>
    		<when test="proceedStatus == 1">
    			and begin_date > now() and status = 0
    		</when>
    		<when test="proceedStatus == 2">
    			and begin_date &lt; now() and end_Date > now() and status = 0
    		</when>
    		<when test="proceedStatus == 3">
    			and end_Date &lt; now() 
    		</when>
    	</choose>
    	order by create_time desc
    	 <if test=" limit != -1 ">
			LIMIT ${(page-1)*limit},#{limit}
		</if>
  </select>
  <select id="countPageable" resultType="java.lang.Long">
	 select   count(1)
    from t_fresh_activity_common
    where (status = 0 or status = 1) and spike_id is null
    	<if test="title != null and title != ''">
    		and title like '%${title}%'
    	</if>
    	<if test="beginDate !=null and endDate != null">
    		and begin_date>#{beginDate} and end_Date &lt; #{endDate}
    	</if>
    	<choose>
    		<when test="proceedStatus == 1">
    			and begin_date > now()
    		</when>
    		<when test="proceedStatus == 2">
    			and begin_date &lt; now() and end_Date > now()
    		</when>
    		<when test="proceedStatus == 3">
    			and end_Date &lt; now()
    		</when>
    	</choose>
  </select>
  
  <select id="hasBeingActivity" resultMap="BaseResultMap">
  	 select
  	 <include refid="Base_Column_List" />
    from t_fresh_activity_common
    where id = #{id,jdbcType=INTEGER} and begin_date &lt; now()
  </select>
  
  <update id="updateActivity">
  	 update t_fresh_activity_common set title=#{title},begin_date=#{beginDate},end_date=#{endDate},img=#{img},remark=#{remark},update_time=#{updateTime}  where id = #{id}
  </update>
  
  <select id="selectAllActivity"  resultMap="BaseResultMap">
  	   select
  	 <include refid="Base_Column_List" />
  	 from t_fresh_activity_common
  	 where end_date > now() and status = 0 and type = 1
  </select>
</mapper>