/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift.service.orderService;	

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新寻蜜鸟订单信息接口请求参数
 */
public class XmnOrderParam implements org.apache.thrift.TBase<XmnOrderParam, XmnOrderParam._Fields>, java.io.Serializable, Cloneable, Comparable<XmnOrderParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("XmnOrderParam");

  private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ZDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("zdate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PHONEID_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAYID_FIELD_DESC = new org.apache.thrift.protocol.TField("payid", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField THIRD_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdUid", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PAYTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paytype", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ORDERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ordertype", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ISBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("isbalance", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PREFERENTIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("preferential", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PAYAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("payamount", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("samount", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField COMMISION_FIELD_DESC = new org.apache.thrift.protocol.TField("commision", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("profit", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField GIVE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("giveMoney", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LEDGERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ledgertype", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new XmnOrderParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new XmnOrderParamTupleSchemeFactory());
  }

  public String bid; // required
  public String status; // required
  public String zdate; // required
  public String uid; // required
  public String phoneid; // required
  public String payid; // required
  public String number; // required
  public String thirdUid; // required
  public String paytype; // required
  public String ordertype; // required
  public String isbalance; // required
  public String money; // required
  public String preferential; // required
  public String payamount; // required
  public String samount; // required
  public String commision; // required
  public String profit; // required
  public String giveMoney; // required
  public String ledgertype; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BID((short)1, "bid"),
    STATUS((short)2, "status"),
    ZDATE((short)3, "zdate"),
    UID((short)4, "uid"),
    PHONEID((short)5, "phoneid"),
    PAYID((short)6, "payid"),
    NUMBER((short)7, "number"),
    THIRD_UID((short)8, "thirdUid"),
    PAYTYPE((short)9, "paytype"),
    ORDERTYPE((short)10, "ordertype"),
    ISBALANCE((short)11, "isbalance"),
    MONEY((short)12, "money"),
    PREFERENTIAL((short)13, "preferential"),
    PAYAMOUNT((short)14, "payamount"),
    SAMOUNT((short)15, "samount"),
    COMMISION((short)16, "commision"),
    PROFIT((short)17, "profit"),
    GIVE_MONEY((short)18, "giveMoney"),
    LEDGERTYPE((short)19, "ledgertype");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BID
          return BID;
        case 2: // STATUS
          return STATUS;
        case 3: // ZDATE
          return ZDATE;
        case 4: // UID
          return UID;
        case 5: // PHONEID
          return PHONEID;
        case 6: // PAYID
          return PAYID;
        case 7: // NUMBER
          return NUMBER;
        case 8: // THIRD_UID
          return THIRD_UID;
        case 9: // PAYTYPE
          return PAYTYPE;
        case 10: // ORDERTYPE
          return ORDERTYPE;
        case 11: // ISBALANCE
          return ISBALANCE;
        case 12: // MONEY
          return MONEY;
        case 13: // PREFERENTIAL
          return PREFERENTIAL;
        case 14: // PAYAMOUNT
          return PAYAMOUNT;
        case 15: // SAMOUNT
          return SAMOUNT;
        case 16: // COMMISION
          return COMMISION;
        case 17: // PROFIT
          return PROFIT;
        case 18: // GIVE_MONEY
          return GIVE_MONEY;
        case 19: // LEDGERTYPE
          return LEDGERTYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZDATE, new org.apache.thrift.meta_data.FieldMetaData("zdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONEID, new org.apache.thrift.meta_data.FieldMetaData("phoneid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYID, new org.apache.thrift.meta_data.FieldMetaData("payid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_UID, new org.apache.thrift.meta_data.FieldMetaData("thirdUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYTYPE, new org.apache.thrift.meta_data.FieldMetaData("paytype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDERTYPE, new org.apache.thrift.meta_data.FieldMetaData("ordertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISBALANCE, new org.apache.thrift.meta_data.FieldMetaData("isbalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREFERENTIAL, new org.apache.thrift.meta_data.FieldMetaData("preferential", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("payamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("samount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMISION, new org.apache.thrift.meta_data.FieldMetaData("commision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFIT, new org.apache.thrift.meta_data.FieldMetaData("profit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("giveMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEDGERTYPE, new org.apache.thrift.meta_data.FieldMetaData("ledgertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(XmnOrderParam.class, metaDataMap);
  }

  public XmnOrderParam() {
  }

  public XmnOrderParam(
    String bid,
    String status,
    String zdate,
    String uid,
    String phoneid,
    String payid,
    String number,
    String thirdUid,
    String paytype,
    String ordertype,
    String isbalance,
    String money,
    String preferential,
    String payamount,
    String samount,
    String commision,
    String profit,
    String giveMoney,
    String ledgertype)
  {
    this();
    this.bid = bid;
    this.status = status;
    this.zdate = zdate;
    this.uid = uid;
    this.phoneid = phoneid;
    this.payid = payid;
    this.number = number;
    this.thirdUid = thirdUid;
    this.paytype = paytype;
    this.ordertype = ordertype;
    this.isbalance = isbalance;
    this.money = money;
    this.preferential = preferential;
    this.payamount = payamount;
    this.samount = samount;
    this.commision = commision;
    this.profit = profit;
    this.giveMoney = giveMoney;
    this.ledgertype = ledgertype;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public XmnOrderParam(XmnOrderParam other) {
    if (other.isSetBid()) {
      this.bid = other.bid;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetZdate()) {
      this.zdate = other.zdate;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetPhoneid()) {
      this.phoneid = other.phoneid;
    }
    if (other.isSetPayid()) {
      this.payid = other.payid;
    }
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    if (other.isSetThirdUid()) {
      this.thirdUid = other.thirdUid;
    }
    if (other.isSetPaytype()) {
      this.paytype = other.paytype;
    }
    if (other.isSetOrdertype()) {
      this.ordertype = other.ordertype;
    }
    if (other.isSetIsbalance()) {
      this.isbalance = other.isbalance;
    }
    if (other.isSetMoney()) {
      this.money = other.money;
    }
    if (other.isSetPreferential()) {
      this.preferential = other.preferential;
    }
    if (other.isSetPayamount()) {
      this.payamount = other.payamount;
    }
    if (other.isSetSamount()) {
      this.samount = other.samount;
    }
    if (other.isSetCommision()) {
      this.commision = other.commision;
    }
    if (other.isSetProfit()) {
      this.profit = other.profit;
    }
    if (other.isSetGiveMoney()) {
      this.giveMoney = other.giveMoney;
    }
    if (other.isSetLedgertype()) {
      this.ledgertype = other.ledgertype;
    }
  }

  public XmnOrderParam deepCopy() {
    return new XmnOrderParam(this);
  }

  @Override
  public void clear() {
    this.bid = null;
    this.status = null;
    this.zdate = null;
    this.uid = null;
    this.phoneid = null;
    this.payid = null;
    this.number = null;
    this.thirdUid = null;
    this.paytype = null;
    this.ordertype = null;
    this.isbalance = null;
    this.money = null;
    this.preferential = null;
    this.payamount = null;
    this.samount = null;
    this.commision = null;
    this.profit = null;
    this.giveMoney = null;
    this.ledgertype = null;
  }

  public String getBid() {
    return this.bid;
  }

  public XmnOrderParam setBid(String bid) {
    this.bid = bid;
    return this;
  }

  public void unsetBid() {
    this.bid = null;
  }

  /** Returns true if field bid is set (has been assigned a value) and false otherwise */
  public boolean isSetBid() {
    return this.bid != null;
  }

  public void setBidIsSet(boolean value) {
    if (!value) {
      this.bid = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public XmnOrderParam setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getZdate() {
    return this.zdate;
  }

  public XmnOrderParam setZdate(String zdate) {
    this.zdate = zdate;
    return this;
  }

  public void unsetZdate() {
    this.zdate = null;
  }

  /** Returns true if field zdate is set (has been assigned a value) and false otherwise */
  public boolean isSetZdate() {
    return this.zdate != null;
  }

  public void setZdateIsSet(boolean value) {
    if (!value) {
      this.zdate = null;
    }
  }

  public String getUid() {
    return this.uid;
  }

  public XmnOrderParam setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getPhoneid() {
    return this.phoneid;
  }

  public XmnOrderParam setPhoneid(String phoneid) {
    this.phoneid = phoneid;
    return this;
  }

  public void unsetPhoneid() {
    this.phoneid = null;
  }

  /** Returns true if field phoneid is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneid() {
    return this.phoneid != null;
  }

  public void setPhoneidIsSet(boolean value) {
    if (!value) {
      this.phoneid = null;
    }
  }

  public String getPayid() {
    return this.payid;
  }

  public XmnOrderParam setPayid(String payid) {
    this.payid = payid;
    return this;
  }

  public void unsetPayid() {
    this.payid = null;
  }

  /** Returns true if field payid is set (has been assigned a value) and false otherwise */
  public boolean isSetPayid() {
    return this.payid != null;
  }

  public void setPayidIsSet(boolean value) {
    if (!value) {
      this.payid = null;
    }
  }

  public String getNumber() {
    return this.number;
  }

  public XmnOrderParam setNumber(String number) {
    this.number = number;
    return this;
  }

  public void unsetNumber() {
    this.number = null;
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return this.number != null;
  }

  public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }

  public String getThirdUid() {
    return this.thirdUid;
  }

  public XmnOrderParam setThirdUid(String thirdUid) {
    this.thirdUid = thirdUid;
    return this;
  }

  public void unsetThirdUid() {
    this.thirdUid = null;
  }

  /** Returns true if field thirdUid is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdUid() {
    return this.thirdUid != null;
  }

  public void setThirdUidIsSet(boolean value) {
    if (!value) {
      this.thirdUid = null;
    }
  }

  public String getPaytype() {
    return this.paytype;
  }

  public XmnOrderParam setPaytype(String paytype) {
    this.paytype = paytype;
    return this;
  }

  public void unsetPaytype() {
    this.paytype = null;
  }

  /** Returns true if field paytype is set (has been assigned a value) and false otherwise */
  public boolean isSetPaytype() {
    return this.paytype != null;
  }

  public void setPaytypeIsSet(boolean value) {
    if (!value) {
      this.paytype = null;
    }
  }

  public String getOrdertype() {
    return this.ordertype;
  }

  public XmnOrderParam setOrdertype(String ordertype) {
    this.ordertype = ordertype;
    return this;
  }

  public void unsetOrdertype() {
    this.ordertype = null;
  }

  /** Returns true if field ordertype is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdertype() {
    return this.ordertype != null;
  }

  public void setOrdertypeIsSet(boolean value) {
    if (!value) {
      this.ordertype = null;
    }
  }

  public String getIsbalance() {
    return this.isbalance;
  }

  public XmnOrderParam setIsbalance(String isbalance) {
    this.isbalance = isbalance;
    return this;
  }

  public void unsetIsbalance() {
    this.isbalance = null;
  }

  /** Returns true if field isbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetIsbalance() {
    return this.isbalance != null;
  }

  public void setIsbalanceIsSet(boolean value) {
    if (!value) {
      this.isbalance = null;
    }
  }

  public String getMoney() {
    return this.money;
  }

  public XmnOrderParam setMoney(String money) {
    this.money = money;
    return this;
  }

  public void unsetMoney() {
    this.money = null;
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return this.money != null;
  }

  public void setMoneyIsSet(boolean value) {
    if (!value) {
      this.money = null;
    }
  }

  public String getPreferential() {
    return this.preferential;
  }

  public XmnOrderParam setPreferential(String preferential) {
    this.preferential = preferential;
    return this;
  }

  public void unsetPreferential() {
    this.preferential = null;
  }

  /** Returns true if field preferential is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferential() {
    return this.preferential != null;
  }

  public void setPreferentialIsSet(boolean value) {
    if (!value) {
      this.preferential = null;
    }
  }

  public String getPayamount() {
    return this.payamount;
  }

  public XmnOrderParam setPayamount(String payamount) {
    this.payamount = payamount;
    return this;
  }

  public void unsetPayamount() {
    this.payamount = null;
  }

  /** Returns true if field payamount is set (has been assigned a value) and false otherwise */
  public boolean isSetPayamount() {
    return this.payamount != null;
  }

  public void setPayamountIsSet(boolean value) {
    if (!value) {
      this.payamount = null;
    }
  }

  public String getSamount() {
    return this.samount;
  }

  public XmnOrderParam setSamount(String samount) {
    this.samount = samount;
    return this;
  }

  public void unsetSamount() {
    this.samount = null;
  }

  /** Returns true if field samount is set (has been assigned a value) and false otherwise */
  public boolean isSetSamount() {
    return this.samount != null;
  }

  public void setSamountIsSet(boolean value) {
    if (!value) {
      this.samount = null;
    }
  }

  public String getCommision() {
    return this.commision;
  }

  public XmnOrderParam setCommision(String commision) {
    this.commision = commision;
    return this;
  }

  public void unsetCommision() {
    this.commision = null;
  }

  /** Returns true if field commision is set (has been assigned a value) and false otherwise */
  public boolean isSetCommision() {
    return this.commision != null;
  }

  public void setCommisionIsSet(boolean value) {
    if (!value) {
      this.commision = null;
    }
  }

  public String getProfit() {
    return this.profit;
  }

  public XmnOrderParam setProfit(String profit) {
    this.profit = profit;
    return this;
  }

  public void unsetProfit() {
    this.profit = null;
  }

  /** Returns true if field profit is set (has been assigned a value) and false otherwise */
  public boolean isSetProfit() {
    return this.profit != null;
  }

  public void setProfitIsSet(boolean value) {
    if (!value) {
      this.profit = null;
    }
  }

  public String getGiveMoney() {
    return this.giveMoney;
  }

  public XmnOrderParam setGiveMoney(String giveMoney) {
    this.giveMoney = giveMoney;
    return this;
  }

  public void unsetGiveMoney() {
    this.giveMoney = null;
  }

  /** Returns true if field giveMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveMoney() {
    return this.giveMoney != null;
  }

  public void setGiveMoneyIsSet(boolean value) {
    if (!value) {
      this.giveMoney = null;
    }
  }

  public String getLedgertype() {
    return this.ledgertype;
  }

  public XmnOrderParam setLedgertype(String ledgertype) {
    this.ledgertype = ledgertype;
    return this;
  }

  public void unsetLedgertype() {
    this.ledgertype = null;
  }

  /** Returns true if field ledgertype is set (has been assigned a value) and false otherwise */
  public boolean isSetLedgertype() {
    return this.ledgertype != null;
  }

  public void setLedgertypeIsSet(boolean value) {
    if (!value) {
      this.ledgertype = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BID:
      if (value == null) {
        unsetBid();
      } else {
        setBid((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case ZDATE:
      if (value == null) {
        unsetZdate();
      } else {
        setZdate((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case PHONEID:
      if (value == null) {
        unsetPhoneid();
      } else {
        setPhoneid((String)value);
      }
      break;

    case PAYID:
      if (value == null) {
        unsetPayid();
      } else {
        setPayid((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case THIRD_UID:
      if (value == null) {
        unsetThirdUid();
      } else {
        setThirdUid((String)value);
      }
      break;

    case PAYTYPE:
      if (value == null) {
        unsetPaytype();
      } else {
        setPaytype((String)value);
      }
      break;

    case ORDERTYPE:
      if (value == null) {
        unsetOrdertype();
      } else {
        setOrdertype((String)value);
      }
      break;

    case ISBALANCE:
      if (value == null) {
        unsetIsbalance();
      } else {
        setIsbalance((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((String)value);
      }
      break;

    case PREFERENTIAL:
      if (value == null) {
        unsetPreferential();
      } else {
        setPreferential((String)value);
      }
      break;

    case PAYAMOUNT:
      if (value == null) {
        unsetPayamount();
      } else {
        setPayamount((String)value);
      }
      break;

    case SAMOUNT:
      if (value == null) {
        unsetSamount();
      } else {
        setSamount((String)value);
      }
      break;

    case COMMISION:
      if (value == null) {
        unsetCommision();
      } else {
        setCommision((String)value);
      }
      break;

    case PROFIT:
      if (value == null) {
        unsetProfit();
      } else {
        setProfit((String)value);
      }
      break;

    case GIVE_MONEY:
      if (value == null) {
        unsetGiveMoney();
      } else {
        setGiveMoney((String)value);
      }
      break;

    case LEDGERTYPE:
      if (value == null) {
        unsetLedgertype();
      } else {
        setLedgertype((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BID:
      return getBid();

    case STATUS:
      return getStatus();

    case ZDATE:
      return getZdate();

    case UID:
      return getUid();

    case PHONEID:
      return getPhoneid();

    case PAYID:
      return getPayid();

    case NUMBER:
      return getNumber();

    case THIRD_UID:
      return getThirdUid();

    case PAYTYPE:
      return getPaytype();

    case ORDERTYPE:
      return getOrdertype();

    case ISBALANCE:
      return getIsbalance();

    case MONEY:
      return getMoney();

    case PREFERENTIAL:
      return getPreferential();

    case PAYAMOUNT:
      return getPayamount();

    case SAMOUNT:
      return getSamount();

    case COMMISION:
      return getCommision();

    case PROFIT:
      return getProfit();

    case GIVE_MONEY:
      return getGiveMoney();

    case LEDGERTYPE:
      return getLedgertype();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BID:
      return isSetBid();
    case STATUS:
      return isSetStatus();
    case ZDATE:
      return isSetZdate();
    case UID:
      return isSetUid();
    case PHONEID:
      return isSetPhoneid();
    case PAYID:
      return isSetPayid();
    case NUMBER:
      return isSetNumber();
    case THIRD_UID:
      return isSetThirdUid();
    case PAYTYPE:
      return isSetPaytype();
    case ORDERTYPE:
      return isSetOrdertype();
    case ISBALANCE:
      return isSetIsbalance();
    case MONEY:
      return isSetMoney();
    case PREFERENTIAL:
      return isSetPreferential();
    case PAYAMOUNT:
      return isSetPayamount();
    case SAMOUNT:
      return isSetSamount();
    case COMMISION:
      return isSetCommision();
    case PROFIT:
      return isSetProfit();
    case GIVE_MONEY:
      return isSetGiveMoney();
    case LEDGERTYPE:
      return isSetLedgertype();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof XmnOrderParam)
      return this.equals((XmnOrderParam)that);
    return false;
  }

  public boolean equals(XmnOrderParam that) {
    if (that == null)
      return false;

    boolean this_present_bid = true && this.isSetBid();
    boolean that_present_bid = true && that.isSetBid();
    if (this_present_bid || that_present_bid) {
      if (!(this_present_bid && that_present_bid))
        return false;
      if (!this.bid.equals(that.bid))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_zdate = true && this.isSetZdate();
    boolean that_present_zdate = true && that.isSetZdate();
    if (this_present_zdate || that_present_zdate) {
      if (!(this_present_zdate && that_present_zdate))
        return false;
      if (!this.zdate.equals(that.zdate))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_phoneid = true && this.isSetPhoneid();
    boolean that_present_phoneid = true && that.isSetPhoneid();
    if (this_present_phoneid || that_present_phoneid) {
      if (!(this_present_phoneid && that_present_phoneid))
        return false;
      if (!this.phoneid.equals(that.phoneid))
        return false;
    }

    boolean this_present_payid = true && this.isSetPayid();
    boolean that_present_payid = true && that.isSetPayid();
    if (this_present_payid || that_present_payid) {
      if (!(this_present_payid && that_present_payid))
        return false;
      if (!this.payid.equals(that.payid))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_thirdUid = true && this.isSetThirdUid();
    boolean that_present_thirdUid = true && that.isSetThirdUid();
    if (this_present_thirdUid || that_present_thirdUid) {
      if (!(this_present_thirdUid && that_present_thirdUid))
        return false;
      if (!this.thirdUid.equals(that.thirdUid))
        return false;
    }

    boolean this_present_paytype = true && this.isSetPaytype();
    boolean that_present_paytype = true && that.isSetPaytype();
    if (this_present_paytype || that_present_paytype) {
      if (!(this_present_paytype && that_present_paytype))
        return false;
      if (!this.paytype.equals(that.paytype))
        return false;
    }

    boolean this_present_ordertype = true && this.isSetOrdertype();
    boolean that_present_ordertype = true && that.isSetOrdertype();
    if (this_present_ordertype || that_present_ordertype) {
      if (!(this_present_ordertype && that_present_ordertype))
        return false;
      if (!this.ordertype.equals(that.ordertype))
        return false;
    }

    boolean this_present_isbalance = true && this.isSetIsbalance();
    boolean that_present_isbalance = true && that.isSetIsbalance();
    if (this_present_isbalance || that_present_isbalance) {
      if (!(this_present_isbalance && that_present_isbalance))
        return false;
      if (!this.isbalance.equals(that.isbalance))
        return false;
    }

    boolean this_present_money = true && this.isSetMoney();
    boolean that_present_money = true && that.isSetMoney();
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (!this.money.equals(that.money))
        return false;
    }

    boolean this_present_preferential = true && this.isSetPreferential();
    boolean that_present_preferential = true && that.isSetPreferential();
    if (this_present_preferential || that_present_preferential) {
      if (!(this_present_preferential && that_present_preferential))
        return false;
      if (!this.preferential.equals(that.preferential))
        return false;
    }

    boolean this_present_payamount = true && this.isSetPayamount();
    boolean that_present_payamount = true && that.isSetPayamount();
    if (this_present_payamount || that_present_payamount) {
      if (!(this_present_payamount && that_present_payamount))
        return false;
      if (!this.payamount.equals(that.payamount))
        return false;
    }

    boolean this_present_samount = true && this.isSetSamount();
    boolean that_present_samount = true && that.isSetSamount();
    if (this_present_samount || that_present_samount) {
      if (!(this_present_samount && that_present_samount))
        return false;
      if (!this.samount.equals(that.samount))
        return false;
    }

    boolean this_present_commision = true && this.isSetCommision();
    boolean that_present_commision = true && that.isSetCommision();
    if (this_present_commision || that_present_commision) {
      if (!(this_present_commision && that_present_commision))
        return false;
      if (!this.commision.equals(that.commision))
        return false;
    }

    boolean this_present_profit = true && this.isSetProfit();
    boolean that_present_profit = true && that.isSetProfit();
    if (this_present_profit || that_present_profit) {
      if (!(this_present_profit && that_present_profit))
        return false;
      if (!this.profit.equals(that.profit))
        return false;
    }

    boolean this_present_giveMoney = true && this.isSetGiveMoney();
    boolean that_present_giveMoney = true && that.isSetGiveMoney();
    if (this_present_giveMoney || that_present_giveMoney) {
      if (!(this_present_giveMoney && that_present_giveMoney))
        return false;
      if (!this.giveMoney.equals(that.giveMoney))
        return false;
    }

    boolean this_present_ledgertype = true && this.isSetLedgertype();
    boolean that_present_ledgertype = true && that.isSetLedgertype();
    if (this_present_ledgertype || that_present_ledgertype) {
      if (!(this_present_ledgertype && that_present_ledgertype))
        return false;
      if (!this.ledgertype.equals(that.ledgertype))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(XmnOrderParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBid()).compareTo(other.isSetBid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZdate()).compareTo(other.isSetZdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdate, other.zdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneid()).compareTo(other.isSetPhoneid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneid, other.phoneid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayid()).compareTo(other.isSetPayid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payid, other.payid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdUid()).compareTo(other.isSetThirdUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdUid, other.thirdUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaytype()).compareTo(other.isSetPaytype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaytype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paytype, other.paytype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrdertype()).compareTo(other.isSetOrdertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordertype, other.ordertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsbalance()).compareTo(other.isSetIsbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isbalance, other.isbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferential()).compareTo(other.isSetPreferential());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferential()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferential, other.preferential);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayamount()).compareTo(other.isSetPayamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payamount, other.payamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSamount()).compareTo(other.isSetSamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samount, other.samount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommision()).compareTo(other.isSetCommision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commision, other.commision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfit()).compareTo(other.isSetProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profit, other.profit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveMoney()).compareTo(other.isSetGiveMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveMoney, other.giveMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLedgertype()).compareTo(other.isSetLedgertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLedgertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ledgertype, other.ledgertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("XmnOrderParam(");
    boolean first = true;

    sb.append("bid:");
    if (this.bid == null) {
      sb.append("null");
    } else {
      sb.append(this.bid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdate:");
    if (this.zdate == null) {
      sb.append("null");
    } else {
      sb.append(this.zdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneid:");
    if (this.phoneid == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payid:");
    if (this.payid == null) {
      sb.append("null");
    } else {
      sb.append(this.payid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdUid:");
    if (this.thirdUid == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paytype:");
    if (this.paytype == null) {
      sb.append("null");
    } else {
      sb.append(this.paytype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ordertype:");
    if (this.ordertype == null) {
      sb.append("null");
    } else {
      sb.append(this.ordertype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isbalance:");
    if (this.isbalance == null) {
      sb.append("null");
    } else {
      sb.append(this.isbalance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    if (this.money == null) {
      sb.append("null");
    } else {
      sb.append(this.money);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferential:");
    if (this.preferential == null) {
      sb.append("null");
    } else {
      sb.append(this.preferential);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payamount:");
    if (this.payamount == null) {
      sb.append("null");
    } else {
      sb.append(this.payamount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("samount:");
    if (this.samount == null) {
      sb.append("null");
    } else {
      sb.append(this.samount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commision:");
    if (this.commision == null) {
      sb.append("null");
    } else {
      sb.append(this.commision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profit:");
    if (this.profit == null) {
      sb.append("null");
    } else {
      sb.append(this.profit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveMoney:");
    if (this.giveMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.giveMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ledgertype:");
    if (this.ledgertype == null) {
      sb.append("null");
    } else {
      sb.append(this.ledgertype);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class XmnOrderParamStandardSchemeFactory implements SchemeFactory {
    public XmnOrderParamStandardScheme getScheme() {
      return new XmnOrderParamStandardScheme();
    }
  }

  private static class XmnOrderParamStandardScheme extends StandardScheme<XmnOrderParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, XmnOrderParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bid = iprot.readString();
              struct.setBidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zdate = iprot.readString();
              struct.setZdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PHONEID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneid = iprot.readString();
              struct.setPhoneidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAYID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payid = iprot.readString();
              struct.setPayidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.number = iprot.readString();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // THIRD_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdUid = iprot.readString();
              struct.setThirdUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAYTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paytype = iprot.readString();
              struct.setPaytypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ordertype = iprot.readString();
              struct.setOrdertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ISBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isbalance = iprot.readString();
              struct.setIsbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.money = iprot.readString();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PREFERENTIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preferential = iprot.readString();
              struct.setPreferentialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAYAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payamount = iprot.readString();
              struct.setPayamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.samount = iprot.readString();
              struct.setSamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COMMISION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commision = iprot.readString();
              struct.setCommisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profit = iprot.readString();
              struct.setProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GIVE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giveMoney = iprot.readString();
              struct.setGiveMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LEDGERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ledgertype = iprot.readString();
              struct.setLedgertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, XmnOrderParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bid != null) {
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeString(struct.bid);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.zdate != null) {
        oprot.writeFieldBegin(ZDATE_FIELD_DESC);
        oprot.writeString(struct.zdate);
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.phoneid != null) {
        oprot.writeFieldBegin(PHONEID_FIELD_DESC);
        oprot.writeString(struct.phoneid);
        oprot.writeFieldEnd();
      }
      if (struct.payid != null) {
        oprot.writeFieldBegin(PAYID_FIELD_DESC);
        oprot.writeString(struct.payid);
        oprot.writeFieldEnd();
      }
      if (struct.number != null) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeString(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.thirdUid != null) {
        oprot.writeFieldBegin(THIRD_UID_FIELD_DESC);
        oprot.writeString(struct.thirdUid);
        oprot.writeFieldEnd();
      }
      if (struct.paytype != null) {
        oprot.writeFieldBegin(PAYTYPE_FIELD_DESC);
        oprot.writeString(struct.paytype);
        oprot.writeFieldEnd();
      }
      if (struct.ordertype != null) {
        oprot.writeFieldBegin(ORDERTYPE_FIELD_DESC);
        oprot.writeString(struct.ordertype);
        oprot.writeFieldEnd();
      }
      if (struct.isbalance != null) {
        oprot.writeFieldBegin(ISBALANCE_FIELD_DESC);
        oprot.writeString(struct.isbalance);
        oprot.writeFieldEnd();
      }
      if (struct.money != null) {
        oprot.writeFieldBegin(MONEY_FIELD_DESC);
        oprot.writeString(struct.money);
        oprot.writeFieldEnd();
      }
      if (struct.preferential != null) {
        oprot.writeFieldBegin(PREFERENTIAL_FIELD_DESC);
        oprot.writeString(struct.preferential);
        oprot.writeFieldEnd();
      }
      if (struct.payamount != null) {
        oprot.writeFieldBegin(PAYAMOUNT_FIELD_DESC);
        oprot.writeString(struct.payamount);
        oprot.writeFieldEnd();
      }
      if (struct.samount != null) {
        oprot.writeFieldBegin(SAMOUNT_FIELD_DESC);
        oprot.writeString(struct.samount);
        oprot.writeFieldEnd();
      }
      if (struct.commision != null) {
        oprot.writeFieldBegin(COMMISION_FIELD_DESC);
        oprot.writeString(struct.commision);
        oprot.writeFieldEnd();
      }
      if (struct.profit != null) {
        oprot.writeFieldBegin(PROFIT_FIELD_DESC);
        oprot.writeString(struct.profit);
        oprot.writeFieldEnd();
      }
      if (struct.giveMoney != null) {
        oprot.writeFieldBegin(GIVE_MONEY_FIELD_DESC);
        oprot.writeString(struct.giveMoney);
        oprot.writeFieldEnd();
      }
      if (struct.ledgertype != null) {
        oprot.writeFieldBegin(LEDGERTYPE_FIELD_DESC);
        oprot.writeString(struct.ledgertype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class XmnOrderParamTupleSchemeFactory implements SchemeFactory {
    public XmnOrderParamTupleScheme getScheme() {
      return new XmnOrderParamTupleScheme();
    }
  }

  private static class XmnOrderParamTupleScheme extends TupleScheme<XmnOrderParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, XmnOrderParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBid()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetZdate()) {
        optionals.set(2);
      }
      if (struct.isSetUid()) {
        optionals.set(3);
      }
      if (struct.isSetPhoneid()) {
        optionals.set(4);
      }
      if (struct.isSetPayid()) {
        optionals.set(5);
      }
      if (struct.isSetNumber()) {
        optionals.set(6);
      }
      if (struct.isSetThirdUid()) {
        optionals.set(7);
      }
      if (struct.isSetPaytype()) {
        optionals.set(8);
      }
      if (struct.isSetOrdertype()) {
        optionals.set(9);
      }
      if (struct.isSetIsbalance()) {
        optionals.set(10);
      }
      if (struct.isSetMoney()) {
        optionals.set(11);
      }
      if (struct.isSetPreferential()) {
        optionals.set(12);
      }
      if (struct.isSetPayamount()) {
        optionals.set(13);
      }
      if (struct.isSetSamount()) {
        optionals.set(14);
      }
      if (struct.isSetCommision()) {
        optionals.set(15);
      }
      if (struct.isSetProfit()) {
        optionals.set(16);
      }
      if (struct.isSetGiveMoney()) {
        optionals.set(17);
      }
      if (struct.isSetLedgertype()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetBid()) {
        oprot.writeString(struct.bid);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetZdate()) {
        oprot.writeString(struct.zdate);
      }
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetPhoneid()) {
        oprot.writeString(struct.phoneid);
      }
      if (struct.isSetPayid()) {
        oprot.writeString(struct.payid);
      }
      if (struct.isSetNumber()) {
        oprot.writeString(struct.number);
      }
      if (struct.isSetThirdUid()) {
        oprot.writeString(struct.thirdUid);
      }
      if (struct.isSetPaytype()) {
        oprot.writeString(struct.paytype);
      }
      if (struct.isSetOrdertype()) {
        oprot.writeString(struct.ordertype);
      }
      if (struct.isSetIsbalance()) {
        oprot.writeString(struct.isbalance);
      }
      if (struct.isSetMoney()) {
        oprot.writeString(struct.money);
      }
      if (struct.isSetPreferential()) {
        oprot.writeString(struct.preferential);
      }
      if (struct.isSetPayamount()) {
        oprot.writeString(struct.payamount);
      }
      if (struct.isSetSamount()) {
        oprot.writeString(struct.samount);
      }
      if (struct.isSetCommision()) {
        oprot.writeString(struct.commision);
      }
      if (struct.isSetProfit()) {
        oprot.writeString(struct.profit);
      }
      if (struct.isSetGiveMoney()) {
        oprot.writeString(struct.giveMoney);
      }
      if (struct.isSetLedgertype()) {
        oprot.writeString(struct.ledgertype);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, XmnOrderParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.bid = iprot.readString();
        struct.setBidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.zdate = iprot.readString();
        struct.setZdateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.phoneid = iprot.readString();
        struct.setPhoneidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payid = iprot.readString();
        struct.setPayidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.number = iprot.readString();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.thirdUid = iprot.readString();
        struct.setThirdUidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.paytype = iprot.readString();
        struct.setPaytypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ordertype = iprot.readString();
        struct.setOrdertypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isbalance = iprot.readString();
        struct.setIsbalanceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.money = iprot.readString();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.preferential = iprot.readString();
        struct.setPreferentialIsSet(true);
      }
      if (incoming.get(13)) {
        struct.payamount = iprot.readString();
        struct.setPayamountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.samount = iprot.readString();
        struct.setSamountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.commision = iprot.readString();
        struct.setCommisionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.profit = iprot.readString();
        struct.setProfitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.giveMoney = iprot.readString();
        struct.setGiveMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.ledgertype = iprot.readString();
        struct.setLedgertypeIsSet(true);
      }
    }
  }

}

