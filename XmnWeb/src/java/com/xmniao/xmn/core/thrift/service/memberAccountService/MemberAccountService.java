package com.xmniao.xmn.core.thrift.service.memberAccountService;


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */


import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.xmniao.xmn.core.thrift.service.FailureException;
import com.xmniao.xmn.core.thrift.service.Page;
import com.xmniao.xmn.core.thrift.service.Result;

/*import com.xmniao.domain.FailureException;
import com.xmniao.domain.Page;
import com.xmniao.domain.Result;*/

public class MemberAccountService {

  /**
   * 寻蜜鸟模块（寻蜜鸟APP）
   */
  public interface Iface {

    /**
     * 用户登录app查看统计自己的收益（我的收益）
     * 
     * @param memberid
     */
    public Map<String,String> memberIncomeToday(long memberid) throws FailureException, org.apache.thrift.TException;

    /**
     * 用户登录查看我的收益列表（返利和佣金   我的收益）
     * 
     * @param memberid
     * @param page
     * @param param
     */
    public Result memberIncomeList(long memberid, Page page, Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 用户登录app查看自己的提现列表（提现流程）
     * 
     * @param memberid
     * @param page
     * @param param
     */
    public Result memberWithdrawList(long memberid, Page page, Map<String,String> param) throws FailureException, org.apache.thrift.TException;

    /**
     * 用户登录app查看自己的提现详细
     * 
     * @param id
     */
    public Map<String,String> memberWithdrawInfo(long id) throws FailureException, org.apache.thrift.TException;

    /**
     * 向密客统计自己的佣金
     * 
     * @param memberid
     */
    public Map<String,String> memberCommissionToday(long memberid) throws FailureException, org.apache.thrift.TException;

    /**
     * 用户退款
     * 
     * @param orderid
     */
    public long memberApplyRefund(String orderid) throws FailureException, org.apache.thrift.TException;

    /**
     * 用户退款
     * 
     * @param orderid
     */
    public long memberCancelRefund(String orderid) throws FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void memberIncomeToday(long memberid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void memberIncomeList(long memberid, Page page, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void memberWithdrawList(long memberid, Page page, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void memberWithdrawInfo(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void memberCommissionToday(long memberid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void memberApplyRefund(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void memberCancelRefund(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,String> memberIncomeToday(long memberid) throws FailureException, org.apache.thrift.TException
    {
      send_memberIncomeToday(memberid);
      return recv_memberIncomeToday();
    }

    public void send_memberIncomeToday(long memberid) throws org.apache.thrift.TException
    {
      memberIncomeToday_args args = new memberIncomeToday_args();
      args.setMemberid(memberid);
      sendBase("memberIncomeToday", args);
    }

    public Map<String,String> recv_memberIncomeToday() throws FailureException, org.apache.thrift.TException
    {
      memberIncomeToday_result result = new memberIncomeToday_result();
      receiveBase(result, "memberIncomeToday");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "memberIncomeToday failed: unknown result");
    }

    public Result memberIncomeList(long memberid, Page page, Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_memberIncomeList(memberid, page, param);
      return recv_memberIncomeList();
    }

    public void send_memberIncomeList(long memberid, Page page, Map<String,String> param) throws org.apache.thrift.TException
    {
      memberIncomeList_args args = new memberIncomeList_args();
      args.setMemberid(memberid);
      args.setPage(page);
      args.setParam(param);
      sendBase("memberIncomeList", args);
    }

    public Result recv_memberIncomeList() throws FailureException, org.apache.thrift.TException
    {
      memberIncomeList_result result = new memberIncomeList_result();
      receiveBase(result, "memberIncomeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "memberIncomeList failed: unknown result");
    }

    public Result memberWithdrawList(long memberid, Page page, Map<String,String> param) throws FailureException, org.apache.thrift.TException
    {
      send_memberWithdrawList(memberid, page, param);
      return recv_memberWithdrawList();
    }

    public void send_memberWithdrawList(long memberid, Page page, Map<String,String> param) throws org.apache.thrift.TException
    {
      memberWithdrawList_args args = new memberWithdrawList_args();
      args.setMemberid(memberid);
      args.setPage(page);
      args.setParam(param);
      sendBase("memberWithdrawList", args);
    }

    public Result recv_memberWithdrawList() throws FailureException, org.apache.thrift.TException
    {
      memberWithdrawList_result result = new memberWithdrawList_result();
      receiveBase(result, "memberWithdrawList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "memberWithdrawList failed: unknown result");
    }

    public Map<String,String> memberWithdrawInfo(long id) throws FailureException, org.apache.thrift.TException
    {
      send_memberWithdrawInfo(id);
      return recv_memberWithdrawInfo();
    }

    public void send_memberWithdrawInfo(long id) throws org.apache.thrift.TException
    {
      memberWithdrawInfo_args args = new memberWithdrawInfo_args();
      args.setId(id);
      sendBase("memberWithdrawInfo", args);
    }

    public Map<String,String> recv_memberWithdrawInfo() throws FailureException, org.apache.thrift.TException
    {
      memberWithdrawInfo_result result = new memberWithdrawInfo_result();
      receiveBase(result, "memberWithdrawInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "memberWithdrawInfo failed: unknown result");
    }

    public Map<String,String> memberCommissionToday(long memberid) throws FailureException, org.apache.thrift.TException
    {
      send_memberCommissionToday(memberid);
      return recv_memberCommissionToday();
    }

    public void send_memberCommissionToday(long memberid) throws org.apache.thrift.TException
    {
      memberCommissionToday_args args = new memberCommissionToday_args();
      args.setMemberid(memberid);
      sendBase("memberCommissionToday", args);
    }

    public Map<String,String> recv_memberCommissionToday() throws FailureException, org.apache.thrift.TException
    {
      memberCommissionToday_result result = new memberCommissionToday_result();
      receiveBase(result, "memberCommissionToday");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "memberCommissionToday failed: unknown result");
    }

    public long memberApplyRefund(String orderid) throws FailureException, org.apache.thrift.TException
    {
      send_memberApplyRefund(orderid);
      return recv_memberApplyRefund();
    }

    public void send_memberApplyRefund(String orderid) throws org.apache.thrift.TException
    {
      memberApplyRefund_args args = new memberApplyRefund_args();
      args.setOrderid(orderid);
      sendBase("memberApplyRefund", args);
    }

    public long recv_memberApplyRefund() throws FailureException, org.apache.thrift.TException
    {
      memberApplyRefund_result result = new memberApplyRefund_result();
      receiveBase(result, "memberApplyRefund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "memberApplyRefund failed: unknown result");
    }

    public long memberCancelRefund(String orderid) throws FailureException, org.apache.thrift.TException
    {
      send_memberCancelRefund(orderid);
      return recv_memberCancelRefund();
    }

    public void send_memberCancelRefund(String orderid) throws org.apache.thrift.TException
    {
      memberCancelRefund_args args = new memberCancelRefund_args();
      args.setOrderid(orderid);
      sendBase("memberCancelRefund", args);
    }

    public long recv_memberCancelRefund() throws FailureException, org.apache.thrift.TException
    {
      memberCancelRefund_result result = new memberCancelRefund_result();
      receiveBase(result, "memberCancelRefund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "memberCancelRefund failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void memberIncomeToday(long memberid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      memberIncomeToday_call method_call = new memberIncomeToday_call(memberid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class memberIncomeToday_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberid;
      public memberIncomeToday_call(long memberid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberid = memberid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("memberIncomeToday", org.apache.thrift.protocol.TMessageType.CALL, 0));
        memberIncomeToday_args args = new memberIncomeToday_args();
        args.setMemberid(memberid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_memberIncomeToday();
      }
    }

    public void memberIncomeList(long memberid, Page page, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      memberIncomeList_call method_call = new memberIncomeList_call(memberid, page, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class memberIncomeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberid;
      private Page page;
      private Map<String,String> param;
      public memberIncomeList_call(long memberid, Page page, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberid = memberid;
        this.page = page;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("memberIncomeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        memberIncomeList_args args = new memberIncomeList_args();
        args.setMemberid(memberid);
        args.setPage(page);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_memberIncomeList();
      }
    }

    public void memberWithdrawList(long memberid, Page page, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      memberWithdrawList_call method_call = new memberWithdrawList_call(memberid, page, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class memberWithdrawList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberid;
      private Page page;
      private Map<String,String> param;
      public memberWithdrawList_call(long memberid, Page page, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberid = memberid;
        this.page = page;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("memberWithdrawList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        memberWithdrawList_args args = new memberWithdrawList_args();
        args.setMemberid(memberid);
        args.setPage(page);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_memberWithdrawList();
      }
    }

    public void memberWithdrawInfo(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      memberWithdrawInfo_call method_call = new memberWithdrawInfo_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class memberWithdrawInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public memberWithdrawInfo_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("memberWithdrawInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        memberWithdrawInfo_args args = new memberWithdrawInfo_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_memberWithdrawInfo();
      }
    }

    public void memberCommissionToday(long memberid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      memberCommissionToday_call method_call = new memberCommissionToday_call(memberid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class memberCommissionToday_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberid;
      public memberCommissionToday_call(long memberid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberid = memberid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("memberCommissionToday", org.apache.thrift.protocol.TMessageType.CALL, 0));
        memberCommissionToday_args args = new memberCommissionToday_args();
        args.setMemberid(memberid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_memberCommissionToday();
      }
    }

    public void memberApplyRefund(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      memberApplyRefund_call method_call = new memberApplyRefund_call(orderid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class memberApplyRefund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      public memberApplyRefund_call(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("memberApplyRefund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        memberApplyRefund_args args = new memberApplyRefund_args();
        args.setOrderid(orderid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_memberApplyRefund();
      }
    }

    public void memberCancelRefund(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      memberCancelRefund_call method_call = new memberCancelRefund_call(orderid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class memberCancelRefund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      public memberCancelRefund_call(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("memberCancelRefund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        memberCancelRefund_args args = new memberCancelRefund_args();
        args.setOrderid(orderid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_memberCancelRefund();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("memberIncomeToday", new memberIncomeToday());
      processMap.put("memberIncomeList", new memberIncomeList());
      processMap.put("memberWithdrawList", new memberWithdrawList());
      processMap.put("memberWithdrawInfo", new memberWithdrawInfo());
      processMap.put("memberCommissionToday", new memberCommissionToday());
      processMap.put("memberApplyRefund", new memberApplyRefund());
      processMap.put("memberCancelRefund", new memberCancelRefund());
      return processMap;
    }

    public static class memberIncomeToday<I extends Iface> extends org.apache.thrift.ProcessFunction<I, memberIncomeToday_args> {
      public memberIncomeToday() {
        super("memberIncomeToday");
      }

      public memberIncomeToday_args getEmptyArgsInstance() {
        return new memberIncomeToday_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public memberIncomeToday_result getResult(I iface, memberIncomeToday_args args) throws org.apache.thrift.TException {
        memberIncomeToday_result result = new memberIncomeToday_result();
        try {
          result.success = iface.memberIncomeToday(args.memberid);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class memberIncomeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, memberIncomeList_args> {
      public memberIncomeList() {
        super("memberIncomeList");
      }

      public memberIncomeList_args getEmptyArgsInstance() {
        return new memberIncomeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public memberIncomeList_result getResult(I iface, memberIncomeList_args args) throws org.apache.thrift.TException {
        memberIncomeList_result result = new memberIncomeList_result();
        try {
          result.success = iface.memberIncomeList(args.memberid, args.page, args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class memberWithdrawList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, memberWithdrawList_args> {
      public memberWithdrawList() {
        super("memberWithdrawList");
      }

      public memberWithdrawList_args getEmptyArgsInstance() {
        return new memberWithdrawList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public memberWithdrawList_result getResult(I iface, memberWithdrawList_args args) throws org.apache.thrift.TException {
        memberWithdrawList_result result = new memberWithdrawList_result();
        try {
          result.success = iface.memberWithdrawList(args.memberid, args.page, args.param);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class memberWithdrawInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, memberWithdrawInfo_args> {
      public memberWithdrawInfo() {
        super("memberWithdrawInfo");
      }

      public memberWithdrawInfo_args getEmptyArgsInstance() {
        return new memberWithdrawInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public memberWithdrawInfo_result getResult(I iface, memberWithdrawInfo_args args) throws org.apache.thrift.TException {
        memberWithdrawInfo_result result = new memberWithdrawInfo_result();
        try {
          result.success = iface.memberWithdrawInfo(args.id);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class memberCommissionToday<I extends Iface> extends org.apache.thrift.ProcessFunction<I, memberCommissionToday_args> {
      public memberCommissionToday() {
        super("memberCommissionToday");
      }

      public memberCommissionToday_args getEmptyArgsInstance() {
        return new memberCommissionToday_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public memberCommissionToday_result getResult(I iface, memberCommissionToday_args args) throws org.apache.thrift.TException {
        memberCommissionToday_result result = new memberCommissionToday_result();
        try {
          result.success = iface.memberCommissionToday(args.memberid);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class memberApplyRefund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, memberApplyRefund_args> {
      public memberApplyRefund() {
        super("memberApplyRefund");
      }

      public memberApplyRefund_args getEmptyArgsInstance() {
        return new memberApplyRefund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public memberApplyRefund_result getResult(I iface, memberApplyRefund_args args) throws org.apache.thrift.TException {
        memberApplyRefund_result result = new memberApplyRefund_result();
        try {
          result.success = iface.memberApplyRefund(args.orderid);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class memberCancelRefund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, memberCancelRefund_args> {
      public memberCancelRefund() {
        super("memberCancelRefund");
      }

      public memberCancelRefund_args getEmptyArgsInstance() {
        return new memberCancelRefund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public memberCancelRefund_result getResult(I iface, memberCancelRefund_args args) throws org.apache.thrift.TException {
        memberCancelRefund_result result = new memberCancelRefund_result();
        try {
          result.success = iface.memberCancelRefund(args.orderid);
          result.setSuccessIsSet(true);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("memberIncomeToday", new memberIncomeToday());
      processMap.put("memberIncomeList", new memberIncomeList());
      processMap.put("memberWithdrawList", new memberWithdrawList());
      processMap.put("memberWithdrawInfo", new memberWithdrawInfo());
      processMap.put("memberCommissionToday", new memberCommissionToday());
      processMap.put("memberApplyRefund", new memberApplyRefund());
      processMap.put("memberCancelRefund", new memberCancelRefund());
      return processMap;
    }

    public static class memberIncomeToday<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, memberIncomeToday_args, Map<String,String>> {
      public memberIncomeToday() {
        super("memberIncomeToday");
      }

      public memberIncomeToday_args getEmptyArgsInstance() {
        return new memberIncomeToday_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            memberIncomeToday_result result = new memberIncomeToday_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            memberIncomeToday_result result = new memberIncomeToday_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, memberIncomeToday_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.memberIncomeToday(args.memberid,resultHandler);
      }
    }

    public static class memberIncomeList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, memberIncomeList_args, Result> {
      public memberIncomeList() {
        super("memberIncomeList");
      }

      public memberIncomeList_args getEmptyArgsInstance() {
        return new memberIncomeList_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            memberIncomeList_result result = new memberIncomeList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            memberIncomeList_result result = new memberIncomeList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, memberIncomeList_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.memberIncomeList(args.memberid, args.page, args.param,resultHandler);
      }
    }

    public static class memberWithdrawList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, memberWithdrawList_args, Result> {
      public memberWithdrawList() {
        super("memberWithdrawList");
      }

      public memberWithdrawList_args getEmptyArgsInstance() {
        return new memberWithdrawList_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            memberWithdrawList_result result = new memberWithdrawList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            memberWithdrawList_result result = new memberWithdrawList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, memberWithdrawList_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.memberWithdrawList(args.memberid, args.page, args.param,resultHandler);
      }
    }

    public static class memberWithdrawInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, memberWithdrawInfo_args, Map<String,String>> {
      public memberWithdrawInfo() {
        super("memberWithdrawInfo");
      }

      public memberWithdrawInfo_args getEmptyArgsInstance() {
        return new memberWithdrawInfo_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            memberWithdrawInfo_result result = new memberWithdrawInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            memberWithdrawInfo_result result = new memberWithdrawInfo_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, memberWithdrawInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.memberWithdrawInfo(args.id,resultHandler);
      }
    }

    public static class memberCommissionToday<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, memberCommissionToday_args, Map<String,String>> {
      public memberCommissionToday() {
        super("memberCommissionToday");
      }

      public memberCommissionToday_args getEmptyArgsInstance() {
        return new memberCommissionToday_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            memberCommissionToday_result result = new memberCommissionToday_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            memberCommissionToday_result result = new memberCommissionToday_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, memberCommissionToday_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.memberCommissionToday(args.memberid,resultHandler);
      }
    }

    public static class memberApplyRefund<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, memberApplyRefund_args, Long> {
      public memberApplyRefund() {
        super("memberApplyRefund");
      }

      public memberApplyRefund_args getEmptyArgsInstance() {
        return new memberApplyRefund_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            memberApplyRefund_result result = new memberApplyRefund_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            memberApplyRefund_result result = new memberApplyRefund_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, memberApplyRefund_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.memberApplyRefund(args.orderid,resultHandler);
      }
    }

    public static class memberCancelRefund<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, memberCancelRefund_args, Long> {
      public memberCancelRefund() {
        super("memberCancelRefund");
      }

      public memberCancelRefund_args getEmptyArgsInstance() {
        return new memberCancelRefund_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            memberCancelRefund_result result = new memberCancelRefund_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            memberCancelRefund_result result = new memberCancelRefund_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, memberCancelRefund_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.memberCancelRefund(args.orderid,resultHandler);
      }
    }

  }

  public static class memberIncomeToday_args implements org.apache.thrift.TBase<memberIncomeToday_args, memberIncomeToday_args._Fields>, java.io.Serializable, Cloneable, Comparable<memberIncomeToday_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberIncomeToday_args");

    private static final org.apache.thrift.protocol.TField MEMBERID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberIncomeToday_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberIncomeToday_argsTupleSchemeFactory());
    }

    public long memberid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBERID((short)1, "memberid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBERID
            return MEMBERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBERID, new org.apache.thrift.meta_data.FieldMetaData("memberid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberIncomeToday_args.class, metaDataMap);
    }

    public memberIncomeToday_args() {
    }

    public memberIncomeToday_args(
      long memberid)
    {
      this();
      this.memberid = memberid;
      setMemberidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberIncomeToday_args(memberIncomeToday_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberid = other.memberid;
    }

    public memberIncomeToday_args deepCopy() {
      return new memberIncomeToday_args(this);
    }

    @Override
    public void clear() {
      setMemberidIsSet(false);
      this.memberid = 0;
    }

    public long getMemberid() {
      return this.memberid;
    }

    public memberIncomeToday_args setMemberid(long memberid) {
      this.memberid = memberid;
      setMemberidIsSet(true);
      return this;
    }

    public void unsetMemberid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    /** Returns true if field memberid is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberid() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    public void setMemberidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBERID:
        if (value == null) {
          unsetMemberid();
        } else {
          setMemberid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBERID:
        return Long.valueOf(getMemberid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBERID:
        return isSetMemberid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberIncomeToday_args)
        return this.equals((memberIncomeToday_args)that);
      return false;
    }

    public boolean equals(memberIncomeToday_args that) {
      if (that == null)
        return false;

      boolean this_present_memberid = true;
      boolean that_present_memberid = true;
      if (this_present_memberid || that_present_memberid) {
        if (!(this_present_memberid && that_present_memberid))
          return false;
        if (this.memberid != that.memberid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberIncomeToday_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberid()).compareTo(other.isSetMemberid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberid, other.memberid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberIncomeToday_args(");
      boolean first = true;

      sb.append("memberid:");
      sb.append(this.memberid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberIncomeToday_argsStandardSchemeFactory implements SchemeFactory {
      public memberIncomeToday_argsStandardScheme getScheme() {
        return new memberIncomeToday_argsStandardScheme();
      }
    }

    private static class memberIncomeToday_argsStandardScheme extends StandardScheme<memberIncomeToday_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberIncomeToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberid = iprot.readI64();
                struct.setMemberidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberIncomeToday_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBERID_FIELD_DESC);
        oprot.writeI64(struct.memberid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberIncomeToday_argsTupleSchemeFactory implements SchemeFactory {
      public memberIncomeToday_argsTupleScheme getScheme() {
        return new memberIncomeToday_argsTupleScheme();
      }
    }

    private static class memberIncomeToday_argsTupleScheme extends TupleScheme<memberIncomeToday_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberIncomeToday_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMemberid()) {
          oprot.writeI64(struct.memberid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberIncomeToday_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.memberid = iprot.readI64();
          struct.setMemberidIsSet(true);
        }
      }
    }

  }

  public static class memberIncomeToday_result implements org.apache.thrift.TBase<memberIncomeToday_result, memberIncomeToday_result._Fields>, java.io.Serializable, Cloneable, Comparable<memberIncomeToday_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberIncomeToday_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberIncomeToday_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberIncomeToday_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberIncomeToday_result.class, metaDataMap);
    }

    public memberIncomeToday_result() {
    }

    public memberIncomeToday_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberIncomeToday_result(memberIncomeToday_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public memberIncomeToday_result deepCopy() {
      return new memberIncomeToday_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public memberIncomeToday_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public memberIncomeToday_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberIncomeToday_result)
        return this.equals((memberIncomeToday_result)that);
      return false;
    }

    public boolean equals(memberIncomeToday_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberIncomeToday_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberIncomeToday_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberIncomeToday_resultStandardSchemeFactory implements SchemeFactory {
      public memberIncomeToday_resultStandardScheme getScheme() {
        return new memberIncomeToday_resultStandardScheme();
      }
    }

    private static class memberIncomeToday_resultStandardScheme extends StandardScheme<memberIncomeToday_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberIncomeToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map18.size);
                  for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                  {
                    String _key20;
                    String _val21;
                    _key20 = iprot.readString();
                    _val21 = iprot.readString();
                    struct.success.put(_key20, _val21);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberIncomeToday_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter22 : struct.success.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberIncomeToday_resultTupleSchemeFactory implements SchemeFactory {
      public memberIncomeToday_resultTupleScheme getScheme() {
        return new memberIncomeToday_resultTupleScheme();
      }
    }

    private static class memberIncomeToday_resultTupleScheme extends TupleScheme<memberIncomeToday_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberIncomeToday_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter23 : struct.success.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberIncomeToday_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map24.size);
            for (int _i25 = 0; _i25 < _map24.size; ++_i25)
            {
              String _key26;
              String _val27;
              _key26 = iprot.readString();
              _val27 = iprot.readString();
              struct.success.put(_key26, _val27);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class memberIncomeList_args implements org.apache.thrift.TBase<memberIncomeList_args, memberIncomeList_args._Fields>, java.io.Serializable, Cloneable, Comparable<memberIncomeList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberIncomeList_args");

    private static final org.apache.thrift.protocol.TField MEMBERID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberIncomeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberIncomeList_argsTupleSchemeFactory());
    }

    public long memberid; // required
    public Page page; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBERID((short)1, "memberid"),
      PAGE((short)2, "page"),
      PARAM((short)3, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBERID
            return MEMBERID;
          case 2: // PAGE
            return PAGE;
          case 3: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBERID, new org.apache.thrift.meta_data.FieldMetaData("memberid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Page.class)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberIncomeList_args.class, metaDataMap);
    }

    public memberIncomeList_args() {
    }

    public memberIncomeList_args(
      long memberid,
      Page page,
      Map<String,String> param)
    {
      this();
      this.memberid = memberid;
      setMemberidIsSet(true);
      this.page = page;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberIncomeList_args(memberIncomeList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberid = other.memberid;
      if (other.isSetPage()) {
        this.page = new Page(other.page);
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public memberIncomeList_args deepCopy() {
      return new memberIncomeList_args(this);
    }

    @Override
    public void clear() {
      setMemberidIsSet(false);
      this.memberid = 0;
      this.page = null;
      this.param = null;
    }

    public long getMemberid() {
      return this.memberid;
    }

    public memberIncomeList_args setMemberid(long memberid) {
      this.memberid = memberid;
      setMemberidIsSet(true);
      return this;
    }

    public void unsetMemberid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    /** Returns true if field memberid is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberid() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    public void setMemberidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERID_ISSET_ID, value);
    }

    public Page getPage() {
      return this.page;
    }

    public memberIncomeList_args setPage(Page page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public memberIncomeList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBERID:
        if (value == null) {
          unsetMemberid();
        } else {
          setMemberid((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Page)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBERID:
        return Long.valueOf(getMemberid());

      case PAGE:
        return getPage();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBERID:
        return isSetMemberid();
      case PAGE:
        return isSetPage();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberIncomeList_args)
        return this.equals((memberIncomeList_args)that);
      return false;
    }

    public boolean equals(memberIncomeList_args that) {
      if (that == null)
        return false;

      boolean this_present_memberid = true;
      boolean that_present_memberid = true;
      if (this_present_memberid || that_present_memberid) {
        if (!(this_present_memberid && that_present_memberid))
          return false;
        if (this.memberid != that.memberid)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberIncomeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberid()).compareTo(other.isSetMemberid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberid, other.memberid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberIncomeList_args(");
      boolean first = true;

      sb.append("memberid:");
      sb.append(this.memberid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberIncomeList_argsStandardSchemeFactory implements SchemeFactory {
      public memberIncomeList_argsStandardScheme getScheme() {
        return new memberIncomeList_argsStandardScheme();
      }
    }

    private static class memberIncomeList_argsStandardScheme extends StandardScheme<memberIncomeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberIncomeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberid = iprot.readI64();
                struct.setMemberidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new Page();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map28.size);
                  for (int _i29 = 0; _i29 < _map28.size; ++_i29)
                  {
                    String _key30;
                    String _val31;
                    _key30 = iprot.readString();
                    _val31 = iprot.readString();
                    struct.param.put(_key30, _val31);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberIncomeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBERID_FIELD_DESC);
        oprot.writeI64(struct.memberid);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter32 : struct.param.entrySet())
            {
              oprot.writeString(_iter32.getKey());
              oprot.writeString(_iter32.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberIncomeList_argsTupleSchemeFactory implements SchemeFactory {
      public memberIncomeList_argsTupleScheme getScheme() {
        return new memberIncomeList_argsTupleScheme();
      }
    }

    private static class memberIncomeList_argsTupleScheme extends TupleScheme<memberIncomeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberIncomeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberid()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetParam()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMemberid()) {
          oprot.writeI64(struct.memberid);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter33 : struct.param.entrySet())
            {
              oprot.writeString(_iter33.getKey());
              oprot.writeString(_iter33.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberIncomeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.memberid = iprot.readI64();
          struct.setMemberidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new Page();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map34.size);
            for (int _i35 = 0; _i35 < _map34.size; ++_i35)
            {
              String _key36;
              String _val37;
              _key36 = iprot.readString();
              _val37 = iprot.readString();
              struct.param.put(_key36, _val37);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class memberIncomeList_result implements org.apache.thrift.TBase<memberIncomeList_result, memberIncomeList_result._Fields>, java.io.Serializable, Cloneable, Comparable<memberIncomeList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberIncomeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberIncomeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberIncomeList_resultTupleSchemeFactory());
    }

    public Result success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberIncomeList_result.class, metaDataMap);
    }

    public memberIncomeList_result() {
    }

    public memberIncomeList_result(
      Result success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberIncomeList_result(memberIncomeList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public memberIncomeList_result deepCopy() {
      return new memberIncomeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public memberIncomeList_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public memberIncomeList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberIncomeList_result)
        return this.equals((memberIncomeList_result)that);
      return false;
    }

    public boolean equals(memberIncomeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberIncomeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberIncomeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberIncomeList_resultStandardSchemeFactory implements SchemeFactory {
      public memberIncomeList_resultStandardScheme getScheme() {
        return new memberIncomeList_resultStandardScheme();
      }
    }

    private static class memberIncomeList_resultStandardScheme extends StandardScheme<memberIncomeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberIncomeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberIncomeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberIncomeList_resultTupleSchemeFactory implements SchemeFactory {
      public memberIncomeList_resultTupleScheme getScheme() {
        return new memberIncomeList_resultTupleScheme();
      }
    }

    private static class memberIncomeList_resultTupleScheme extends TupleScheme<memberIncomeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberIncomeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberIncomeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class memberWithdrawList_args implements org.apache.thrift.TBase<memberWithdrawList_args, memberWithdrawList_args._Fields>, java.io.Serializable, Cloneable, Comparable<memberWithdrawList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberWithdrawList_args");

    private static final org.apache.thrift.protocol.TField MEMBERID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberWithdrawList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberWithdrawList_argsTupleSchemeFactory());
    }

    public long memberid; // required
    public Page page; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBERID((short)1, "memberid"),
      PAGE((short)2, "page"),
      PARAM((short)3, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBERID
            return MEMBERID;
          case 2: // PAGE
            return PAGE;
          case 3: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBERID, new org.apache.thrift.meta_data.FieldMetaData("memberid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Page.class)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberWithdrawList_args.class, metaDataMap);
    }

    public memberWithdrawList_args() {
    }

    public memberWithdrawList_args(
      long memberid,
      Page page,
      Map<String,String> param)
    {
      this();
      this.memberid = memberid;
      setMemberidIsSet(true);
      this.page = page;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberWithdrawList_args(memberWithdrawList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberid = other.memberid;
      if (other.isSetPage()) {
        this.page = new Page(other.page);
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public memberWithdrawList_args deepCopy() {
      return new memberWithdrawList_args(this);
    }

    @Override
    public void clear() {
      setMemberidIsSet(false);
      this.memberid = 0;
      this.page = null;
      this.param = null;
    }

    public long getMemberid() {
      return this.memberid;
    }

    public memberWithdrawList_args setMemberid(long memberid) {
      this.memberid = memberid;
      setMemberidIsSet(true);
      return this;
    }

    public void unsetMemberid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    /** Returns true if field memberid is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberid() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    public void setMemberidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERID_ISSET_ID, value);
    }

    public Page getPage() {
      return this.page;
    }

    public memberWithdrawList_args setPage(Page page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public memberWithdrawList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBERID:
        if (value == null) {
          unsetMemberid();
        } else {
          setMemberid((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Page)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBERID:
        return Long.valueOf(getMemberid());

      case PAGE:
        return getPage();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBERID:
        return isSetMemberid();
      case PAGE:
        return isSetPage();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberWithdrawList_args)
        return this.equals((memberWithdrawList_args)that);
      return false;
    }

    public boolean equals(memberWithdrawList_args that) {
      if (that == null)
        return false;

      boolean this_present_memberid = true;
      boolean that_present_memberid = true;
      if (this_present_memberid || that_present_memberid) {
        if (!(this_present_memberid && that_present_memberid))
          return false;
        if (this.memberid != that.memberid)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberWithdrawList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberid()).compareTo(other.isSetMemberid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberid, other.memberid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberWithdrawList_args(");
      boolean first = true;

      sb.append("memberid:");
      sb.append(this.memberid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberWithdrawList_argsStandardSchemeFactory implements SchemeFactory {
      public memberWithdrawList_argsStandardScheme getScheme() {
        return new memberWithdrawList_argsStandardScheme();
      }
    }

    private static class memberWithdrawList_argsStandardScheme extends StandardScheme<memberWithdrawList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberWithdrawList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberid = iprot.readI64();
                struct.setMemberidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new Page();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map38.size);
                  for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                  {
                    String _key40;
                    String _val41;
                    _key40 = iprot.readString();
                    _val41 = iprot.readString();
                    struct.param.put(_key40, _val41);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberWithdrawList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBERID_FIELD_DESC);
        oprot.writeI64(struct.memberid);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter42 : struct.param.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              oprot.writeString(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberWithdrawList_argsTupleSchemeFactory implements SchemeFactory {
      public memberWithdrawList_argsTupleScheme getScheme() {
        return new memberWithdrawList_argsTupleScheme();
      }
    }

    private static class memberWithdrawList_argsTupleScheme extends TupleScheme<memberWithdrawList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberWithdrawList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberid()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetParam()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMemberid()) {
          oprot.writeI64(struct.memberid);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter43 : struct.param.entrySet())
            {
              oprot.writeString(_iter43.getKey());
              oprot.writeString(_iter43.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberWithdrawList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.memberid = iprot.readI64();
          struct.setMemberidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new Page();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map44.size);
            for (int _i45 = 0; _i45 < _map44.size; ++_i45)
            {
              String _key46;
              String _val47;
              _key46 = iprot.readString();
              _val47 = iprot.readString();
              struct.param.put(_key46, _val47);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class memberWithdrawList_result implements org.apache.thrift.TBase<memberWithdrawList_result, memberWithdrawList_result._Fields>, java.io.Serializable, Cloneable, Comparable<memberWithdrawList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberWithdrawList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberWithdrawList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberWithdrawList_resultTupleSchemeFactory());
    }

    public Result success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberWithdrawList_result.class, metaDataMap);
    }

    public memberWithdrawList_result() {
    }

    public memberWithdrawList_result(
      Result success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberWithdrawList_result(memberWithdrawList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public memberWithdrawList_result deepCopy() {
      return new memberWithdrawList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public memberWithdrawList_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public memberWithdrawList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberWithdrawList_result)
        return this.equals((memberWithdrawList_result)that);
      return false;
    }

    public boolean equals(memberWithdrawList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberWithdrawList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberWithdrawList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberWithdrawList_resultStandardSchemeFactory implements SchemeFactory {
      public memberWithdrawList_resultStandardScheme getScheme() {
        return new memberWithdrawList_resultStandardScheme();
      }
    }

    private static class memberWithdrawList_resultStandardScheme extends StandardScheme<memberWithdrawList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberWithdrawList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberWithdrawList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberWithdrawList_resultTupleSchemeFactory implements SchemeFactory {
      public memberWithdrawList_resultTupleScheme getScheme() {
        return new memberWithdrawList_resultTupleScheme();
      }
    }

    private static class memberWithdrawList_resultTupleScheme extends TupleScheme<memberWithdrawList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberWithdrawList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberWithdrawList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class memberWithdrawInfo_args implements org.apache.thrift.TBase<memberWithdrawInfo_args, memberWithdrawInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<memberWithdrawInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberWithdrawInfo_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberWithdrawInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberWithdrawInfo_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberWithdrawInfo_args.class, metaDataMap);
    }

    public memberWithdrawInfo_args() {
    }

    public memberWithdrawInfo_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberWithdrawInfo_args(memberWithdrawInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public memberWithdrawInfo_args deepCopy() {
      return new memberWithdrawInfo_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public memberWithdrawInfo_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberWithdrawInfo_args)
        return this.equals((memberWithdrawInfo_args)that);
      return false;
    }

    public boolean equals(memberWithdrawInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberWithdrawInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberWithdrawInfo_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberWithdrawInfo_argsStandardSchemeFactory implements SchemeFactory {
      public memberWithdrawInfo_argsStandardScheme getScheme() {
        return new memberWithdrawInfo_argsStandardScheme();
      }
    }

    private static class memberWithdrawInfo_argsStandardScheme extends StandardScheme<memberWithdrawInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberWithdrawInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberWithdrawInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberWithdrawInfo_argsTupleSchemeFactory implements SchemeFactory {
      public memberWithdrawInfo_argsTupleScheme getScheme() {
        return new memberWithdrawInfo_argsTupleScheme();
      }
    }

    private static class memberWithdrawInfo_argsTupleScheme extends TupleScheme<memberWithdrawInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberWithdrawInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberWithdrawInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class memberWithdrawInfo_result implements org.apache.thrift.TBase<memberWithdrawInfo_result, memberWithdrawInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<memberWithdrawInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberWithdrawInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberWithdrawInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberWithdrawInfo_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberWithdrawInfo_result.class, metaDataMap);
    }

    public memberWithdrawInfo_result() {
    }

    public memberWithdrawInfo_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberWithdrawInfo_result(memberWithdrawInfo_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public memberWithdrawInfo_result deepCopy() {
      return new memberWithdrawInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public memberWithdrawInfo_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public memberWithdrawInfo_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberWithdrawInfo_result)
        return this.equals((memberWithdrawInfo_result)that);
      return false;
    }

    public boolean equals(memberWithdrawInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberWithdrawInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberWithdrawInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberWithdrawInfo_resultStandardSchemeFactory implements SchemeFactory {
      public memberWithdrawInfo_resultStandardScheme getScheme() {
        return new memberWithdrawInfo_resultStandardScheme();
      }
    }

    private static class memberWithdrawInfo_resultStandardScheme extends StandardScheme<memberWithdrawInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberWithdrawInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map48.size);
                  for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                  {
                    String _key50;
                    String _val51;
                    _key50 = iprot.readString();
                    _val51 = iprot.readString();
                    struct.success.put(_key50, _val51);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberWithdrawInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter52 : struct.success.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              oprot.writeString(_iter52.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberWithdrawInfo_resultTupleSchemeFactory implements SchemeFactory {
      public memberWithdrawInfo_resultTupleScheme getScheme() {
        return new memberWithdrawInfo_resultTupleScheme();
      }
    }

    private static class memberWithdrawInfo_resultTupleScheme extends TupleScheme<memberWithdrawInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberWithdrawInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter53 : struct.success.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              oprot.writeString(_iter53.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberWithdrawInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map54.size);
            for (int _i55 = 0; _i55 < _map54.size; ++_i55)
            {
              String _key56;
              String _val57;
              _key56 = iprot.readString();
              _val57 = iprot.readString();
              struct.success.put(_key56, _val57);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class memberCommissionToday_args implements org.apache.thrift.TBase<memberCommissionToday_args, memberCommissionToday_args._Fields>, java.io.Serializable, Cloneable, Comparable<memberCommissionToday_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberCommissionToday_args");

    private static final org.apache.thrift.protocol.TField MEMBERID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberCommissionToday_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberCommissionToday_argsTupleSchemeFactory());
    }

    public long memberid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBERID((short)1, "memberid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBERID
            return MEMBERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBERID, new org.apache.thrift.meta_data.FieldMetaData("memberid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberCommissionToday_args.class, metaDataMap);
    }

    public memberCommissionToday_args() {
    }

    public memberCommissionToday_args(
      long memberid)
    {
      this();
      this.memberid = memberid;
      setMemberidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberCommissionToday_args(memberCommissionToday_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberid = other.memberid;
    }

    public memberCommissionToday_args deepCopy() {
      return new memberCommissionToday_args(this);
    }

    @Override
    public void clear() {
      setMemberidIsSet(false);
      this.memberid = 0;
    }

    public long getMemberid() {
      return this.memberid;
    }

    public memberCommissionToday_args setMemberid(long memberid) {
      this.memberid = memberid;
      setMemberidIsSet(true);
      return this;
    }

    public void unsetMemberid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    /** Returns true if field memberid is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberid() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERID_ISSET_ID);
    }

    public void setMemberidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBERID:
        if (value == null) {
          unsetMemberid();
        } else {
          setMemberid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBERID:
        return Long.valueOf(getMemberid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBERID:
        return isSetMemberid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberCommissionToday_args)
        return this.equals((memberCommissionToday_args)that);
      return false;
    }

    public boolean equals(memberCommissionToday_args that) {
      if (that == null)
        return false;

      boolean this_present_memberid = true;
      boolean that_present_memberid = true;
      if (this_present_memberid || that_present_memberid) {
        if (!(this_present_memberid && that_present_memberid))
          return false;
        if (this.memberid != that.memberid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberCommissionToday_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberid()).compareTo(other.isSetMemberid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberid, other.memberid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberCommissionToday_args(");
      boolean first = true;

      sb.append("memberid:");
      sb.append(this.memberid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberCommissionToday_argsStandardSchemeFactory implements SchemeFactory {
      public memberCommissionToday_argsStandardScheme getScheme() {
        return new memberCommissionToday_argsStandardScheme();
      }
    }

    private static class memberCommissionToday_argsStandardScheme extends StandardScheme<memberCommissionToday_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberCommissionToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberid = iprot.readI64();
                struct.setMemberidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberCommissionToday_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBERID_FIELD_DESC);
        oprot.writeI64(struct.memberid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberCommissionToday_argsTupleSchemeFactory implements SchemeFactory {
      public memberCommissionToday_argsTupleScheme getScheme() {
        return new memberCommissionToday_argsTupleScheme();
      }
    }

    private static class memberCommissionToday_argsTupleScheme extends TupleScheme<memberCommissionToday_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberCommissionToday_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMemberid()) {
          oprot.writeI64(struct.memberid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberCommissionToday_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.memberid = iprot.readI64();
          struct.setMemberidIsSet(true);
        }
      }
    }

  }

  public static class memberCommissionToday_result implements org.apache.thrift.TBase<memberCommissionToday_result, memberCommissionToday_result._Fields>, java.io.Serializable, Cloneable, Comparable<memberCommissionToday_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberCommissionToday_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberCommissionToday_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberCommissionToday_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberCommissionToday_result.class, metaDataMap);
    }

    public memberCommissionToday_result() {
    }

    public memberCommissionToday_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberCommissionToday_result(memberCommissionToday_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public memberCommissionToday_result deepCopy() {
      return new memberCommissionToday_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public memberCommissionToday_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public memberCommissionToday_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberCommissionToday_result)
        return this.equals((memberCommissionToday_result)that);
      return false;
    }

    public boolean equals(memberCommissionToday_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberCommissionToday_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberCommissionToday_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberCommissionToday_resultStandardSchemeFactory implements SchemeFactory {
      public memberCommissionToday_resultStandardScheme getScheme() {
        return new memberCommissionToday_resultStandardScheme();
      }
    }

    private static class memberCommissionToday_resultStandardScheme extends StandardScheme<memberCommissionToday_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberCommissionToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map58.size);
                  for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                  {
                    String _key60;
                    String _val61;
                    _key60 = iprot.readString();
                    _val61 = iprot.readString();
                    struct.success.put(_key60, _val61);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberCommissionToday_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter62 : struct.success.entrySet())
            {
              oprot.writeString(_iter62.getKey());
              oprot.writeString(_iter62.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberCommissionToday_resultTupleSchemeFactory implements SchemeFactory {
      public memberCommissionToday_resultTupleScheme getScheme() {
        return new memberCommissionToday_resultTupleScheme();
      }
    }

    private static class memberCommissionToday_resultTupleScheme extends TupleScheme<memberCommissionToday_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberCommissionToday_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter63 : struct.success.entrySet())
            {
              oprot.writeString(_iter63.getKey());
              oprot.writeString(_iter63.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberCommissionToday_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map64.size);
            for (int _i65 = 0; _i65 < _map64.size; ++_i65)
            {
              String _key66;
              String _val67;
              _key66 = iprot.readString();
              _val67 = iprot.readString();
              struct.success.put(_key66, _val67);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class memberApplyRefund_args implements org.apache.thrift.TBase<memberApplyRefund_args, memberApplyRefund_args._Fields>, java.io.Serializable, Cloneable, Comparable<memberApplyRefund_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberApplyRefund_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberApplyRefund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberApplyRefund_argsTupleSchemeFactory());
    }

    public String orderid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberApplyRefund_args.class, metaDataMap);
    }

    public memberApplyRefund_args() {
    }

    public memberApplyRefund_args(
      String orderid)
    {
      this();
      this.orderid = orderid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberApplyRefund_args(memberApplyRefund_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
    }

    public memberApplyRefund_args deepCopy() {
      return new memberApplyRefund_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public memberApplyRefund_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberApplyRefund_args)
        return this.equals((memberApplyRefund_args)that);
      return false;
    }

    public boolean equals(memberApplyRefund_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberApplyRefund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberApplyRefund_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberApplyRefund_argsStandardSchemeFactory implements SchemeFactory {
      public memberApplyRefund_argsStandardScheme getScheme() {
        return new memberApplyRefund_argsStandardScheme();
      }
    }

    private static class memberApplyRefund_argsStandardScheme extends StandardScheme<memberApplyRefund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberApplyRefund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberApplyRefund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberApplyRefund_argsTupleSchemeFactory implements SchemeFactory {
      public memberApplyRefund_argsTupleScheme getScheme() {
        return new memberApplyRefund_argsTupleScheme();
      }
    }

    private static class memberApplyRefund_argsTupleScheme extends TupleScheme<memberApplyRefund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberApplyRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberApplyRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
      }
    }

  }

  public static class memberApplyRefund_result implements org.apache.thrift.TBase<memberApplyRefund_result, memberApplyRefund_result._Fields>, java.io.Serializable, Cloneable, Comparable<memberApplyRefund_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberApplyRefund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberApplyRefund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberApplyRefund_resultTupleSchemeFactory());
    }

    public long success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberApplyRefund_result.class, metaDataMap);
    }

    public memberApplyRefund_result() {
    }

    public memberApplyRefund_result(
      long success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberApplyRefund_result(memberApplyRefund_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public memberApplyRefund_result deepCopy() {
      return new memberApplyRefund_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public memberApplyRefund_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public memberApplyRefund_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberApplyRefund_result)
        return this.equals((memberApplyRefund_result)that);
      return false;
    }

    public boolean equals(memberApplyRefund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberApplyRefund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberApplyRefund_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberApplyRefund_resultStandardSchemeFactory implements SchemeFactory {
      public memberApplyRefund_resultStandardScheme getScheme() {
        return new memberApplyRefund_resultStandardScheme();
      }
    }

    private static class memberApplyRefund_resultStandardScheme extends StandardScheme<memberApplyRefund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberApplyRefund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberApplyRefund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberApplyRefund_resultTupleSchemeFactory implements SchemeFactory {
      public memberApplyRefund_resultTupleScheme getScheme() {
        return new memberApplyRefund_resultTupleScheme();
      }
    }

    private static class memberApplyRefund_resultTupleScheme extends TupleScheme<memberApplyRefund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberApplyRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberApplyRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class memberCancelRefund_args implements org.apache.thrift.TBase<memberCancelRefund_args, memberCancelRefund_args._Fields>, java.io.Serializable, Cloneable, Comparable<memberCancelRefund_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberCancelRefund_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberCancelRefund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberCancelRefund_argsTupleSchemeFactory());
    }

    public String orderid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberCancelRefund_args.class, metaDataMap);
    }

    public memberCancelRefund_args() {
    }

    public memberCancelRefund_args(
      String orderid)
    {
      this();
      this.orderid = orderid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberCancelRefund_args(memberCancelRefund_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
    }

    public memberCancelRefund_args deepCopy() {
      return new memberCancelRefund_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public memberCancelRefund_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberCancelRefund_args)
        return this.equals((memberCancelRefund_args)that);
      return false;
    }

    public boolean equals(memberCancelRefund_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberCancelRefund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberCancelRefund_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberCancelRefund_argsStandardSchemeFactory implements SchemeFactory {
      public memberCancelRefund_argsStandardScheme getScheme() {
        return new memberCancelRefund_argsStandardScheme();
      }
    }

    private static class memberCancelRefund_argsStandardScheme extends StandardScheme<memberCancelRefund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberCancelRefund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberCancelRefund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberCancelRefund_argsTupleSchemeFactory implements SchemeFactory {
      public memberCancelRefund_argsTupleScheme getScheme() {
        return new memberCancelRefund_argsTupleScheme();
      }
    }

    private static class memberCancelRefund_argsTupleScheme extends TupleScheme<memberCancelRefund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberCancelRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberCancelRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
      }
    }

  }

  public static class memberCancelRefund_result implements org.apache.thrift.TBase<memberCancelRefund_result, memberCancelRefund_result._Fields>, java.io.Serializable, Cloneable, Comparable<memberCancelRefund_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("memberCancelRefund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new memberCancelRefund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new memberCancelRefund_resultTupleSchemeFactory());
    }

    public long success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(memberCancelRefund_result.class, metaDataMap);
    }

    public memberCancelRefund_result() {
    }

    public memberCancelRefund_result(
      long success,
      FailureException qe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public memberCancelRefund_result(memberCancelRefund_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public memberCancelRefund_result deepCopy() {
      return new memberCancelRefund_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.qe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public memberCancelRefund_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FailureException getQe() {
      return this.qe;
    }

    public memberCancelRefund_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof memberCancelRefund_result)
        return this.equals((memberCancelRefund_result)that);
      return false;
    }

    public boolean equals(memberCancelRefund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(memberCancelRefund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("memberCancelRefund_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class memberCancelRefund_resultStandardSchemeFactory implements SchemeFactory {
      public memberCancelRefund_resultStandardScheme getScheme() {
        return new memberCancelRefund_resultStandardScheme();
      }
    }

    private static class memberCancelRefund_resultStandardScheme extends StandardScheme<memberCancelRefund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, memberCancelRefund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, memberCancelRefund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class memberCancelRefund_resultTupleSchemeFactory implements SchemeFactory {
      public memberCancelRefund_resultTupleScheme getScheme() {
        return new memberCancelRefund_resultTupleScheme();
      }
    }

    private static class memberCancelRefund_resultTupleScheme extends TupleScheme<memberCancelRefund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, memberCancelRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, memberCancelRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
