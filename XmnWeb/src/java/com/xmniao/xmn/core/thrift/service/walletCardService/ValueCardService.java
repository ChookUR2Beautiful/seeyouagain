package com.xmniao.xmn.core.thrift.service.walletCardService;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.xmniao.xmn.core.thrift.exception.FailureException;
import com.xmniao.xmn.core.thrift.service.ResponseData;

public class ValueCardService {

  /**
   * 储值卡服务类
   */
  public interface Iface {

    public List<Map<String,String>> getValueCardMsg(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData updateValueCard(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException;

    public List<Map<String,String>> getValueCardList(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException;

    public Map<String,String> getValueCardBalance(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException;

    public Map<String,String> countCardNums(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData updateCardStatus(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getValueCardMsg(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateValueCard(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getValueCardList(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getValueCardBalance(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countCardNums(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCardStatus(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Map<String,String>> getValueCardMsg(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException
    {
      send_getValueCardMsg(paraMap);
      return recv_getValueCardMsg();
    }

    public void send_getValueCardMsg(Map<String,String> paraMap) throws org.apache.thrift.TException
    {
      getValueCardMsg_args args = new getValueCardMsg_args();
      args.setParaMap(paraMap);
      sendBase("getValueCardMsg", args);
    }

    public List<Map<String,String>> recv_getValueCardMsg() throws FailureException, org.apache.thrift.TException
    {
      getValueCardMsg_result result = new getValueCardMsg_result();
      receiveBase(result, "getValueCardMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getValueCardMsg failed: unknown result");
    }

    public ResponseData updateValueCard(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateValueCard(paraMap);
      return recv_updateValueCard();
    }

    public void send_updateValueCard(Map<String,String> paraMap) throws org.apache.thrift.TException
    {
      updateValueCard_args args = new updateValueCard_args();
      args.setParaMap(paraMap);
      sendBase("updateValueCard", args);
    }

    public ResponseData recv_updateValueCard() throws FailureException, org.apache.thrift.TException
    {
      updateValueCard_result result = new updateValueCard_result();
      receiveBase(result, "updateValueCard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateValueCard failed: unknown result");
    }

    public List<Map<String,String>> getValueCardList(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException
    {
      send_getValueCardList(paraMap);
      return recv_getValueCardList();
    }

    public void send_getValueCardList(Map<String,String> paraMap) throws org.apache.thrift.TException
    {
      getValueCardList_args args = new getValueCardList_args();
      args.setParaMap(paraMap);
      sendBase("getValueCardList", args);
    }

    public List<Map<String,String>> recv_getValueCardList() throws FailureException, org.apache.thrift.TException
    {
      getValueCardList_result result = new getValueCardList_result();
      receiveBase(result, "getValueCardList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getValueCardList failed: unknown result");
    }

    public Map<String,String> getValueCardBalance(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException
    {
      send_getValueCardBalance(paraMap);
      return recv_getValueCardBalance();
    }

    public void send_getValueCardBalance(Map<String,String> paraMap) throws org.apache.thrift.TException
    {
      getValueCardBalance_args args = new getValueCardBalance_args();
      args.setParaMap(paraMap);
      sendBase("getValueCardBalance", args);
    }

    public Map<String,String> recv_getValueCardBalance() throws FailureException, org.apache.thrift.TException
    {
      getValueCardBalance_result result = new getValueCardBalance_result();
      receiveBase(result, "getValueCardBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getValueCardBalance failed: unknown result");
    }

    public Map<String,String> countCardNums(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException
    {
      send_countCardNums(paraMap);
      return recv_countCardNums();
    }

    public void send_countCardNums(Map<String,String> paraMap) throws org.apache.thrift.TException
    {
      countCardNums_args args = new countCardNums_args();
      args.setParaMap(paraMap);
      sendBase("countCardNums", args);
    }

    public Map<String,String> recv_countCardNums() throws FailureException, org.apache.thrift.TException
    {
      countCardNums_result result = new countCardNums_result();
      receiveBase(result, "countCardNums");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countCardNums failed: unknown result");
    }

    public ResponseData updateCardStatus(Map<String,String> paraMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateCardStatus(paraMap);
      return recv_updateCardStatus();
    }

    public void send_updateCardStatus(Map<String,String> paraMap) throws org.apache.thrift.TException
    {
      updateCardStatus_args args = new updateCardStatus_args();
      args.setParaMap(paraMap);
      sendBase("updateCardStatus", args);
    }

    public ResponseData recv_updateCardStatus() throws FailureException, org.apache.thrift.TException
    {
      updateCardStatus_result result = new updateCardStatus_result();
      receiveBase(result, "updateCardStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCardStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getValueCardMsg(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getValueCardMsg_call method_call = new getValueCardMsg_call(paraMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getValueCardMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paraMap;
      public getValueCardMsg_call(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paraMap = paraMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getValueCardMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getValueCardMsg_args args = new getValueCardMsg_args();
        args.setParaMap(paraMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getValueCardMsg();
      }
    }

    public void updateValueCard(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateValueCard_call method_call = new updateValueCard_call(paraMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateValueCard_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paraMap;
      public updateValueCard_call(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paraMap = paraMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateValueCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateValueCard_args args = new updateValueCard_args();
        args.setParaMap(paraMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateValueCard();
      }
    }

    public void getValueCardList(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getValueCardList_call method_call = new getValueCardList_call(paraMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getValueCardList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paraMap;
      public getValueCardList_call(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paraMap = paraMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getValueCardList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getValueCardList_args args = new getValueCardList_args();
        args.setParaMap(paraMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getValueCardList();
      }
    }

    public void getValueCardBalance(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getValueCardBalance_call method_call = new getValueCardBalance_call(paraMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getValueCardBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paraMap;
      public getValueCardBalance_call(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paraMap = paraMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getValueCardBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getValueCardBalance_args args = new getValueCardBalance_args();
        args.setParaMap(paraMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getValueCardBalance();
      }
    }

    public void countCardNums(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countCardNums_call method_call = new countCardNums_call(paraMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countCardNums_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paraMap;
      public countCardNums_call(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paraMap = paraMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countCardNums", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countCardNums_args args = new countCardNums_args();
        args.setParaMap(paraMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countCardNums();
      }
    }

    public void updateCardStatus(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCardStatus_call method_call = new updateCardStatus_call(paraMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCardStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paraMap;
      public updateCardStatus_call(Map<String,String> paraMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paraMap = paraMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCardStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCardStatus_args args = new updateCardStatus_args();
        args.setParaMap(paraMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCardStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getValueCardMsg", new getValueCardMsg());
      processMap.put("updateValueCard", new updateValueCard());
      processMap.put("getValueCardList", new getValueCardList());
      processMap.put("getValueCardBalance", new getValueCardBalance());
      processMap.put("countCardNums", new countCardNums());
      processMap.put("updateCardStatus", new updateCardStatus());
      return processMap;
    }

    public static class getValueCardMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getValueCardMsg_args> {
      public getValueCardMsg() {
        super("getValueCardMsg");
      }

      public getValueCardMsg_args getEmptyArgsInstance() {
        return new getValueCardMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getValueCardMsg_result getResult(I iface, getValueCardMsg_args args) throws org.apache.thrift.TException {
        getValueCardMsg_result result = new getValueCardMsg_result();
        try {
          result.success = iface.getValueCardMsg(args.paraMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateValueCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateValueCard_args> {
      public updateValueCard() {
        super("updateValueCard");
      }

      public updateValueCard_args getEmptyArgsInstance() {
        return new updateValueCard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateValueCard_result getResult(I iface, updateValueCard_args args) throws org.apache.thrift.TException {
        updateValueCard_result result = new updateValueCard_result();
        try {
          result.success = iface.updateValueCard(args.paraMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getValueCardList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getValueCardList_args> {
      public getValueCardList() {
        super("getValueCardList");
      }

      public getValueCardList_args getEmptyArgsInstance() {
        return new getValueCardList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getValueCardList_result getResult(I iface, getValueCardList_args args) throws org.apache.thrift.TException {
        getValueCardList_result result = new getValueCardList_result();
        try {
          result.success = iface.getValueCardList(args.paraMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getValueCardBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getValueCardBalance_args> {
      public getValueCardBalance() {
        super("getValueCardBalance");
      }

      public getValueCardBalance_args getEmptyArgsInstance() {
        return new getValueCardBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getValueCardBalance_result getResult(I iface, getValueCardBalance_args args) throws org.apache.thrift.TException {
        getValueCardBalance_result result = new getValueCardBalance_result();
        try {
          result.success = iface.getValueCardBalance(args.paraMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class countCardNums<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countCardNums_args> {
      public countCardNums() {
        super("countCardNums");
      }

      public countCardNums_args getEmptyArgsInstance() {
        return new countCardNums_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countCardNums_result getResult(I iface, countCardNums_args args) throws org.apache.thrift.TException {
        countCardNums_result result = new countCardNums_result();
        try {
          result.success = iface.countCardNums(args.paraMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateCardStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCardStatus_args> {
      public updateCardStatus() {
        super("updateCardStatus");
      }

      public updateCardStatus_args getEmptyArgsInstance() {
        return new updateCardStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCardStatus_result getResult(I iface, updateCardStatus_args args) throws org.apache.thrift.TException {
        updateCardStatus_result result = new updateCardStatus_result();
        try {
          result.success = iface.updateCardStatus(args.paraMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getValueCardMsg", new getValueCardMsg());
      processMap.put("updateValueCard", new updateValueCard());
      processMap.put("getValueCardList", new getValueCardList());
      processMap.put("getValueCardBalance", new getValueCardBalance());
      processMap.put("countCardNums", new countCardNums());
      processMap.put("updateCardStatus", new updateCardStatus());
      return processMap;
    }

    public static class getValueCardMsg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getValueCardMsg_args, List<Map<String,String>>> {
      public getValueCardMsg() {
        super("getValueCardMsg");
      }

      public getValueCardMsg_args getEmptyArgsInstance() {
        return new getValueCardMsg_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getValueCardMsg_result result = new getValueCardMsg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getValueCardMsg_result result = new getValueCardMsg_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getValueCardMsg_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getValueCardMsg(args.paraMap,resultHandler);
      }
    }

    public static class updateValueCard<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateValueCard_args, ResponseData> {
      public updateValueCard() {
        super("updateValueCard");
      }

      public updateValueCard_args getEmptyArgsInstance() {
        return new updateValueCard_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            updateValueCard_result result = new updateValueCard_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateValueCard_result result = new updateValueCard_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateValueCard_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.updateValueCard(args.paraMap,resultHandler);
      }
    }

    public static class getValueCardList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getValueCardList_args, List<Map<String,String>>> {
      public getValueCardList() {
        super("getValueCardList");
      }

      public getValueCardList_args getEmptyArgsInstance() {
        return new getValueCardList_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getValueCardList_result result = new getValueCardList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getValueCardList_result result = new getValueCardList_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getValueCardList_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getValueCardList(args.paraMap,resultHandler);
      }
    }

    public static class getValueCardBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getValueCardBalance_args, Map<String,String>> {
      public getValueCardBalance() {
        super("getValueCardBalance");
      }

      public getValueCardBalance_args getEmptyArgsInstance() {
        return new getValueCardBalance_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getValueCardBalance_result result = new getValueCardBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getValueCardBalance_result result = new getValueCardBalance_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getValueCardBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getValueCardBalance(args.paraMap,resultHandler);
      }
    }

    public static class countCardNums<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countCardNums_args, Map<String,String>> {
      public countCardNums() {
        super("countCardNums");
      }

      public countCardNums_args getEmptyArgsInstance() {
        return new countCardNums_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            countCardNums_result result = new countCardNums_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countCardNums_result result = new countCardNums_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countCardNums_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.countCardNums(args.paraMap,resultHandler);
      }
    }

    public static class updateCardStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCardStatus_args, ResponseData> {
      public updateCardStatus() {
        super("updateCardStatus");
      }

      public updateCardStatus_args getEmptyArgsInstance() {
        return new updateCardStatus_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            updateCardStatus_result result = new updateCardStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCardStatus_result result = new updateCardStatus_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCardStatus_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.updateCardStatus(args.paraMap,resultHandler);
      }
    }

  }

  public static class getValueCardMsg_args implements org.apache.thrift.TBase<getValueCardMsg_args, getValueCardMsg_args._Fields>, java.io.Serializable, Cloneable, Comparable<getValueCardMsg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValueCardMsg_args");

    private static final org.apache.thrift.protocol.TField PARA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paraMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValueCardMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValueCardMsg_argsTupleSchemeFactory());
    }

    public Map<String,String> paraMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_MAP((short)1, "paraMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_MAP
            return PARA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_MAP, new org.apache.thrift.meta_data.FieldMetaData("paraMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValueCardMsg_args.class, metaDataMap);
    }

    public getValueCardMsg_args() {
    }

    public getValueCardMsg_args(
      Map<String,String> paraMap)
    {
      this();
      this.paraMap = paraMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValueCardMsg_args(getValueCardMsg_args other) {
      if (other.isSetParaMap()) {
        Map<String,String> __this__paraMap = new HashMap<String,String>(other.paraMap);
        this.paraMap = __this__paraMap;
      }
    }

    public getValueCardMsg_args deepCopy() {
      return new getValueCardMsg_args(this);
    }

    @Override
    public void clear() {
      this.paraMap = null;
    }

    public int getParaMapSize() {
      return (this.paraMap == null) ? 0 : this.paraMap.size();
    }

    public void putToParaMap(String key, String val) {
      if (this.paraMap == null) {
        this.paraMap = new HashMap<String,String>();
      }
      this.paraMap.put(key, val);
    }

    public Map<String,String> getParaMap() {
      return this.paraMap;
    }

    public getValueCardMsg_args setParaMap(Map<String,String> paraMap) {
      this.paraMap = paraMap;
      return this;
    }

    public void unsetParaMap() {
      this.paraMap = null;
    }

    /** Returns true if field paraMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParaMap() {
      return this.paraMap != null;
    }

    public void setParaMapIsSet(boolean value) {
      if (!value) {
        this.paraMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_MAP:
        if (value == null) {
          unsetParaMap();
        } else {
          setParaMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_MAP:
        return getParaMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_MAP:
        return isSetParaMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValueCardMsg_args)
        return this.equals((getValueCardMsg_args)that);
      return false;
    }

    public boolean equals(getValueCardMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_paraMap = true && this.isSetParaMap();
      boolean that_present_paraMap = true && that.isSetParaMap();
      if (this_present_paraMap || that_present_paraMap) {
        if (!(this_present_paraMap && that_present_paraMap))
          return false;
        if (!this.paraMap.equals(that.paraMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValueCardMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaMap()).compareTo(other.isSetParaMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraMap, other.paraMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValueCardMsg_args(");
      boolean first = true;

      sb.append("paraMap:");
      if (this.paraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paraMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValueCardMsg_argsStandardSchemeFactory implements SchemeFactory {
      public getValueCardMsg_argsStandardScheme getScheme() {
        return new getValueCardMsg_argsStandardScheme();
      }
    }

    private static class getValueCardMsg_argsStandardScheme extends StandardScheme<getValueCardMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValueCardMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.paraMap = new HashMap<String,String>(2*_map10.size);
                  for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                  {
                    String _key12;
                    String _val13;
                    _key12 = iprot.readString();
                    _val13 = iprot.readString();
                    struct.paraMap.put(_key12, _val13);
                  }
                  iprot.readMapEnd();
                }
                struct.setParaMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValueCardMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paraMap != null) {
          oprot.writeFieldBegin(PARA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paraMap.size()));
            for (Map.Entry<String, String> _iter14 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValueCardMsg_argsTupleSchemeFactory implements SchemeFactory {
      public getValueCardMsg_argsTupleScheme getScheme() {
        return new getValueCardMsg_argsTupleScheme();
      }
    }

    private static class getValueCardMsg_argsTupleScheme extends TupleScheme<getValueCardMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValueCardMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParaMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParaMap()) {
          {
            oprot.writeI32(struct.paraMap.size());
            for (Map.Entry<String, String> _iter15 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValueCardMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paraMap = new HashMap<String,String>(2*_map16.size);
            for (int _i17 = 0; _i17 < _map16.size; ++_i17)
            {
              String _key18;
              String _val19;
              _key18 = iprot.readString();
              _val19 = iprot.readString();
              struct.paraMap.put(_key18, _val19);
            }
          }
          struct.setParaMapIsSet(true);
        }
      }
    }

  }

  public static class getValueCardMsg_result implements org.apache.thrift.TBase<getValueCardMsg_result, getValueCardMsg_result._Fields>, java.io.Serializable, Cloneable, Comparable<getValueCardMsg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValueCardMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValueCardMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValueCardMsg_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValueCardMsg_result.class, metaDataMap);
    }

    public getValueCardMsg_result() {
    }

    public getValueCardMsg_result(
      List<Map<String,String>> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValueCardMsg_result(getValueCardMsg_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getValueCardMsg_result deepCopy() {
      return new getValueCardMsg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getValueCardMsg_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getValueCardMsg_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValueCardMsg_result)
        return this.equals((getValueCardMsg_result)that);
      return false;
    }

    public boolean equals(getValueCardMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValueCardMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValueCardMsg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValueCardMsg_resultStandardSchemeFactory implements SchemeFactory {
      public getValueCardMsg_resultStandardScheme getScheme() {
        return new getValueCardMsg_resultStandardScheme();
      }
    }

    private static class getValueCardMsg_resultStandardScheme extends StandardScheme<getValueCardMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValueCardMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list20.size);
                  for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                  {
                    Map<String,String> _elem22;
                    {
                      org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
                      _elem22 = new HashMap<String,String>(2*_map23.size);
                      for (int _i24 = 0; _i24 < _map23.size; ++_i24)
                      {
                        String _key25;
                        String _val26;
                        _key25 = iprot.readString();
                        _val26 = iprot.readString();
                        _elem22.put(_key25, _val26);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem22);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValueCardMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter27 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter27.size()));
                for (Map.Entry<String, String> _iter28 : _iter27.entrySet())
                {
                  oprot.writeString(_iter28.getKey());
                  oprot.writeString(_iter28.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValueCardMsg_resultTupleSchemeFactory implements SchemeFactory {
      public getValueCardMsg_resultTupleScheme getScheme() {
        return new getValueCardMsg_resultTupleScheme();
      }
    }

    private static class getValueCardMsg_resultTupleScheme extends TupleScheme<getValueCardMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValueCardMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter29 : struct.success)
            {
              {
                oprot.writeI32(_iter29.size());
                for (Map.Entry<String, String> _iter30 : _iter29.entrySet())
                {
                  oprot.writeString(_iter30.getKey());
                  oprot.writeString(_iter30.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValueCardMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              Map<String,String> _elem33;
              {
                org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem33 = new HashMap<String,String>(2*_map34.size);
                for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                {
                  String _key36;
                  String _val37;
                  _key36 = iprot.readString();
                  _val37 = iprot.readString();
                  _elem33.put(_key36, _val37);
                }
              }
              struct.success.add(_elem33);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateValueCard_args implements org.apache.thrift.TBase<updateValueCard_args, updateValueCard_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateValueCard_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateValueCard_args");

    private static final org.apache.thrift.protocol.TField PARA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paraMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateValueCard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateValueCard_argsTupleSchemeFactory());
    }

    public Map<String,String> paraMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_MAP((short)1, "paraMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_MAP
            return PARA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_MAP, new org.apache.thrift.meta_data.FieldMetaData("paraMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateValueCard_args.class, metaDataMap);
    }

    public updateValueCard_args() {
    }

    public updateValueCard_args(
      Map<String,String> paraMap)
    {
      this();
      this.paraMap = paraMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateValueCard_args(updateValueCard_args other) {
      if (other.isSetParaMap()) {
        Map<String,String> __this__paraMap = new HashMap<String,String>(other.paraMap);
        this.paraMap = __this__paraMap;
      }
    }

    public updateValueCard_args deepCopy() {
      return new updateValueCard_args(this);
    }

    @Override
    public void clear() {
      this.paraMap = null;
    }

    public int getParaMapSize() {
      return (this.paraMap == null) ? 0 : this.paraMap.size();
    }

    public void putToParaMap(String key, String val) {
      if (this.paraMap == null) {
        this.paraMap = new HashMap<String,String>();
      }
      this.paraMap.put(key, val);
    }

    public Map<String,String> getParaMap() {
      return this.paraMap;
    }

    public updateValueCard_args setParaMap(Map<String,String> paraMap) {
      this.paraMap = paraMap;
      return this;
    }

    public void unsetParaMap() {
      this.paraMap = null;
    }

    /** Returns true if field paraMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParaMap() {
      return this.paraMap != null;
    }

    public void setParaMapIsSet(boolean value) {
      if (!value) {
        this.paraMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_MAP:
        if (value == null) {
          unsetParaMap();
        } else {
          setParaMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_MAP:
        return getParaMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_MAP:
        return isSetParaMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateValueCard_args)
        return this.equals((updateValueCard_args)that);
      return false;
    }

    public boolean equals(updateValueCard_args that) {
      if (that == null)
        return false;

      boolean this_present_paraMap = true && this.isSetParaMap();
      boolean that_present_paraMap = true && that.isSetParaMap();
      if (this_present_paraMap || that_present_paraMap) {
        if (!(this_present_paraMap && that_present_paraMap))
          return false;
        if (!this.paraMap.equals(that.paraMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateValueCard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaMap()).compareTo(other.isSetParaMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraMap, other.paraMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateValueCard_args(");
      boolean first = true;

      sb.append("paraMap:");
      if (this.paraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paraMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateValueCard_argsStandardSchemeFactory implements SchemeFactory {
      public updateValueCard_argsStandardScheme getScheme() {
        return new updateValueCard_argsStandardScheme();
      }
    }

    private static class updateValueCard_argsStandardScheme extends StandardScheme<updateValueCard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateValueCard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                  struct.paraMap = new HashMap<String,String>(2*_map38.size);
                  for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                  {
                    String _key40;
                    String _val41;
                    _key40 = iprot.readString();
                    _val41 = iprot.readString();
                    struct.paraMap.put(_key40, _val41);
                  }
                  iprot.readMapEnd();
                }
                struct.setParaMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateValueCard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paraMap != null) {
          oprot.writeFieldBegin(PARA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paraMap.size()));
            for (Map.Entry<String, String> _iter42 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              oprot.writeString(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateValueCard_argsTupleSchemeFactory implements SchemeFactory {
      public updateValueCard_argsTupleScheme getScheme() {
        return new updateValueCard_argsTupleScheme();
      }
    }

    private static class updateValueCard_argsTupleScheme extends TupleScheme<updateValueCard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateValueCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParaMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParaMap()) {
          {
            oprot.writeI32(struct.paraMap.size());
            for (Map.Entry<String, String> _iter43 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter43.getKey());
              oprot.writeString(_iter43.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateValueCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paraMap = new HashMap<String,String>(2*_map44.size);
            for (int _i45 = 0; _i45 < _map44.size; ++_i45)
            {
              String _key46;
              String _val47;
              _key46 = iprot.readString();
              _val47 = iprot.readString();
              struct.paraMap.put(_key46, _val47);
            }
          }
          struct.setParaMapIsSet(true);
        }
      }
    }

  }

  public static class updateValueCard_result implements org.apache.thrift.TBase<updateValueCard_result, updateValueCard_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateValueCard_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateValueCard_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateValueCard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateValueCard_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateValueCard_result.class, metaDataMap);
    }

    public updateValueCard_result() {
    }

    public updateValueCard_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateValueCard_result(updateValueCard_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateValueCard_result deepCopy() {
      return new updateValueCard_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public updateValueCard_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateValueCard_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateValueCard_result)
        return this.equals((updateValueCard_result)that);
      return false;
    }

    public boolean equals(updateValueCard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateValueCard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateValueCard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateValueCard_resultStandardSchemeFactory implements SchemeFactory {
      public updateValueCard_resultStandardScheme getScheme() {
        return new updateValueCard_resultStandardScheme();
      }
    }

    private static class updateValueCard_resultStandardScheme extends StandardScheme<updateValueCard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateValueCard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateValueCard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateValueCard_resultTupleSchemeFactory implements SchemeFactory {
      public updateValueCard_resultTupleScheme getScheme() {
        return new updateValueCard_resultTupleScheme();
      }
    }

    private static class updateValueCard_resultTupleScheme extends TupleScheme<updateValueCard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateValueCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateValueCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getValueCardList_args implements org.apache.thrift.TBase<getValueCardList_args, getValueCardList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getValueCardList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValueCardList_args");

    private static final org.apache.thrift.protocol.TField PARA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paraMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValueCardList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValueCardList_argsTupleSchemeFactory());
    }

    public Map<String,String> paraMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_MAP((short)1, "paraMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_MAP
            return PARA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_MAP, new org.apache.thrift.meta_data.FieldMetaData("paraMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValueCardList_args.class, metaDataMap);
    }

    public getValueCardList_args() {
    }

    public getValueCardList_args(
      Map<String,String> paraMap)
    {
      this();
      this.paraMap = paraMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValueCardList_args(getValueCardList_args other) {
      if (other.isSetParaMap()) {
        Map<String,String> __this__paraMap = new HashMap<String,String>(other.paraMap);
        this.paraMap = __this__paraMap;
      }
    }

    public getValueCardList_args deepCopy() {
      return new getValueCardList_args(this);
    }

    @Override
    public void clear() {
      this.paraMap = null;
    }

    public int getParaMapSize() {
      return (this.paraMap == null) ? 0 : this.paraMap.size();
    }

    public void putToParaMap(String key, String val) {
      if (this.paraMap == null) {
        this.paraMap = new HashMap<String,String>();
      }
      this.paraMap.put(key, val);
    }

    public Map<String,String> getParaMap() {
      return this.paraMap;
    }

    public getValueCardList_args setParaMap(Map<String,String> paraMap) {
      this.paraMap = paraMap;
      return this;
    }

    public void unsetParaMap() {
      this.paraMap = null;
    }

    /** Returns true if field paraMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParaMap() {
      return this.paraMap != null;
    }

    public void setParaMapIsSet(boolean value) {
      if (!value) {
        this.paraMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_MAP:
        if (value == null) {
          unsetParaMap();
        } else {
          setParaMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_MAP:
        return getParaMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_MAP:
        return isSetParaMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValueCardList_args)
        return this.equals((getValueCardList_args)that);
      return false;
    }

    public boolean equals(getValueCardList_args that) {
      if (that == null)
        return false;

      boolean this_present_paraMap = true && this.isSetParaMap();
      boolean that_present_paraMap = true && that.isSetParaMap();
      if (this_present_paraMap || that_present_paraMap) {
        if (!(this_present_paraMap && that_present_paraMap))
          return false;
        if (!this.paraMap.equals(that.paraMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValueCardList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaMap()).compareTo(other.isSetParaMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraMap, other.paraMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValueCardList_args(");
      boolean first = true;

      sb.append("paraMap:");
      if (this.paraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paraMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValueCardList_argsStandardSchemeFactory implements SchemeFactory {
      public getValueCardList_argsStandardScheme getScheme() {
        return new getValueCardList_argsStandardScheme();
      }
    }

    private static class getValueCardList_argsStandardScheme extends StandardScheme<getValueCardList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValueCardList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.paraMap = new HashMap<String,String>(2*_map48.size);
                  for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                  {
                    String _key50;
                    String _val51;
                    _key50 = iprot.readString();
                    _val51 = iprot.readString();
                    struct.paraMap.put(_key50, _val51);
                  }
                  iprot.readMapEnd();
                }
                struct.setParaMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValueCardList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paraMap != null) {
          oprot.writeFieldBegin(PARA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paraMap.size()));
            for (Map.Entry<String, String> _iter52 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              oprot.writeString(_iter52.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValueCardList_argsTupleSchemeFactory implements SchemeFactory {
      public getValueCardList_argsTupleScheme getScheme() {
        return new getValueCardList_argsTupleScheme();
      }
    }

    private static class getValueCardList_argsTupleScheme extends TupleScheme<getValueCardList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValueCardList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParaMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParaMap()) {
          {
            oprot.writeI32(struct.paraMap.size());
            for (Map.Entry<String, String> _iter53 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              oprot.writeString(_iter53.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValueCardList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paraMap = new HashMap<String,String>(2*_map54.size);
            for (int _i55 = 0; _i55 < _map54.size; ++_i55)
            {
              String _key56;
              String _val57;
              _key56 = iprot.readString();
              _val57 = iprot.readString();
              struct.paraMap.put(_key56, _val57);
            }
          }
          struct.setParaMapIsSet(true);
        }
      }
    }

  }

  public static class getValueCardList_result implements org.apache.thrift.TBase<getValueCardList_result, getValueCardList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getValueCardList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValueCardList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValueCardList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValueCardList_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValueCardList_result.class, metaDataMap);
    }

    public getValueCardList_result() {
    }

    public getValueCardList_result(
      List<Map<String,String>> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValueCardList_result(getValueCardList_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getValueCardList_result deepCopy() {
      return new getValueCardList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getValueCardList_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getValueCardList_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValueCardList_result)
        return this.equals((getValueCardList_result)that);
      return false;
    }

    public boolean equals(getValueCardList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValueCardList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValueCardList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValueCardList_resultStandardSchemeFactory implements SchemeFactory {
      public getValueCardList_resultStandardScheme getScheme() {
        return new getValueCardList_resultStandardScheme();
      }
    }

    private static class getValueCardList_resultStandardScheme extends StandardScheme<getValueCardList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValueCardList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list58.size);
                  for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                  {
                    Map<String,String> _elem60;
                    {
                      org.apache.thrift.protocol.TMap _map61 = iprot.readMapBegin();
                      _elem60 = new HashMap<String,String>(2*_map61.size);
                      for (int _i62 = 0; _i62 < _map61.size; ++_i62)
                      {
                        String _key63;
                        String _val64;
                        _key63 = iprot.readString();
                        _val64 = iprot.readString();
                        _elem60.put(_key63, _val64);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValueCardList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter65 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter65.size()));
                for (Map.Entry<String, String> _iter66 : _iter65.entrySet())
                {
                  oprot.writeString(_iter66.getKey());
                  oprot.writeString(_iter66.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValueCardList_resultTupleSchemeFactory implements SchemeFactory {
      public getValueCardList_resultTupleScheme getScheme() {
        return new getValueCardList_resultTupleScheme();
      }
    }

    private static class getValueCardList_resultTupleScheme extends TupleScheme<getValueCardList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValueCardList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter67 : struct.success)
            {
              {
                oprot.writeI32(_iter67.size());
                for (Map.Entry<String, String> _iter68 : _iter67.entrySet())
                {
                  oprot.writeString(_iter68.getKey());
                  oprot.writeString(_iter68.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValueCardList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              Map<String,String> _elem71;
              {
                org.apache.thrift.protocol.TMap _map72 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem71 = new HashMap<String,String>(2*_map72.size);
                for (int _i73 = 0; _i73 < _map72.size; ++_i73)
                {
                  String _key74;
                  String _val75;
                  _key74 = iprot.readString();
                  _val75 = iprot.readString();
                  _elem71.put(_key74, _val75);
                }
              }
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getValueCardBalance_args implements org.apache.thrift.TBase<getValueCardBalance_args, getValueCardBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getValueCardBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValueCardBalance_args");

    private static final org.apache.thrift.protocol.TField PARA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paraMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValueCardBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValueCardBalance_argsTupleSchemeFactory());
    }

    public Map<String,String> paraMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_MAP((short)1, "paraMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_MAP
            return PARA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_MAP, new org.apache.thrift.meta_data.FieldMetaData("paraMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValueCardBalance_args.class, metaDataMap);
    }

    public getValueCardBalance_args() {
    }

    public getValueCardBalance_args(
      Map<String,String> paraMap)
    {
      this();
      this.paraMap = paraMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValueCardBalance_args(getValueCardBalance_args other) {
      if (other.isSetParaMap()) {
        Map<String,String> __this__paraMap = new HashMap<String,String>(other.paraMap);
        this.paraMap = __this__paraMap;
      }
    }

    public getValueCardBalance_args deepCopy() {
      return new getValueCardBalance_args(this);
    }

    @Override
    public void clear() {
      this.paraMap = null;
    }

    public int getParaMapSize() {
      return (this.paraMap == null) ? 0 : this.paraMap.size();
    }

    public void putToParaMap(String key, String val) {
      if (this.paraMap == null) {
        this.paraMap = new HashMap<String,String>();
      }
      this.paraMap.put(key, val);
    }

    public Map<String,String> getParaMap() {
      return this.paraMap;
    }

    public getValueCardBalance_args setParaMap(Map<String,String> paraMap) {
      this.paraMap = paraMap;
      return this;
    }

    public void unsetParaMap() {
      this.paraMap = null;
    }

    /** Returns true if field paraMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParaMap() {
      return this.paraMap != null;
    }

    public void setParaMapIsSet(boolean value) {
      if (!value) {
        this.paraMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_MAP:
        if (value == null) {
          unsetParaMap();
        } else {
          setParaMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_MAP:
        return getParaMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_MAP:
        return isSetParaMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValueCardBalance_args)
        return this.equals((getValueCardBalance_args)that);
      return false;
    }

    public boolean equals(getValueCardBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_paraMap = true && this.isSetParaMap();
      boolean that_present_paraMap = true && that.isSetParaMap();
      if (this_present_paraMap || that_present_paraMap) {
        if (!(this_present_paraMap && that_present_paraMap))
          return false;
        if (!this.paraMap.equals(that.paraMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValueCardBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaMap()).compareTo(other.isSetParaMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraMap, other.paraMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValueCardBalance_args(");
      boolean first = true;

      sb.append("paraMap:");
      if (this.paraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paraMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValueCardBalance_argsStandardSchemeFactory implements SchemeFactory {
      public getValueCardBalance_argsStandardScheme getScheme() {
        return new getValueCardBalance_argsStandardScheme();
      }
    }

    private static class getValueCardBalance_argsStandardScheme extends StandardScheme<getValueCardBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValueCardBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                  struct.paraMap = new HashMap<String,String>(2*_map76.size);
                  for (int _i77 = 0; _i77 < _map76.size; ++_i77)
                  {
                    String _key78;
                    String _val79;
                    _key78 = iprot.readString();
                    _val79 = iprot.readString();
                    struct.paraMap.put(_key78, _val79);
                  }
                  iprot.readMapEnd();
                }
                struct.setParaMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValueCardBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paraMap != null) {
          oprot.writeFieldBegin(PARA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paraMap.size()));
            for (Map.Entry<String, String> _iter80 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter80.getKey());
              oprot.writeString(_iter80.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValueCardBalance_argsTupleSchemeFactory implements SchemeFactory {
      public getValueCardBalance_argsTupleScheme getScheme() {
        return new getValueCardBalance_argsTupleScheme();
      }
    }

    private static class getValueCardBalance_argsTupleScheme extends TupleScheme<getValueCardBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValueCardBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParaMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParaMap()) {
          {
            oprot.writeI32(struct.paraMap.size());
            for (Map.Entry<String, String> _iter81 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              oprot.writeString(_iter81.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValueCardBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paraMap = new HashMap<String,String>(2*_map82.size);
            for (int _i83 = 0; _i83 < _map82.size; ++_i83)
            {
              String _key84;
              String _val85;
              _key84 = iprot.readString();
              _val85 = iprot.readString();
              struct.paraMap.put(_key84, _val85);
            }
          }
          struct.setParaMapIsSet(true);
        }
      }
    }

  }

  public static class getValueCardBalance_result implements org.apache.thrift.TBase<getValueCardBalance_result, getValueCardBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getValueCardBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValueCardBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValueCardBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValueCardBalance_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValueCardBalance_result.class, metaDataMap);
    }

    public getValueCardBalance_result() {
    }

    public getValueCardBalance_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValueCardBalance_result(getValueCardBalance_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getValueCardBalance_result deepCopy() {
      return new getValueCardBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getValueCardBalance_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getValueCardBalance_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValueCardBalance_result)
        return this.equals((getValueCardBalance_result)that);
      return false;
    }

    public boolean equals(getValueCardBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValueCardBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValueCardBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValueCardBalance_resultStandardSchemeFactory implements SchemeFactory {
      public getValueCardBalance_resultStandardScheme getScheme() {
        return new getValueCardBalance_resultStandardScheme();
      }
    }

    private static class getValueCardBalance_resultStandardScheme extends StandardScheme<getValueCardBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValueCardBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map86.size);
                  for (int _i87 = 0; _i87 < _map86.size; ++_i87)
                  {
                    String _key88;
                    String _val89;
                    _key88 = iprot.readString();
                    _val89 = iprot.readString();
                    struct.success.put(_key88, _val89);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValueCardBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter90 : struct.success.entrySet())
            {
              oprot.writeString(_iter90.getKey());
              oprot.writeString(_iter90.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValueCardBalance_resultTupleSchemeFactory implements SchemeFactory {
      public getValueCardBalance_resultTupleScheme getScheme() {
        return new getValueCardBalance_resultTupleScheme();
      }
    }

    private static class getValueCardBalance_resultTupleScheme extends TupleScheme<getValueCardBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValueCardBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter91 : struct.success.entrySet())
            {
              oprot.writeString(_iter91.getKey());
              oprot.writeString(_iter91.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValueCardBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map92.size);
            for (int _i93 = 0; _i93 < _map92.size; ++_i93)
            {
              String _key94;
              String _val95;
              _key94 = iprot.readString();
              _val95 = iprot.readString();
              struct.success.put(_key94, _val95);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class countCardNums_args implements org.apache.thrift.TBase<countCardNums_args, countCardNums_args._Fields>, java.io.Serializable, Cloneable, Comparable<countCardNums_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCardNums_args");

    private static final org.apache.thrift.protocol.TField PARA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paraMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countCardNums_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countCardNums_argsTupleSchemeFactory());
    }

    public Map<String,String> paraMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_MAP((short)1, "paraMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_MAP
            return PARA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_MAP, new org.apache.thrift.meta_data.FieldMetaData("paraMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCardNums_args.class, metaDataMap);
    }

    public countCardNums_args() {
    }

    public countCardNums_args(
      Map<String,String> paraMap)
    {
      this();
      this.paraMap = paraMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCardNums_args(countCardNums_args other) {
      if (other.isSetParaMap()) {
        Map<String,String> __this__paraMap = new HashMap<String,String>(other.paraMap);
        this.paraMap = __this__paraMap;
      }
    }

    public countCardNums_args deepCopy() {
      return new countCardNums_args(this);
    }

    @Override
    public void clear() {
      this.paraMap = null;
    }

    public int getParaMapSize() {
      return (this.paraMap == null) ? 0 : this.paraMap.size();
    }

    public void putToParaMap(String key, String val) {
      if (this.paraMap == null) {
        this.paraMap = new HashMap<String,String>();
      }
      this.paraMap.put(key, val);
    }

    public Map<String,String> getParaMap() {
      return this.paraMap;
    }

    public countCardNums_args setParaMap(Map<String,String> paraMap) {
      this.paraMap = paraMap;
      return this;
    }

    public void unsetParaMap() {
      this.paraMap = null;
    }

    /** Returns true if field paraMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParaMap() {
      return this.paraMap != null;
    }

    public void setParaMapIsSet(boolean value) {
      if (!value) {
        this.paraMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_MAP:
        if (value == null) {
          unsetParaMap();
        } else {
          setParaMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_MAP:
        return getParaMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_MAP:
        return isSetParaMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countCardNums_args)
        return this.equals((countCardNums_args)that);
      return false;
    }

    public boolean equals(countCardNums_args that) {
      if (that == null)
        return false;

      boolean this_present_paraMap = true && this.isSetParaMap();
      boolean that_present_paraMap = true && that.isSetParaMap();
      if (this_present_paraMap || that_present_paraMap) {
        if (!(this_present_paraMap && that_present_paraMap))
          return false;
        if (!this.paraMap.equals(that.paraMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(countCardNums_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaMap()).compareTo(other.isSetParaMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraMap, other.paraMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countCardNums_args(");
      boolean first = true;

      sb.append("paraMap:");
      if (this.paraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paraMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCardNums_argsStandardSchemeFactory implements SchemeFactory {
      public countCardNums_argsStandardScheme getScheme() {
        return new countCardNums_argsStandardScheme();
      }
    }

    private static class countCardNums_argsStandardScheme extends StandardScheme<countCardNums_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCardNums_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                  struct.paraMap = new HashMap<String,String>(2*_map96.size);
                  for (int _i97 = 0; _i97 < _map96.size; ++_i97)
                  {
                    String _key98;
                    String _val99;
                    _key98 = iprot.readString();
                    _val99 = iprot.readString();
                    struct.paraMap.put(_key98, _val99);
                  }
                  iprot.readMapEnd();
                }
                struct.setParaMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCardNums_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paraMap != null) {
          oprot.writeFieldBegin(PARA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paraMap.size()));
            for (Map.Entry<String, String> _iter100 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter100.getKey());
              oprot.writeString(_iter100.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCardNums_argsTupleSchemeFactory implements SchemeFactory {
      public countCardNums_argsTupleScheme getScheme() {
        return new countCardNums_argsTupleScheme();
      }
    }

    private static class countCardNums_argsTupleScheme extends TupleScheme<countCardNums_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCardNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParaMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParaMap()) {
          {
            oprot.writeI32(struct.paraMap.size());
            for (Map.Entry<String, String> _iter101 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter101.getKey());
              oprot.writeString(_iter101.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCardNums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map102 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paraMap = new HashMap<String,String>(2*_map102.size);
            for (int _i103 = 0; _i103 < _map102.size; ++_i103)
            {
              String _key104;
              String _val105;
              _key104 = iprot.readString();
              _val105 = iprot.readString();
              struct.paraMap.put(_key104, _val105);
            }
          }
          struct.setParaMapIsSet(true);
        }
      }
    }

  }

  public static class countCardNums_result implements org.apache.thrift.TBase<countCardNums_result, countCardNums_result._Fields>, java.io.Serializable, Cloneable, Comparable<countCardNums_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCardNums_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countCardNums_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countCardNums_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCardNums_result.class, metaDataMap);
    }

    public countCardNums_result() {
    }

    public countCardNums_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCardNums_result(countCardNums_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public countCardNums_result deepCopy() {
      return new countCardNums_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public countCardNums_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public countCardNums_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countCardNums_result)
        return this.equals((countCardNums_result)that);
      return false;
    }

    public boolean equals(countCardNums_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(countCardNums_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countCardNums_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCardNums_resultStandardSchemeFactory implements SchemeFactory {
      public countCardNums_resultStandardScheme getScheme() {
        return new countCardNums_resultStandardScheme();
      }
    }

    private static class countCardNums_resultStandardScheme extends StandardScheme<countCardNums_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCardNums_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map106.size);
                  for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                  {
                    String _key108;
                    String _val109;
                    _key108 = iprot.readString();
                    _val109 = iprot.readString();
                    struct.success.put(_key108, _val109);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCardNums_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter110 : struct.success.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              oprot.writeString(_iter110.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCardNums_resultTupleSchemeFactory implements SchemeFactory {
      public countCardNums_resultTupleScheme getScheme() {
        return new countCardNums_resultTupleScheme();
      }
    }

    private static class countCardNums_resultTupleScheme extends TupleScheme<countCardNums_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCardNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter111 : struct.success.entrySet())
            {
              oprot.writeString(_iter111.getKey());
              oprot.writeString(_iter111.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCardNums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map112.size);
            for (int _i113 = 0; _i113 < _map112.size; ++_i113)
            {
              String _key114;
              String _val115;
              _key114 = iprot.readString();
              _val115 = iprot.readString();
              struct.success.put(_key114, _val115);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateCardStatus_args implements org.apache.thrift.TBase<updateCardStatus_args, updateCardStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCardStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCardStatus_args");

    private static final org.apache.thrift.protocol.TField PARA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paraMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCardStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCardStatus_argsTupleSchemeFactory());
    }

    public Map<String,String> paraMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_MAP((short)1, "paraMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_MAP
            return PARA_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_MAP, new org.apache.thrift.meta_data.FieldMetaData("paraMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCardStatus_args.class, metaDataMap);
    }

    public updateCardStatus_args() {
    }

    public updateCardStatus_args(
      Map<String,String> paraMap)
    {
      this();
      this.paraMap = paraMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCardStatus_args(updateCardStatus_args other) {
      if (other.isSetParaMap()) {
        Map<String,String> __this__paraMap = new HashMap<String,String>(other.paraMap);
        this.paraMap = __this__paraMap;
      }
    }

    public updateCardStatus_args deepCopy() {
      return new updateCardStatus_args(this);
    }

    @Override
    public void clear() {
      this.paraMap = null;
    }

    public int getParaMapSize() {
      return (this.paraMap == null) ? 0 : this.paraMap.size();
    }

    public void putToParaMap(String key, String val) {
      if (this.paraMap == null) {
        this.paraMap = new HashMap<String,String>();
      }
      this.paraMap.put(key, val);
    }

    public Map<String,String> getParaMap() {
      return this.paraMap;
    }

    public updateCardStatus_args setParaMap(Map<String,String> paraMap) {
      this.paraMap = paraMap;
      return this;
    }

    public void unsetParaMap() {
      this.paraMap = null;
    }

    /** Returns true if field paraMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParaMap() {
      return this.paraMap != null;
    }

    public void setParaMapIsSet(boolean value) {
      if (!value) {
        this.paraMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_MAP:
        if (value == null) {
          unsetParaMap();
        } else {
          setParaMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_MAP:
        return getParaMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_MAP:
        return isSetParaMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCardStatus_args)
        return this.equals((updateCardStatus_args)that);
      return false;
    }

    public boolean equals(updateCardStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_paraMap = true && this.isSetParaMap();
      boolean that_present_paraMap = true && that.isSetParaMap();
      if (this_present_paraMap || that_present_paraMap) {
        if (!(this_present_paraMap && that_present_paraMap))
          return false;
        if (!this.paraMap.equals(that.paraMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateCardStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaMap()).compareTo(other.isSetParaMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraMap, other.paraMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCardStatus_args(");
      boolean first = true;

      sb.append("paraMap:");
      if (this.paraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paraMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCardStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateCardStatus_argsStandardScheme getScheme() {
        return new updateCardStatus_argsStandardScheme();
      }
    }

    private static class updateCardStatus_argsStandardScheme extends StandardScheme<updateCardStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCardStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                  struct.paraMap = new HashMap<String,String>(2*_map116.size);
                  for (int _i117 = 0; _i117 < _map116.size; ++_i117)
                  {
                    String _key118;
                    String _val119;
                    _key118 = iprot.readString();
                    _val119 = iprot.readString();
                    struct.paraMap.put(_key118, _val119);
                  }
                  iprot.readMapEnd();
                }
                struct.setParaMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCardStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paraMap != null) {
          oprot.writeFieldBegin(PARA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paraMap.size()));
            for (Map.Entry<String, String> _iter120 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter120.getKey());
              oprot.writeString(_iter120.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCardStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateCardStatus_argsTupleScheme getScheme() {
        return new updateCardStatus_argsTupleScheme();
      }
    }

    private static class updateCardStatus_argsTupleScheme extends TupleScheme<updateCardStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCardStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParaMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParaMap()) {
          {
            oprot.writeI32(struct.paraMap.size());
            for (Map.Entry<String, String> _iter121 : struct.paraMap.entrySet())
            {
              oprot.writeString(_iter121.getKey());
              oprot.writeString(_iter121.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCardStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paraMap = new HashMap<String,String>(2*_map122.size);
            for (int _i123 = 0; _i123 < _map122.size; ++_i123)
            {
              String _key124;
              String _val125;
              _key124 = iprot.readString();
              _val125 = iprot.readString();
              struct.paraMap.put(_key124, _val125);
            }
          }
          struct.setParaMapIsSet(true);
        }
      }
    }

  }

  public static class updateCardStatus_result implements org.apache.thrift.TBase<updateCardStatus_result, updateCardStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCardStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCardStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCardStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCardStatus_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCardStatus_result.class, metaDataMap);
    }

    public updateCardStatus_result() {
    }

    public updateCardStatus_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCardStatus_result(updateCardStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateCardStatus_result deepCopy() {
      return new updateCardStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public updateCardStatus_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateCardStatus_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCardStatus_result)
        return this.equals((updateCardStatus_result)that);
      return false;
    }

    public boolean equals(updateCardStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateCardStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCardStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCardStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateCardStatus_resultStandardScheme getScheme() {
        return new updateCardStatus_resultStandardScheme();
      }
    }

    private static class updateCardStatus_resultStandardScheme extends StandardScheme<updateCardStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCardStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCardStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCardStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateCardStatus_resultTupleScheme getScheme() {
        return new updateCardStatus_resultTupleScheme();
      }
    }

    private static class updateCardStatus_resultTupleScheme extends TupleScheme<updateCardStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCardStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCardStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
