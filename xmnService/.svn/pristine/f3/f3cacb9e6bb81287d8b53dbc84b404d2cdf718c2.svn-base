package com.xmniao.xmn.core.thrift;


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class XmerWalletService {

  /**
   * 寻蜜客钱包服务类
   */
  public interface Iface {

    public ResponseData addXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData lockXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData getXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData getXmerWalletState(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

    public ResponseData turnOutXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lockXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getXmerWalletState(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void turnOutXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResponseData addXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_addXmerWallet(walletMap);
      return recv_addXmerWallet();
    }

    public void send_addXmerWallet(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      addXmerWallet_args args = new addXmerWallet_args();
      args.setWalletMap(walletMap);
      sendBase("addXmerWallet", args);
    }

    public ResponseData recv_addXmerWallet() throws FailureException, org.apache.thrift.TException
    {
      addXmerWallet_result result = new addXmerWallet_result();
      receiveBase(result, "addXmerWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addXmerWallet failed: unknown result");
    }

    public ResponseData lockXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_lockXmerWallet(walletMap);
      return recv_lockXmerWallet();
    }

    public void send_lockXmerWallet(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      lockXmerWallet_args args = new lockXmerWallet_args();
      args.setWalletMap(walletMap);
      sendBase("lockXmerWallet", args);
    }

    public ResponseData recv_lockXmerWallet() throws FailureException, org.apache.thrift.TException
    {
      lockXmerWallet_result result = new lockXmerWallet_result();
      receiveBase(result, "lockXmerWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lockXmerWallet failed: unknown result");
    }

    public ResponseData getXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getXmerWallet(walletMap);
      return recv_getXmerWallet();
    }

    public void send_getXmerWallet(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getXmerWallet_args args = new getXmerWallet_args();
      args.setWalletMap(walletMap);
      sendBase("getXmerWallet", args);
    }

    public ResponseData recv_getXmerWallet() throws FailureException, org.apache.thrift.TException
    {
      getXmerWallet_result result = new getXmerWallet_result();
      receiveBase(result, "getXmerWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getXmerWallet failed: unknown result");
    }

    public ResponseData getXmerWalletState(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_getXmerWalletState(walletMap);
      return recv_getXmerWalletState();
    }

    public void send_getXmerWalletState(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      getXmerWalletState_args args = new getXmerWalletState_args();
      args.setWalletMap(walletMap);
      sendBase("getXmerWalletState", args);
    }

    public ResponseData recv_getXmerWalletState() throws FailureException, org.apache.thrift.TException
    {
      getXmerWalletState_result result = new getXmerWalletState_result();
      receiveBase(result, "getXmerWalletState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getXmerWalletState failed: unknown result");
    }

    public ResponseData turnOutXmerWallet(Map<String,String> walletMap) throws FailureException, org.apache.thrift.TException
    {
      send_turnOutXmerWallet(walletMap);
      return recv_turnOutXmerWallet();
    }

    public void send_turnOutXmerWallet(Map<String,String> walletMap) throws org.apache.thrift.TException
    {
      turnOutXmerWallet_args args = new turnOutXmerWallet_args();
      args.setWalletMap(walletMap);
      sendBase("turnOutXmerWallet", args);
    }

    public ResponseData recv_turnOutXmerWallet() throws FailureException, org.apache.thrift.TException
    {
      turnOutXmerWallet_result result = new turnOutXmerWallet_result();
      receiveBase(result, "turnOutXmerWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "turnOutXmerWallet failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addXmerWallet_call method_call = new addXmerWallet_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addXmerWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public addXmerWallet_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addXmerWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addXmerWallet_args args = new addXmerWallet_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addXmerWallet();
      }
    }

    public void lockXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lockXmerWallet_call method_call = new lockXmerWallet_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lockXmerWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public lockXmerWallet_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lockXmerWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lockXmerWallet_args args = new lockXmerWallet_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lockXmerWallet();
      }
    }

    public void getXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getXmerWallet_call method_call = new getXmerWallet_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getXmerWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getXmerWallet_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getXmerWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getXmerWallet_args args = new getXmerWallet_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getXmerWallet();
      }
    }

    public void getXmerWalletState(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getXmerWalletState_call method_call = new getXmerWalletState_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getXmerWalletState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public getXmerWalletState_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getXmerWalletState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getXmerWalletState_args args = new getXmerWalletState_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getXmerWalletState();
      }
    }

    public void turnOutXmerWallet(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      turnOutXmerWallet_call method_call = new turnOutXmerWallet_call(walletMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class turnOutXmerWallet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> walletMap;
      public turnOutXmerWallet_call(Map<String,String> walletMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletMap = walletMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("turnOutXmerWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        turnOutXmerWallet_args args = new turnOutXmerWallet_args();
        args.setWalletMap(walletMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResponseData getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_turnOutXmerWallet();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addXmerWallet", new addXmerWallet());
      processMap.put("lockXmerWallet", new lockXmerWallet());
      processMap.put("getXmerWallet", new getXmerWallet());
      processMap.put("getXmerWalletState", new getXmerWalletState());
      processMap.put("turnOutXmerWallet", new turnOutXmerWallet());
      return processMap;
    }

    public static class addXmerWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addXmerWallet_args> {
      public addXmerWallet() {
        super("addXmerWallet");
      }

      public addXmerWallet_args getEmptyArgsInstance() {
        return new addXmerWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addXmerWallet_result getResult(I iface, addXmerWallet_args args) throws org.apache.thrift.TException {
        addXmerWallet_result result = new addXmerWallet_result();
        try {
          result.success = iface.addXmerWallet(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class lockXmerWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lockXmerWallet_args> {
      public lockXmerWallet() {
        super("lockXmerWallet");
      }

      public lockXmerWallet_args getEmptyArgsInstance() {
        return new lockXmerWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lockXmerWallet_result getResult(I iface, lockXmerWallet_args args) throws org.apache.thrift.TException {
        lockXmerWallet_result result = new lockXmerWallet_result();
        try {
          result.success = iface.lockXmerWallet(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getXmerWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getXmerWallet_args> {
      public getXmerWallet() {
        super("getXmerWallet");
      }

      public getXmerWallet_args getEmptyArgsInstance() {
        return new getXmerWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getXmerWallet_result getResult(I iface, getXmerWallet_args args) throws org.apache.thrift.TException {
        getXmerWallet_result result = new getXmerWallet_result();
        try {
          result.success = iface.getXmerWallet(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class getXmerWalletState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getXmerWalletState_args> {
      public getXmerWalletState() {
        super("getXmerWalletState");
      }

      public getXmerWalletState_args getEmptyArgsInstance() {
        return new getXmerWalletState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getXmerWalletState_result getResult(I iface, getXmerWalletState_args args) throws org.apache.thrift.TException {
        getXmerWalletState_result result = new getXmerWalletState_result();
        try {
          result.success = iface.getXmerWalletState(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class turnOutXmerWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, turnOutXmerWallet_args> {
      public turnOutXmerWallet() {
        super("turnOutXmerWallet");
      }

      public turnOutXmerWallet_args getEmptyArgsInstance() {
        return new turnOutXmerWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public turnOutXmerWallet_result getResult(I iface, turnOutXmerWallet_args args) throws org.apache.thrift.TException {
        turnOutXmerWallet_result result = new turnOutXmerWallet_result();
        try {
          result.success = iface.turnOutXmerWallet(args.walletMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addXmerWallet", new addXmerWallet());
      processMap.put("lockXmerWallet", new lockXmerWallet());
      processMap.put("getXmerWallet", new getXmerWallet());
      processMap.put("getXmerWalletState", new getXmerWalletState());
      processMap.put("turnOutXmerWallet", new turnOutXmerWallet());
      return processMap;
    }

    public static class addXmerWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addXmerWallet_args, ResponseData> {
      public addXmerWallet() {
        super("addXmerWallet");
      }

      public addXmerWallet_args getEmptyArgsInstance() {
        return new addXmerWallet_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            addXmerWallet_result result = new addXmerWallet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addXmerWallet_result result = new addXmerWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addXmerWallet_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.addXmerWallet(args.walletMap,resultHandler);
      }
    }

    public static class lockXmerWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lockXmerWallet_args, ResponseData> {
      public lockXmerWallet() {
        super("lockXmerWallet");
      }

      public lockXmerWallet_args getEmptyArgsInstance() {
        return new lockXmerWallet_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            lockXmerWallet_result result = new lockXmerWallet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lockXmerWallet_result result = new lockXmerWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lockXmerWallet_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.lockXmerWallet(args.walletMap,resultHandler);
      }
    }

    public static class getXmerWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getXmerWallet_args, ResponseData> {
      public getXmerWallet() {
        super("getXmerWallet");
      }

      public getXmerWallet_args getEmptyArgsInstance() {
        return new getXmerWallet_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            getXmerWallet_result result = new getXmerWallet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getXmerWallet_result result = new getXmerWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getXmerWallet_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.getXmerWallet(args.walletMap,resultHandler);
      }
    }

    public static class getXmerWalletState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getXmerWalletState_args, ResponseData> {
      public getXmerWalletState() {
        super("getXmerWalletState");
      }

      public getXmerWalletState_args getEmptyArgsInstance() {
        return new getXmerWalletState_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            getXmerWalletState_result result = new getXmerWalletState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getXmerWalletState_result result = new getXmerWalletState_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getXmerWalletState_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.getXmerWalletState(args.walletMap,resultHandler);
      }
    }

    public static class turnOutXmerWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, turnOutXmerWallet_args, ResponseData> {
      public turnOutXmerWallet() {
        super("turnOutXmerWallet");
      }

      public turnOutXmerWallet_args getEmptyArgsInstance() {
        return new turnOutXmerWallet_args();
      }

      public AsyncMethodCallback<ResponseData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResponseData>() { 
          public void onComplete(ResponseData o) {
            turnOutXmerWallet_result result = new turnOutXmerWallet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            turnOutXmerWallet_result result = new turnOutXmerWallet_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, turnOutXmerWallet_args args, org.apache.thrift.async.AsyncMethodCallback<ResponseData> resultHandler) throws TException {
        iface.turnOutXmerWallet(args.walletMap,resultHandler);
      }
    }

  }

  public static class addXmerWallet_args implements org.apache.thrift.TBase<addXmerWallet_args, addXmerWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<addXmerWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addXmerWallet_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addXmerWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addXmerWallet_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addXmerWallet_args.class, metaDataMap);
    }

    public addXmerWallet_args() {
    }

    public addXmerWallet_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addXmerWallet_args(addXmerWallet_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public addXmerWallet_args deepCopy() {
      return new addXmerWallet_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public addXmerWallet_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addXmerWallet_args)
        return this.equals((addXmerWallet_args)that);
      return false;
    }

    public boolean equals(addXmerWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addXmerWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addXmerWallet_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addXmerWallet_argsStandardSchemeFactory implements SchemeFactory {
      public addXmerWallet_argsStandardScheme getScheme() {
        return new addXmerWallet_argsStandardScheme();
      }
    }

    private static class addXmerWallet_argsStandardScheme extends StandardScheme<addXmerWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addXmerWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map10.size);
                  for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                  {
                    String _key12;
                    String _val13;
                    _key12 = iprot.readString();
                    _val13 = iprot.readString();
                    struct.walletMap.put(_key12, _val13);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addXmerWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter14 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addXmerWallet_argsTupleSchemeFactory implements SchemeFactory {
      public addXmerWallet_argsTupleScheme getScheme() {
        return new addXmerWallet_argsTupleScheme();
      }
    }

    private static class addXmerWallet_argsTupleScheme extends TupleScheme<addXmerWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter15 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map16.size);
            for (int _i17 = 0; _i17 < _map16.size; ++_i17)
            {
              String _key18;
              String _val19;
              _key18 = iprot.readString();
              _val19 = iprot.readString();
              struct.walletMap.put(_key18, _val19);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class addXmerWallet_result implements org.apache.thrift.TBase<addXmerWallet_result, addXmerWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<addXmerWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addXmerWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addXmerWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addXmerWallet_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addXmerWallet_result.class, metaDataMap);
    }

    public addXmerWallet_result() {
    }

    public addXmerWallet_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addXmerWallet_result(addXmerWallet_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public addXmerWallet_result deepCopy() {
      return new addXmerWallet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public addXmerWallet_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public addXmerWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addXmerWallet_result)
        return this.equals((addXmerWallet_result)that);
      return false;
    }

    public boolean equals(addXmerWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addXmerWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addXmerWallet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addXmerWallet_resultStandardSchemeFactory implements SchemeFactory {
      public addXmerWallet_resultStandardScheme getScheme() {
        return new addXmerWallet_resultStandardScheme();
      }
    }

    private static class addXmerWallet_resultStandardScheme extends StandardScheme<addXmerWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addXmerWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addXmerWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addXmerWallet_resultTupleSchemeFactory implements SchemeFactory {
      public addXmerWallet_resultTupleScheme getScheme() {
        return new addXmerWallet_resultTupleScheme();
      }
    }

    private static class addXmerWallet_resultTupleScheme extends TupleScheme<addXmerWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class lockXmerWallet_args implements org.apache.thrift.TBase<lockXmerWallet_args, lockXmerWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<lockXmerWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lockXmerWallet_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lockXmerWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lockXmerWallet_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lockXmerWallet_args.class, metaDataMap);
    }

    public lockXmerWallet_args() {
    }

    public lockXmerWallet_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lockXmerWallet_args(lockXmerWallet_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public lockXmerWallet_args deepCopy() {
      return new lockXmerWallet_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public lockXmerWallet_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lockXmerWallet_args)
        return this.equals((lockXmerWallet_args)that);
      return false;
    }

    public boolean equals(lockXmerWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lockXmerWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lockXmerWallet_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lockXmerWallet_argsStandardSchemeFactory implements SchemeFactory {
      public lockXmerWallet_argsStandardScheme getScheme() {
        return new lockXmerWallet_argsStandardScheme();
      }
    }

    private static class lockXmerWallet_argsStandardScheme extends StandardScheme<lockXmerWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lockXmerWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map20.size);
                  for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                  {
                    String _key22;
                    String _val23;
                    _key22 = iprot.readString();
                    _val23 = iprot.readString();
                    struct.walletMap.put(_key22, _val23);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lockXmerWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter24 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lockXmerWallet_argsTupleSchemeFactory implements SchemeFactory {
      public lockXmerWallet_argsTupleScheme getScheme() {
        return new lockXmerWallet_argsTupleScheme();
      }
    }

    private static class lockXmerWallet_argsTupleScheme extends TupleScheme<lockXmerWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lockXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter25 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lockXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map26.size);
            for (int _i27 = 0; _i27 < _map26.size; ++_i27)
            {
              String _key28;
              String _val29;
              _key28 = iprot.readString();
              _val29 = iprot.readString();
              struct.walletMap.put(_key28, _val29);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class lockXmerWallet_result implements org.apache.thrift.TBase<lockXmerWallet_result, lockXmerWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<lockXmerWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lockXmerWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lockXmerWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lockXmerWallet_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lockXmerWallet_result.class, metaDataMap);
    }

    public lockXmerWallet_result() {
    }

    public lockXmerWallet_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lockXmerWallet_result(lockXmerWallet_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public lockXmerWallet_result deepCopy() {
      return new lockXmerWallet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public lockXmerWallet_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public lockXmerWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lockXmerWallet_result)
        return this.equals((lockXmerWallet_result)that);
      return false;
    }

    public boolean equals(lockXmerWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lockXmerWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lockXmerWallet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lockXmerWallet_resultStandardSchemeFactory implements SchemeFactory {
      public lockXmerWallet_resultStandardScheme getScheme() {
        return new lockXmerWallet_resultStandardScheme();
      }
    }

    private static class lockXmerWallet_resultStandardScheme extends StandardScheme<lockXmerWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lockXmerWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lockXmerWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lockXmerWallet_resultTupleSchemeFactory implements SchemeFactory {
      public lockXmerWallet_resultTupleScheme getScheme() {
        return new lockXmerWallet_resultTupleScheme();
      }
    }

    private static class lockXmerWallet_resultTupleScheme extends TupleScheme<lockXmerWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lockXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lockXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getXmerWallet_args implements org.apache.thrift.TBase<getXmerWallet_args, getXmerWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<getXmerWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmerWallet_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmerWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmerWallet_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmerWallet_args.class, metaDataMap);
    }

    public getXmerWallet_args() {
    }

    public getXmerWallet_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmerWallet_args(getXmerWallet_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getXmerWallet_args deepCopy() {
      return new getXmerWallet_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getXmerWallet_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmerWallet_args)
        return this.equals((getXmerWallet_args)that);
      return false;
    }

    public boolean equals(getXmerWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmerWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmerWallet_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmerWallet_argsStandardSchemeFactory implements SchemeFactory {
      public getXmerWallet_argsStandardScheme getScheme() {
        return new getXmerWallet_argsStandardScheme();
      }
    }

    private static class getXmerWallet_argsStandardScheme extends StandardScheme<getXmerWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmerWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map30.size);
                  for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                  {
                    String _key32;
                    String _val33;
                    _key32 = iprot.readString();
                    _val33 = iprot.readString();
                    struct.walletMap.put(_key32, _val33);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmerWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter34 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmerWallet_argsTupleSchemeFactory implements SchemeFactory {
      public getXmerWallet_argsTupleScheme getScheme() {
        return new getXmerWallet_argsTupleScheme();
      }
    }

    private static class getXmerWallet_argsTupleScheme extends TupleScheme<getXmerWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter35 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map36.size);
            for (int _i37 = 0; _i37 < _map36.size; ++_i37)
            {
              String _key38;
              String _val39;
              _key38 = iprot.readString();
              _val39 = iprot.readString();
              struct.walletMap.put(_key38, _val39);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getXmerWallet_result implements org.apache.thrift.TBase<getXmerWallet_result, getXmerWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<getXmerWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmerWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmerWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmerWallet_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmerWallet_result.class, metaDataMap);
    }

    public getXmerWallet_result() {
    }

    public getXmerWallet_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmerWallet_result(getXmerWallet_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getXmerWallet_result deepCopy() {
      return new getXmerWallet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public getXmerWallet_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getXmerWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmerWallet_result)
        return this.equals((getXmerWallet_result)that);
      return false;
    }

    public boolean equals(getXmerWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmerWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmerWallet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmerWallet_resultStandardSchemeFactory implements SchemeFactory {
      public getXmerWallet_resultStandardScheme getScheme() {
        return new getXmerWallet_resultStandardScheme();
      }
    }

    private static class getXmerWallet_resultStandardScheme extends StandardScheme<getXmerWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmerWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmerWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmerWallet_resultTupleSchemeFactory implements SchemeFactory {
      public getXmerWallet_resultTupleScheme getScheme() {
        return new getXmerWallet_resultTupleScheme();
      }
    }

    private static class getXmerWallet_resultTupleScheme extends TupleScheme<getXmerWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class getXmerWalletState_args implements org.apache.thrift.TBase<getXmerWalletState_args, getXmerWalletState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getXmerWalletState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmerWalletState_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmerWalletState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmerWalletState_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmerWalletState_args.class, metaDataMap);
    }

    public getXmerWalletState_args() {
    }

    public getXmerWalletState_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmerWalletState_args(getXmerWalletState_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public getXmerWalletState_args deepCopy() {
      return new getXmerWalletState_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public getXmerWalletState_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmerWalletState_args)
        return this.equals((getXmerWalletState_args)that);
      return false;
    }

    public boolean equals(getXmerWalletState_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmerWalletState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmerWalletState_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmerWalletState_argsStandardSchemeFactory implements SchemeFactory {
      public getXmerWalletState_argsStandardScheme getScheme() {
        return new getXmerWalletState_argsStandardScheme();
      }
    }

    private static class getXmerWalletState_argsStandardScheme extends StandardScheme<getXmerWalletState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmerWalletState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map40.size);
                  for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                  {
                    String _key42;
                    String _val43;
                    _key42 = iprot.readString();
                    _val43 = iprot.readString();
                    struct.walletMap.put(_key42, _val43);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmerWalletState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter44 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmerWalletState_argsTupleSchemeFactory implements SchemeFactory {
      public getXmerWalletState_argsTupleScheme getScheme() {
        return new getXmerWalletState_argsTupleScheme();
      }
    }

    private static class getXmerWalletState_argsTupleScheme extends TupleScheme<getXmerWalletState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmerWalletState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter45 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmerWalletState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map46.size);
            for (int _i47 = 0; _i47 < _map46.size; ++_i47)
            {
              String _key48;
              String _val49;
              _key48 = iprot.readString();
              _val49 = iprot.readString();
              struct.walletMap.put(_key48, _val49);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class getXmerWalletState_result implements org.apache.thrift.TBase<getXmerWalletState_result, getXmerWalletState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getXmerWalletState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXmerWalletState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXmerWalletState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXmerWalletState_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXmerWalletState_result.class, metaDataMap);
    }

    public getXmerWalletState_result() {
    }

    public getXmerWalletState_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXmerWalletState_result(getXmerWalletState_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public getXmerWalletState_result deepCopy() {
      return new getXmerWalletState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public getXmerWalletState_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public getXmerWalletState_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXmerWalletState_result)
        return this.equals((getXmerWalletState_result)that);
      return false;
    }

    public boolean equals(getXmerWalletState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getXmerWalletState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXmerWalletState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXmerWalletState_resultStandardSchemeFactory implements SchemeFactory {
      public getXmerWalletState_resultStandardScheme getScheme() {
        return new getXmerWalletState_resultStandardScheme();
      }
    }

    private static class getXmerWalletState_resultStandardScheme extends StandardScheme<getXmerWalletState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXmerWalletState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXmerWalletState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXmerWalletState_resultTupleSchemeFactory implements SchemeFactory {
      public getXmerWalletState_resultTupleScheme getScheme() {
        return new getXmerWalletState_resultTupleScheme();
      }
    }

    private static class getXmerWalletState_resultTupleScheme extends TupleScheme<getXmerWalletState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXmerWalletState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXmerWalletState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class turnOutXmerWallet_args implements org.apache.thrift.TBase<turnOutXmerWallet_args, turnOutXmerWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<turnOutXmerWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("turnOutXmerWallet_args");

    private static final org.apache.thrift.protocol.TField WALLET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("walletMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new turnOutXmerWallet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new turnOutXmerWallet_argsTupleSchemeFactory());
    }

    public Map<String,String> walletMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_MAP((short)1, "walletMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_MAP
            return WALLET_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_MAP, new org.apache.thrift.meta_data.FieldMetaData("walletMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(turnOutXmerWallet_args.class, metaDataMap);
    }

    public turnOutXmerWallet_args() {
    }

    public turnOutXmerWallet_args(
      Map<String,String> walletMap)
    {
      this();
      this.walletMap = walletMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public turnOutXmerWallet_args(turnOutXmerWallet_args other) {
      if (other.isSetWalletMap()) {
        Map<String,String> __this__walletMap = new HashMap<String,String>(other.walletMap);
        this.walletMap = __this__walletMap;
      }
    }

    public turnOutXmerWallet_args deepCopy() {
      return new turnOutXmerWallet_args(this);
    }

    @Override
    public void clear() {
      this.walletMap = null;
    }

    public int getWalletMapSize() {
      return (this.walletMap == null) ? 0 : this.walletMap.size();
    }

    public void putToWalletMap(String key, String val) {
      if (this.walletMap == null) {
        this.walletMap = new HashMap<String,String>();
      }
      this.walletMap.put(key, val);
    }

    public Map<String,String> getWalletMap() {
      return this.walletMap;
    }

    public turnOutXmerWallet_args setWalletMap(Map<String,String> walletMap) {
      this.walletMap = walletMap;
      return this;
    }

    public void unsetWalletMap() {
      this.walletMap = null;
    }

    /** Returns true if field walletMap is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletMap() {
      return this.walletMap != null;
    }

    public void setWalletMapIsSet(boolean value) {
      if (!value) {
        this.walletMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_MAP:
        if (value == null) {
          unsetWalletMap();
        } else {
          setWalletMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_MAP:
        return getWalletMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_MAP:
        return isSetWalletMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof turnOutXmerWallet_args)
        return this.equals((turnOutXmerWallet_args)that);
      return false;
    }

    public boolean equals(turnOutXmerWallet_args that) {
      if (that == null)
        return false;

      boolean this_present_walletMap = true && this.isSetWalletMap();
      boolean that_present_walletMap = true && that.isSetWalletMap();
      if (this_present_walletMap || that_present_walletMap) {
        if (!(this_present_walletMap && that_present_walletMap))
          return false;
        if (!this.walletMap.equals(that.walletMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(turnOutXmerWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletMap()).compareTo(other.isSetWalletMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletMap, other.walletMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("turnOutXmerWallet_args(");
      boolean first = true;

      sb.append("walletMap:");
      if (this.walletMap == null) {
        sb.append("null");
      } else {
        sb.append(this.walletMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class turnOutXmerWallet_argsStandardSchemeFactory implements SchemeFactory {
      public turnOutXmerWallet_argsStandardScheme getScheme() {
        return new turnOutXmerWallet_argsStandardScheme();
      }
    }

    private static class turnOutXmerWallet_argsStandardScheme extends StandardScheme<turnOutXmerWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, turnOutXmerWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.walletMap = new HashMap<String,String>(2*_map50.size);
                  for (int _i51 = 0; _i51 < _map50.size; ++_i51)
                  {
                    String _key52;
                    String _val53;
                    _key52 = iprot.readString();
                    _val53 = iprot.readString();
                    struct.walletMap.put(_key52, _val53);
                  }
                  iprot.readMapEnd();
                }
                struct.setWalletMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, turnOutXmerWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletMap != null) {
          oprot.writeFieldBegin(WALLET_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.walletMap.size()));
            for (Map.Entry<String, String> _iter54 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class turnOutXmerWallet_argsTupleSchemeFactory implements SchemeFactory {
      public turnOutXmerWallet_argsTupleScheme getScheme() {
        return new turnOutXmerWallet_argsTupleScheme();
      }
    }

    private static class turnOutXmerWallet_argsTupleScheme extends TupleScheme<turnOutXmerWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, turnOutXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletMap()) {
          {
            oprot.writeI32(struct.walletMap.size());
            for (Map.Entry<String, String> _iter55 : struct.walletMap.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, turnOutXmerWallet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.walletMap = new HashMap<String,String>(2*_map56.size);
            for (int _i57 = 0; _i57 < _map56.size; ++_i57)
            {
              String _key58;
              String _val59;
              _key58 = iprot.readString();
              _val59 = iprot.readString();
              struct.walletMap.put(_key58, _val59);
            }
          }
          struct.setWalletMapIsSet(true);
        }
      }
    }

  }

  public static class turnOutXmerWallet_result implements org.apache.thrift.TBase<turnOutXmerWallet_result, turnOutXmerWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<turnOutXmerWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("turnOutXmerWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new turnOutXmerWallet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new turnOutXmerWallet_resultTupleSchemeFactory());
    }

    public ResponseData success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseData.class)));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(turnOutXmerWallet_result.class, metaDataMap);
    }

    public turnOutXmerWallet_result() {
    }

    public turnOutXmerWallet_result(
      ResponseData success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public turnOutXmerWallet_result(turnOutXmerWallet_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResponseData(other.success);
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public turnOutXmerWallet_result deepCopy() {
      return new turnOutXmerWallet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public ResponseData getSuccess() {
      return this.success;
    }

    public turnOutXmerWallet_result setSuccess(ResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public turnOutXmerWallet_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResponseData)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof turnOutXmerWallet_result)
        return this.equals((turnOutXmerWallet_result)that);
      return false;
    }

    public boolean equals(turnOutXmerWallet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(turnOutXmerWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("turnOutXmerWallet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class turnOutXmerWallet_resultStandardSchemeFactory implements SchemeFactory {
      public turnOutXmerWallet_resultStandardScheme getScheme() {
        return new turnOutXmerWallet_resultStandardScheme();
      }
    }

    private static class turnOutXmerWallet_resultStandardScheme extends StandardScheme<turnOutXmerWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, turnOutXmerWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, turnOutXmerWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class turnOutXmerWallet_resultTupleSchemeFactory implements SchemeFactory {
      public turnOutXmerWallet_resultTupleScheme getScheme() {
        return new turnOutXmerWallet_resultTupleScheme();
      }
    }

    private static class turnOutXmerWallet_resultTupleScheme extends TupleScheme<turnOutXmerWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, turnOutXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, turnOutXmerWallet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
