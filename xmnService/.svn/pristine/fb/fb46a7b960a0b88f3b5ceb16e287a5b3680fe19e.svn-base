/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WithdrawMoneyService {

  public interface Iface {

    public Map<String,String> headWithrawMoney(String orderNumber, int status, int userType, String withdrawType) throws FailureException, org.apache.thrift.TException;

    public Map<String,String> updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException;

    public Map<String,String> updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException;

    public Map<String,String> updateWithdrawalsRecord2Waiter(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void headWithrawMoney(String orderNumber, int status, int userType, String withdrawType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWithdrawalsRecord2Waiter(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,String> headWithrawMoney(String orderNumber, int status, int userType, String withdrawType) throws FailureException, org.apache.thrift.TException
    {
      send_headWithrawMoney(orderNumber, status, userType, withdrawType);
      return recv_headWithrawMoney();
    }

    public void send_headWithrawMoney(String orderNumber, int status, int userType, String withdrawType) throws org.apache.thrift.TException
    {
      headWithrawMoney_args args = new headWithrawMoney_args();
      args.setOrderNumber(orderNumber);
      args.setStatus(status);
      args.setUserType(userType);
      args.setWithdrawType(withdrawType);
      sendBase("headWithrawMoney", args);
    }

    public Map<String,String> recv_headWithrawMoney() throws FailureException, org.apache.thrift.TException
    {
      headWithrawMoney_result result = new headWithrawMoney_result();
      receiveBase(result, "headWithrawMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "headWithrawMoney failed: unknown result");
    }

    public Map<String,String> updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateWithdrawalsRecord(amountMapList, orderMap);
      return recv_updateWithdrawalsRecord();
    }

    public void send_updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws org.apache.thrift.TException
    {
      updateWithdrawalsRecord_args args = new updateWithdrawalsRecord_args();
      args.setAmountMapList(amountMapList);
      args.setOrderMap(orderMap);
      sendBase("updateWithdrawalsRecord", args);
    }

    public Map<String,String> recv_updateWithdrawalsRecord() throws FailureException, org.apache.thrift.TException
    {
      updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
      receiveBase(result, "updateWithdrawalsRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWithdrawalsRecord failed: unknown result");
    }

    public Map<String,String> updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateJointWithdrawalsRecord(amountMapList, orderMap);
      return recv_updateJointWithdrawalsRecord();
    }

    public void send_updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws org.apache.thrift.TException
    {
      updateJointWithdrawalsRecord_args args = new updateJointWithdrawalsRecord_args();
      args.setAmountMapList(amountMapList);
      args.setOrderMap(orderMap);
      sendBase("updateJointWithdrawalsRecord", args);
    }

    public Map<String,String> recv_updateJointWithdrawalsRecord() throws FailureException, org.apache.thrift.TException
    {
      updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
      receiveBase(result, "updateJointWithdrawalsRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateJointWithdrawalsRecord failed: unknown result");
    }

    public Map<String,String> updateWithdrawalsRecord2Waiter(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws FailureException, org.apache.thrift.TException
    {
      send_updateWithdrawalsRecord2Waiter(amountMapList, orderMap);
      return recv_updateWithdrawalsRecord2Waiter();
    }

    public void send_updateWithdrawalsRecord2Waiter(List<Map<String,String>> amountMapList, Map<String,String> orderMap) throws org.apache.thrift.TException
    {
      updateWithdrawalsRecord2Waiter_args args = new updateWithdrawalsRecord2Waiter_args();
      args.setAmountMapList(amountMapList);
      args.setOrderMap(orderMap);
      sendBase("updateWithdrawalsRecord2Waiter", args);
    }

    public Map<String,String> recv_updateWithdrawalsRecord2Waiter() throws FailureException, org.apache.thrift.TException
    {
      updateWithdrawalsRecord2Waiter_result result = new updateWithdrawalsRecord2Waiter_result();
      receiveBase(result, "updateWithdrawalsRecord2Waiter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.qe != null) {
        throw result.qe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWithdrawalsRecord2Waiter failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void headWithrawMoney(String orderNumber, int status, int userType, String withdrawType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      headWithrawMoney_call method_call = new headWithrawMoney_call(orderNumber, status, userType, withdrawType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class headWithrawMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderNumber;
      private int status;
      private int userType;
      private String withdrawType;
      public headWithrawMoney_call(String orderNumber, int status, int userType, String withdrawType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderNumber = orderNumber;
        this.status = status;
        this.userType = userType;
        this.withdrawType = withdrawType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("headWithrawMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        headWithrawMoney_args args = new headWithrawMoney_args();
        args.setOrderNumber(orderNumber);
        args.setStatus(status);
        args.setUserType(userType);
        args.setWithdrawType(withdrawType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_headWithrawMoney();
      }
    }

    public void updateWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWithdrawalsRecord_call method_call = new updateWithdrawalsRecord_call(amountMapList, orderMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWithdrawalsRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> amountMapList;
      private Map<String,String> orderMap;
      public updateWithdrawalsRecord_call(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amountMapList = amountMapList;
        this.orderMap = orderMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWithdrawalsRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWithdrawalsRecord_args args = new updateWithdrawalsRecord_args();
        args.setAmountMapList(amountMapList);
        args.setOrderMap(orderMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWithdrawalsRecord();
      }
    }

    public void updateJointWithdrawalsRecord(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateJointWithdrawalsRecord_call method_call = new updateJointWithdrawalsRecord_call(amountMapList, orderMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateJointWithdrawalsRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> amountMapList;
      private Map<String,String> orderMap;
      public updateJointWithdrawalsRecord_call(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amountMapList = amountMapList;
        this.orderMap = orderMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateJointWithdrawalsRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateJointWithdrawalsRecord_args args = new updateJointWithdrawalsRecord_args();
        args.setAmountMapList(amountMapList);
        args.setOrderMap(orderMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateJointWithdrawalsRecord();
      }
    }

    public void updateWithdrawalsRecord2Waiter(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWithdrawalsRecord2Waiter_call method_call = new updateWithdrawalsRecord2Waiter_call(amountMapList, orderMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWithdrawalsRecord2Waiter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> amountMapList;
      private Map<String,String> orderMap;
      public updateWithdrawalsRecord2Waiter_call(List<Map<String,String>> amountMapList, Map<String,String> orderMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amountMapList = amountMapList;
        this.orderMap = orderMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWithdrawalsRecord2Waiter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWithdrawalsRecord2Waiter_args args = new updateWithdrawalsRecord2Waiter_args();
        args.setAmountMapList(amountMapList);
        args.setOrderMap(orderMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws FailureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWithdrawalsRecord2Waiter();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("headWithrawMoney", new headWithrawMoney());
      processMap.put("updateWithdrawalsRecord", new updateWithdrawalsRecord());
      processMap.put("updateJointWithdrawalsRecord", new updateJointWithdrawalsRecord());
      processMap.put("updateWithdrawalsRecord2Waiter", new updateWithdrawalsRecord2Waiter());
      return processMap;
    }

    public static class headWithrawMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, headWithrawMoney_args> {
      public headWithrawMoney() {
        super("headWithrawMoney");
      }

      public headWithrawMoney_args getEmptyArgsInstance() {
        return new headWithrawMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public headWithrawMoney_result getResult(I iface, headWithrawMoney_args args) throws org.apache.thrift.TException {
        headWithrawMoney_result result = new headWithrawMoney_result();
        try {
          result.success = iface.headWithrawMoney(args.orderNumber, args.status, args.userType, args.withdrawType);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWithdrawalsRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWithdrawalsRecord_args> {
      public updateWithdrawalsRecord() {
        super("updateWithdrawalsRecord");
      }

      public updateWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWithdrawalsRecord_result getResult(I iface, updateWithdrawalsRecord_args args) throws org.apache.thrift.TException {
        updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
        try {
          result.success = iface.updateWithdrawalsRecord(args.amountMapList, args.orderMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateJointWithdrawalsRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateJointWithdrawalsRecord_args> {
      public updateJointWithdrawalsRecord() {
        super("updateJointWithdrawalsRecord");
      }

      public updateJointWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateJointWithdrawalsRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateJointWithdrawalsRecord_result getResult(I iface, updateJointWithdrawalsRecord_args args) throws org.apache.thrift.TException {
        updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
        try {
          result.success = iface.updateJointWithdrawalsRecord(args.amountMapList, args.orderMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

    public static class updateWithdrawalsRecord2Waiter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWithdrawalsRecord2Waiter_args> {
      public updateWithdrawalsRecord2Waiter() {
        super("updateWithdrawalsRecord2Waiter");
      }

      public updateWithdrawalsRecord2Waiter_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord2Waiter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWithdrawalsRecord2Waiter_result getResult(I iface, updateWithdrawalsRecord2Waiter_args args) throws org.apache.thrift.TException {
        updateWithdrawalsRecord2Waiter_result result = new updateWithdrawalsRecord2Waiter_result();
        try {
          result.success = iface.updateWithdrawalsRecord2Waiter(args.amountMapList, args.orderMap);
        } catch (FailureException qe) {
          result.qe = qe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("headWithrawMoney", new headWithrawMoney());
      processMap.put("updateWithdrawalsRecord", new updateWithdrawalsRecord());
      processMap.put("updateJointWithdrawalsRecord", new updateJointWithdrawalsRecord());
      processMap.put("updateWithdrawalsRecord2Waiter", new updateWithdrawalsRecord2Waiter());
      return processMap;
    }

    public static class headWithrawMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, headWithrawMoney_args, Map<String,String>> {
      public headWithrawMoney() {
        super("headWithrawMoney");
      }

      public headWithrawMoney_args getEmptyArgsInstance() {
        return new headWithrawMoney_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            headWithrawMoney_result result = new headWithrawMoney_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            headWithrawMoney_result result = new headWithrawMoney_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, headWithrawMoney_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.headWithrawMoney(args.orderNumber, args.status, args.userType, args.withdrawType,resultHandler);
      }
    }

    public static class updateWithdrawalsRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWithdrawalsRecord_args, Map<String,String>> {
      public updateWithdrawalsRecord() {
        super("updateWithdrawalsRecord");
      }

      public updateWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWithdrawalsRecord_result result = new updateWithdrawalsRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWithdrawalsRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.updateWithdrawalsRecord(args.amountMapList, args.orderMap,resultHandler);
      }
    }

    public static class updateJointWithdrawalsRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateJointWithdrawalsRecord_args, Map<String,String>> {
      public updateJointWithdrawalsRecord() {
        super("updateJointWithdrawalsRecord");
      }

      public updateJointWithdrawalsRecord_args getEmptyArgsInstance() {
        return new updateJointWithdrawalsRecord_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateJointWithdrawalsRecord_result result = new updateJointWithdrawalsRecord_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateJointWithdrawalsRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.updateJointWithdrawalsRecord(args.amountMapList, args.orderMap,resultHandler);
      }
    }

    public static class updateWithdrawalsRecord2Waiter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWithdrawalsRecord2Waiter_args, Map<String,String>> {
      public updateWithdrawalsRecord2Waiter() {
        super("updateWithdrawalsRecord2Waiter");
      }

      public updateWithdrawalsRecord2Waiter_args getEmptyArgsInstance() {
        return new updateWithdrawalsRecord2Waiter_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            updateWithdrawalsRecord2Waiter_result result = new updateWithdrawalsRecord2Waiter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWithdrawalsRecord2Waiter_result result = new updateWithdrawalsRecord2Waiter_result();
            if (e instanceof FailureException) {
                        result.qe = (FailureException) e;
                        result.setQeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWithdrawalsRecord2Waiter_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.updateWithdrawalsRecord2Waiter(args.amountMapList, args.orderMap,resultHandler);
      }
    }

  }

  public static class headWithrawMoney_args implements org.apache.thrift.TBase<headWithrawMoney_args, headWithrawMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<headWithrawMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("headWithrawMoney_args");

    private static final org.apache.thrift.protocol.TField ORDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField WITHDRAW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new headWithrawMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new headWithrawMoney_argsTupleSchemeFactory());
    }

    public String orderNumber; // required
    public int status; // required
    public int userType; // required
    public String withdrawType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_NUMBER((short)1, "orderNumber"),
      STATUS((short)2, "status"),
      USER_TYPE((short)3, "userType"),
      WITHDRAW_TYPE((short)4, "withdrawType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_NUMBER
            return ORDER_NUMBER;
          case 2: // STATUS
            return STATUS;
          case 3: // USER_TYPE
            return USER_TYPE;
          case 4: // WITHDRAW_TYPE
            return WITHDRAW_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private static final int __USERTYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("orderNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WITHDRAW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("withdrawType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(headWithrawMoney_args.class, metaDataMap);
    }

    public headWithrawMoney_args() {
    }

    public headWithrawMoney_args(
      String orderNumber,
      int status,
      int userType,
      String withdrawType)
    {
      this();
      this.orderNumber = orderNumber;
      this.status = status;
      setStatusIsSet(true);
      this.userType = userType;
      setUserTypeIsSet(true);
      this.withdrawType = withdrawType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public headWithrawMoney_args(headWithrawMoney_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOrderNumber()) {
        this.orderNumber = other.orderNumber;
      }
      this.status = other.status;
      this.userType = other.userType;
      if (other.isSetWithdrawType()) {
        this.withdrawType = other.withdrawType;
      }
    }

    public headWithrawMoney_args deepCopy() {
      return new headWithrawMoney_args(this);
    }

    @Override
    public void clear() {
      this.orderNumber = null;
      setStatusIsSet(false);
      this.status = 0;
      setUserTypeIsSet(false);
      this.userType = 0;
      this.withdrawType = null;
    }

    public String getOrderNumber() {
      return this.orderNumber;
    }

    public headWithrawMoney_args setOrderNumber(String orderNumber) {
      this.orderNumber = orderNumber;
      return this;
    }

    public void unsetOrderNumber() {
      this.orderNumber = null;
    }

    /** Returns true if field orderNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderNumber() {
      return this.orderNumber != null;
    }

    public void setOrderNumberIsSet(boolean value) {
      if (!value) {
        this.orderNumber = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public headWithrawMoney_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getUserType() {
      return this.userType;
    }

    public headWithrawMoney_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public String getWithdrawType() {
      return this.withdrawType;
    }

    public headWithrawMoney_args setWithdrawType(String withdrawType) {
      this.withdrawType = withdrawType;
      return this;
    }

    public void unsetWithdrawType() {
      this.withdrawType = null;
    }

    /** Returns true if field withdrawType is set (has been assigned a value) and false otherwise */
    public boolean isSetWithdrawType() {
      return this.withdrawType != null;
    }

    public void setWithdrawTypeIsSet(boolean value) {
      if (!value) {
        this.withdrawType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_NUMBER:
        if (value == null) {
          unsetOrderNumber();
        } else {
          setOrderNumber((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      case WITHDRAW_TYPE:
        if (value == null) {
          unsetWithdrawType();
        } else {
          setWithdrawType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_NUMBER:
        return getOrderNumber();

      case STATUS:
        return Integer.valueOf(getStatus());

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      case WITHDRAW_TYPE:
        return getWithdrawType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_NUMBER:
        return isSetOrderNumber();
      case STATUS:
        return isSetStatus();
      case USER_TYPE:
        return isSetUserType();
      case WITHDRAW_TYPE:
        return isSetWithdrawType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof headWithrawMoney_args)
        return this.equals((headWithrawMoney_args)that);
      return false;
    }

    public boolean equals(headWithrawMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_orderNumber = true && this.isSetOrderNumber();
      boolean that_present_orderNumber = true && that.isSetOrderNumber();
      if (this_present_orderNumber || that_present_orderNumber) {
        if (!(this_present_orderNumber && that_present_orderNumber))
          return false;
        if (!this.orderNumber.equals(that.orderNumber))
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      boolean this_present_withdrawType = true && this.isSetWithdrawType();
      boolean that_present_withdrawType = true && that.isSetWithdrawType();
      if (this_present_withdrawType || that_present_withdrawType) {
        if (!(this_present_withdrawType && that_present_withdrawType))
          return false;
        if (!this.withdrawType.equals(that.withdrawType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(headWithrawMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderNumber()).compareTo(other.isSetOrderNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNumber, other.orderNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithdrawType()).compareTo(other.isSetWithdrawType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithdrawType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawType, other.withdrawType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("headWithrawMoney_args(");
      boolean first = true;

      sb.append("orderNumber:");
      if (this.orderNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.orderNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withdrawType:");
      if (this.withdrawType == null) {
        sb.append("null");
      } else {
        sb.append(this.withdrawType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class headWithrawMoney_argsStandardSchemeFactory implements SchemeFactory {
      public headWithrawMoney_argsStandardScheme getScheme() {
        return new headWithrawMoney_argsStandardScheme();
      }
    }

    private static class headWithrawMoney_argsStandardScheme extends StandardScheme<headWithrawMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, headWithrawMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderNumber = iprot.readString();
                struct.setOrderNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // WITHDRAW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.withdrawType = iprot.readString();
                struct.setWithdrawTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, headWithrawMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderNumber != null) {
          oprot.writeFieldBegin(ORDER_NUMBER_FIELD_DESC);
          oprot.writeString(struct.orderNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        if (struct.withdrawType != null) {
          oprot.writeFieldBegin(WITHDRAW_TYPE_FIELD_DESC);
          oprot.writeString(struct.withdrawType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class headWithrawMoney_argsTupleSchemeFactory implements SchemeFactory {
      public headWithrawMoney_argsTupleScheme getScheme() {
        return new headWithrawMoney_argsTupleScheme();
      }
    }

    private static class headWithrawMoney_argsTupleScheme extends TupleScheme<headWithrawMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, headWithrawMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderNumber()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetUserType()) {
          optionals.set(2);
        }
        if (struct.isSetWithdrawType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOrderNumber()) {
          oprot.writeString(struct.orderNumber);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
        if (struct.isSetWithdrawType()) {
          oprot.writeString(struct.withdrawType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, headWithrawMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.orderNumber = iprot.readString();
          struct.setOrderNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.withdrawType = iprot.readString();
          struct.setWithdrawTypeIsSet(true);
        }
      }
    }

  }

  public static class headWithrawMoney_result implements org.apache.thrift.TBase<headWithrawMoney_result, headWithrawMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<headWithrawMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("headWithrawMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new headWithrawMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new headWithrawMoney_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(headWithrawMoney_result.class, metaDataMap);
    }

    public headWithrawMoney_result() {
    }

    public headWithrawMoney_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public headWithrawMoney_result(headWithrawMoney_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public headWithrawMoney_result deepCopy() {
      return new headWithrawMoney_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public headWithrawMoney_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public headWithrawMoney_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof headWithrawMoney_result)
        return this.equals((headWithrawMoney_result)that);
      return false;
    }

    public boolean equals(headWithrawMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(headWithrawMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("headWithrawMoney_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class headWithrawMoney_resultStandardSchemeFactory implements SchemeFactory {
      public headWithrawMoney_resultStandardScheme getScheme() {
        return new headWithrawMoney_resultStandardScheme();
      }
    }

    private static class headWithrawMoney_resultStandardScheme extends StandardScheme<headWithrawMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, headWithrawMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2;
                    String _val3;
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.success.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, headWithrawMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class headWithrawMoney_resultTupleSchemeFactory implements SchemeFactory {
      public headWithrawMoney_resultTupleScheme getScheme() {
        return new headWithrawMoney_resultTupleScheme();
      }
    }

    private static class headWithrawMoney_resultTupleScheme extends TupleScheme<headWithrawMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, headWithrawMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, headWithrawMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8;
              String _val9;
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.success.put(_key8, _val9);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord_args implements org.apache.thrift.TBase<updateWithdrawalsRecord_args, updateWithdrawalsRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord_args");

    private static final org.apache.thrift.protocol.TField AMOUNT_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("amountMapList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> amountMapList; // required
    public Map<String,String> orderMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMOUNT_MAP_LIST((short)1, "amountMapList"),
      ORDER_MAP((short)2, "orderMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMOUNT_MAP_LIST
            return AMOUNT_MAP_LIST;
          case 2: // ORDER_MAP
            return ORDER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMOUNT_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("amountMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.ORDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord_args.class, metaDataMap);
    }

    public updateWithdrawalsRecord_args() {
    }

    public updateWithdrawalsRecord_args(
      List<Map<String,String>> amountMapList,
      Map<String,String> orderMap)
    {
      this();
      this.amountMapList = amountMapList;
      this.orderMap = orderMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord_args(updateWithdrawalsRecord_args other) {
      if (other.isSetAmountMapList()) {
        List<Map<String,String>> __this__amountMapList = new ArrayList<Map<String,String>>(other.amountMapList.size());
        for (Map<String,String> other_element : other.amountMapList) {
          Map<String,String> __this__amountMapList_copy = new HashMap<String,String>(other_element);
          __this__amountMapList.add(__this__amountMapList_copy);
        }
        this.amountMapList = __this__amountMapList;
      }
      if (other.isSetOrderMap()) {
        Map<String,String> __this__orderMap = new HashMap<String,String>(other.orderMap);
        this.orderMap = __this__orderMap;
      }
    }

    public updateWithdrawalsRecord_args deepCopy() {
      return new updateWithdrawalsRecord_args(this);
    }

    @Override
    public void clear() {
      this.amountMapList = null;
      this.orderMap = null;
    }

    public int getAmountMapListSize() {
      return (this.amountMapList == null) ? 0 : this.amountMapList.size();
    }

    public java.util.Iterator<Map<String,String>> getAmountMapListIterator() {
      return (this.amountMapList == null) ? null : this.amountMapList.iterator();
    }

    public void addToAmountMapList(Map<String,String> elem) {
      if (this.amountMapList == null) {
        this.amountMapList = new ArrayList<Map<String,String>>();
      }
      this.amountMapList.add(elem);
    }

    public List<Map<String,String>> getAmountMapList() {
      return this.amountMapList;
    }

    public updateWithdrawalsRecord_args setAmountMapList(List<Map<String,String>> amountMapList) {
      this.amountMapList = amountMapList;
      return this;
    }

    public void unsetAmountMapList() {
      this.amountMapList = null;
    }

    /** Returns true if field amountMapList is set (has been assigned a value) and false otherwise */
    public boolean isSetAmountMapList() {
      return this.amountMapList != null;
    }

    public void setAmountMapListIsSet(boolean value) {
      if (!value) {
        this.amountMapList = null;
      }
    }

    public int getOrderMapSize() {
      return (this.orderMap == null) ? 0 : this.orderMap.size();
    }

    public void putToOrderMap(String key, String val) {
      if (this.orderMap == null) {
        this.orderMap = new HashMap<String,String>();
      }
      this.orderMap.put(key, val);
    }

    public Map<String,String> getOrderMap() {
      return this.orderMap;
    }

    public updateWithdrawalsRecord_args setOrderMap(Map<String,String> orderMap) {
      this.orderMap = orderMap;
      return this;
    }

    public void unsetOrderMap() {
      this.orderMap = null;
    }

    /** Returns true if field orderMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMap() {
      return this.orderMap != null;
    }

    public void setOrderMapIsSet(boolean value) {
      if (!value) {
        this.orderMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        if (value == null) {
          unsetAmountMapList();
        } else {
          setAmountMapList((List<Map<String,String>>)value);
        }
        break;

      case ORDER_MAP:
        if (value == null) {
          unsetOrderMap();
        } else {
          setOrderMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        return getAmountMapList();

      case ORDER_MAP:
        return getOrderMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AMOUNT_MAP_LIST:
        return isSetAmountMapList();
      case ORDER_MAP:
        return isSetOrderMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord_args)
        return this.equals((updateWithdrawalsRecord_args)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_amountMapList = true && this.isSetAmountMapList();
      boolean that_present_amountMapList = true && that.isSetAmountMapList();
      if (this_present_amountMapList || that_present_amountMapList) {
        if (!(this_present_amountMapList && that_present_amountMapList))
          return false;
        if (!this.amountMapList.equals(that.amountMapList))
          return false;
      }

      boolean this_present_orderMap = true && this.isSetOrderMap();
      boolean that_present_orderMap = true && that.isSetOrderMap();
      if (this_present_orderMap || that_present_orderMap) {
        if (!(this_present_orderMap && that_present_orderMap))
          return false;
        if (!this.orderMap.equals(that.orderMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmountMapList()).compareTo(other.isSetAmountMapList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmountMapList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountMapList, other.amountMapList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderMap()).compareTo(other.isSetOrderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMap, other.orderMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord_args(");
      boolean first = true;

      sb.append("amountMapList:");
      if (this.amountMapList == null) {
        sb.append("null");
      } else {
        sb.append(this.amountMapList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderMap:");
      if (this.orderMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_argsStandardScheme getScheme() {
        return new updateWithdrawalsRecord_argsStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord_argsStandardScheme extends StandardScheme<updateWithdrawalsRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMOUNT_MAP_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.amountMapList = new ArrayList<Map<String,String>>(_list10.size);
                  for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                  {
                    Map<String,String> _elem12;
                    {
                      org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                      _elem12 = new HashMap<String,String>(2*_map13.size);
                      for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                      {
                        String _key15;
                        String _val16;
                        _key15 = iprot.readString();
                        _val16 = iprot.readString();
                        _elem12.put(_key15, _val16);
                      }
                      iprot.readMapEnd();
                    }
                    struct.amountMapList.add(_elem12);
                  }
                  iprot.readListEnd();
                }
                struct.setAmountMapListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin();
                  struct.orderMap = new HashMap<String,String>(2*_map17.size);
                  for (int _i18 = 0; _i18 < _map17.size; ++_i18)
                  {
                    String _key19;
                    String _val20;
                    _key19 = iprot.readString();
                    _val20 = iprot.readString();
                    struct.orderMap.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amountMapList != null) {
          oprot.writeFieldBegin(AMOUNT_MAP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.amountMapList.size()));
            for (Map<String,String> _iter21 : struct.amountMapList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter21.size()));
                for (Map.Entry<String, String> _iter22 : _iter21.entrySet())
                {
                  oprot.writeString(_iter22.getKey());
                  oprot.writeString(_iter22.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.orderMap != null) {
          oprot.writeFieldBegin(ORDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderMap.size()));
            for (Map.Entry<String, String> _iter23 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_argsTupleScheme getScheme() {
        return new updateWithdrawalsRecord_argsTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord_argsTupleScheme extends TupleScheme<updateWithdrawalsRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmountMapList()) {
          optionals.set(0);
        }
        if (struct.isSetOrderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmountMapList()) {
          {
            oprot.writeI32(struct.amountMapList.size());
            for (Map<String,String> _iter24 : struct.amountMapList)
            {
              {
                oprot.writeI32(_iter24.size());
                for (Map.Entry<String, String> _iter25 : _iter24.entrySet())
                {
                  oprot.writeString(_iter25.getKey());
                  oprot.writeString(_iter25.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOrderMap()) {
          {
            oprot.writeI32(struct.orderMap.size());
            for (Map.Entry<String, String> _iter26 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter26.getKey());
              oprot.writeString(_iter26.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list27 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.amountMapList = new ArrayList<Map<String,String>>(_list27.size);
            for (int _i28 = 0; _i28 < _list27.size; ++_i28)
            {
              Map<String,String> _elem29;
              {
                org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem29 = new HashMap<String,String>(2*_map30.size);
                for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                {
                  String _key32;
                  String _val33;
                  _key32 = iprot.readString();
                  _val33 = iprot.readString();
                  _elem29.put(_key32, _val33);
                }
              }
              struct.amountMapList.add(_elem29);
            }
          }
          struct.setAmountMapListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orderMap = new HashMap<String,String>(2*_map34.size);
            for (int _i35 = 0; _i35 < _map34.size; ++_i35)
            {
              String _key36;
              String _val37;
              _key36 = iprot.readString();
              _val37 = iprot.readString();
              struct.orderMap.put(_key36, _val37);
            }
          }
          struct.setOrderMapIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord_result implements org.apache.thrift.TBase<updateWithdrawalsRecord_result, updateWithdrawalsRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord_result.class, metaDataMap);
    }

    public updateWithdrawalsRecord_result() {
    }

    public updateWithdrawalsRecord_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord_result(updateWithdrawalsRecord_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWithdrawalsRecord_result deepCopy() {
      return new updateWithdrawalsRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public updateWithdrawalsRecord_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWithdrawalsRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord_result)
        return this.equals((updateWithdrawalsRecord_result)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_resultStandardScheme getScheme() {
        return new updateWithdrawalsRecord_resultStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord_resultStandardScheme extends StandardScheme<updateWithdrawalsRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map38.size);
                  for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                  {
                    String _key40;
                    String _val41;
                    _key40 = iprot.readString();
                    _val41 = iprot.readString();
                    struct.success.put(_key40, _val41);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter42 : struct.success.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              oprot.writeString(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord_resultTupleScheme getScheme() {
        return new updateWithdrawalsRecord_resultTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord_resultTupleScheme extends TupleScheme<updateWithdrawalsRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter43 : struct.success.entrySet())
            {
              oprot.writeString(_iter43.getKey());
              oprot.writeString(_iter43.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map44.size);
            for (int _i45 = 0; _i45 < _map44.size; ++_i45)
            {
              String _key46;
              String _val47;
              _key46 = iprot.readString();
              _val47 = iprot.readString();
              struct.success.put(_key46, _val47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateJointWithdrawalsRecord_args implements org.apache.thrift.TBase<updateJointWithdrawalsRecord_args, updateJointWithdrawalsRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateJointWithdrawalsRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJointWithdrawalsRecord_args");

    private static final org.apache.thrift.protocol.TField AMOUNT_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("amountMapList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJointWithdrawalsRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJointWithdrawalsRecord_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> amountMapList; // required
    public Map<String,String> orderMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMOUNT_MAP_LIST((short)1, "amountMapList"),
      ORDER_MAP((short)2, "orderMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMOUNT_MAP_LIST
            return AMOUNT_MAP_LIST;
          case 2: // ORDER_MAP
            return ORDER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMOUNT_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("amountMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.ORDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJointWithdrawalsRecord_args.class, metaDataMap);
    }

    public updateJointWithdrawalsRecord_args() {
    }

    public updateJointWithdrawalsRecord_args(
      List<Map<String,String>> amountMapList,
      Map<String,String> orderMap)
    {
      this();
      this.amountMapList = amountMapList;
      this.orderMap = orderMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJointWithdrawalsRecord_args(updateJointWithdrawalsRecord_args other) {
      if (other.isSetAmountMapList()) {
        List<Map<String,String>> __this__amountMapList = new ArrayList<Map<String,String>>(other.amountMapList.size());
        for (Map<String,String> other_element : other.amountMapList) {
          Map<String,String> __this__amountMapList_copy = new HashMap<String,String>(other_element);
          __this__amountMapList.add(__this__amountMapList_copy);
        }
        this.amountMapList = __this__amountMapList;
      }
      if (other.isSetOrderMap()) {
        Map<String,String> __this__orderMap = new HashMap<String,String>(other.orderMap);
        this.orderMap = __this__orderMap;
      }
    }

    public updateJointWithdrawalsRecord_args deepCopy() {
      return new updateJointWithdrawalsRecord_args(this);
    }

    @Override
    public void clear() {
      this.amountMapList = null;
      this.orderMap = null;
    }

    public int getAmountMapListSize() {
      return (this.amountMapList == null) ? 0 : this.amountMapList.size();
    }

    public java.util.Iterator<Map<String,String>> getAmountMapListIterator() {
      return (this.amountMapList == null) ? null : this.amountMapList.iterator();
    }

    public void addToAmountMapList(Map<String,String> elem) {
      if (this.amountMapList == null) {
        this.amountMapList = new ArrayList<Map<String,String>>();
      }
      this.amountMapList.add(elem);
    }

    public List<Map<String,String>> getAmountMapList() {
      return this.amountMapList;
    }

    public updateJointWithdrawalsRecord_args setAmountMapList(List<Map<String,String>> amountMapList) {
      this.amountMapList = amountMapList;
      return this;
    }

    public void unsetAmountMapList() {
      this.amountMapList = null;
    }

    /** Returns true if field amountMapList is set (has been assigned a value) and false otherwise */
    public boolean isSetAmountMapList() {
      return this.amountMapList != null;
    }

    public void setAmountMapListIsSet(boolean value) {
      if (!value) {
        this.amountMapList = null;
      }
    }

    public int getOrderMapSize() {
      return (this.orderMap == null) ? 0 : this.orderMap.size();
    }

    public void putToOrderMap(String key, String val) {
      if (this.orderMap == null) {
        this.orderMap = new HashMap<String,String>();
      }
      this.orderMap.put(key, val);
    }

    public Map<String,String> getOrderMap() {
      return this.orderMap;
    }

    public updateJointWithdrawalsRecord_args setOrderMap(Map<String,String> orderMap) {
      this.orderMap = orderMap;
      return this;
    }

    public void unsetOrderMap() {
      this.orderMap = null;
    }

    /** Returns true if field orderMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMap() {
      return this.orderMap != null;
    }

    public void setOrderMapIsSet(boolean value) {
      if (!value) {
        this.orderMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        if (value == null) {
          unsetAmountMapList();
        } else {
          setAmountMapList((List<Map<String,String>>)value);
        }
        break;

      case ORDER_MAP:
        if (value == null) {
          unsetOrderMap();
        } else {
          setOrderMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        return getAmountMapList();

      case ORDER_MAP:
        return getOrderMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AMOUNT_MAP_LIST:
        return isSetAmountMapList();
      case ORDER_MAP:
        return isSetOrderMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJointWithdrawalsRecord_args)
        return this.equals((updateJointWithdrawalsRecord_args)that);
      return false;
    }

    public boolean equals(updateJointWithdrawalsRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_amountMapList = true && this.isSetAmountMapList();
      boolean that_present_amountMapList = true && that.isSetAmountMapList();
      if (this_present_amountMapList || that_present_amountMapList) {
        if (!(this_present_amountMapList && that_present_amountMapList))
          return false;
        if (!this.amountMapList.equals(that.amountMapList))
          return false;
      }

      boolean this_present_orderMap = true && this.isSetOrderMap();
      boolean that_present_orderMap = true && that.isSetOrderMap();
      if (this_present_orderMap || that_present_orderMap) {
        if (!(this_present_orderMap && that_present_orderMap))
          return false;
        if (!this.orderMap.equals(that.orderMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateJointWithdrawalsRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmountMapList()).compareTo(other.isSetAmountMapList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmountMapList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountMapList, other.amountMapList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderMap()).compareTo(other.isSetOrderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMap, other.orderMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJointWithdrawalsRecord_args(");
      boolean first = true;

      sb.append("amountMapList:");
      if (this.amountMapList == null) {
        sb.append("null");
      } else {
        sb.append(this.amountMapList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderMap:");
      if (this.orderMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJointWithdrawalsRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_argsStandardScheme getScheme() {
        return new updateJointWithdrawalsRecord_argsStandardScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_argsStandardScheme extends StandardScheme<updateJointWithdrawalsRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMOUNT_MAP_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.amountMapList = new ArrayList<Map<String,String>>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    Map<String,String> _elem50;
                    {
                      org.apache.thrift.protocol.TMap _map51 = iprot.readMapBegin();
                      _elem50 = new HashMap<String,String>(2*_map51.size);
                      for (int _i52 = 0; _i52 < _map51.size; ++_i52)
                      {
                        String _key53;
                        String _val54;
                        _key53 = iprot.readString();
                        _val54 = iprot.readString();
                        _elem50.put(_key53, _val54);
                      }
                      iprot.readMapEnd();
                    }
                    struct.amountMapList.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setAmountMapListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map55 = iprot.readMapBegin();
                  struct.orderMap = new HashMap<String,String>(2*_map55.size);
                  for (int _i56 = 0; _i56 < _map55.size; ++_i56)
                  {
                    String _key57;
                    String _val58;
                    _key57 = iprot.readString();
                    _val58 = iprot.readString();
                    struct.orderMap.put(_key57, _val58);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amountMapList != null) {
          oprot.writeFieldBegin(AMOUNT_MAP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.amountMapList.size()));
            for (Map<String,String> _iter59 : struct.amountMapList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter59.size()));
                for (Map.Entry<String, String> _iter60 : _iter59.entrySet())
                {
                  oprot.writeString(_iter60.getKey());
                  oprot.writeString(_iter60.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.orderMap != null) {
          oprot.writeFieldBegin(ORDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderMap.size()));
            for (Map.Entry<String, String> _iter61 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter61.getKey());
              oprot.writeString(_iter61.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJointWithdrawalsRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_argsTupleScheme getScheme() {
        return new updateJointWithdrawalsRecord_argsTupleScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_argsTupleScheme extends TupleScheme<updateJointWithdrawalsRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmountMapList()) {
          optionals.set(0);
        }
        if (struct.isSetOrderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmountMapList()) {
          {
            oprot.writeI32(struct.amountMapList.size());
            for (Map<String,String> _iter62 : struct.amountMapList)
            {
              {
                oprot.writeI32(_iter62.size());
                for (Map.Entry<String, String> _iter63 : _iter62.entrySet())
                {
                  oprot.writeString(_iter63.getKey());
                  oprot.writeString(_iter63.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOrderMap()) {
          {
            oprot.writeI32(struct.orderMap.size());
            for (Map.Entry<String, String> _iter64 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              oprot.writeString(_iter64.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.amountMapList = new ArrayList<Map<String,String>>(_list65.size);
            for (int _i66 = 0; _i66 < _list65.size; ++_i66)
            {
              Map<String,String> _elem67;
              {
                org.apache.thrift.protocol.TMap _map68 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem67 = new HashMap<String,String>(2*_map68.size);
                for (int _i69 = 0; _i69 < _map68.size; ++_i69)
                {
                  String _key70;
                  String _val71;
                  _key70 = iprot.readString();
                  _val71 = iprot.readString();
                  _elem67.put(_key70, _val71);
                }
              }
              struct.amountMapList.add(_elem67);
            }
          }
          struct.setAmountMapListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map72 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orderMap = new HashMap<String,String>(2*_map72.size);
            for (int _i73 = 0; _i73 < _map72.size; ++_i73)
            {
              String _key74;
              String _val75;
              _key74 = iprot.readString();
              _val75 = iprot.readString();
              struct.orderMap.put(_key74, _val75);
            }
          }
          struct.setOrderMapIsSet(true);
        }
      }
    }

  }

  public static class updateJointWithdrawalsRecord_result implements org.apache.thrift.TBase<updateJointWithdrawalsRecord_result, updateJointWithdrawalsRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateJointWithdrawalsRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJointWithdrawalsRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJointWithdrawalsRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJointWithdrawalsRecord_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJointWithdrawalsRecord_result.class, metaDataMap);
    }

    public updateJointWithdrawalsRecord_result() {
    }

    public updateJointWithdrawalsRecord_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJointWithdrawalsRecord_result(updateJointWithdrawalsRecord_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateJointWithdrawalsRecord_result deepCopy() {
      return new updateJointWithdrawalsRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public updateJointWithdrawalsRecord_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateJointWithdrawalsRecord_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJointWithdrawalsRecord_result)
        return this.equals((updateJointWithdrawalsRecord_result)that);
      return false;
    }

    public boolean equals(updateJointWithdrawalsRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateJointWithdrawalsRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJointWithdrawalsRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJointWithdrawalsRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_resultStandardScheme getScheme() {
        return new updateJointWithdrawalsRecord_resultStandardScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_resultStandardScheme extends StandardScheme<updateJointWithdrawalsRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map76.size);
                  for (int _i77 = 0; _i77 < _map76.size; ++_i77)
                  {
                    String _key78;
                    String _val79;
                    _key78 = iprot.readString();
                    _val79 = iprot.readString();
                    struct.success.put(_key78, _val79);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter80 : struct.success.entrySet())
            {
              oprot.writeString(_iter80.getKey());
              oprot.writeString(_iter80.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJointWithdrawalsRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateJointWithdrawalsRecord_resultTupleScheme getScheme() {
        return new updateJointWithdrawalsRecord_resultTupleScheme();
      }
    }

    private static class updateJointWithdrawalsRecord_resultTupleScheme extends TupleScheme<updateJointWithdrawalsRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter81 : struct.success.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              oprot.writeString(_iter81.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJointWithdrawalsRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map82.size);
            for (int _i83 = 0; _i83 < _map82.size; ++_i83)
            {
              String _key84;
              String _val85;
              _key84 = iprot.readString();
              _val85 = iprot.readString();
              struct.success.put(_key84, _val85);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord2Waiter_args implements org.apache.thrift.TBase<updateWithdrawalsRecord2Waiter_args, updateWithdrawalsRecord2Waiter_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord2Waiter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord2Waiter_args");

    private static final org.apache.thrift.protocol.TField AMOUNT_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("amountMapList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord2Waiter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord2Waiter_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> amountMapList; // required
    public Map<String,String> orderMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMOUNT_MAP_LIST((short)1, "amountMapList"),
      ORDER_MAP((short)2, "orderMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMOUNT_MAP_LIST
            return AMOUNT_MAP_LIST;
          case 2: // ORDER_MAP
            return ORDER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMOUNT_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("amountMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.ORDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord2Waiter_args.class, metaDataMap);
    }

    public updateWithdrawalsRecord2Waiter_args() {
    }

    public updateWithdrawalsRecord2Waiter_args(
      List<Map<String,String>> amountMapList,
      Map<String,String> orderMap)
    {
      this();
      this.amountMapList = amountMapList;
      this.orderMap = orderMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord2Waiter_args(updateWithdrawalsRecord2Waiter_args other) {
      if (other.isSetAmountMapList()) {
        List<Map<String,String>> __this__amountMapList = new ArrayList<Map<String,String>>(other.amountMapList.size());
        for (Map<String,String> other_element : other.amountMapList) {
          Map<String,String> __this__amountMapList_copy = new HashMap<String,String>(other_element);
          __this__amountMapList.add(__this__amountMapList_copy);
        }
        this.amountMapList = __this__amountMapList;
      }
      if (other.isSetOrderMap()) {
        Map<String,String> __this__orderMap = new HashMap<String,String>(other.orderMap);
        this.orderMap = __this__orderMap;
      }
    }

    public updateWithdrawalsRecord2Waiter_args deepCopy() {
      return new updateWithdrawalsRecord2Waiter_args(this);
    }

    @Override
    public void clear() {
      this.amountMapList = null;
      this.orderMap = null;
    }

    public int getAmountMapListSize() {
      return (this.amountMapList == null) ? 0 : this.amountMapList.size();
    }

    public java.util.Iterator<Map<String,String>> getAmountMapListIterator() {
      return (this.amountMapList == null) ? null : this.amountMapList.iterator();
    }

    public void addToAmountMapList(Map<String,String> elem) {
      if (this.amountMapList == null) {
        this.amountMapList = new ArrayList<Map<String,String>>();
      }
      this.amountMapList.add(elem);
    }

    public List<Map<String,String>> getAmountMapList() {
      return this.amountMapList;
    }

    public updateWithdrawalsRecord2Waiter_args setAmountMapList(List<Map<String,String>> amountMapList) {
      this.amountMapList = amountMapList;
      return this;
    }

    public void unsetAmountMapList() {
      this.amountMapList = null;
    }

    /** Returns true if field amountMapList is set (has been assigned a value) and false otherwise */
    public boolean isSetAmountMapList() {
      return this.amountMapList != null;
    }

    public void setAmountMapListIsSet(boolean value) {
      if (!value) {
        this.amountMapList = null;
      }
    }

    public int getOrderMapSize() {
      return (this.orderMap == null) ? 0 : this.orderMap.size();
    }

    public void putToOrderMap(String key, String val) {
      if (this.orderMap == null) {
        this.orderMap = new HashMap<String,String>();
      }
      this.orderMap.put(key, val);
    }

    public Map<String,String> getOrderMap() {
      return this.orderMap;
    }

    public updateWithdrawalsRecord2Waiter_args setOrderMap(Map<String,String> orderMap) {
      this.orderMap = orderMap;
      return this;
    }

    public void unsetOrderMap() {
      this.orderMap = null;
    }

    /** Returns true if field orderMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderMap() {
      return this.orderMap != null;
    }

    public void setOrderMapIsSet(boolean value) {
      if (!value) {
        this.orderMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        if (value == null) {
          unsetAmountMapList();
        } else {
          setAmountMapList((List<Map<String,String>>)value);
        }
        break;

      case ORDER_MAP:
        if (value == null) {
          unsetOrderMap();
        } else {
          setOrderMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AMOUNT_MAP_LIST:
        return getAmountMapList();

      case ORDER_MAP:
        return getOrderMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AMOUNT_MAP_LIST:
        return isSetAmountMapList();
      case ORDER_MAP:
        return isSetOrderMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord2Waiter_args)
        return this.equals((updateWithdrawalsRecord2Waiter_args)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord2Waiter_args that) {
      if (that == null)
        return false;

      boolean this_present_amountMapList = true && this.isSetAmountMapList();
      boolean that_present_amountMapList = true && that.isSetAmountMapList();
      if (this_present_amountMapList || that_present_amountMapList) {
        if (!(this_present_amountMapList && that_present_amountMapList))
          return false;
        if (!this.amountMapList.equals(that.amountMapList))
          return false;
      }

      boolean this_present_orderMap = true && this.isSetOrderMap();
      boolean that_present_orderMap = true && that.isSetOrderMap();
      if (this_present_orderMap || that_present_orderMap) {
        if (!(this_present_orderMap && that_present_orderMap))
          return false;
        if (!this.orderMap.equals(that.orderMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord2Waiter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmountMapList()).compareTo(other.isSetAmountMapList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmountMapList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountMapList, other.amountMapList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderMap()).compareTo(other.isSetOrderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMap, other.orderMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord2Waiter_args(");
      boolean first = true;

      sb.append("amountMapList:");
      if (this.amountMapList == null) {
        sb.append("null");
      } else {
        sb.append(this.amountMapList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderMap:");
      if (this.orderMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord2Waiter_argsStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord2Waiter_argsStandardScheme getScheme() {
        return new updateWithdrawalsRecord2Waiter_argsStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord2Waiter_argsStandardScheme extends StandardScheme<updateWithdrawalsRecord2Waiter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord2Waiter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMOUNT_MAP_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                  struct.amountMapList = new ArrayList<Map<String,String>>(_list86.size);
                  for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                  {
                    Map<String,String> _elem88;
                    {
                      org.apache.thrift.protocol.TMap _map89 = iprot.readMapBegin();
                      _elem88 = new HashMap<String,String>(2*_map89.size);
                      for (int _i90 = 0; _i90 < _map89.size; ++_i90)
                      {
                        String _key91;
                        String _val92;
                        _key91 = iprot.readString();
                        _val92 = iprot.readString();
                        _elem88.put(_key91, _val92);
                      }
                      iprot.readMapEnd();
                    }
                    struct.amountMapList.add(_elem88);
                  }
                  iprot.readListEnd();
                }
                struct.setAmountMapListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map93 = iprot.readMapBegin();
                  struct.orderMap = new HashMap<String,String>(2*_map93.size);
                  for (int _i94 = 0; _i94 < _map93.size; ++_i94)
                  {
                    String _key95;
                    String _val96;
                    _key95 = iprot.readString();
                    _val96 = iprot.readString();
                    struct.orderMap.put(_key95, _val96);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord2Waiter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amountMapList != null) {
          oprot.writeFieldBegin(AMOUNT_MAP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.amountMapList.size()));
            for (Map<String,String> _iter97 : struct.amountMapList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter97.size()));
                for (Map.Entry<String, String> _iter98 : _iter97.entrySet())
                {
                  oprot.writeString(_iter98.getKey());
                  oprot.writeString(_iter98.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.orderMap != null) {
          oprot.writeFieldBegin(ORDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderMap.size()));
            for (Map.Entry<String, String> _iter99 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter99.getKey());
              oprot.writeString(_iter99.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord2Waiter_argsTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord2Waiter_argsTupleScheme getScheme() {
        return new updateWithdrawalsRecord2Waiter_argsTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord2Waiter_argsTupleScheme extends TupleScheme<updateWithdrawalsRecord2Waiter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord2Waiter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmountMapList()) {
          optionals.set(0);
        }
        if (struct.isSetOrderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmountMapList()) {
          {
            oprot.writeI32(struct.amountMapList.size());
            for (Map<String,String> _iter100 : struct.amountMapList)
            {
              {
                oprot.writeI32(_iter100.size());
                for (Map.Entry<String, String> _iter101 : _iter100.entrySet())
                {
                  oprot.writeString(_iter101.getKey());
                  oprot.writeString(_iter101.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOrderMap()) {
          {
            oprot.writeI32(struct.orderMap.size());
            for (Map.Entry<String, String> _iter102 : struct.orderMap.entrySet())
            {
              oprot.writeString(_iter102.getKey());
              oprot.writeString(_iter102.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord2Waiter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.amountMapList = new ArrayList<Map<String,String>>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              Map<String,String> _elem105;
              {
                org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem105 = new HashMap<String,String>(2*_map106.size);
                for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                {
                  String _key108;
                  String _val109;
                  _key108 = iprot.readString();
                  _val109 = iprot.readString();
                  _elem105.put(_key108, _val109);
                }
              }
              struct.amountMapList.add(_elem105);
            }
          }
          struct.setAmountMapListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map110 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orderMap = new HashMap<String,String>(2*_map110.size);
            for (int _i111 = 0; _i111 < _map110.size; ++_i111)
            {
              String _key112;
              String _val113;
              _key112 = iprot.readString();
              _val113 = iprot.readString();
              struct.orderMap.put(_key112, _val113);
            }
          }
          struct.setOrderMapIsSet(true);
        }
      }
    }

  }

  public static class updateWithdrawalsRecord2Waiter_result implements org.apache.thrift.TBase<updateWithdrawalsRecord2Waiter_result, updateWithdrawalsRecord2Waiter_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWithdrawalsRecord2Waiter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWithdrawalsRecord2Waiter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField QE_FIELD_DESC = new org.apache.thrift.protocol.TField("qe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWithdrawalsRecord2Waiter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWithdrawalsRecord2Waiter_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public FailureException qe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      QE((short)1, "qe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // QE
            return QE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.QE, new org.apache.thrift.meta_data.FieldMetaData("qe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWithdrawalsRecord2Waiter_result.class, metaDataMap);
    }

    public updateWithdrawalsRecord2Waiter_result() {
    }

    public updateWithdrawalsRecord2Waiter_result(
      Map<String,String> success,
      FailureException qe)
    {
      this();
      this.success = success;
      this.qe = qe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWithdrawalsRecord2Waiter_result(updateWithdrawalsRecord2Waiter_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetQe()) {
        this.qe = new FailureException(other.qe);
      }
    }

    public updateWithdrawalsRecord2Waiter_result deepCopy() {
      return new updateWithdrawalsRecord2Waiter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.qe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public updateWithdrawalsRecord2Waiter_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FailureException getQe() {
      return this.qe;
    }

    public updateWithdrawalsRecord2Waiter_result setQe(FailureException qe) {
      this.qe = qe;
      return this;
    }

    public void unsetQe() {
      this.qe = null;
    }

    /** Returns true if field qe is set (has been assigned a value) and false otherwise */
    public boolean isSetQe() {
      return this.qe != null;
    }

    public void setQeIsSet(boolean value) {
      if (!value) {
        this.qe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case QE:
        if (value == null) {
          unsetQe();
        } else {
          setQe((FailureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case QE:
        return getQe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case QE:
        return isSetQe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWithdrawalsRecord2Waiter_result)
        return this.equals((updateWithdrawalsRecord2Waiter_result)that);
      return false;
    }

    public boolean equals(updateWithdrawalsRecord2Waiter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_qe = true && this.isSetQe();
      boolean that_present_qe = true && that.isSetQe();
      if (this_present_qe || that_present_qe) {
        if (!(this_present_qe && that_present_qe))
          return false;
        if (!this.qe.equals(that.qe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWithdrawalsRecord2Waiter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQe()).compareTo(other.isSetQe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qe, other.qe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWithdrawalsRecord2Waiter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qe:");
      if (this.qe == null) {
        sb.append("null");
      } else {
        sb.append(this.qe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWithdrawalsRecord2Waiter_resultStandardSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord2Waiter_resultStandardScheme getScheme() {
        return new updateWithdrawalsRecord2Waiter_resultStandardScheme();
      }
    }

    private static class updateWithdrawalsRecord2Waiter_resultStandardScheme extends StandardScheme<updateWithdrawalsRecord2Waiter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWithdrawalsRecord2Waiter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map114.size);
                  for (int _i115 = 0; _i115 < _map114.size; ++_i115)
                  {
                    String _key116;
                    String _val117;
                    _key116 = iprot.readString();
                    _val117 = iprot.readString();
                    struct.success.put(_key116, _val117);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // QE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qe = new FailureException();
                struct.qe.read(iprot);
                struct.setQeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWithdrawalsRecord2Waiter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter118 : struct.success.entrySet())
            {
              oprot.writeString(_iter118.getKey());
              oprot.writeString(_iter118.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.qe != null) {
          oprot.writeFieldBegin(QE_FIELD_DESC);
          struct.qe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWithdrawalsRecord2Waiter_resultTupleSchemeFactory implements SchemeFactory {
      public updateWithdrawalsRecord2Waiter_resultTupleScheme getScheme() {
        return new updateWithdrawalsRecord2Waiter_resultTupleScheme();
      }
    }

    private static class updateWithdrawalsRecord2Waiter_resultTupleScheme extends TupleScheme<updateWithdrawalsRecord2Waiter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord2Waiter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetQe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter119 : struct.success.entrySet())
            {
              oprot.writeString(_iter119.getKey());
              oprot.writeString(_iter119.getValue());
            }
          }
        }
        if (struct.isSetQe()) {
          struct.qe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWithdrawalsRecord2Waiter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map120.size);
            for (int _i121 = 0; _i121 < _map120.size; ++_i121)
            {
              String _key122;
              String _val123;
              _key122 = iprot.readString();
              _val123 = iprot.readString();
              struct.success.put(_key122, _val123);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qe = new FailureException();
          struct.qe.read(iprot);
          struct.setQeIsSet(true);
        }
      }
    }

  }

}
