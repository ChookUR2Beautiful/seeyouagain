/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class SellerWallet implements org.apache.thrift.TBase<SellerWallet, SellerWallet._Fields>, java.io.Serializable, Cloneable, Comparable<SellerWallet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SellerWallet");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SELLER_WALLET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerWalletList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SellerWalletStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SellerWalletTupleSchemeFactory());
  }

  public int state; // required
  public String msg; // required
  public List<Map<String,String>> sellerWalletList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE((short)1, "state"),
    MSG((short)2, "msg"),
    SELLER_WALLET_LIST((short)3, "sellerWalletList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // MSG
          return MSG;
        case 3: // SELLER_WALLET_LIST
          return SELLER_WALLET_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_WALLET_LIST, new org.apache.thrift.meta_data.FieldMetaData("sellerWalletList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SellerWallet.class, metaDataMap);
  }

  public SellerWallet() {
  }

  public SellerWallet(
    int state,
    String msg,
    List<Map<String,String>> sellerWalletList)
  {
    this();
    this.state = state;
    setStateIsSet(true);
    this.msg = msg;
    this.sellerWalletList = sellerWalletList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SellerWallet(SellerWallet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.state = other.state;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetSellerWalletList()) {
      List<Map<String,String>> __this__sellerWalletList = new ArrayList<Map<String,String>>(other.sellerWalletList.size());
      for (Map<String,String> other_element : other.sellerWalletList) {
        Map<String,String> __this__sellerWalletList_copy = new HashMap<String,String>(other_element);
        __this__sellerWalletList.add(__this__sellerWalletList_copy);
      }
      this.sellerWalletList = __this__sellerWalletList;
    }
  }

  public SellerWallet deepCopy() {
    return new SellerWallet(this);
  }

  @Override
  public void clear() {
    setStateIsSet(false);
    this.state = 0;
    this.msg = null;
    this.sellerWalletList = null;
  }

  public int getState() {
    return this.state;
  }

  public SellerWallet setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public SellerWallet setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public int getSellerWalletListSize() {
    return (this.sellerWalletList == null) ? 0 : this.sellerWalletList.size();
  }

  public java.util.Iterator<Map<String,String>> getSellerWalletListIterator() {
    return (this.sellerWalletList == null) ? null : this.sellerWalletList.iterator();
  }

  public void addToSellerWalletList(Map<String,String> elem) {
    if (this.sellerWalletList == null) {
      this.sellerWalletList = new ArrayList<Map<String,String>>();
    }
    this.sellerWalletList.add(elem);
  }

  public List<Map<String,String>> getSellerWalletList() {
    return this.sellerWalletList;
  }

  public SellerWallet setSellerWalletList(List<Map<String,String>> sellerWalletList) {
    this.sellerWalletList = sellerWalletList;
    return this;
  }

  public void unsetSellerWalletList() {
    this.sellerWalletList = null;
  }

  /** Returns true if field sellerWalletList is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerWalletList() {
    return this.sellerWalletList != null;
  }

  public void setSellerWalletListIsSet(boolean value) {
    if (!value) {
      this.sellerWalletList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case SELLER_WALLET_LIST:
      if (value == null) {
        unsetSellerWalletList();
      } else {
        setSellerWalletList((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return Integer.valueOf(getState());

    case MSG:
      return getMsg();

    case SELLER_WALLET_LIST:
      return getSellerWalletList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case MSG:
      return isSetMsg();
    case SELLER_WALLET_LIST:
      return isSetSellerWalletList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SellerWallet)
      return this.equals((SellerWallet)that);
    return false;
  }

  public boolean equals(SellerWallet that) {
    if (that == null)
      return false;

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_sellerWalletList = true && this.isSetSellerWalletList();
    boolean that_present_sellerWalletList = true && that.isSetSellerWalletList();
    if (this_present_sellerWalletList || that_present_sellerWalletList) {
      if (!(this_present_sellerWalletList && that_present_sellerWalletList))
        return false;
      if (!this.sellerWalletList.equals(that.sellerWalletList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SellerWallet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerWalletList()).compareTo(other.isSetSellerWalletList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerWalletList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerWalletList, other.sellerWalletList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SellerWallet(");
    boolean first = true;

    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerWalletList:");
    if (this.sellerWalletList == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerWalletList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SellerWalletStandardSchemeFactory implements SchemeFactory {
    public SellerWalletStandardScheme getScheme() {
      return new SellerWalletStandardScheme();
    }
  }

  private static class SellerWalletStandardScheme extends StandardScheme<SellerWallet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SellerWallet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SELLER_WALLET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.sellerWalletList = new ArrayList<Map<String,String>>(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                {
                  Map<String,String> _elem56;
                  {
                    org.apache.thrift.protocol.TMap _map57 = iprot.readMapBegin();
                    _elem56 = new HashMap<String,String>(2*_map57.size);
                    for (int _i58 = 0; _i58 < _map57.size; ++_i58)
                    {
                      String _key59;
                      String _val60;
                      _key59 = iprot.readString();
                      _val60 = iprot.readString();
                      _elem56.put(_key59, _val60);
                    }
                    iprot.readMapEnd();
                  }
                  struct.sellerWalletList.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setSellerWalletListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SellerWallet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      if (struct.sellerWalletList != null) {
        oprot.writeFieldBegin(SELLER_WALLET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.sellerWalletList.size()));
          for (Map<String,String> _iter61 : struct.sellerWalletList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter61.size()));
              for (Map.Entry<String, String> _iter62 : _iter61.entrySet())
              {
                oprot.writeString(_iter62.getKey());
                oprot.writeString(_iter62.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SellerWalletTupleSchemeFactory implements SchemeFactory {
    public SellerWalletTupleScheme getScheme() {
      return new SellerWalletTupleScheme();
    }
  }

  private static class SellerWalletTupleScheme extends TupleScheme<SellerWallet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SellerWallet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetMsg()) {
        optionals.set(1);
      }
      if (struct.isSetSellerWalletList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetSellerWalletList()) {
        {
          oprot.writeI32(struct.sellerWalletList.size());
          for (Map<String,String> _iter63 : struct.sellerWalletList)
          {
            {
              oprot.writeI32(_iter63.size());
              for (Map.Entry<String, String> _iter64 : _iter63.entrySet())
              {
                oprot.writeString(_iter64.getKey());
                oprot.writeString(_iter64.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SellerWallet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.sellerWalletList = new ArrayList<Map<String,String>>(_list65.size);
          for (int _i66 = 0; _i66 < _list65.size; ++_i66)
          {
            Map<String,String> _elem67;
            {
              org.apache.thrift.protocol.TMap _map68 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem67 = new HashMap<String,String>(2*_map68.size);
              for (int _i69 = 0; _i69 < _map68.size; ++_i69)
              {
                String _key70;
                String _val71;
                _key70 = iprot.readString();
                _val71 = iprot.readString();
                _elem67.put(_key70, _val71);
              }
            }
            struct.sellerWalletList.add(_elem67);
          }
        }
        struct.setSellerWalletListIsSet(true);
      }
    }
  }

}

