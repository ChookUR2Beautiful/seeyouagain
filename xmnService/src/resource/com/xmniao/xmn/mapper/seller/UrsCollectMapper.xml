<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xmniao.xmn.core.seller.dao.UrsCollectDao" >
  <resultMap id="BaseResultMap" type="com.xmniao.xmn.core.seller.entity.UrsCollect" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="sellerid" property="sellerid" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="type" property="type" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, uid, sellerid, create_time, update_time, type
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_urs_collect
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_urs_collect
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xmniao.xmn.core.seller.entity.UrsCollect" >
    insert into t_urs_collect (id, uid, sellerid, 
      create_time, update_time, type
      )
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{sellerid,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{type,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xmniao.xmn.core.seller.entity.UrsCollect" >
    insert into t_urs_collect
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="sellerid != null" >
        sellerid,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="type != null" >
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="sellerid != null" >
        #{sellerid,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xmniao.xmn.core.seller.entity.UrsCollect" >
    update t_urs_collect
    <set >
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="sellerid != null" >
        sellerid = #{sellerid,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xmniao.xmn.core.seller.entity.UrsCollect" >
    update t_urs_collect
    set uid = #{uid,jdbcType=INTEGER},
      sellerid = #{sellerid,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 根据用户id查询收藏信息 -->
  <select id="selectByUid" resultMap="BaseResultMap" parameterType="map">
  	select 
    	<include refid="Base_Column_List" />
    from t_urs_collect
    where type=#{type} and uid = #{id}
  </select>
  
  <!-- 统计被收藏的次数 -->
  <select id="sumCollectsBySellerid" resultType="int" parameterType="map">
  SELECT COUNT(1) FROM t_urs_collect WHERE sellerid=#{id} and type=#{type}
  </select>
  
  <!-- 通过用户id 查询与用户收藏同样一个商铺的用户id -->
  <select id="querySameCollectSeller" resultType="int" parameterType="map">
  	SELECT uid FROM t_urs_collect WHERE tye=#{type} AND uid != #{uid} AND sellerid=#{sellerid}
  </select>
  
  <select id="queryCollectSellerByUid" resultType="int" parameterType="map">
  	select distinct sellerid from t_seller where sellerid in 
		(select distinct sellerid from t_urs_collect 
		where uid = #{uid} and type=#{type} order by update_time desc 
		)
	and status =3 and isonline=1
	<if test="zoneid != null">
	and zoneid=#{zoneid}
	</if>
	<if test="tradeid != nulll">
	and genre=#{tradeid}
	</if>
	<if test="pageNo != null and pageSize != null">
	limit ${(pageNo-1)*pageSize},#{pageSize}
	</if>
  </select>
  
  <!-- 通过商铺id，和用户id查询用户收藏的商铺信息 -->
  <select id="queryCollectBySellerIdAndUid" resultType="int" parameterType="map">
  	SELECT COUNT(1) FROM t_urs_collect WHERE uid=#{uid} AND sellerid = #{sellerid} AND type=#{type}
  </select>
  
  <!-- 删除收藏记录 -->
  <delete id="removeCollectByUidAndSellerId" parameterType="map">
  	delete from t_urs_collect
    where uid=#{uid} and sellerid=#{sellerid} and type=#{type}
  </delete>
  
   <!-- 查询是否收藏这些店铺 -->
  <select id="queryCheckUrsCollectSellerList" resultType="map" parameterType="map">
  	SELECT 
  		COUNT(1) AS count,
		sellerid AS sellerId
  	FROM 
  		t_urs_collect 
  	WHERE uid=#{uid} 
  	AND sellerid IN
	<foreach collection="sellerIds" item="sellerId" index="index" open="(" separator="," close=")">
			#{sellerId}
	</foreach>
	GROUP BY
		sellerid
  </select>
</mapper>