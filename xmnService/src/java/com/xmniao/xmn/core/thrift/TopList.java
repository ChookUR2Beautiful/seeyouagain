/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xmniao.xmn.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TopList implements org.apache.thrift.TBase<TopList, TopList._Fields>, java.io.Serializable, Cloneable, Comparable<TopList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopList");

  private static final org.apache.thrift.protocol.TField RESULT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("resultMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField TOP_THREE_FIELD_DESC = new org.apache.thrift.protocol.TField("topThree", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopListTupleSchemeFactory());
  }

  public Map<String,String> resultMap; // required
  public List<Map<String,String>> topThree; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_MAP((short)1, "resultMap"),
    TOP_THREE((short)2, "topThree");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_MAP
          return RESULT_MAP;
        case 2: // TOP_THREE
          return TOP_THREE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_MAP, new org.apache.thrift.meta_data.FieldMetaData("resultMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOP_THREE, new org.apache.thrift.meta_data.FieldMetaData("topThree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopList.class, metaDataMap);
  }

  public TopList() {
  }

  public TopList(
    Map<String,String> resultMap,
    List<Map<String,String>> topThree)
  {
    this();
    this.resultMap = resultMap;
    this.topThree = topThree;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopList(TopList other) {
    if (other.isSetResultMap()) {
      Map<String,String> __this__resultMap = new HashMap<String,String>(other.resultMap);
      this.resultMap = __this__resultMap;
    }
    if (other.isSetTopThree()) {
      List<Map<String,String>> __this__topThree = new ArrayList<Map<String,String>>(other.topThree.size());
      for (Map<String,String> other_element : other.topThree) {
        Map<String,String> __this__topThree_copy = new HashMap<String,String>(other_element);
        __this__topThree.add(__this__topThree_copy);
      }
      this.topThree = __this__topThree;
    }
  }

  public TopList deepCopy() {
    return new TopList(this);
  }

  @Override
  public void clear() {
    this.resultMap = null;
    this.topThree = null;
  }

  public int getResultMapSize() {
    return (this.resultMap == null) ? 0 : this.resultMap.size();
  }

  public void putToResultMap(String key, String val) {
    if (this.resultMap == null) {
      this.resultMap = new HashMap<String,String>();
    }
    this.resultMap.put(key, val);
  }

  public Map<String,String> getResultMap() {
    return this.resultMap;
  }

  public TopList setResultMap(Map<String,String> resultMap) {
    this.resultMap = resultMap;
    return this;
  }

  public void unsetResultMap() {
    this.resultMap = null;
  }

  /** Returns true if field resultMap is set (has been assigned a value) and false otherwise */
  public boolean isSetResultMap() {
    return this.resultMap != null;
  }

  public void setResultMapIsSet(boolean value) {
    if (!value) {
      this.resultMap = null;
    }
  }

  public int getTopThreeSize() {
    return (this.topThree == null) ? 0 : this.topThree.size();
  }

  public java.util.Iterator<Map<String,String>> getTopThreeIterator() {
    return (this.topThree == null) ? null : this.topThree.iterator();
  }

  public void addToTopThree(Map<String,String> elem) {
    if (this.topThree == null) {
      this.topThree = new ArrayList<Map<String,String>>();
    }
    this.topThree.add(elem);
  }

  public List<Map<String,String>> getTopThree() {
    return this.topThree;
  }

  public TopList setTopThree(List<Map<String,String>> topThree) {
    this.topThree = topThree;
    return this;
  }

  public void unsetTopThree() {
    this.topThree = null;
  }

  /** Returns true if field topThree is set (has been assigned a value) and false otherwise */
  public boolean isSetTopThree() {
    return this.topThree != null;
  }

  public void setTopThreeIsSet(boolean value) {
    if (!value) {
      this.topThree = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_MAP:
      if (value == null) {
        unsetResultMap();
      } else {
        setResultMap((Map<String,String>)value);
      }
      break;

    case TOP_THREE:
      if (value == null) {
        unsetTopThree();
      } else {
        setTopThree((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_MAP:
      return getResultMap();

    case TOP_THREE:
      return getTopThree();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_MAP:
      return isSetResultMap();
    case TOP_THREE:
      return isSetTopThree();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopList)
      return this.equals((TopList)that);
    return false;
  }

  public boolean equals(TopList that) {
    if (that == null)
      return false;

    boolean this_present_resultMap = true && this.isSetResultMap();
    boolean that_present_resultMap = true && that.isSetResultMap();
    if (this_present_resultMap || that_present_resultMap) {
      if (!(this_present_resultMap && that_present_resultMap))
        return false;
      if (!this.resultMap.equals(that.resultMap))
        return false;
    }

    boolean this_present_topThree = true && this.isSetTopThree();
    boolean that_present_topThree = true && that.isSetTopThree();
    if (this_present_topThree || that_present_topThree) {
      if (!(this_present_topThree && that_present_topThree))
        return false;
      if (!this.topThree.equals(that.topThree))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TopList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultMap()).compareTo(other.isSetResultMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultMap, other.resultMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopThree()).compareTo(other.isSetTopThree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopThree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topThree, other.topThree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopList(");
    boolean first = true;

    sb.append("resultMap:");
    if (this.resultMap == null) {
      sb.append("null");
    } else {
      sb.append(this.resultMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topThree:");
    if (this.topThree == null) {
      sb.append("null");
    } else {
      sb.append(this.topThree);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopListStandardSchemeFactory implements SchemeFactory {
    public TopListStandardScheme getScheme() {
      return new TopListStandardScheme();
    }
  }

  private static class TopListStandardScheme extends StandardScheme<TopList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                struct.resultMap = new HashMap<String,String>(2*_map28.size);
                for (int _i29 = 0; _i29 < _map28.size; ++_i29)
                {
                  String _key30;
                  String _val31;
                  _key30 = iprot.readString();
                  _val31 = iprot.readString();
                  struct.resultMap.put(_key30, _val31);
                }
                iprot.readMapEnd();
              }
              struct.setResultMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOP_THREE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.topThree = new ArrayList<Map<String,String>>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  Map<String,String> _elem34;
                  {
                    org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                    _elem34 = new HashMap<String,String>(2*_map35.size);
                    for (int _i36 = 0; _i36 < _map35.size; ++_i36)
                    {
                      String _key37;
                      String _val38;
                      _key37 = iprot.readString();
                      _val38 = iprot.readString();
                      _elem34.put(_key37, _val38);
                    }
                    iprot.readMapEnd();
                  }
                  struct.topThree.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setTopThreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultMap != null) {
        oprot.writeFieldBegin(RESULT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.resultMap.size()));
          for (Map.Entry<String, String> _iter39 : struct.resultMap.entrySet())
          {
            oprot.writeString(_iter39.getKey());
            oprot.writeString(_iter39.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topThree != null) {
        oprot.writeFieldBegin(TOP_THREE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.topThree.size()));
          for (Map<String,String> _iter40 : struct.topThree)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter40.size()));
              for (Map.Entry<String, String> _iter41 : _iter40.entrySet())
              {
                oprot.writeString(_iter41.getKey());
                oprot.writeString(_iter41.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopListTupleSchemeFactory implements SchemeFactory {
    public TopListTupleScheme getScheme() {
      return new TopListTupleScheme();
    }
  }

  private static class TopListTupleScheme extends TupleScheme<TopList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultMap()) {
        optionals.set(0);
      }
      if (struct.isSetTopThree()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetResultMap()) {
        {
          oprot.writeI32(struct.resultMap.size());
          for (Map.Entry<String, String> _iter42 : struct.resultMap.entrySet())
          {
            oprot.writeString(_iter42.getKey());
            oprot.writeString(_iter42.getValue());
          }
        }
      }
      if (struct.isSetTopThree()) {
        {
          oprot.writeI32(struct.topThree.size());
          for (Map<String,String> _iter43 : struct.topThree)
          {
            {
              oprot.writeI32(_iter43.size());
              for (Map.Entry<String, String> _iter44 : _iter43.entrySet())
              {
                oprot.writeString(_iter44.getKey());
                oprot.writeString(_iter44.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map45 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.resultMap = new HashMap<String,String>(2*_map45.size);
          for (int _i46 = 0; _i46 < _map45.size; ++_i46)
          {
            String _key47;
            String _val48;
            _key47 = iprot.readString();
            _val48 = iprot.readString();
            struct.resultMap.put(_key47, _val48);
          }
        }
        struct.setResultMapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.topThree = new ArrayList<Map<String,String>>(_list49.size);
          for (int _i50 = 0; _i50 < _list49.size; ++_i50)
          {
            Map<String,String> _elem51;
            {
              org.apache.thrift.protocol.TMap _map52 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem51 = new HashMap<String,String>(2*_map52.size);
              for (int _i53 = 0; _i53 < _map52.size; ++_i53)
              {
                String _key54;
                String _val55;
                _key54 = iprot.readString();
                _val55 = iprot.readString();
                _elem51.put(_key54, _val55);
              }
            }
            struct.topThree.add(_elem51);
          }
        }
        struct.setTopThreeIsSet(true);
      }
    }
  }

}

