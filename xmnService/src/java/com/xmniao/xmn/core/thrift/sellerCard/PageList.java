package com.xmniao.xmn.core.thrift.sellerCard;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PageList implements org.apache.thrift.TBase<PageList, PageList._Fields>, java.io.Serializable, Cloneable, Comparable<PageList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageList");

  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sum", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pageList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageListTupleSchemeFactory());
  }

  public String total; // required
  public String sum; // required
  public List<SubList> pageList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL((short)1, "total"),
    SUM((short)2, "sum"),
    PAGE_LIST((short)3, "pageList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL
          return TOTAL;
        case 2: // SUM
          return SUM;
        case 3: // PAGE_LIST
          return PAGE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUM, new org.apache.thrift.meta_data.FieldMetaData("sum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("pageList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubList.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageList.class, metaDataMap);
  }

  public PageList() {
  }

  public PageList(
    String total,
    String sum,
    List<SubList> pageList)
  {
    this();
    this.total = total;
    this.sum = sum;
    this.pageList = pageList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageList(PageList other) {
    if (other.isSetTotal()) {
      this.total = other.total;
    }
    if (other.isSetSum()) {
      this.sum = other.sum;
    }
    if (other.isSetPageList()) {
      List<SubList> __this__pageList = new ArrayList<SubList>(other.pageList.size());
      for (SubList other_element : other.pageList) {
        __this__pageList.add(new SubList(other_element));
      }
      this.pageList = __this__pageList;
    }
  }

  public PageList deepCopy() {
    return new PageList(this);
  }

  @Override
  public void clear() {
    this.total = null;
    this.sum = null;
    this.pageList = null;
  }

  public String getTotal() {
    return this.total;
  }

  public PageList setTotal(String total) {
    this.total = total;
    return this;
  }

  public void unsetTotal() {
    this.total = null;
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return this.total != null;
  }

  public void setTotalIsSet(boolean value) {
    if (!value) {
      this.total = null;
    }
  }

  public String getSum() {
    return this.sum;
  }

  public PageList setSum(String sum) {
    this.sum = sum;
    return this;
  }

  public void unsetSum() {
    this.sum = null;
  }

  /** Returns true if field sum is set (has been assigned a value) and false otherwise */
  public boolean isSetSum() {
    return this.sum != null;
  }

  public void setSumIsSet(boolean value) {
    if (!value) {
      this.sum = null;
    }
  }

  public int getPageListSize() {
    return (this.pageList == null) ? 0 : this.pageList.size();
  }

  public java.util.Iterator<SubList> getPageListIterator() {
    return (this.pageList == null) ? null : this.pageList.iterator();
  }

  public void addToPageList(SubList elem) {
    if (this.pageList == null) {
      this.pageList = new ArrayList<SubList>();
    }
    this.pageList.add(elem);
  }

  public List<SubList> getPageList() {
    return this.pageList;
  }

  public PageList setPageList(List<SubList> pageList) {
    this.pageList = pageList;
    return this;
  }

  public void unsetPageList() {
    this.pageList = null;
  }

  /** Returns true if field pageList is set (has been assigned a value) and false otherwise */
  public boolean isSetPageList() {
    return this.pageList != null;
  }

  public void setPageListIsSet(boolean value) {
    if (!value) {
      this.pageList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((String)value);
      }
      break;

    case SUM:
      if (value == null) {
        unsetSum();
      } else {
        setSum((String)value);
      }
      break;

    case PAGE_LIST:
      if (value == null) {
        unsetPageList();
      } else {
        setPageList((List<SubList>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL:
      return getTotal();

    case SUM:
      return getSum();

    case PAGE_LIST:
      return getPageList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL:
      return isSetTotal();
    case SUM:
      return isSetSum();
    case PAGE_LIST:
      return isSetPageList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageList)
      return this.equals((PageList)that);
    return false;
  }

  public boolean equals(PageList that) {
    if (that == null)
      return false;

    boolean this_present_total = true && this.isSetTotal();
    boolean that_present_total = true && that.isSetTotal();
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (!this.total.equals(that.total))
        return false;
    }

    boolean this_present_sum = true && this.isSetSum();
    boolean that_present_sum = true && that.isSetSum();
    if (this_present_sum || that_present_sum) {
      if (!(this_present_sum && that_present_sum))
        return false;
      if (!this.sum.equals(that.sum))
        return false;
    }

    boolean this_present_pageList = true && this.isSetPageList();
    boolean that_present_pageList = true && that.isSetPageList();
    if (this_present_pageList || that_present_pageList) {
      if (!(this_present_pageList && that_present_pageList))
        return false;
      if (!this.pageList.equals(that.pageList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PageList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSum()).compareTo(other.isSetSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sum, other.sum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageList()).compareTo(other.isSetPageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageList, other.pageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageList(");
    boolean first = true;

    sb.append("total:");
    if (this.total == null) {
      sb.append("null");
    } else {
      sb.append(this.total);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sum:");
    if (this.sum == null) {
      sb.append("null");
    } else {
      sb.append(this.sum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageList:");
    if (this.pageList == null) {
      sb.append("null");
    } else {
      sb.append(this.pageList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageListStandardSchemeFactory implements SchemeFactory {
    public PageListStandardScheme getScheme() {
      return new PageListStandardScheme();
    }
  }

  private static class PageListStandardScheme extends StandardScheme<PageList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.total = iprot.readString();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sum = iprot.readString();
              struct.setSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.pageList = new ArrayList<SubList>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  SubList _elem30;
                  _elem30 = new SubList();
                  _elem30.read(iprot);
                  struct.pageList.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setPageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.total != null) {
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeString(struct.total);
        oprot.writeFieldEnd();
      }
      if (struct.sum != null) {
        oprot.writeFieldBegin(SUM_FIELD_DESC);
        oprot.writeString(struct.sum);
        oprot.writeFieldEnd();
      }
      if (struct.pageList != null) {
        oprot.writeFieldBegin(PAGE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pageList.size()));
          for (SubList _iter31 : struct.pageList)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageListTupleSchemeFactory implements SchemeFactory {
    public PageListTupleScheme getScheme() {
      return new PageListTupleScheme();
    }
  }

  private static class PageListTupleScheme extends TupleScheme<PageList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotal()) {
        optionals.set(0);
      }
      if (struct.isSetSum()) {
        optionals.set(1);
      }
      if (struct.isSetPageList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTotal()) {
        oprot.writeString(struct.total);
      }
      if (struct.isSetSum()) {
        oprot.writeString(struct.sum);
      }
      if (struct.isSetPageList()) {
        {
          oprot.writeI32(struct.pageList.size());
          for (SubList _iter32 : struct.pageList)
          {
            _iter32.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.total = iprot.readString();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sum = iprot.readString();
        struct.setSumIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pageList = new ArrayList<SubList>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            SubList _elem35;
            _elem35 = new SubList();
            _elem35.read(iprot);
            struct.pageList.add(_elem35);
          }
        }
        struct.setPageListIsSet(true);
      }
    }
  }

}

